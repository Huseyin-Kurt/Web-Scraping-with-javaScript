(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":1,"buffer":2,"ieee754":3}],3:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],4:[function(require,module,exports){
module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupSelectors = exports.getDocumentRoot = void 0;
var positionals_1 = require("./positionals");
function getDocumentRoot(node) {
    while (node.parent)
        node = node.parent;
    return node;
}
exports.getDocumentRoot = getDocumentRoot;
function groupSelectors(selectors) {
    var filteredSelectors = [];
    var plainSelectors = [];
    for (var _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {
        var selector = selectors_1[_i];
        if (selector.some(positionals_1.isFilter)) {
            filteredSelectors.push(selector);
        }
        else {
            plainSelectors.push(selector);
        }
    }
    return [plainSelectors, filteredSelectors];
}
exports.groupSelectors = groupSelectors;

},{"./positionals":7}],6:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.select = exports.filter = void 0;
var css_what_1 = require("css-what");
var css_select_1 = require("css-select");
var DomUtils = __importStar(require("domutils"));
var helpers_1 = require("./helpers");
var positionals_1 = require("./positionals");
/** Used to indicate a scope should be filtered. Might be ignored when filtering. */
var SCOPE_PSEUDO = {
    type: "pseudo",
    name: "scope",
    data: null,
};
/** Used for actually filtering for scope. */
var CUSTOM_SCOPE_PSEUDO = __assign({}, SCOPE_PSEUDO);
var UNIVERSAL_SELECTOR = { type: "universal", namespace: null };
function filterByPosition(filter, elems, data, options) {
    var num = typeof data === "string" ? parseInt(data, 10) : NaN;
    switch (filter) {
        case "first":
        case "lt":
            // Already done in `getLimit`
            return elems;
        case "last":
            return elems.length > 0 ? [elems[elems.length - 1]] : elems;
        case "nth":
        case "eq":
            return isFinite(num) && Math.abs(num) < elems.length
                ? [num < 0 ? elems[elems.length + num] : elems[num]]
                : [];
        case "gt":
            return isFinite(num) ? elems.slice(num + 1) : [];
        case "even":
            return elems.filter(function (_, i) { return i % 2 === 0; });
        case "odd":
            return elems.filter(function (_, i) { return i % 2 === 1; });
        case "not": {
            var filtered_1 = new Set(filterParsed(data, elems, options));
            return elems.filter(function (e) { return !filtered_1.has(e); });
        }
    }
}
function filter(selector, elements, options) {
    if (options === void 0) { options = {}; }
    return DomUtils.uniqueSort(filterParsed(css_what_1.parse(selector, options), elements, options));
}
exports.filter = filter;
/**
 * Filter a set of elements by a selector.
 *
 * If there are multiple selectors, this can
 * return elements multiple times; use `uniqueSort`
 * to eliminate duplicates afterwards.
 *
 * @param selector Selector to filter by.
 * @param elements Elements to filter.
 * @param options Options for selector.
 */
function filterParsed(selector, elements, options) {
    if (elements.length === 0)
        return [];
    var _a = helpers_1.groupSelectors(selector), plainSelectors = _a[0], filteredSelectors = _a[1];
    var results = [];
    if (plainSelectors.length) {
        results.push(filterElements(elements, plainSelectors, options));
    }
    for (var _i = 0, filteredSelectors_1 = filteredSelectors; _i < filteredSelectors_1.length; _i++) {
        var filteredSelector = filteredSelectors_1[_i];
        if (filteredSelector.some(css_what_1.isTraversal)) {
            /*
             * Get one root node, run selector with the scope
             * set to all of our nodes.
             */
            var root = helpers_1.getDocumentRoot(elements[0]);
            var sel = __spreadArrays(filteredSelector, [CUSTOM_SCOPE_PSEUDO]);
            results.push(findFilterElements(root, sel, options, true, elements));
        }
        else {
            // Performance optimization: If we don't have to traverse, just filter set.
            results.push(findFilterElements(elements, filteredSelector, options, false));
        }
    }
    if (results.length === 1) {
        return results[0];
    }
    return results.reduce(function (arr, rest) { return __spreadArrays(arr, rest); }, []);
}
function select(selector, root, options) {
    if (options === void 0) { options = {}; }
    var _a = helpers_1.groupSelectors(css_what_1.parse(selector, options)), plain = _a[0], filtered = _a[1];
    var results = filtered.map(function (sel) {
        return findFilterElements(root, sel, options, true);
    });
    // Plain selectors can be queried in a single go
    if (plain.length) {
        results.push(findElements(root, plain, options, Infinity));
    }
    // If there was only a single selector, just return the result
    if (results.length === 1) {
        return results[0];
    }
    // Sort results, filtering for duplicates
    return DomUtils.uniqueSort(results.reduce(function (a, b) { return __spreadArrays(a, b); }));
}
exports.select = select;
// Traversals that are treated differently in css-select.
var specialTraversal = new Set(["descendant", "adjacent"]);
function includesScopePseudo(t) {
    return (t !== SCOPE_PSEUDO &&
        t.type === "pseudo" &&
        (t.name === "scope" ||
            (Array.isArray(t.data) &&
                t.data.some(function (data) { return data.some(includesScopePseudo); }))));
}
function addContextIfScope(selector, options, scopeContext) {
    return scopeContext && selector.some(includesScopePseudo)
        ? __assign(__assign({}, options), { context: scopeContext }) : options;
}
/**
 *
 * @param root Element(s) to search from.
 * @param selector Selector to look for.
 * @param options Options for querying.
 * @param queryForSelector Query multiple levels deep for the initial selector, even if it doesn't contain a traversal.
 * @param scopeContext Optional context for a :scope.
 */
function findFilterElements(root, selector, options, queryForSelector, scopeContext) {
    var filterIndex = selector.findIndex(positionals_1.isFilter);
    var sub = selector.slice(0, filterIndex);
    var filter = selector[filterIndex];
    /*
     * Set the number of elements to retrieve.
     * Eg. for :first, we only have to get a single element.
     */
    var limit = positionals_1.getLimit(filter.name, filter.data);
    if (limit === 0)
        return [];
    var subOpts = addContextIfScope(sub, options, scopeContext);
    /*
     * Skip `findElements` call if our selector starts with a positional
     * pseudo.
     */
    var elemsNoLimit = sub.length === 0 && !Array.isArray(root)
        ? DomUtils.getChildren(root).filter(DomUtils.isTag)
        : sub.length === 0 || (sub.length === 1 && sub[0] === SCOPE_PSEUDO)
            ? Array.isArray(root)
                ? root
                : [root]
            : queryForSelector || sub.some(css_what_1.isTraversal)
                ? findElements(root, [sub], subOpts, limit)
                : // We know that this cannot be reached with root not being an array.
                    filterElements(root, [sub], subOpts);
    var elems = elemsNoLimit.slice(0, limit);
    var result = filterByPosition(filter.name, elems, filter.data, options);
    if (result.length === 0 || selector.length === filterIndex + 1) {
        return result;
    }
    var remainingSelector = selector.slice(filterIndex + 1);
    var remainingHasTraversal = remainingSelector.some(css_what_1.isTraversal);
    var remainingOpts = addContextIfScope(remainingSelector, options, scopeContext);
    if (remainingHasTraversal) {
        /*
         * Some types of traversals have special logic when they start a selector
         * in css-select. If this is the case, add a universal selector in front of
         * the selector to avoid this behavior.
         */
        if (specialTraversal.has(remainingSelector[0].type)) {
            remainingSelector.unshift(UNIVERSAL_SELECTOR);
        }
        /*
         * Add a scope token in front of the remaining selector,
         * to make sure traversals don't match elements that aren't a
         * part of the considered tree.
         */
        remainingSelector.unshift(SCOPE_PSEUDO);
    }
    /*
     * If we have another filter, recursively call `findFilterElements`,
     * with the `recursive` flag disabled. We only have to look for more
     * elements when we see a traversal.
     *
     * Otherwise,
     */
    return remainingSelector.some(positionals_1.isFilter)
        ? findFilterElements(result, remainingSelector, options, false, scopeContext)
        : remainingHasTraversal
            ? // Query existing elements to resolve traversal.
                findElements(result, [remainingSelector], remainingOpts, Infinity)
            : // If we don't have any more traversals, simply filter elements.
                filterElements(result, [remainingSelector], remainingOpts);
}
function findElements(root, sel, options, limit) {
    if (limit === 0)
        return [];
    // @ts-expect-error TS seems to mess up the type here ¯\_(ツ)_/¯
    var query = css_select_1._compileToken(sel, options, root);
    var elems = css_select_1.prepareContext(root, DomUtils, query.shouldTestNextSiblings);
    return DomUtils.find(function (node) { return DomUtils.isTag(node) && query(node); }, elems, true, limit);
}
function filterElements(elements, sel, options) {
    // @ts-expect-error TS seems to mess up the type here ¯\_(ツ)_/¯
    var query = css_select_1._compileToken(sel, options);
    return elements.filter(query);
}

},{"./helpers":5,"./positionals":7,"css-select":23,"css-what":30,"domutils":39}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLimit = exports.isFilter = exports.filterNames = void 0;
exports.filterNames = new Set([
    "first",
    "last",
    "eq",
    "gt",
    "nth",
    "lt",
    "even",
    "odd",
]);
function isFilter(s) {
    if (s.type !== "pseudo")
        return false;
    if (exports.filterNames.has(s.name))
        return true;
    if (s.name === "not" && Array.isArray(s.data)) {
        // Only consider `:not` with embedded filters
        return s.data.some(function (s) { return s.some(isFilter); });
    }
    return false;
}
exports.isFilter = isFilter;
function getLimit(filter, data) {
    var num = data != null ? parseInt(data, 10) : NaN;
    switch (filter) {
        case "first":
            return 1;
        case "nth":
        case "eq":
            return isFinite(num) ? (num >= 0 ? num + 1 : Infinity) : 0;
        case "lt":
            return isFinite(num) ? (num >= 0 ? num : Infinity) : 0;
        case "gt":
            return isFinite(num) ? Infinity : 0;
        default:
            return Infinity;
    }
}
exports.getLimit = getLimit;

},{}],8:[function(require,module,exports){
/**
 * @module cheerio
 * @borrows static.load as load
 * @borrows static.html as html
 * @borrows static.text as text
 * @borrows static.xml as xml
 */
var staticMethods = require('./lib/static');

exports = module.exports = require('./lib/cheerio');

/**
 * An identifier describing the version of Cheerio which has been executed.
 *
 * @type {string}
 */
exports.version = require('./package.json').version;

exports.load = staticMethods.load;
exports.html = staticMethods.html;
exports.text = staticMethods.text;
exports.xml = staticMethods.xml;

/**
 * In order to promote consistency with the jQuery library, users are
 * encouraged to instead use the static method of the same name.
 *
 * @example
 *     var $ = cheerio.load('<div><p></p></div>');
 *     $.contains($('div').get(0), $('p').get(0)); // true
 *     $.contains($('p').get(0), $('div').get(0)); // false
 *
 * @function
 * @returns {boolean}
 * @deprecated
 */
exports.contains = staticMethods.contains;

/**
 * In order to promote consistency with the jQuery library, users are
 * encouraged to instead use the static method of the same name.
 *
 * @example
 *     var $ = cheerio.load('');
 *     $.merge([1, 2], [3, 4]) // [1, 2, 3, 4]
 *
 * @function
 * @deprecated
 */
exports.merge = staticMethods.merge;

/**
 * In order to promote consistency with the jQuery library, users are
 * encouraged to instead use the static method of the same name as it is
 * defined on the "loaded" Cheerio factory function.
 *
 * @example
 *     var $ = cheerio.load('');
 *     $.parseHTML('<b>markup</b>');
 *
 * @function
 * @deprecated See {@link static/parseHTML}.
 */
exports.parseHTML = staticMethods.parseHTML;

/**
 * Users seeking to access the top-level element of a parsed document should
 * instead use the `root` static method of a "loaded" Cheerio function.
 *
 * @example
 *     var $ = cheerio.load('');
 *     $.root();
 *
 * @function
 * @deprecated
 */
exports.root = staticMethods.root;

},{"./lib/cheerio":14,"./lib/static":17,"./package.json":19}],9:[function(require,module,exports){
/**
 * Methods for getting and modifying attributes.
 *
 * @module cheerio/attributes
 */

var text = require('../static').text;
var utils = require('../utils');
var isTag = utils.isTag;
var domEach = utils.domEach;
var hasOwn = Object.prototype.hasOwnProperty;
var camelCase = utils.camelCase;
var cssCase = utils.cssCase;
var rspace = /\s+/;
var dataAttrPrefix = 'data-';
// Lookup table for coercing string data-* attributes to their corresponding
// JavaScript primitives
var primitives = {
  null: null,
  true: true,
  false: false,
};
// Attributes that are booleans
var rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
// Matches strings that look like JSON objects or arrays
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;

var getAttr = function (elem, name) {
  if (!elem || !isTag(elem)) return;

  if (!elem.attribs) {
    elem.attribs = {};
  }

  // Return the entire attribs object if no attribute specified
  if (!name) {
    return elem.attribs;
  }

  if (hasOwn.call(elem.attribs, name)) {
    // Get the (decoded) attribute
    return rboolean.test(name) ? name : elem.attribs[name];
  }

  // Mimic the DOM and return text content as value for `option's`
  if (elem.name === 'option' && name === 'value') {
    return text(elem.children);
  }

  // Mimic DOM with default value for radios/checkboxes
  if (
    elem.name === 'input' &&
    (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&
    name === 'value'
  ) {
    return 'on';
  }
};

var setAttr = function (el, name, value) {
  if (value === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = value + '';
  }
};

/**
 * Method for getting and setting attributes. Gets the attribute value for only
 * the first element in the matched set. If you set an attribute's value to
 * `null`, you remove that attribute. You may also pass a `map` and `function`
 * like jQuery.
 *
 * @example
 *
 * $('ul').attr('id')
 * //=> fruits
 *
 * $('.apple').attr('id', 'favorite').html()
 * //=> <li class="apple" id="favorite">Apple</li>
 *
 * @param {string} name - Name of the attribute.
 * @param {string} [value] - If specified sets the value of the attribute.
 *
 * @see {@link http://api.jquery.com/attr/}
 */
exports.attr = function (name, value) {
  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function (i, el) {
        setAttr(el, name, value.call(el, i, el.attribs[name]));
      });
    }
    return domEach(this, function (i, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        Object.keys(name).forEach(function (objName) {
          var objValue = name[objName];
          setAttr(el, objName, objValue);
        });
      } else {
        setAttr(el, name, value);
      }
    });
  }

  return getAttr(this[0], name);
};

var getProp = function (el, name) {
  if (!el || !isTag(el)) return;

  return name in el
    ? el[name]
    : rboolean.test(name)
    ? getAttr(el, name) !== undefined
    : getAttr(el, name);
};

var setProp = function (el, name, value) {
  el[name] = rboolean.test(name) ? !!value : value;
};

/**
 * Method for getting and setting properties. Gets the property value for only
 * the first element in the matched set.
 *
 * @example
 *
 * $('input[type="checkbox"]').prop('checked')
 * //=> false
 *
 * $('input[type="checkbox"]').prop('checked', true).val()
 * //=> ok
 *
 * @param {string} name - Name of the property.
 * @param {any} [value] - If specified set the property to this.
 *
 * @see {@link http://api.jquery.com/prop/}
 */
exports.prop = function (name, value) {
  var i = 0;
  var property;

  if (typeof name === 'string' && value === undefined) {
    switch (name) {
      case 'style':
        property = this.css();

        Object.keys(property).forEach(function (p) {
          property[i++] = p;
        });

        property.length = i;

        break;
      case 'tagName':
      case 'nodeName':
        property = this[0].name.toUpperCase();
        break;
      case 'outerHTML':
        property = this.clone().wrap('<container />').parent().html();
        break;
      default:
        property = getProp(this[0], name);
    }

    return property;
  }

  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function (j, el) {
        setProp(el, name, value.call(el, j, getProp(el, name)));
      });
    }

    return domEach(this, function (__, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        Object.keys(name).forEach(function (key) {
          var val = name[key];
          setProp(el, key, val);
        });
      } else {
        setProp(el, name, value);
      }
    });
  }
};

var setData = function (el, name, value) {
  if (!el.data) {
    el.data = {};
  }

  if (typeof name === 'object') return Object.assign(el.data, name);
  if (typeof name === 'string' && value !== undefined) {
    el.data[name] = value;
  }
};

// Read the specified attribute from the equivalent HTML5 `data-*` attribute,
// and (if present) cache the value in the node's internal data store. If no
// attribute name is specified, read *all* HTML5 `data-*` attributes in this
// manner.
var readData = function (el, name) {
  var readAll = arguments.length === 1;
  var domNames;
  var domName;
  var jsNames;
  var jsName;
  var value;
  var idx;
  var length;

  if (readAll) {
    domNames = Object.keys(el.attribs).filter(function (attrName) {
      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;
    });
    jsNames = domNames.map(function (_domName) {
      return camelCase(_domName.slice(dataAttrPrefix.length));
    });
  } else {
    domNames = [dataAttrPrefix + cssCase(name)];
    jsNames = [name];
  }

  for (idx = 0, length = domNames.length; idx < length; ++idx) {
    domName = domNames[idx];
    jsName = jsNames[idx];
    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {
      value = el.attribs[domName];

      if (hasOwn.call(primitives, value)) {
        value = primitives[value];
      } else if (value === String(Number(value))) {
        value = Number(value);
      } else if (rbrace.test(value)) {
        try {
          value = JSON.parse(value);
        } catch (e) {
          /* ignore */
        }
      }

      el.data[jsName] = value;
    }
  }

  return readAll ? el.data : value;
};

/**
 * Method for getting and setting data attributes. Gets or sets the data
 * attribute value for only the first element in the matched set.
 *
 * @example
 *
 * $('<div data-apple-color="red"></div>').data()
 * //=> { appleColor: 'red' }
 *
 * $('<div data-apple-color="red"></div>').data('apple-color')
 * //=> 'red'
 *
 * const apple = $('.apple').data('kind', 'mac')
 * apple.data('kind')
 * //=> 'mac'
 *
 * @param {string} name - Name of the attribute.
 * @param {any} [value] - If specified new value.
 *
 * @see {@link http://api.jquery.com/data/}
 */
exports.data = function (name, value) {
  var elem = this[0];

  if (!elem || !isTag(elem)) return;

  if (!elem.data) {
    elem.data = {};
  }

  // Return the entire data object if no data specified
  if (!name) {
    return readData(elem);
  }

  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    domEach(this, function (i, el) {
      setData(el, name, value);
    });
    return this;
  } else if (hasOwn.call(elem.data, name)) {
    return elem.data[name];
  }

  return readData(elem, name);
};

/**
 * Method for getting and setting the value of input, select, and textarea.
 * Note: Support for `map`, and `function` has not been added yet.
 *
 * @example
 *
 * $('input[type="text"]').val()
 * //=> input_text
 *
 * $('input[type="text"]').val('test').html()
 * //=> <input type="text" value="test"/>
 *
 * @param {string} [value] - If specified new value.
 *
 * @see {@link http://api.jquery.com/val/}
 */
exports.val = function (value) {
  var querying = arguments.length === 0;
  var element = this[0];

  if (!element) return;

  switch (element.name) {
    case 'textarea':
      return this.text(value);
    case 'input':
      if (this.attr('type') === 'radio') {
        if (querying) {
          return this.attr('value');
        }

        this.attr('value', value);
        return this;
      }

      return this.attr('value', value);
    case 'select':
      var option = this.find('option:selected');
      var returnValue;
      if (option === undefined) return undefined;
      if (!querying) {
        if (!hasOwn.call(this.attr(), 'multiple') && typeof value == 'object') {
          return this;
        }
        if (typeof value != 'object') {
          value = [value];
        }
        this.find('option').removeAttr('selected');
        for (var i = 0; i < value.length; i++) {
          this.find('option[value="' + value[i] + '"]').attr('selected', '');
        }
        return this;
      }
      returnValue = option.attr('value');
      if (hasOwn.call(this.attr(), 'multiple')) {
        returnValue = [];
        domEach(option, function (__, el) {
          returnValue.push(getAttr(el, 'value'));
        });
      }
      return returnValue;
    case 'option':
      if (!querying) {
        this.attr('value', value);
        return this;
      }
      return this.attr('value');
  }
};

/**
 * Remove an attribute.
 *
 * @private
 * @param {node} elem - Node to remove attribute from.
 * @param {string} name - Name of the attribute to remove.
 */
var removeAttribute = function (elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;

  delete elem.attribs[name];
};

/**
 * Splits a space-separated list of names to individual
 * names.
 *
 * @param {string} names -  Names to split.
 * @returns {string[]} - Split names.
 */
var splitNames = function (names) {
  return names ? names.trim().split(rspace) : [];
};

/**
 * Method for removing attributes by `name`.
 *
 * @example
 *
 * $('.pear').removeAttr('class').html()
 * //=> <li>Pear</li>
 *
 * $('.apple').attr('id', 'favorite')
 * $('.apple').removeAttr('id class').html()
 * //=> <li>Apple</li>
 *
 * @param {string} name - Name of the attribute.
 *
 * @see {@link http://api.jquery.com/removeAttr/}
 */
exports.removeAttr = function (name) {
  var attrNames = splitNames(name);

  for (var i = 0; i < attrNames.length; i++) {
    domEach(this, function (j, elem) {
      removeAttribute(elem, attrNames[i]);
    });
  }

  return this;
};

/**
 * Check to see if *any* of the matched elements have the given `className`.
 *
 * @example
 *
 * $('.pear').hasClass('pear')
 * //=> true
 *
 * $('apple').hasClass('fruit')
 * //=> false
 *
 * $('li').hasClass('pear')
 * //=> true
 *
 * @param {string} className - Name of the class.
 *
 * @see {@link http://api.jquery.com/hasClass/}
 */
exports.hasClass = function (className) {
  return this.toArray().some(function (elem) {
    var attrs = elem.attribs;
    var clazz = attrs && attrs['class'];
    var idx = -1;
    var end;

    if (clazz && className.length) {
      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
        end = idx + className.length;

        if (
          (idx === 0 || rspace.test(clazz[idx - 1])) &&
          (end === clazz.length || rspace.test(clazz[end]))
        ) {
          return true;
        }
      }
    }
  });
};

/**
 * Adds class(es) to all of the matched elements. Also accepts a `function`
 * like jQuery.
 *
 * @example
 *
 * $('.pear').addClass('fruit').html()
 * //=> <li class="pear fruit">Pear</li>
 *
 * $('.apple').addClass('fruit red').html()
 * //=> <li class="apple fruit red">Apple</li>
 *
 * @param {string} value - Name of new class.
 *
 * @see {@link http://api.jquery.com/addClass/}
 */
exports.addClass = function (value) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function (i, el) {
      var className = el.attribs['class'] || '';
      exports.addClass.call([el], value.call(el, i, className));
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace);
  var numElements = this.length;

  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    // If we don't already have classes
    var className = getAttr(this[i], 'class');
    var numClasses;
    var setClass;

    if (!className) {
      setAttr(this[i], 'class', classNames.join(' ').trim());
    } else {
      setClass = ' ' + className + ' ';
      numClasses = classNames.length;

      // Check if class already exists
      for (var j = 0; j < numClasses; j++) {
        var appendClass = classNames[j] + ' ';
        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;
      }

      setAttr(this[i], 'class', setClass.trim());
    }
  }

  return this;
};

/**
 * Removes one or more space-separated classes from the selected elements. If
 * no `className` is defined, all classes will be removed. Also accepts a
 * `function` like jQuery.
 *
 * @example
 *
 * $('.pear').removeClass('pear').html()
 * //=> <li class="">Pear</li>
 *
 * $('.apple').addClass('red').removeClass().html()
 * //=> <li class="">Apple</li>
 * @param {string} value - Name of the class.
 *
 * @see {@link http://api.jquery.com/removeClass/}
 */
exports.removeClass = function (value) {
  var classes;
  var numClasses;
  var removeAll;

  // Handle if value is a function
  if (typeof value === 'function') {
    return domEach(this, function (i, el) {
      exports.removeClass.call(
        [el],
        value.call(el, i, el.attribs['class'] || '')
      );
    });
  }

  classes = splitNames(value);
  numClasses = classes.length;
  removeAll = arguments.length === 0;

  return domEach(this, function (i, el) {
    if (!isTag(el)) return;

    if (removeAll) {
      // Short circuit the remove all case as this is the nice one
      el.attribs.class = '';
    } else {
      var elClasses = splitNames(el.attribs.class);
      var index;
      var changed;

      for (var j = 0; j < numClasses; j++) {
        index = elClasses.indexOf(classes[j]);

        if (index >= 0) {
          elClasses.splice(index, 1);
          changed = true;

          // We have to do another pass to ensure that there are not duplicate
          // classes listed
          j--;
        }
      }
      if (changed) {
        el.attribs.class = elClasses.join(' ');
      }
    }
  });
};

/**
 * Add or remove class(es) from the matched elements, depending on either the
 * class's presence or the value of the switch argument. Also accepts a
 * `function` like jQuery.
 *
 * @example
 *
 * $('.apple.green').toggleClass('fruit green red').html()
 * //=> <li class="apple fruit red">Apple</li>
 *
 * $('.apple.green').toggleClass('fruit green red', true).html()
 * //=> <li class="apple green fruit red">Apple</li>
 *
 * @param {(string|Function)} value - Name of the class. Can also be a function.
 * @param {boolean} [stateVal] - If specified the state of the class.
 *
 * @see {@link http://api.jquery.com/toggleClass/}
 */
exports.toggleClass = function (value, stateVal) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function (i, el) {
      exports.toggleClass.call(
        [el],
        value.call(el, i, el.attribs['class'] || '', stateVal),
        stateVal
      );
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace);
  var numClasses = classNames.length;
  var state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;
  var numElements = this.length;
  var elementClasses;
  var index;

  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    elementClasses = splitNames(this[i].attribs.class);

    // Check if class already exists
    for (var j = 0; j < numClasses; j++) {
      // Check if the class name is currently defined
      index = elementClasses.indexOf(classNames[j]);

      // Add if stateValue === true or we are toggling and there is no value
      if (state >= 0 && index < 0) {
        elementClasses.push(classNames[j]);
      } else if (state <= 0 && index >= 0) {
        // Otherwise remove but only if the item exists
        elementClasses.splice(index, 1);
      }
    }

    this[i].attribs.class = elementClasses.join(' ');
  }

  return this;
};

/**
 * Checks the current list of elements and returns `true` if _any_ of the
 * elements match the selector. If using an element or Cheerio selection,
 * returns `true` if _any_ of the elements match. If using a predicate
 * function, the function is executed in the context of the selected element,
 * so `this` refers to the current element.
 *
 * @param {string|Function|cheerio|node} selector - Selector for the selection.
 *
 * @see {@link http://api.jquery.com/is/}
 */
exports.is = function (selector) {
  if (selector) {
    return this.filter(selector).length > 0;
  }
  return false;
};

},{"../static":17,"../utils":18}],10:[function(require,module,exports){
/**
 * @module cheerio/css
 */

var domEach = require('../utils').domEach;

var toString = Object.prototype.toString;

/**
 * Get the value of a style property for the first element in the set of
 * matched elements or set one or more CSS properties for every matched
 * element.
 *
 * @param {string|object} prop - The name of the property.
 * @param {string} [val] - If specified the new value.
 * @returns {self}
 *
 * @see {@link http://api.jquery.com/css/}
 */
exports.css = function (prop, val) {
  if (
    arguments.length === 2 ||
    // When `prop` is a "plain" object
    toString.call(prop) === '[object Object]'
  ) {
    return domEach(this, function (idx, el) {
      setCss(el, prop, val, idx);
    });
  }
  return getCss(this[0], prop);
};

/**
 * Set styles of all elements.
 *
 * @param {object} el - Element to set style of.
 * @param {string|object} prop - Name of property.
 * @param {string} val - Value to set property to.
 * @param {number} [idx] - Optional index within the selection.
 * @returns {self}
 * @private
 */
function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);
    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function (k) {
      setCss(el, k, prop[k]);
    });
  }
}

/**
 * Get parsed styles of the first element.
 *
 * @param {node} el - Element to get styles from.
 * @param {string} prop - Name of the prop.
 * @returns {object}
 * @private
 */
function getCss(el, prop) {
  if (!el || !el.attribs) {
    return undefined;
  }

  var styles = parse(el.attribs.style);
  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    var newStyles = {};
    prop.forEach(function (item) {
      if (styles[item] != null) {
        newStyles[item] = styles[item];
      }
    });
    return newStyles;
  }
  return styles;
}

/**
 * Stringify `obj` to styles.
 *
 * @param {object} obj - Object to stringify.
 * @returns {object}
 * @private
 */
function stringify(obj) {
  return Object.keys(obj || {}).reduce(function (str, prop) {
    return (str += '' + (str ? ' ' : '') + prop + ': ' + obj[prop] + ';');
  }, '');
}

/**
 * Parse `styles`.
 *
 * @param {string} styles - Styles to be parsed.
 * @returns {object}
 * @private
 */
function parse(styles) {
  styles = (styles || '').trim();

  if (!styles) return {};

  return styles.split(';').reduce(function (obj, str) {
    var n = str.indexOf(':');
    // skip if there is no :, or if it is the first/last character
    if (n < 1 || n === str.length - 1) return obj;
    obj[str.slice(0, n).trim()] = str.slice(n + 1).trim();
    return obj;
  }, {});
}

},{"../utils":18}],11:[function(require,module,exports){
/**
 * @module cheerio/forms
 */

// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js
// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js
var submittableSelector = 'input,select,textarea,keygen';
var r20 = /%20/g;
var rCRLF = /\r?\n/g;

/**
 * Encode a set of form elements as a string for submission.
 *
 * @see {@link http://api.jquery.com/serialize/}
 */
exports.serialize = function () {
  // Convert form elements into name/value objects
  var arr = this.serializeArray();

  // Serialize each element into a key/value string
  var retArr = arr.map(function (data) {
    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);
  });

  // Return the resulting serialization
  return retArr.join('&').replace(r20, '+');
};

/**
 * Encode a set of form elements as an array of names and values.
 *
 * @example
 * $('<form><input name="foo" value="bar" /></form>').serializeArray()
 * //=> [ { name: 'foo', value: 'bar' } ]
 *
 * @see {@link http://api.jquery.com/serializeArray/}
 */
exports.serializeArray = function () {
  // Resolve all form elements from either forms or collections of form elements
  var Cheerio = this.constructor;
  return this.map(function () {
    var elem = this;
    var $elem = Cheerio(elem);
    if (elem.name === 'form') {
      return $elem.find(submittableSelector).toArray();
    }
    return $elem.filter(submittableSelector).toArray();
  })
    .filter(
      // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)
      '[name!=""]:not(:disabled)' +
        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)
        ':not(:submit, :button, :image, :reset, :file)' +
        // and are either checked/don't have a checkable state
        ':matches([checked], :not(:checkbox, :radio))'
      // Convert each of the elements to its value(s)
    )
    .map(function (i, elem) {
      var $elem = Cheerio(elem);
      var name = $elem.attr('name');
      var value = $elem.val();

      // If there is no value set (e.g. `undefined`, `null`), then default value to empty
      if (value == null) {
        value = '';
      }

      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs
      if (Array.isArray(value)) {
        return value.map(function (val) {
          // We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
          //   These can occur inside of `<textarea>'s`
          return { name: name, value: val.replace(rCRLF, '\r\n') };
        });
        // Otherwise (e.g. `<input type="text">`, return only one key/value pair
      }
      return { name: name, value: value.replace(rCRLF, '\r\n') };

      // Convert our result to an array
    })
    .get();
};

},{}],12:[function(require,module,exports){
/**
 * Methods for modifying the DOM structure.
 *
 * @module cheerio/manipulation
 */

var parse = require('../parse');
var html = require('../static').html;
var text = require('../static').text;
var updateDOM = parse.update;
var utils = require('../utils');
var domEach = utils.domEach;
var cloneDom = utils.cloneDom;
var isHtml = utils.isHtml;
var slice = Array.prototype.slice;
var domhandler = require('domhandler');
var DomUtils = require('htmlparser2').DomUtils;

/**
 * Create an array of nodes, recursing into arrays and parsing strings if
 * necessary.
 *
 * @param {cheerio|string|cheerio[]|string[]} [elem] - Elements to make an array of.
 * @param {boolean} [clone] - Optionally clone nodes.
 * @private
 */
exports._makeDomArray = function makeDomArray(elem, clone) {
  if (elem == null) {
    return [];
  } else if (elem.cheerio) {
    return clone ? cloneDom(elem.get(), elem.options) : elem.get();
  } else if (Array.isArray(elem)) {
    return elem.reduce(
      function (newElems, el) {
        return newElems.concat(this._makeDomArray(el, clone));
      }.bind(this),
      []
    );
  } else if (typeof elem === 'string') {
    return parse(elem, this.options, false).children;
  }
  return clone ? cloneDom([elem]) : [elem];
};

var _insert = function (concatenator) {
  return function () {
    var elems = slice.call(arguments);
    var lastIdx = this.length - 1;

    return domEach(this, function (i, el) {
      var dom;
      var domSrc;

      if (typeof elems[0] === 'function') {
        domSrc = elems[0].call(el, i, html(el.children));
      } else {
        domSrc = elems;
      }

      dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
};

/*
 * Modify an array in-place, removing some number of elements and adding new
 * elements directly following them.
 *
 * @param {Array} array Target array to splice.
 * @param {Number} spliceIdx Index at which to begin changing the array.
 * @param {Number} spliceCount Number of elements to remove from the array.
 * @param {Array} newElems Elements to insert into the array.
 *
 * @private
 */
var uniqueSplice = function (array, spliceIdx, spliceCount, newElems, parent) {
  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);
  var prev = array[spliceIdx - 1] || null;
  var next = array[spliceIdx + spliceCount] || null;
  var idx;
  var len;
  var prevIdx;
  var node;
  var oldParent;

  // Before splicing in new elements, ensure they do not already appear in the
  // current array.
  for (idx = 0, len = newElems.length; idx < len; ++idx) {
    node = newElems[idx];
    oldParent = node.parent;
    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);

    if (oldParent && prevIdx > -1) {
      oldParent.children.splice(prevIdx, 1);
      if (parent === oldParent && spliceIdx > prevIdx) {
        spliceArgs[0]--;
      }
    }

    node.parent = parent;

    if (node.prev) {
      node.prev.next = node.next || null;
    }

    if (node.next) {
      node.next.prev = node.prev || null;
    }

    node.prev = newElems[idx - 1] || prev;
    node.next = newElems[idx + 1] || next;
  }

  if (prev) {
    prev.next = newElems[0];
  }
  if (next) {
    next.prev = newElems[newElems.length - 1];
  }
  return array.splice.apply(array, spliceArgs);
};

/**
 * Insert every element in the set of matched elements to the end of the
 * target.
 *
 * @param {string|cheerio} target - Element to append elements to.
 *
 * @example
 *
 * $('<li class="plum">Plum</li>').appendTo('#fruits')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //      <li class="plum">Plum</li>
 * //    </ul>
 *
 * @see {@link http://api.jquery.com/appendTo/}
 */
exports.appendTo = function (target) {
  if (!target.cheerio) {
    target = this.constructor.call(
      this.constructor,
      target,
      null,
      this._originalRoot
    );
  }

  target.append(this);

  return this;
};

/**
 * Insert every element in the set of matched elements to the beginning of the
 * target.
 *
 * @param {string|cheerio} target - Element to prepend elements to.
 *
 * @example
 *
 * $('<li class="plum">Plum</li>').prependTo('#fruits')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="plum">Plum</li>
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //    </ul>
 *
 * @see {@link http://api.jquery.com/prependTo/}
 */
exports.prependTo = function (target) {
  if (!target.cheerio) {
    target = this.constructor.call(
      this.constructor,
      target,
      null,
      this._originalRoot
    );
  }

  target.prepend(this);

  return this;
};

/**
 * Inserts content as the *last* child of each of the selected elements.
 *
 * @function
 *
 * @example
 *
 * $('ul').append('<li class="plum">Plum</li>')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //      <li class="plum">Plum</li>
 * //    </ul>
 *
 * @see {@link http://api.jquery.com/append/}
 */
exports.append = _insert(function (dom, children, parent) {
  uniqueSplice(children, children.length, 0, dom, parent);
});

/**
 * Inserts content as the *first* child of each of the selected elements.
 *
 * @function
 *
 * @example
 *
 * $('ul').prepend('<li class="plum">Plum</li>')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="plum">Plum</li>
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //    </ul>
 *
 * @see {@link http://api.jquery.com/prepend/}
 */
exports.prepend = _insert(function (dom, children, parent) {
  uniqueSplice(children, 0, 0, dom, parent);
});

function _wrap(insert) {
  return function (wrapper) {
    var wrapperFn = typeof wrapper === 'function' && wrapper;
    var lastIdx = this.length - 1;
    var lastParent = this.parents().last();

    for (var i = 0; i < this.length; i++) {
      var el = this[i];
      var wrapperDom;
      var elInsertLocation;
      var j;

      if (wrapperFn) {
        wrapper = wrapperFn.call(el, i);
      }

      if (typeof wrapper === 'string' && !isHtml(wrapper)) {
        wrapper = lastParent.find(wrapper).clone();
      }

      wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);
      elInsertLocation = wrapperDom[0];
      // Find the deepest child. Only consider the first tag child of each node
      // (ignore text); stop if no children are found.
      j = 0;

      while (elInsertLocation && elInsertLocation.children) {
        if (j >= elInsertLocation.children.length) {
          break;
        }

        if (elInsertLocation.children[j].type === 'tag') {
          elInsertLocation = elInsertLocation.children[j];
          j = 0;
        } else {
          j++;
        }
      }

      insert(el, elInsertLocation, wrapperDom);
    }

    return this;
  };
}

/**
 * The .wrap() function can take any string or object that could be passed to
 * the $() factory function to specify a DOM structure. This structure may be
 * nested several levels deep, but should contain only one inmost element. A
 * copy of this structure will be wrapped around each of the elements in the
 * set of matched elements. This method returns the original set of elements
 * for chaining purposes.
 *
 * @param {cheerio} wrapper - The DOM structure to wrap around each element in the selection.
 *
 * @example
 *
 * const redFruit = $('<div class="red-fruit"></div>')
 * $('.apple').wrap(redFruit)
 *
 * //=> <ul id="fruits">
 * //     <div class="red-fruit">
 * //      <li class="apple">Apple</li>
 * //     </div>
 * //     <li class="orange">Orange</li>
 * //     <li class="plum">Plum</li>
 * //   </ul>
 *
 * const healthy = $('<div class="healthy"></div>')
 * $('li').wrap(healthy)
 *
 * //=> <ul id="fruits">
 * //     <div class="healthy">
 * //       <li class="apple">Apple</li>
 * //     </div>
 * //     <div class="healthy">
 * //       <li class="orange">Orange</li>
 * //     </div>
 * //     <div class="healthy">
 * //        <li class="plum">Plum</li>
 * //     </div>
 * //   </ul>
 *
 * @see {@link http://api.jquery.com/wrap/}
 */
exports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {
  var parent = el.parent;
  var siblings = parent.children;
  var index = siblings.indexOf(el);

  updateDOM([el], elInsertLocation);
  // The previous operation removed the current element from the `siblings`
  // array, so the `dom` array can be inserted without removing any
  // additional elements.
  uniqueSplice(siblings, index, 0, wrapperDom, parent);
});

/**
 * The .wrapInner() function can take any string or object that could be passed to
 * the $() factory function to specify a DOM structure. This structure may be
 * nested several levels deep, but should contain only one inmost element. The
 * structure will be wrapped around the content of each of the elements in the set
 * of matched elements.
 *
 * @param {cheerio} wrapper - The DOM structure to wrap around the content of each element in the selection.
 *
 * @example
 *
 * const redFruit = $('<div class="red-fruit"></div>')
 * $('.apple').wrapInner(redFruit)
 *
 * //=> <ul id="fruits">
 * //     <li class="apple">
 * //       <div class="red-fruit">Apple</div>
 * //     </li>
 * //     <li class="orange">Orange</li>
 * //     <li class="pear">Pear</li>
 * //   </ul>
 *
 * const healthy = $('<div class="healthy"></div>')
 * $('li').wrapInner(healthy)
 *
 * //=> <ul id="fruits">
 * //     <li class="apple">
 * //       <div class="healthy">Apple</div>
 * //     </li>
 * //     <li class="orange">
 * //       <div class="healthy">Orange</div>
 * //     </li>
 * //     <li class="pear">
 * //       <div class="healthy">Pear</div>
 * //     </li>
 * //   </ul>
 *
 * @see {@link http://api.jquery.com/wrapInner/}
 */
exports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {
  updateDOM(el.children, elInsertLocation);
  updateDOM(wrapperDom, el);
});

/**
 * Insert content next to each element in the set of matched elements.
 *
 * @example
 *
 * $('.apple').after('<li class="plum">Plum</li>')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="apple">Apple</li>
 * //      <li class="plum">Plum</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //    </ul>
 *
 * @see {@link http://api.jquery.com/after/}
 */
exports.after = function () {
  var elems = slice.call(arguments);
  var lastIdx = this.length - 1;

  domEach(this, function (i, el) {
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);
    var domSrc;
    var dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, html(el.children));
    } else {
      domSrc = elems;
    }
    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element after `this` element
    uniqueSplice(siblings, index + 1, 0, dom, parent);
  });

  return this;
};

/**
 * Insert every element in the set of matched elements after the target.
 *
 * @example
 *
 * $('<li class="plum">Plum</li>').insertAfter('.apple')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="apple">Apple</li>
 * //      <li class="plum">Plum</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //    </ul>
 *
 * @param {string|cheerio} target - Element to insert elements after.
 *
 * @see {@link http://api.jquery.com/insertAfter/}
 */
exports.insertAfter = function (target) {
  var clones = [];
  var self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(
      this.constructor,
      target,
      null,
      this._originalRoot
    );
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function (i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

/**
 * Insert content previous to each element in the set of matched elements.
 *
 * @example
 *
 * $('.apple').before('<li class="plum">Plum</li>')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="plum">Plum</li>
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //    </ul>
 *
 * @see {@link http://api.jquery.com/before/}
 */
exports.before = function () {
  var elems = slice.call(arguments);
  var lastIdx = this.length - 1;

  domEach(this, function (i, el) {
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);
    var domSrc;
    var dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, html(el.children));
    } else {
      domSrc = elems;
    }

    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element before `el` element
    uniqueSplice(siblings, index, 0, dom, parent);
  });

  return this;
};

/**
 * Insert every element in the set of matched elements before the target.
 *
 * @example
 *
 * $('<li class="plum">Plum</li>').insertBefore('.apple')
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="plum">Plum</li>
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //      <li class="pear">Pear</li>
 * //    </ul>
 *
 * @param {string|cheerio} target - Element to insert elements before.
 *
 * @see {@link http://api.jquery.com/insertBefore/}
 */
exports.insertBefore = function (target) {
  var clones = [];
  var self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(
      this.constructor,
      target,
      null,
      this._originalRoot
    );
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function (i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

/**
 * Removes the set of matched elements from the DOM and all their children.
 * `selector` filters the set of matched elements to be removed.
 *
 * @example
 *
 * $('.pear').remove()
 * $.html()
 * //=>  <ul id="fruits">
 * //      <li class="apple">Apple</li>
 * //      <li class="orange">Orange</li>
 * //    </ul>
 *
 * @param {string} [selector] - Optional selector for elements to remove.
 *
 * @see {@link http://api.jquery.com/remove/}
 */
exports.remove = function (selector) {
  var elems = this;

  // Filter if we have selector
  if (selector) elems = elems.filter(selector);

  domEach(elems, function (i, el) {
    DomUtils.removeElement(el);
    el.prev = el.next = el.parent = null;
  });

  return this;
};

/**
 * Replaces matched elements with `content`.
 *
 * @example
 *
 * const plum = $('<li class="plum">Plum</li>')
 * $('.pear').replaceWith(plum)
 * $.html()
 * //=> <ul id="fruits">
 * //     <li class="apple">Apple</li>
 * //     <li class="orange">Orange</li>
 * //     <li class="plum">Plum</li>
 * //   </ul>
 *
 * @param {cheerio|Function} content - Replacement for matched elements.
 *
 * @see {@link http://api.jquery.com/replaceWith/}
 */
exports.replaceWith = function (content) {
  var self = this;

  domEach(this, function (i, el) {
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var dom = self._makeDomArray(
      typeof content === 'function' ? content.call(el, i, el) : content
    );
    var index;

    // In the case that `dom` contains nodes that already exist in other
    // structures, ensure those nodes are properly removed.
    updateDOM(dom, null);

    index = siblings.indexOf(el);

    // Completely remove old element
    uniqueSplice(siblings, index, 1, dom, parent);
    el.parent = el.prev = el.next = null;
  });

  return this;
};

/**
 * Empties an element, removing all its children.
 *
 * @example
 *
 * $('ul').empty()
 * $.html()
 * //=>  <ul id="fruits"></ul>
 *
 * @see {@link http://api.jquery.com/empty/}
 */
exports.empty = function () {
  domEach(this, function (i, el) {
    el.children.forEach(function (child) {
      child.next = child.prev = child.parent = null;
    });

    el.children.length = 0;
  });
  return this;
};

/**
 * Gets an HTML content string from the first selected element. If `htmlString`
 * is specified, each selected element's content is replaced by the new
 * content.
 *
 * @param {string} str - If specified used to replace selection's contents.
 *
 * @example
 *
 * $('.orange').html()
 * //=> Orange
 *
 * $('#fruits').html('<li class="mango">Mango</li>').html()
 * //=> <li class="mango">Mango</li>
 *
 * @see {@link http://api.jquery.com/html/}
 */
exports.html = function (str) {
  if (str === undefined) {
    if (!this[0] || !this[0].children) return null;
    return html(this[0].children, this.options);
  }

  var opts = this.options;

  domEach(this, function (i, el) {
    el.children.forEach(function (child) {
      child.next = child.prev = child.parent = null;
    });

    var content = str.cheerio
      ? str.clone().get()
      : parse('' + str, opts, false).children;

    updateDOM(content, el);
  });

  return this;
};

exports.toString = function () {
  return html(this, this.options);
};

/**
 * Get the combined text contents of each element in the set of matched
 * elements, including their descendants. If `textString` is specified, each
 * selected element's content is replaced by the new text content.
 *
 * @param {string} [str] - If specified replacement for the selected element's contents.
 *
 * @example
 *
 * $('.orange').text()
 * //=> Orange
 *
 * $('ul').text()
 * //=>  Apple
 * //    Orange
 * //    Pear
 *
 * @see {@link http://api.jquery.com/text/}
 */
exports.text = function (str) {
  // If `str` is undefined, act as a "getter"
  if (str === undefined) {
    return text(this);
  } else if (typeof str === 'function') {
    // Function support
    var self = this;
    return domEach(this, function (i, el) {
      return exports.text.call(self._make(el), str.call(el, i, text([el])));
    });
  }

  // Append text node to each selected elements
  domEach(this, function (i, el) {
    el.children.forEach(function (child) {
      child.next = child.prev = child.parent = null;
    });

    var textNode = new domhandler.Text(str);

    updateDOM(textNode, el);
  });

  return this;
};

/**
 * Clone the cheerio object.
 *
 * @example
 *
 * const moreFruit = $('#fruits').clone()
 *
 * @see {@link http://api.jquery.com/clone/}
 */
exports.clone = function () {
  return this._make(cloneDom(this.get(), this.options));
};

},{"../parse":16,"../static":17,"../utils":18,"domhandler":36,"htmlparser2":57}],13:[function(require,module,exports){
/**
 * Methods for traversing the DOM structure.
 *
 * @module cheerio/traversing
 */

var select = require('cheerio-select-tmp');
var utils = require('../utils');
var domEach = utils.domEach;
var uniqueSort = require('htmlparser2').DomUtils.uniqueSort;
var isTag = utils.isTag;

/**
 * Get the descendants of each element in the current set of matched elements,
 * filtered by a selector, jQuery object, or element.
 *
 * @example
 *
 * $('#fruits').find('li').length
 * //=> 3
 * $('#fruits').find($('.apple')).length
 * //=> 1
 *
 * @param {string|cheerio|node} selectorOrHaystack - Element to look for.
 *
 * @see {@link http://api.jquery.com/find/}
 */
exports.find = function (selectorOrHaystack) {
  var elems = this.toArray().reduce(function (newElems, elem) {
    return newElems.concat(elem.children.filter(isTag));
  }, []);
  var contains = this.constructor.contains;
  var haystack;

  if (selectorOrHaystack && typeof selectorOrHaystack !== 'string') {
    if (selectorOrHaystack.cheerio) {
      haystack = selectorOrHaystack.get();
    } else {
      haystack = [selectorOrHaystack];
    }

    return this._make(
      haystack.filter(function (elem) {
        var idx;
        var len;
        for (idx = 0, len = this.length; idx < len; ++idx) {
          if (contains(this[idx], elem)) {
            return true;
          }
        }
      }, this)
    );
  }

  var options = { __proto__: this.options, context: this.toArray() };

  return this._make(select.select(selectorOrHaystack || '', elems, options));
};

/**
 * Get the parent of each element in the current set of matched elements,
 * optionally filtered by a selector.
 *
 * @example
 *
 * $('.pear').parent().attr('id')
 * //=> fruits
 *
 * @param {string} [selector] - If specified filter for parent.
 *
 * @see {@link http://api.jquery.com/parent/}
 */
exports.parent = function (selector) {
  var set = [];

  domEach(this, function (idx, elem) {
    var parentElem = elem.parent;
    if (
      parentElem &&
      parentElem.type !== 'root' &&
      set.indexOf(parentElem) < 0
    ) {
      set.push(parentElem);
    }
  });

  if (arguments.length) {
    set = exports.filter.call(set, selector, this);
  }

  return this._make(set);
};

/**
 * Get a set of parents filtered by `selector` of each element in the current
 * set of match elements.
 *
 * @example
 *
 * $('.orange').parents().length
 * // => 2
 * $('.orange').parents('#fruits').length
 * // => 1
 *
 * @param {string} [selector] - If specified filter for parents.
 *
 * @see {@link http://api.jquery.com/parents/}
 */
exports.parents = function (selector) {
  var parentNodes = [];

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.
  this.get()
    .reverse()
    .forEach(function (elem) {
      traverseParents(this, elem.parent, selector, Infinity).forEach(function (
        node
      ) {
        if (parentNodes.indexOf(node) === -1) {
          parentNodes.push(node);
        }
      });
    }, this);

  return this._make(parentNodes);
};

/**
 * Get the ancestors of each element in the current set of matched elements, up
 * to but not including the element matched by the selector, DOM node, or
 * cheerio object.
 *
 * @example
 *
 * $('.orange').parentsUntil('#food').length
 * // => 1
 *
 * @param {string|node|cheerio} selector - Selector for element to stop at.
 * @param {string|Function} [filter] - Optional filter for parents.
 *
 * @see {@link http://api.jquery.com/parentsUntil/}
 */
exports.parentsUntil = function (selector, filter) {
  var parentNodes = [];
  var untilNode;
  var untilNodes;

  if (typeof selector === 'string') {
    untilNode = select.select(
      selector,
      this.parents().toArray(),
      this.options
    )[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.toArray();
  } else if (selector) {
    untilNode = selector;
  }

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.

  this.toArray()
    .reverse()
    .forEach(function (elem) {
      while ((elem = elem.parent)) {
        if (
          (untilNode && elem !== untilNode) ||
          (untilNodes && untilNodes.indexOf(elem) === -1) ||
          (!untilNode && !untilNodes)
        ) {
          if (isTag(elem) && parentNodes.indexOf(elem) === -1) {
            parentNodes.push(elem);
          }
        } else {
          break;
        }
      }
    }, this);

  return this._make(
    filter ? select.select(filter, parentNodes, this.options) : parentNodes
  );
};

/**
 * For each element in the set, get the first element that matches the selector
 * by testing the element itself and traversing up through its ancestors in
 * the DOM tree.
 *
 * @example
 *
 * $('.orange').closest()
 * // => []
 * $('.orange').closest('.apple')
 * // => []
 * $('.orange').closest('li')
 * // => [<li class="orange">Orange</li>]
 * $('.orange').closest('#fruits')
 * // => [<ul id="fruits"> ... </ul>]
 *
 * @param {string} [selector] - Selector for the element to find.
 *
 * @see {@link http://api.jquery.com/closest/}
 */
exports.closest = function (selector) {
  var set = [];

  if (!selector) {
    return this._make(set);
  }

  domEach(this, function (idx, elem) {
    var closestElem = traverseParents(this, elem, selector, 1)[0];

    // Do not add duplicate elements to the set
    if (closestElem && set.indexOf(closestElem) < 0) {
      set.push(closestElem);
    }
  });

  return this._make(set);
};

/**
 * Gets the next sibling of the first selected element, optionally filtered by
 * a selector.
 *
 * @example
 *
 * $('.apple').next().hasClass('orange')
 * //=> true
 *
 * @param {string} [selector] - If specified filter for sibling.
 *
 * @see {@link http://api.jquery.com/next/}
 */
exports.next = function (selector) {
  if (!this[0]) {
    return this;
  }
  var elems = [];

  this.toArray().forEach(function (elem) {
    while ((elem = elem.next)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector
    ? exports.filter.call(elems, selector, this)
    : this._make(elems);
};

/**
 * Gets all the following siblings of the first selected element, optionally
 * filtered by a selector.
 *
 * @example
 *
 * $('.apple').nextAll()
 * //=> [<li class="orange">Orange</li>, <li class="pear">Pear</li>]
 * $('.apple').nextAll('.orange')
 * //=> [<li class="orange">Orange</li>]
 *
 * @param {string} [selector] - If specified filter for siblings.
 *
 * @see {@link http://api.jquery.com/nextAll/}
 */
exports.nextAll = function (selector) {
  if (!this[0]) {
    return this;
  }
  var elems = [];

  this.toArray().forEach(function (elem) {
    while ((elem = elem.next)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector
    ? exports.filter.call(elems, selector, this)
    : this._make(elems);
};

/**
 * Gets all the following siblings up to but not including the element matched
 * by the selector, optionally filtered by another selector.
 *
 * @example
 *
 * $('.apple').nextUntil('.pear')
 * //=> [<li class="orange">Orange</li>]
 *
 * @param {string|cheerio|node} selector - Selector for element to stop at.
 * @param {string} [filterSelector] - If specified filter for siblings.
 *
 * @see {@link http://api.jquery.com/nextUntil/}
 */
exports.nextUntil = function (selector, filterSelector) {
  if (!this[0]) {
    return this;
  }
  var elems = [];
  var untilNode;
  var untilNodes;

  if (typeof selector === 'string') {
    untilNode = select.select(selector, this.nextAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  this.toArray().forEach(function (elem) {
    while ((elem = elem.next)) {
      if (
        (untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)
      ) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector
    ? exports.filter.call(elems, filterSelector, this)
    : this._make(elems);
};

/**
 * Gets the previous sibling of the first selected element optionally filtered
 * by a selector.
 *
 * @example
 *
 * $('.orange').prev().hasClass('apple')
 * //=> true
 *
 * @param {string} [selector] - If specified filter for siblings.
 *
 * @see {@link http://api.jquery.com/prev/}
 */
exports.prev = function (selector) {
  if (!this[0]) {
    return this;
  }
  var elems = [];

  this.toArray().forEach(function (elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector
    ? exports.filter.call(elems, selector, this)
    : this._make(elems);
};

/**
 * Gets all the preceding siblings of the first selected element, optionally
 * filtered by a selector.
 *
 * @example
 *
 * $('.pear').prevAll()
 * //=> [<li class="orange">Orange</li>, <li class="apple">Apple</li>]
 * $('.pear').prevAll('.orange')
 * //=> [<li class="orange">Orange</li>]
 *
 * @param {string} [selector] - If specified filter for siblings.
 *
 * @see {@link http://api.jquery.com/prevAll/}
 */
exports.prevAll = function (selector) {
  if (!this[0]) {
    return this;
  }
  var elems = [];

  this.toArray().forEach(function (elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector
    ? exports.filter.call(elems, selector, this)
    : this._make(elems);
};

/**
 * Gets all the preceding siblings up to but not including the element matched
 * by the selector, optionally filtered by another selector.
 *
 * @example
 *
 * $('.pear').prevUntil('.apple')
 * //=> [<li class="orange">Orange</li>]
 *
 * @param {string|cheerio|node} selector - Selector for element to stop at.
 * @param {string} [filterSelector] - If specified filter for siblings.
 *
 * @see {@link http://api.jquery.com/prevUntil/}
 */
exports.prevUntil = function (selector, filterSelector) {
  if (!this[0]) {
    return this;
  }
  var elems = [];
  var untilNode;
  var untilNodes;

  if (typeof selector === 'string') {
    untilNode = select.select(selector, this.prevAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  this.toArray().forEach(function (elem) {
    while ((elem = elem.prev)) {
      if (
        (untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)
      ) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector
    ? exports.filter.call(elems, filterSelector, this)
    : this._make(elems);
};

/**
 * Gets the first selected element's siblings, excluding itself.
 *
 * @example
 *
 * $('.pear').siblings().length
 * //=> 2
 *
 * $('.pear').siblings('.orange').length
 * //=> 1
 *
 * @param {string} [selector] - If specified filter for siblings.
 *
 * @see {@link http://api.jquery.com/siblings/}
 */
exports.siblings = function (selector) {
  var parent = this.parent();

  var elems = (parent ? parent.children() : this.siblingsAndMe())
    .toArray()
    .filter(function (elem) {
      return isTag(elem) && !this.is(elem);
    }, this);

  if (selector !== undefined) {
    return exports.filter.call(elems, selector, this);
  }
  return this._make(elems);
};

/**
 * Gets the children of the first selected element.
 *
 * @example
 *
 * $('#fruits').children().length
 * //=> 3
 *
 * $('#fruits').children('.pear').text()
 * //=> Pear
 *
 * @param {string} [selector] - If specified filter for children.
 *
 * @see {@link http://api.jquery.com/children/}
 */
exports.children = function (selector) {
  var elems = this.toArray().reduce(function (newElems, elem) {
    return newElems.concat(elem.children.filter(isTag));
  }, []);

  if (selector === undefined) return this._make(elems);

  return exports.filter.call(elems, selector, this);
};

/**
 * Gets the children of each element in the set of matched elements, including
 * text and comment nodes.
 *
 * @example
 *
 * $('#fruits').contents().length
 * //=> 3
 *
 * @see {@link http://api.jquery.com/contents/}
 */
exports.contents = function () {
  var elems = this.toArray().reduce(function (newElems, elem) {
    return newElems.concat(elem.children);
  }, []);
  return this._make(elems);
};

/**
 * Iterates over a cheerio object, executing a function for each matched
 * element. When the callback is fired, the function is fired in the context of
 * the DOM element, so `this` refers to the current element, which is
 * equivalent to the function parameter `element`. To break out of the `each`
 * loop early, return with `false`.
 *
 * @example
 *
 * const fruits = [];
 *
 * $('li').each(function(i, elem) {
 *   fruits[i] = $(this).text();
 * });
 *
 * fruits.join(', ');
 * //=> Apple, Orange, Pear
 *
 * @param {Function} fn - Function to execute.
 *
 * @see {@link http://api.jquery.com/each/}
 */
exports.each = function (fn) {
  var i = 0;
  var len = this.length;
  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;
  return this;
};

/**
 * Pass each element in the current matched set through a function, producing a
 * new Cheerio object containing the return values. The function can return an
 * individual data item or an array of data items to be inserted into the
 * resulting set. If an array is returned, the elements inside the array are
 * inserted into the set. If the function returns null or undefined, no element
 * will be inserted.
 *
 * @example
 *
 * $('li').map(function(i, el) {
 *   // this === el
 *   return $(this).text();
 * }).get().join(' ');
 * //=> "apple orange pear"
 *
 * @param {Function} fn - Function to execute.
 *
 * @see {@link http://api.jquery.com/map/}
 */
exports.map = function (fn) {
  var elems = [];
  for (var i = 0; i < this.length; i++) {
    var el = this[i];
    var val = fn.call(el, i, el);
    if (val != null) {
      elems = elems.concat(val);
    }
  }
  return this._make(elems);
};

function getFilterFn(match) {
  if (typeof match === 'function') {
    return function (el, i) {
      return match.call(el, i, el);
    };
  } else if (match.cheerio) {
    return match.is.bind(match);
  }
  return function (el) {
    return match === el;
  };
}

/**
 * Iterates over a cheerio object, reducing the set of selector elements to
 * those that match the selector or pass the function's test. When a Cheerio
 * selection is specified, return only the elements contained in that
 * selection. When an element is specified, return only that element (if it is
 * contained in the original selection). If using the function method, the
 * function is executed in the context of the selected element, so `this`
 * refers to the current element.
 *
 * @function
 * @param {string | Function} match - Value to look for, following the rules above.
 * @param {node[]} container - Optional node to filter instead.
 *
 * @example <caption>Selector</caption>
 *
 * $('li').filter('.orange').attr('class');
 * //=> orange
 *
 * @example <caption>Function</caption>
 *
 * $('li').filter(function(i, el) {
 *   // this === el
 *   return $(this).attr('class') === 'orange';
 * }).attr('class')
 * //=> orange
 *
 * @see {@link http://api.jquery.com/filter/}
 */
exports.filter = function (match, container) {
  container = container || this;
  var elements = this.toArray ? this.toArray() : this;

  if (typeof match === 'string') {
    elements = select.filter(match, elements, container.options);
  } else {
    elements = elements.filter(getFilterFn(match));
  }

  return container._make(elements);
};

/**
 * Remove elements from the set of matched elements. Given a jQuery object that
 * represents a set of DOM elements, the `.not()` method constructs a new
 * jQuery object from a subset of the matching elements. The supplied selector
 * is tested against each element; the elements that don't match the selector
 * will be included in the result. The `.not()` method can take a function as
 * its argument in the same way that `.filter()` does. Elements for which the
 * function returns true are excluded from the filtered set; all other elements
 * are included.
 *
 * @function
 * @param {string | Function} match - Value to look for, following the rules above.
 * @param {node[]} container - Optional node to filter instead.
 *
 * @example <caption>Selector</caption>
 *
 * $('li').not('.apple').length;
 * //=> 2
 *
 * @example <caption>Function</caption>
 *
 * $('li').not(function(i, el) {
 *   // this === el
 *   return $(this).attr('class') === 'orange';
 * }).length;
 * //=> 2
 *
 * @see {@link http://api.jquery.com/not/}
 */
exports.not = function (match, container) {
  container = container || this;
  var elements = container.toArray ? container.toArray() : container;
  var matches;
  var filterFn;

  if (typeof match === 'string') {
    matches = new Set(select.filter(match, elements, this.options));
    elements = elements.filter(function (el) {
      return !matches.has(el);
    });
  } else {
    filterFn = getFilterFn(match);
    elements = elements.filter(function (el, i) {
      return !filterFn(el, i);
    });
  }

  return container._make(elements);
};

/**
 * Filters the set of matched elements to only those which have the given DOM
 * element as a descendant or which have a descendant that matches the given
 * selector. Equivalent to `.filter(':has(selector)')`.
 *
 * @example <caption>Selector</caption>
 *
 * $('ul').has('.pear').attr('id');
 * //=> fruits
 *
 * @example <caption>Element</caption>
 *
 * $('ul').has($('.pear')[0]).attr('id');
 * //=> fruits
 *
 * @param {string|cheerio|node} selectorOrHaystack - Element to look for.
 *
 * @see {@link http://api.jquery.com/has/}
 */
exports.has = function (selectorOrHaystack) {
  var that = this;
  return exports.filter.call(this, function () {
    return that._make(this).find(selectorOrHaystack).length > 0;
  });
};

/**
 * Will select the first element of a cheerio object.
 *
 * @example
 *
 * $('#fruits').children().first().text()
 * //=> Apple
 *
 * @see {@link http://api.jquery.com/first/}
 */
exports.first = function () {
  return this.length > 1 ? this._make(this[0]) : this;
};

/**
 * Will select the last element of a cheerio object.
 *
 * @example
 *
 * $('#fruits').children().last().text()
 * //=> Pear
 *
 * @see {@link http://api.jquery.com/last/}
 */
exports.last = function () {
  return this.length > 1 ? this._make(this[this.length - 1]) : this;
};

/**
 * Reduce the set of matched elements to the one at the specified index. Use
 * `.eq(-i)` to count backwards from the last selected element.
 *
 * @example
 *
 * $('li').eq(0).text()
 * //=> Apple
 *
 * $('li').eq(-1).text()
 * //=> Pear
 *
 * @param {number} i - Index of the element to select.
 *
 * @see {@link http://api.jquery.com/eq/}
 */
exports.eq = function (i) {
  i = +i;

  // Use the first identity optimization if possible
  if (i === 0 && this.length <= 1) return this;

  if (i < 0) i = this.length + i;
  return this[i] ? this._make(this[i]) : this._make([]);
};

/**
 * Retrieve the DOM elements matched by the Cheerio object. If an index is
 * specified, retrieve one of the elements matched by the Cheerio object.
 *
 * @example
 *
 * $('li').get(0).tagName
 * //=> li
 *
 * If no index is specified, retrieve all elements matched by the Cheerio object:
 *
 * @example
 *
 * $('li').get().length
 * //=> 3
 *
 * @param {number} [i] - Element to retrieve.
 *
 * @see {@link http://api.jquery.com/get/}
 */
exports.get = function (i) {
  if (i == null) {
    return Array.prototype.slice.call(this);
  }
  return this[i < 0 ? this.length + i : i];
};

/**
 * Search for a given element from among the matched elements.
 *
 * @example
 *
 * $('.pear').index()
 * //=> 2
 * $('.orange').index('li')
 * //=> 1
 * $('.apple').index($('#fruit, li'))
 * //=> 1
 *
 * @param {string|cheerio|node} [selectorOrNeedle] - Element to look for.
 *
 * @see {@link http://api.jquery.com/index/}
 */
exports.index = function (selectorOrNeedle) {
  var $haystack;
  var needle;

  if (arguments.length === 0) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === 'string') {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;
  }

  return $haystack.get().indexOf(needle);
};

/**
 * Gets the elements matching the specified range.
 *
 * @example
 *
 * $('li').slice(1).eq(0).text()
 * //=> 'Orange'
 *
 * $('li').slice(1, 2).length
 * //=> 1
 *
 * @see {@link http://api.jquery.com/slice/}
 */
exports.slice = function () {
  return this._make([].slice.apply(this, arguments));
};

function traverseParents(self, elem, selector, limit) {
  var elems = [];
  while (elem && elems.length < limit && elem.type !== 'root') {
    if (!selector || exports.filter.call([elem], selector, self).length) {
      elems.push(elem);
    }
    elem = elem.parent;
  }
  return elems;
}

/**
 * End the most recent filtering operation in the current chain and return the
 * set of matched elements to its previous state.
 *
 * @example
 *
 * $('li').eq(0).end().length
 * //=> 3
 *
 * @see {@link http://api.jquery.com/end/}
 */
exports.end = function () {
  return this.prevObject || this._make([]);
};

/**
 * Add elements to the set of matched elements.
 *
 * @example
 *
 * $('.apple').add('.orange').length
 * //=> 2
 *
 * @param {string|cheerio} other - Elements to add.
 * @param {cheerio} [context] - Optionally the context of the new selection.
 *
 * @see {@link http://api.jquery.com/add/}
 */
exports.add = function (other, context) {
  var selection = this._make(other, context);
  var contents = uniqueSort(selection.get().concat(this.get()));

  for (var i = 0; i < contents.length; ++i) {
    selection[i] = contents[i];
  }
  selection.length = contents.length;

  return selection;
};

/**
 * Add the previous set of elements on the stack to the current set, optionally
 * filtered by a selector.
 *
 * @example
 *
 * $('li').eq(0).addBack('.orange').length
 * //=> 2
 *
 * @param {string} selector - Selector for the elements to add.
 *
 * @see {@link http://api.jquery.com/addBack/}
 */
exports.addBack = function (selector) {
  return this.add(
    arguments.length ? this.prevObject.filter(selector) : this.prevObject
  );
};

},{"../utils":18,"cheerio-select-tmp":6,"htmlparser2":57}],14:[function(require,module,exports){
/*
  Module dependencies
*/

var parse = require('./parse');
var defaultOptions = require('./options').default;
var flattenOptions = require('./options').flatten;
var isHtml = require('./utils').isHtml;

/*
 * The API
 */
var api = [
  require('./api/attributes'),
  require('./api/traversing'),
  require('./api/manipulation'),
  require('./api/css'),
  require('./api/forms'),
];

/**
 * Instance of cheerio. Methods are specified in the modules.
 * Usage of this constructor is not recommended. Please use $.load instead.
 *
 * @class
 * @hideconstructor
 * @param {string|cheerio|node|node[]} selector - The new selection.
 * @param {string|cheerio|node|node[]} [context] - Context of the selection.
 * @param {string|cheerio|node|node[]} [root] - Sets the root node.
 * @param {object} [options] - Options for the instance.
 *
 * @mixes module:cheerio/attributes
 * @mixes module:cheerio/css
 * @mixes module:cheerio/forms
 * @mixes module:cheerio/manipulation
 * @mixes module:cheerio/traversing
 */
var Cheerio = (module.exports = function (selector, context, root, options) {
  if (!(this instanceof Cheerio)) {
    return new Cheerio(selector, context, root, options);
  }

  this.options = Object.assign(
    {},
    defaultOptions,
    this.options,
    flattenOptions(options)
  );

  // $(), $(null), $(undefined), $(false)
  if (!selector) return this;

  if (root) {
    if (typeof root === 'string') root = parse(root, this.options, false);
    this._root = Cheerio.call(this, root);
  }

  // $($)
  if (selector.cheerio) return selector;

  // $(dom)
  if (isNode(selector)) selector = [selector];

  // $([dom])
  if (Array.isArray(selector)) {
    selector.forEach(function (elem, idx) {
      this[idx] = elem;
    }, this);
    this.length = selector.length;
    return this;
  }

  // $(<html>)
  if (typeof selector === 'string' && isHtml(selector)) {
    return Cheerio.call(this, parse(selector, this.options, false).children);
  }

  // If we don't have a context, maybe we have a root, from loading
  if (!context) {
    context = this._root;
  } else if (typeof context === 'string') {
    if (isHtml(context)) {
      // $('li', '<ul>...</ul>')
      context = parse(context, this.options, false);
      context = Cheerio.call(this, context);
    } else {
      // $('li', 'ul')
      selector = [context, selector].join(' ');
      context = this._root;
    }
  } else if (!context.cheerio) {
    // $('li', node), $('li', [nodes])
    context = Cheerio.call(this, context);
  }

  // If we still don't have a context, return
  if (!context) return this;

  // #id, .class, tag
  return context.find(selector);
});

/*
 * Set a signature of the object
 */
Cheerio.prototype.cheerio = '[cheerio object]';

/*
 * Make cheerio an array-like object
 */
Cheerio.prototype.length = 0;
Cheerio.prototype.splice = Array.prototype.splice;

/*
 * Make a cheerio object
 *
 * @private
 */
Cheerio.prototype._make = function (dom, context) {
  var cheerio = new this.constructor(dom, context, this._root, this.options);
  cheerio.prevObject = this;
  return cheerio;
};

/**
 * Retrieve all the DOM elements contained in the jQuery set as an array.
 *
 * @example
 * $('li').toArray()
 * //=> [ {...}, {...}, {...} ]
 */
Cheerio.prototype.toArray = function () {
  return this.get();
};

// Support for (const element of $(...)) iteration:
if (typeof Symbol !== 'undefined') {
  Cheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
}

// Plug in the API
api.forEach(function (mod) {
  Object.assign(Cheerio.prototype, mod);
});

var isNode = function (obj) {
  return (
    obj.name ||
    obj.type === 'root' ||
    obj.type === 'text' ||
    obj.type === 'comment'
  );
};

},{"./api/attributes":9,"./api/css":10,"./api/forms":11,"./api/manipulation":12,"./api/traversing":13,"./options":15,"./parse":16,"./utils":18}],15:[function(require,module,exports){
/*
 * Cheerio default options
 */

exports.default = {
  xml: false,
  decodeEntities: true,
};

var xmlModeDefault = { _useHtmlParser2: true, xmlMode: true };

exports.flatten = function (options) {
  return options && options.xml
    ? typeof options.xml === 'boolean'
      ? xmlModeDefault
      : Object.assign({}, xmlModeDefault, options.xml)
    : options;
};

},{}],16:[function(require,module,exports){
(function (Buffer){(function (){
/*
  Module Dependencies
*/
var htmlparser = require('htmlparser2');
var parse5 = require('parse5');
var htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');
var domhandler = require('domhandler');
var DomUtils = htmlparser.DomUtils;

/*
  Parser
*/
exports = module.exports = function parse(content, options, isDocument) {
  // options = options || $.fn.options;

  var dom;

  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {
    content = content.toString();
  }

  if (typeof content === 'string') {
    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;

    dom = useHtmlParser2
      ? htmlparser.parseDocument(content, options)
      : parseWithParse5(content, options, isDocument);
  } else {
    if (
      typeof content === 'object' &&
      content != null &&
      content.type === 'root'
    ) {
      dom = content;
    } else {
      // Generic root element
      var root = new domhandler.Document(content);
      content.forEach(function (node) {
        node.parent = root;
      });

      dom = root;
    }
  }

  return dom;
};

function parseWithParse5(content, options, isDocument) {
  var parse = isDocument ? parse5.parse : parse5.parseFragment;

  return parse(content, {
    treeAdapter: htmlparser2Adapter,
    sourceCodeLocationInfo: options.sourceCodeLocationInfo,
  });
}

/*
  Update the dom structure, for one changed layer
*/
exports.update = function (arr, parent) {
  // normalize
  if (!Array.isArray(arr)) arr = [arr];

  // Update parent
  if (parent) {
    parent.children = arr;
  } else {
    parent = null;
  }

  // Update neighbors
  for (var i = 0; i < arr.length; i++) {
    var node = arr[i];

    // Cleanly remove existing nodes from their previous structures.
    if (node.parent && node.parent.children !== arr) {
      DomUtils.removeElement(node);
    }

    if (parent) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }

    node.parent = parent;
  }

  return parent;
};

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":2,"domhandler":36,"htmlparser2":57,"parse5":75,"parse5-htmlparser2-tree-adapter":61}],17:[function(require,module,exports){
var htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');

/**
 * @module cheerio/static
 * @ignore
 */

var serialize = require('dom-serializer').default;
var defaultOptions = require('./options').default;
var flattenOptions = require('./options').flatten;
var select = require('cheerio-select-tmp').select;
var parse5 = require('parse5');
var parse = require('./parse');

/**
 * Create a querying function, bound to a document created from the provided
 * markup. Note that similar to web browser contexts, this operation may
 * introduce `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false`
 * to switch to fragment mode and disable this.
 *
 * See the README section titled "Loading" for additional usage information.
 *
 * @param {string} content - Markup to be loaded.
 * @param {object} [options] - Options for the created instance.
 * @param {boolean} [isDocument] - Allows parser to be switched to fragment mode.
 *
 */
exports.load = function (content, options, isDocument) {
  if (content === null || content === undefined) {
    throw new Error('cheerio.load() expects a string');
  }

  var Cheerio = require('./cheerio');

  options = Object.assign({}, defaultOptions, flattenOptions(options));

  if (isDocument === void 0) isDocument = true;

  var root = parse(content, options, isDocument);

  var initialize = function (selector, context, r, opts) {
    if (!(this instanceof initialize)) {
      return new initialize(selector, context, r, opts);
    }
    opts = Object.assign({}, options, opts);
    return Cheerio.call(this, selector, context, r || root, opts);
  };

  // Ensure that selections created by the "loaded" `initialize` function are
  // true Cheerio instances.
  initialize.prototype = Object.create(Cheerio.prototype);
  initialize.prototype.constructor = initialize;

  // Mimic jQuery's prototype alias for plugin authors.
  initialize.fn = initialize.prototype;

  // Keep a reference to the top-level scope so we can chain methods that implicitly
  // resolve selectors; e.g. $("<span>").(".bar"), which otherwise loses ._root
  initialize.prototype._originalRoot = root;

  // Add in the static methods
  Object.assign(initialize, exports);

  // Add in the root
  initialize._root = root;
  // store options
  initialize._options = options;

  return initialize;
};

/*
 * Helper function
 */

function render(that, dom, options) {
  if (!dom) {
    if (that._root && that._root.children) {
      dom = that._root.children;
    } else {
      return '';
    }
  } else if (typeof dom === 'string') {
    dom = select(dom, that._root, options);
  }

  if (options.xmlMode || options._useHtmlParser2) {
    return serialize(dom, options);
  }

  // `dom-serializer` passes over the special "root" node and renders the
  // node's children in its place. To mimic this behavior with `parse5`, an
  // equivalent operation must be applied to the input array.
  var nodes = 'length' in dom ? dom : [dom];
  for (var index = 0; index < nodes.length; index += 1) {
    if (nodes[index].type === 'root') {
      nodes.splice.apply(nodes, [index, 1].concat(nodes[index].children));
    }
  }

  return parse5.serialize(
    { children: nodes },
    { treeAdapter: htmlparser2Adapter }
  );
}

/**
 * Renders the document.
 *
 * @param {string|cheerio|node} [dom] - Element to render.
 * @param {object} [options] - Options for the renderer.
 */
exports.html = function (dom, options) {
  // be flexible about parameters, sometimes we call html(),
  // with options as only parameter
  // check dom argument for dom element specific properties
  // assume there is no 'length' or 'type' properties in the options object
  if (
    Object.prototype.toString.call(dom) === '[object Object]' &&
    !options &&
    !('length' in dom) &&
    !('type' in dom)
  ) {
    options = dom;
    dom = undefined;
  }

  // sometimes $.html() used without preloading html
  // so fallback non existing options to the default ones
  options = Object.assign(
    {},
    defaultOptions,
    this._options,
    flattenOptions(options || {})
  );

  return render(this, dom, options);
};

/**
 * Render the document as XML.
 *
 * @param {string|cheerio|node} [dom] - Element to render.
 */
exports.xml = function (dom) {
  var options = Object.assign({}, this._options, { xmlMode: true });

  return render(this, dom, options);
};

/**
 * Render the document as text.
 *
 * @param {string|cheerio|node} [elems] - Elements to render.
 */
exports.text = function (elems) {
  if (!elems) {
    elems = this.root();
  }

  var ret = '';
  var len = elems.length;
  var elem;

  for (var i = 0; i < len; i++) {
    elem = elems[i];
    if (elem.type === 'text') ret += elem.data;
    else if (
      elem.children &&
      elem.type !== 'comment' &&
      elem.tagName !== 'script' &&
      elem.tagName !== 'style'
    ) {
      ret += exports.text(elem.children);
    }
  }

  return ret;
};

/**
 * Parses a string into an array of DOM nodes. The `context` argument has no
 * meaning for Cheerio, but it is maintained for API compatibility with jQuery.
 *
 * @param {string} data - Markup that will be parsed.
 * @param {any|boolean} [context] - Will be ignored. If it is a boolean it will be used as the value of `keepScripts`.
 * @param {boolean} [keepScripts] - If false all scripts will be removed.
 *
 * @alias Cheerio.parseHTML
 * @see {@link https://api.jquery.com/jQuery.parseHTML/}
 */
exports.parseHTML = function (data, context, keepScripts) {
  var parsed;

  if (!data || typeof data !== 'string') {
    return null;
  }

  if (typeof context === 'boolean') {
    keepScripts = context;
  }

  parsed = this.load(data, defaultOptions, false);
  if (!keepScripts) {
    parsed('script').remove();
  }

  // The `children` array is used by Cheerio internally to group elements that
  // share the same parents. When nodes created through `parseHTML` are
  // inserted into previously-existing DOM structures, they will be removed
  // from the `children` array. The results of `parseHTML` should remain
  // constant across these operations, so a shallow copy should be returned.
  return parsed.root()[0].children.slice();
};

/**
 * Sometimes you need to work with the top-level root element. To query it, you
 * can use `$.root()`.
 *
 * @alias Cheerio.root
 *
 * @example
 * $.root().append('<ul id="vegetables"></ul>').html();
 * //=> <ul id="fruits">...</ul><ul id="vegetables"></ul>
 */
exports.root = function () {
  return this(this._root);
};

/**
 * Checks to see if the `contained` DOM element is a descendant of the
 * `container` DOM element.
 *
 * @param {node} container - Potential parent node.
 * @param {node} contained - Potential child node.
 * @returns {boolean}
 *
 * @alias Cheerio.contains
 * @see {@link https://api.jquery.com/jQuery.contains}
 */
exports.contains = function (container, contained) {
  // According to the jQuery API, an element does not "contain" itself
  if (contained === container) {
    return false;
  }

  // Step up the descendants, stopping when the root element is reached
  // (signaled by `.parent` returning a reference to the same object)
  while (contained && contained !== contained.parent) {
    contained = contained.parent;
    if (contained === container) {
      return true;
    }
  }

  return false;
};

/**
 * $.merge().
 *
 * @param {Array|cheerio} arr1 - First array.
 * @param {Array|cheerio} arr2 - Second array.
 *
 * @alias Cheerio.merge
 * @see {@link https://api.jquery.com/jQuery.merge}
 */
exports.merge = function (arr1, arr2) {
  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {
    return;
  }
  var newLength = arr1.length + arr2.length;
  for (var i = 0; i < arr2.length; i++) {
    arr1[i + arr1.length] = arr2[i];
  }
  arr1.length = newLength;
  return arr1;
};

function isArrayLike(item) {
  if (Array.isArray(item)) {
    return true;
  }

  if (
    typeof item !== 'object' ||
    !Object.prototype.hasOwnProperty.call(item, 'length') ||
    typeof item.length !== 'number' ||
    item.length < 0
  ) {
    return false;
  }

  for (var i = 0; i < item.length; i++) {
    if (!(i in item)) {
      return false;
    }
  }
  return true;
}

},{"./cheerio":14,"./options":15,"./parse":16,"cheerio-select-tmp":6,"dom-serializer":34,"parse5":75,"parse5-htmlparser2-tree-adapter":61}],18:[function(require,module,exports){
var htmlparser2 = require('htmlparser2');
var domhandler = require('domhandler');

/**
 * Check if the DOM element is a tag.
 *
 * `isTag(type)` includes `<script>` and `<style>` tags.
 *
 * @param {node} type - DOM node to check.
 * @returns {boolean}
 *
 * @private
 */
exports.isTag = htmlparser2.DomUtils.isTag;

/**
 * Convert a string to camel case notation.
 *
 * @param  {string} str - String to be converted.
 * @returns {string}      String in camel case notation.
 *
 * @private
 */
exports.camelCase = function (str) {
  return str.replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
};

/**
 * Convert a string from camel case to "CSS case", where word boundaries are
 * described by hyphens ("-") and all characters are lower-case.
 *
 * @param  {string} str - String to be converted.
 * @returns {string}      String in "CSS case".
 *
 * @private
 */
exports.cssCase = function (str) {
  return str.replace(/[A-Z]/g, '-$&').toLowerCase();
};

/**
 * Iterate over each DOM element without creating intermediary Cheerio
 * instances.
 *
 * This is indented for use internally to avoid otherwise unnecessary memory
 * pressure introduced by _make.
 *
 * @param {cheerio} cheerio - Cheerio object.
 * @param {Function} fn - Function to call.
 */
exports.domEach = function (cheerio, fn) {
  var i = 0;
  var len = cheerio.length;
  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;
  return cheerio;
};

/**
 * Create a deep copy of the given DOM structure.
 * Sets the parents of the copies of the passed nodes to `null`.
 *
 * @param {object} dom - The htmlparser2-compliant DOM structure.
 * @private
 */
exports.cloneDom = function (dom) {
  var clone =
    'length' in dom
      ? Array.prototype.map.call(dom, function (el) {
          return domhandler.cloneNode(el, true);
        })
      : [domhandler.cloneNode(dom, true)];

  // Add a root node around the cloned nodes
  var root = new domhandler.Document(clone);
  clone.forEach(function (node) {
    node.parent = root;
  });

  return clone;
};

/*
 * A simple way to check for HTML strings or ID strings
 */
var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w-]*)$)/;

/**
 * Check if string is HTML.
 *
 * @param {string} str - String to check.
 *
 * @private
 */
exports.isHtml = function (str) {
  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML
  if (
    str.charAt(0) === '<' &&
    str.charAt(str.length - 1) === '>' &&
    str.length >= 3
  ) {
    return true;
  }

  // Run the regex
  var match = quickExpr.exec(str);
  return !!(match && match[1]);
};

},{"domhandler":36,"htmlparser2":57}],19:[function(require,module,exports){
module.exports={
  "name": "cheerio",
  "version": "1.0.0-rc.5",
  "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
  "author": "Matt Mueller <mattmuelle@gmail.com> (mat.io)",
  "license": "MIT",
  "keywords": [
    "htmlparser",
    "jquery",
    "selector",
    "scraper",
    "parser",
    "html"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/cheeriojs/cheerio.git"
  },
  "main": "./index.js",
  "types": "types/index.d.ts",
  "files": [
    "index.js",
    "types/index.d.ts",
    "lib"
  ],
  "engines": {
    "node": ">= 0.12"
  },
  "dependencies": {
    "cheerio-select-tmp": "^0.1.0",
    "dom-serializer": "~1.2.0",
    "domhandler": "^4.0.0",
    "entities": "~2.1.0",
    "htmlparser2": "^6.0.0",
    "parse5": "^6.0.0",
    "parse5-htmlparser2-tree-adapter": "^6.0.0"
  },
  "devDependencies": {
    "@types/node": "^14.14.10",
    "benchmark": "^2.1.4",
    "coveralls": "^3.0.2",
    "eslint": "^7.10.0",
    "eslint-config-prettier": "^7.0.0",
    "eslint-plugin-jsdoc": "^30.6.2",
    "expect.js": "~0.3.1",
    "husky": "^4.2.5",
    "jquery": "^3.0.0",
    "jsdoc": "^3.6.6",
    "jsdom": "^16.2.2",
    "lint-staged": "^10.2.2",
    "mocha": "^8.1.1",
    "nyc": "^15.0.1",
    "prettier": "^2.1.1",
    "tsd": "^0.14.0",
    "xyz": "~4.0.0"
  },
  "scripts": {
    "test": "npm run lint && npm run test:mocha && npm run test:types",
    "test:mocha": "mocha --recursive --reporter dot --parallel",
    "test:types": "tsd",
    "lint": "npm run lint:es && npm run lint:prettier",
    "lint:es": "eslint --ignore-path .prettierignore .",
    "lint:prettier": "npm run format:prettier:raw -- --check",
    "format": "npm run format:es && npm run format:prettier",
    "format:es": "npm run lint:es -- --fix",
    "format:prettier": "npm run format:prettier:raw -- --write",
    "format:prettier:raw": "prettier '**/*.{js,ts,md,json,yml}' --ignore-path .prettierignore",
    "build:docs": "jsdoc --configure jsdoc-config.json",
    "pre-commit": "lint-staged"
  },
  "prettier": {
    "singleQuote": true,
    "tabWidth": 2
  },
  "lint-staged": {
    "*.js": [
      "prettier --write",
      "npm run test:lint -- --fix"
    ],
    "*.{json,md,ts,yml}": [
      "prettier --write"
    ]
  }
}

},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attributeRules = void 0;
var boolbase_1 = require("boolbase");
/**
 * All reserved characters in a regex, used for escaping.
 *
 * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license
 * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794
 */
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function escapeRegex(value) {
    return value.replace(reChars, "\\$&");
}
/**
 * Attribute selectors
 */
exports.attributeRules = {
    equals: function (next, data, _a) {
        var adapter = _a.adapter;
        var name = data.name;
        var value = data.value;
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function (elem) {
                var _a;
                return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) ===
                    value && next(elem);
            };
        }
        return function (elem) {
            return adapter.getAttributeValue(elem, name) === value && next(elem);
        };
    },
    hyphen: function (next, data, _a) {
        var adapter = _a.adapter;
        var name = data.name;
        var value = data.value;
        var len = value.length;
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function hyphenIC(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return (attr != null &&
                    (attr.length === len || attr.charAt(len) === "-") &&
                    attr.substr(0, len).toLowerCase() === value &&
                    next(elem));
            };
        }
        return function hyphen(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return (attr != null &&
                attr.substr(0, len) === value &&
                (attr.length === len || attr.charAt(len) === "-") &&
                next(elem));
        };
    },
    element: function (next, _a, _b) {
        var name = _a.name, value = _a.value, ignoreCase = _a.ignoreCase;
        var adapter = _b.adapter;
        if (/\s/.test(value)) {
            return boolbase_1.falseFunc;
        }
        var regex = new RegExp("(?:^|\\s)" + escapeRegex(value) + "(?:$|\\s)", ignoreCase ? "i" : "");
        return function element(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && regex.test(attr) && next(elem);
        };
    },
    exists: function (next, _a, _b) {
        var name = _a.name;
        var adapter = _b.adapter;
        return function (elem) { return adapter.hasAttrib(elem, name) && next(elem); };
    },
    start: function (next, data, _a) {
        var adapter = _a.adapter;
        var name = data.name;
        var value = data.value;
        var len = value.length;
        if (len === 0) {
            return boolbase_1.falseFunc;
        }
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function (elem) {
                var _a;
                return ((_a = adapter
                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(0, len).toLowerCase()) === value && next(elem);
            };
        }
        return function (elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) &&
                next(elem);
        };
    },
    end: function (next, data, _a) {
        var adapter = _a.adapter;
        var name = data.name;
        var value = data.value;
        var len = -value.length;
        if (len === 0) {
            return boolbase_1.falseFunc;
        }
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function (elem) {
                var _a;
                return ((_a = adapter
                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);
            };
        }
        return function (elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) &&
                next(elem);
        };
    },
    any: function (next, data, _a) {
        var adapter = _a.adapter;
        var name = data.name, value = data.value;
        if (value === "") {
            return boolbase_1.falseFunc;
        }
        if (data.ignoreCase) {
            var regex_1 = new RegExp(escapeRegex(value), "i");
            return function anyIC(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return attr != null && regex_1.test(attr) && next(elem);
            };
        }
        return function (elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) &&
                next(elem);
        };
    },
    not: function (next, data, _a) {
        var adapter = _a.adapter;
        var name = data.name;
        var value = data.value;
        if (value === "") {
            return function (elem) {
                return !!adapter.getAttributeValue(elem, name) && next(elem);
            };
        }
        else if (data.ignoreCase) {
            value = value.toLowerCase();
            return function (elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return (attr != null &&
                    attr.toLocaleLowerCase() !== value &&
                    next(elem));
            };
        }
        return function (elem) {
            return adapter.getAttributeValue(elem, name) !== value && next(elem);
        };
    },
};

},{"boolbase":4}],21:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileToken = exports.compileUnsafe = exports.compile = void 0;
var css_what_1 = require("css-what");
var boolbase_1 = require("boolbase");
var sort_1 = __importDefault(require("./sort"));
var procedure_1 = require("./procedure");
var general_1 = require("./general");
var subselects_1 = require("./pseudo-selectors/subselects");
/**
 * Compiles a selector to an executable function.
 *
 * @param selector Selector to compile.
 * @param options Compilation options.
 * @param context Optional context for the selector.
 */
function compile(selector, options, context) {
    var next = compileUnsafe(selector, options, context);
    return subselects_1.ensureIsTag(next, options.adapter);
}
exports.compile = compile;
function compileUnsafe(selector, options, context) {
    var token = css_what_1.parse(selector, options);
    return compileToken(token, options, context);
}
exports.compileUnsafe = compileUnsafe;
function includesScopePseudo(t) {
    return (t.type === "pseudo" &&
        (t.name === "scope" ||
            (Array.isArray(t.data) &&
                t.data.some(function (data) { return data.some(includesScopePseudo); }))));
}
var DESCENDANT_TOKEN = { type: "descendant" };
var FLEXIBLE_DESCENDANT_TOKEN = {
    type: "_flexibleDescendant",
};
var SCOPE_TOKEN = { type: "pseudo", name: "scope", data: null };
/*
 * CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
 * http://www.w3.org/TR/selectors4/#absolutizing
 */
function absolutize(token, _a, context) {
    var adapter = _a.adapter;
    // TODO Use better check if the context is a document
    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function (e) {
        var parent = adapter.getParent(e);
        return e === subselects_1.PLACEHOLDER_ELEMENT || !!(parent && adapter.isTag(parent));
    }));
    for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {
        var t = token_1[_i];
        if (t.length > 0 && procedure_1.isTraversal(t[0]) && t[0].type !== "descendant") {
            // Don't continue in else branch
        }
        else if (hasContext && !t.some(includesScopePseudo)) {
            t.unshift(DESCENDANT_TOKEN);
        }
        else {
            continue;
        }
        t.unshift(SCOPE_TOKEN);
    }
}
function compileToken(token, options, context) {
    var _a;
    token = token.filter(function (t) { return t.length > 0; });
    token.forEach(sort_1.default);
    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
    var isArrayContext = Array.isArray(context);
    var finalContext = context && (Array.isArray(context) ? context : [context]);
    absolutize(token, options, finalContext);
    var shouldTestNextSiblings = false;
    var query = token
        .map(function (rules) {
        if (rules.length >= 2) {
            var first = rules[0], second = rules[1];
            if (first.type !== "pseudo" || first.name !== "scope") {
                // Ignore
            }
            else if (isArrayContext && second.type === "descendant") {
                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
            }
            else if (second.type === "adjacent" ||
                second.type === "sibling") {
                shouldTestNextSiblings = true;
            }
        }
        return compileRules(rules, options, finalContext);
    })
        .reduce(reduceRules, boolbase_1.falseFunc);
    query.shouldTestNextSiblings = shouldTestNextSiblings;
    return query;
}
exports.compileToken = compileToken;
function compileRules(rules, options, context) {
    var _a;
    return rules.reduce(function (previous, rule) {
        return previous === boolbase_1.falseFunc
            ? boolbase_1.falseFunc
            : general_1.compileGeneralSelector(previous, rule, options, context, compileToken);
    }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.trueFunc);
}
function reduceRules(a, b) {
    if (b === boolbase_1.falseFunc || a === boolbase_1.trueFunc) {
        return a;
    }
    if (a === boolbase_1.falseFunc || b === boolbase_1.trueFunc) {
        return b;
    }
    return function combine(elem) {
        return a(elem) || b(elem);
    };
}

},{"./general":22,"./procedure":24,"./pseudo-selectors/subselects":28,"./sort":29,"boolbase":4,"css-what":30}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileGeneralSelector = void 0;
var attributes_1 = require("./attributes");
var pseudo_selectors_1 = require("./pseudo-selectors");
/*
 * All available rules
 */
function compileGeneralSelector(next, selector, options, context, compileToken) {
    var adapter = options.adapter, equals = options.equals;
    switch (selector.type) {
        case "pseudo-element":
            throw new Error("Pseudo-elements are not supported by css-select");
        case "attribute":
            if (options.strict &&
                (selector.ignoreCase || selector.action === "not")) {
                throw new Error("Unsupported attribute selector");
            }
            return attributes_1.attributeRules[selector.action](next, selector, options);
        case "pseudo":
            return pseudo_selectors_1.compilePseudoSelector(next, selector, options, context, compileToken);
        // Tags
        case "tag":
            return function tag(elem) {
                return adapter.getName(elem) === selector.name && next(elem);
            };
        // Traversal
        case "descendant":
            if (options.cacheResults === false ||
                typeof WeakSet === "undefined") {
                return function descendant(elem) {
                    var current = elem;
                    while ((current = adapter.getParent(current))) {
                        if (adapter.isTag(current) && next(current)) {
                            return true;
                        }
                    }
                    return false;
                };
            }
            // @ts-expect-error `ElementNode` is not extending object
            // eslint-disable-next-line no-case-declarations
            var isFalseCache_1 = new WeakSet();
            return function cachedDescendant(elem) {
                var current = elem;
                while ((current = adapter.getParent(current))) {
                    if (!isFalseCache_1.has(current)) {
                        if (adapter.isTag(current) && next(current)) {
                            return true;
                        }
                        isFalseCache_1.add(current);
                    }
                }
                return false;
            };
        case "_flexibleDescendant":
            // Include element itself, only used while querying an array
            return function flexibleDescendant(elem) {
                var current = elem;
                do {
                    if (adapter.isTag(current) && next(current))
                        return true;
                } while ((current = adapter.getParent(current)));
                return false;
            };
        case "parent":
            if (options.strict) {
                throw new Error("Parent selector isn't part of CSS3");
            }
            return function parent(elem) {
                return adapter
                    .getChildren(elem)
                    .some(function (elem) { return adapter.isTag(elem) && next(elem); });
            };
        case "child":
            return function child(elem) {
                var parent = adapter.getParent(elem);
                return !!parent && adapter.isTag(parent) && next(parent);
            };
        case "sibling":
            return function sibling(elem) {
                var siblings = adapter.getSiblings(elem);
                for (var i = 0; i < siblings.length; i++) {
                    var currentSibling = siblings[i];
                    if (equals(elem, currentSibling))
                        break;
                    if (adapter.isTag(currentSibling) && next(currentSibling)) {
                        return true;
                    }
                }
                return false;
            };
        case "adjacent":
            return function adjacent(elem) {
                var siblings = adapter.getSiblings(elem);
                var lastElement;
                for (var i = 0; i < siblings.length; i++) {
                    var currentSibling = siblings[i];
                    if (equals(elem, currentSibling))
                        break;
                    if (adapter.isTag(currentSibling)) {
                        lastElement = currentSibling;
                    }
                }
                return !!lastElement && next(lastElement);
            };
        case "universal":
            return next;
    }
}
exports.compileGeneralSelector = compileGeneralSelector;

},{"./attributes":20,"./pseudo-selectors":26}],23:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;
var DomUtils = __importStar(require("domutils"));
var boolbase_1 = require("boolbase");
var compile_1 = require("./compile");
var subselects_1 = require("./pseudo-selectors/subselects");
var defaultEquals = function (a, b) { return a === b; };
var defaultOptions = {
    adapter: DomUtils,
    equals: defaultEquals,
};
function convertOptionFormats(options) {
    var _a, _b, _c, _d;
    /*
     * We force one format of options to the other one.
     */
    // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.
    var opts = options !== null && options !== void 0 ? options : defaultOptions;
    // @ts-expect-error Same as above.
    (_a = opts.adapter) !== null && _a !== void 0 ? _a : (opts.adapter = DomUtils);
    // @ts-expect-error `equals` does not exist on `Options`
    (_b = opts.equals) !== null && _b !== void 0 ? _b : (opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals);
    return opts;
}
function wrapCompile(func) {
    return function addAdapter(selector, options, context) {
        var opts = convertOptionFormats(options);
        return func(selector, opts, context);
    };
}
/**
 * Compiles the query, returns a function.
 */
exports.compile = wrapCompile(compile_1.compile);
exports._compileUnsafe = wrapCompile(compile_1.compileUnsafe);
exports._compileToken = wrapCompile(compile_1.compileToken);
function getSelectorFunc(searchFunc) {
    return function select(query, elements, options) {
        var opts = convertOptionFormats(options);
        if (typeof query !== "function") {
            query = compile_1.compileUnsafe(query, opts, elements);
        }
        var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
        return searchFunc(query, filteredElements, opts);
    };
}
function prepareContext(elems, adapter, shouldTestNextSiblings) {
    if (shouldTestNextSiblings === void 0) { shouldTestNextSiblings = false; }
    /*
     * Add siblings if the query requires them.
     * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692
     */
    if (shouldTestNextSiblings) {
        elems = appendNextSiblings(elems, adapter);
    }
    return Array.isArray(elems)
        ? adapter.removeSubsets(elems)
        : adapter.getChildren(elems);
}
exports.prepareContext = prepareContext;
function appendNextSiblings(elem, adapter) {
    // Order matters because jQuery seems to check the children before the siblings
    var elems = Array.isArray(elem) ? elem.slice(0) : [elem];
    for (var i = 0; i < elems.length; i++) {
        var nextSiblings = subselects_1.getNextSiblings(elems[i], adapter);
        elems.push.apply(elems, nextSiblings);
    }
    return elems;
}
/**
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elems Elements to query. If it is an element, its children will be queried..
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns All matching elements.
 *
 */
exports.selectAll = getSelectorFunc(function (query, elems, options) {
    return query === boolbase_1.falseFunc || !elems || elems.length === 0
        ? []
        : options.adapter.findAll(query, elems);
});
/**
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elems Elements to query. If it is an element, its children will be queried..
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns the first match, or null if there was no match.
 */
exports.selectOne = getSelectorFunc(function (query, elems, options) {
    return query === boolbase_1.falseFunc || !elems || elems.length === 0
        ? null
        : options.adapter.findOne(query, elems);
});
/**
 * Tests whether or not an element is matched by query.
 *
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elem The element to test if it matches the query.
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns
 */
function is(elem, query, options) {
    var opts = convertOptionFormats(options);
    return (typeof query === "function" ? query : compile_1.compile(query, opts))(elem);
}
exports.is = is;
/**
 * Alias for selectAll(query, elems, options).
 * @see [compile] for supported selector queries.
 */
exports.default = exports.selectAll;
// Export filters and pseudos to allow users to supply their own.
var pseudo_selectors_1 = require("./pseudo-selectors");
Object.defineProperty(exports, "filters", { enumerable: true, get: function () { return pseudo_selectors_1.filters; } });
Object.defineProperty(exports, "pseudos", { enumerable: true, get: function () { return pseudo_selectors_1.pseudos; } });

},{"./compile":21,"./pseudo-selectors":26,"./pseudo-selectors/subselects":28,"boolbase":4,"domutils":39}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTraversal = exports.procedure = void 0;
exports.procedure = {
    universal: 50,
    tag: 30,
    attribute: 1,
    pseudo: 0,
    "pseudo-element": 0,
    descendant: -1,
    child: -1,
    parent: -1,
    sibling: -1,
    adjacent: -1,
    _flexibleDescendant: -1,
};
function isTraversal(t) {
    return exports.procedure[t.type] < 0;
}
exports.isTraversal = isTraversal;

},{}],25:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filters = void 0;
var nth_check_1 = __importDefault(require("nth-check"));
var boolbase_1 = require("boolbase");
var attributes_1 = require("../attributes");
var checkAttrib = attributes_1.attributeRules.equals;
function getAttribFunc(name, value) {
    var data = {
        type: "attribute",
        action: "equals",
        ignoreCase: false,
        namespace: null,
        name: name,
        value: value,
    };
    return function attribFunc(next, _rule, options) {
        return checkAttrib(next, data, options);
    };
}
function getChildFunc(next, adapter) {
    return function (elem) {
        var parent = adapter.getParent(elem);
        return !!parent && adapter.isTag(parent) && next(elem);
    };
}
exports.filters = {
    contains: function (next, text, _a) {
        var adapter = _a.adapter;
        return function contains(elem) {
            return next(elem) && adapter.getText(elem).includes(text);
        };
    },
    icontains: function (next, text, _a) {
        var adapter = _a.adapter;
        var itext = text.toLowerCase();
        return function icontains(elem) {
            return (next(elem) &&
                adapter.getText(elem).toLowerCase().includes(itext));
        };
    },
    // Location specific methods
    "nth-child": function (next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = nth_check_1.default(rule);
        if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter);
        return function nthChild(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for (var i = 0; i < siblings.length; i++) {
                if (equals(elem, siblings[i]))
                    break;
                if (adapter.isTag(siblings[i])) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-last-child": function (next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = nth_check_1.default(rule);
        if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter);
        return function nthLastChild(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for (var i = siblings.length - 1; i >= 0; i--) {
                if (equals(elem, siblings[i]))
                    break;
                if (adapter.isTag(siblings[i])) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-of-type": function (next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = nth_check_1.default(rule);
        if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter);
        return function nthOfType(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for (var i = 0; i < siblings.length; i++) {
                var currentSibling = siblings[i];
                if (equals(elem, currentSibling))
                    break;
                if (adapter.isTag(currentSibling) &&
                    adapter.getName(currentSibling) === adapter.getName(elem)) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-last-of-type": function (next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = nth_check_1.default(rule);
        if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter);
        return function nthLastOfType(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for (var i = siblings.length - 1; i >= 0; i--) {
                var currentSibling = siblings[i];
                if (equals(elem, currentSibling))
                    break;
                if (adapter.isTag(currentSibling) &&
                    adapter.getName(currentSibling) === adapter.getName(elem)) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    // TODO determine the actual root element
    root: function (next, _rule, _a) {
        var adapter = _a.adapter;
        return function (elem) {
            var parent = adapter.getParent(elem);
            return (parent == null || !adapter.isTag(parent)) && next(elem);
        };
    },
    scope: function (next, rule, options, context) {
        var equals = options.equals;
        if (!context || context.length === 0) {
            // Equivalent to :root
            return exports.filters.root(next, rule, options);
        }
        if (context.length === 1) {
            // NOTE: can't be unpacked, as :has uses this for side-effects
            return function (elem) { return equals(context[0], elem) && next(elem); };
        }
        return function (elem) { return context.includes(elem) && next(elem); };
    },
    // JQuery extensions (others follow as pseudos)
    checkbox: getAttribFunc("type", "checkbox"),
    file: getAttribFunc("type", "file"),
    password: getAttribFunc("type", "password"),
    radio: getAttribFunc("type", "radio"),
    reset: getAttribFunc("type", "reset"),
    image: getAttribFunc("type", "image"),
    submit: getAttribFunc("type", "submit"),
    // Dynamic state pseudos. These depend on optional Adapter methods.
    hover: function (next, _rule, _a) {
        var adapter = _a.adapter;
        var isHovered = adapter.isHovered;
        if (typeof isHovered !== "function") {
            return boolbase_1.falseFunc;
        }
        return function hover(elem) {
            return isHovered(elem) && next(elem);
        };
    },
    visited: function (next, _rule, _a) {
        var adapter = _a.adapter;
        var isVisited = adapter.isVisited;
        if (typeof isVisited !== "function") {
            return boolbase_1.falseFunc;
        }
        return function visited(elem) {
            return isVisited(elem) && next(elem);
        };
    },
    active: function (next, _rule, _a) {
        var adapter = _a.adapter;
        var isActive = adapter.isActive;
        if (typeof isActive !== "function") {
            return boolbase_1.falseFunc;
        }
        return function active(elem) {
            return isActive(elem) && next(elem);
        };
    },
};

},{"../attributes":20,"boolbase":4,"nth-check":59}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compilePseudoSelector = exports.pseudos = exports.filters = void 0;
/*
 * Pseudo selectors
 *
 * Pseudo selectors are available in three forms:
 *
 * 1. Filters are called when the selector is compiled and return a function
 *  that has to return either false, or the results of `next()`.
 * 2. Pseudos are called on execution. They have to return a boolean.
 * 3. Subselects work like filters, but have an embedded selector that will be run separately.
 *
 * Filters are great if you want to do some pre-processing, or change the call order
 * of `next()` and your code.
 * Pseudos should be used to implement simple checks.
 */
var boolbase_1 = require("boolbase");
var filters_1 = require("./filters");
Object.defineProperty(exports, "filters", { enumerable: true, get: function () { return filters_1.filters; } });
var pseudos_1 = require("./pseudos");
Object.defineProperty(exports, "pseudos", { enumerable: true, get: function () { return pseudos_1.pseudos; } });
var subselects_1 = require("./subselects");
// FIXME This is pretty hacky
var reCSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;
function compilePseudoSelector(next, selector, options, context, compileToken) {
    var name = selector.name, data = selector.data;
    if (options.strict && !reCSS3.test(name)) {
        throw new Error(":" + name + " isn't part of CSS3");
    }
    if (Array.isArray(data)) {
        return subselects_1.subselects[name](next, data, options, context, compileToken);
    }
    if (name in filters_1.filters) {
        return filters_1.filters[name](next, data, options, context);
    }
    if (name in pseudos_1.pseudos) {
        var pseudo_1 = pseudos_1.pseudos[name];
        pseudos_1.verifyPseudoArgs(pseudo_1, name, data);
        return pseudo_1 === boolbase_1.falseFunc
            ? boolbase_1.falseFunc
            : next === boolbase_1.trueFunc
                ? function (elem) { return pseudo_1(elem, options, data); }
                : function (elem) { return pseudo_1(elem, options, data) && next(elem); };
    }
    throw new Error("unmatched pseudo-class :" + name);
}
exports.compilePseudoSelector = compilePseudoSelector;

},{"./filters":25,"./pseudos":27,"./subselects":28,"boolbase":4}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyPseudoArgs = exports.pseudos = void 0;
var isLinkTag = namePseudo(["a", "area", "link"]);
// While filters are precompiled, pseudos get called when they are needed
exports.pseudos = {
    empty: function (elem, _a) {
        var adapter = _a.adapter;
        return !adapter.getChildren(elem).some(function (elem) {
            // FIXME: `getText` call is potentially expensive.
            return adapter.isTag(elem) || adapter.getText(elem) !== "";
        });
    },
    "first-child": function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var firstChild = adapter
            .getSiblings(elem)
            .find(function (elem) { return adapter.isTag(elem); });
        return firstChild != null && equals(elem, firstChild);
    },
    "last-child": function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        for (var i = siblings.length - 1; i >= 0; i--) {
            if (equals(elem, siblings[i]))
                return true;
            if (adapter.isTag(siblings[i]))
                break;
        }
        return false;
    },
    "first-of-type": function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for (var i = 0; i < siblings.length; i++) {
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling))
                return true;
            if (adapter.isTag(currentSibling) &&
                adapter.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    "last-of-type": function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for (var i = siblings.length - 1; i >= 0; i--) {
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling))
                return true;
            if (adapter.isTag(currentSibling) &&
                adapter.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    "only-of-type": function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var elemName = adapter.getName(elem);
        return adapter
            .getSiblings(elem)
            .every(function (sibling) {
            return equals(elem, sibling) ||
                !adapter.isTag(sibling) ||
                adapter.getName(sibling) !== elemName;
        });
    },
    "only-child": function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        return adapter
            .getSiblings(elem)
            .every(function (sibling) { return equals(elem, sibling) || !adapter.isTag(sibling); });
    },
    // :matches(a, area, link)[href]
    "any-link": function (elem, options) {
        return (isLinkTag(elem, options) && options.adapter.hasAttrib(elem, "href"));
    },
    // :any-link:not(:visited)
    link: function (elem, options) {
        var _a, _b;
        return (((_b = (_a = options.adapter).isVisited) === null || _b === void 0 ? void 0 : _b.call(_a, elem)) !== true &&
            exports.pseudos["any-link"](elem, options));
    },
    /*
     * Forms
     * to consider: :target
     */
    // :matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)
    selected: function (elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        if (adapter.hasAttrib(elem, "selected"))
            return true;
        else if (adapter.getName(elem) !== "option")
            return false;
        // The first <option> in a <select> is also selected
        var parent = adapter.getParent(elem);
        if (!parent ||
            !adapter.isTag(parent) ||
            adapter.getName(parent) !== "select" ||
            adapter.hasAttrib(parent, "multiple")) {
            return false;
        }
        var siblings = adapter.getChildren(parent);
        var sawElem = false;
        for (var i = 0; i < siblings.length; i++) {
            var currentSibling = siblings[i];
            if (adapter.isTag(currentSibling)) {
                if (equals(elem, currentSibling)) {
                    sawElem = true;
                }
                else if (!sawElem) {
                    return false;
                }
                else if (adapter.hasAttrib(currentSibling, "selected")) {
                    return false;
                }
            }
        }
        return sawElem;
    },
    /*
     * https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
     * :matches(
     *   :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],
     *   optgroup[disabled] > option),
     *  fieldset[disabled] * //TODO not child of first <legend>
     * )
     */
    disabled: function (elem, _a) {
        var adapter = _a.adapter;
        return adapter.hasAttrib(elem, "disabled");
    },
    enabled: function (elem, _a) {
        var adapter = _a.adapter;
        return !adapter.hasAttrib(elem, "disabled");
    },
    // :matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)
    checked: function (elem, options) {
        return (options.adapter.hasAttrib(elem, "checked") ||
            exports.pseudos.selected(elem, options));
    },
    // :matches(input, select, textarea)[required]
    required: function (elem, _a) {
        var adapter = _a.adapter;
        return adapter.hasAttrib(elem, "required");
    },
    // :matches(input, select, textarea):not([required])
    optional: function (elem, _a) {
        var adapter = _a.adapter;
        return !adapter.hasAttrib(elem, "required");
    },
    // JQuery extensions
    // :not(:empty)
    parent: function (elem, options) {
        return !exports.pseudos.empty(elem, options);
    },
    // :matches(h1, h2, h3, h4, h5, h6)
    header: namePseudo(["h1", "h2", "h3", "h4", "h5", "h6"]),
    // :matches(button, input[type=button])
    button: function (elem, _a) {
        var adapter = _a.adapter;
        var name = adapter.getName(elem);
        return (name === "button" ||
            (name === "input" &&
                adapter.getAttributeValue(elem, "type") === "button"));
    },
    // :matches(input, textarea, select, button)
    input: namePseudo(["input", "textarea", "select", "button"]),
    // `input:matches(:not([type!='']), [type='text' i])`
    text: function (elem, _a) {
        var adapter = _a.adapter;
        var type = adapter.getAttributeValue(elem, "type");
        return (adapter.getName(elem) === "input" &&
            (!type || type.toLowerCase() === "text"));
    },
};
function namePseudo(names) {
    if (typeof Set !== "undefined") {
        var nameSet_1 = new Set(names);
        return function (elem, _a) {
            var adapter = _a.adapter;
            return nameSet_1.has(adapter.getName(elem));
        };
    }
    return function (elem, _a) {
        var adapter = _a.adapter;
        return names.includes(adapter.getName(elem));
    };
}
function verifyPseudoArgs(func, name, subselect) {
    if (subselect === null) {
        if (func.length > 2 && name !== "scope") {
            throw new Error("pseudo-selector :" + name + " requires an argument");
        }
    }
    else {
        if (func.length === 2) {
            throw new Error("pseudo-selector :" + name + " doesn't have any arguments");
        }
    }
}
exports.verifyPseudoArgs = verifyPseudoArgs;

},{}],28:[function(require,module,exports){
"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;
var boolbase_1 = require("boolbase");
var procedure_1 = require("../procedure");
/** Used as a placeholder for :has. Will be replaced with the actual element. */
exports.PLACEHOLDER_ELEMENT = {};
function containsTraversal(t) {
    return t.some(procedure_1.isTraversal);
}
function ensureIsTag(next, adapter) {
    if (next === boolbase_1.falseFunc)
        return next;
    return function (elem) { return adapter.isTag(elem) && next(elem); };
}
exports.ensureIsTag = ensureIsTag;
function getNextSiblings(elem, adapter) {
    var siblings = adapter.getSiblings(elem);
    if (siblings.length <= 1)
        return [];
    var elemIndex = siblings.indexOf(elem);
    if (elemIndex < 0 || elemIndex === siblings.length - 1)
        return [];
    return siblings.slice(elemIndex + 1).filter(adapter.isTag);
}
exports.getNextSiblings = getNextSiblings;
/*
 * :not, :has and :matches have to compile selectors
 * doing this in src/pseudos.ts would lead to circular dependencies,
 * so we add them here
 */
exports.subselects = {
    /**
     * `:is` is an alias for `:matches`.
     */
    is: function (next, token, options, context, compileToken) {
        return exports.subselects.matches(next, token, options, context, compileToken);
    },
    matches: function (next, token, options, context, compileToken) {
        var opts = {
            xmlMode: !!options.xmlMode,
            strict: !!options.strict,
            adapter: options.adapter,
            equals: options.equals,
            rootFunc: next,
        };
        return compileToken(token, opts, context);
    },
    not: function (next, token, options, context, compileToken) {
        var opts = {
            xmlMode: !!options.xmlMode,
            strict: !!options.strict,
            adapter: options.adapter,
            equals: options.equals,
        };
        if (opts.strict) {
            if (token.length > 1 || token.some(containsTraversal)) {
                throw new Error("complex selectors in :not aren't allowed in strict mode");
            }
        }
        var func = compileToken(token, opts, context);
        if (func === boolbase_1.falseFunc)
            return next;
        if (func === boolbase_1.trueFunc)
            return boolbase_1.falseFunc;
        return function not(elem) {
            return !func(elem) && next(elem);
        };
    },
    has: function (next, subselect, options, _context, compileToken) {
        var adapter = options.adapter;
        var opts = {
            xmlMode: !!options.xmlMode,
            strict: !!options.strict,
            adapter: adapter,
            equals: options.equals,
        };
        // @ts-expect-error Uses an array as a pointer to the current element (side effects)
        var context = subselect.some(containsTraversal)
            ? [exports.PLACEHOLDER_ELEMENT]
            : undefined;
        var compiled = compileToken(subselect, opts, context);
        if (compiled === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
        if (compiled === boolbase_1.trueFunc) {
            return function (elem) {
                return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
            };
        }
        var hasElement = ensureIsTag(compiled, adapter);
        var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings = _a === void 0 ? false : _a;
        /*
         * `shouldTestNextSiblings` will only be true if the query starts with
         * a traversal (sibling or adjacent). That means we will always have a context.
         */
        if (context) {
            return function (elem) {
                context[0] = elem;
                var childs = adapter.getChildren(elem);
                var nextElements = shouldTestNextSiblings
                    ? __spreadArrays(childs, getNextSiblings(elem, adapter)) : childs;
                return (next(elem) && adapter.existsOne(hasElement, nextElements));
            };
        }
        return function (elem) {
            return next(elem) &&
                adapter.existsOne(hasElement, adapter.getChildren(elem));
        };
    },
};

},{"../procedure":24,"boolbase":4}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var procedure_1 = require("./procedure");
var attributes = {
    exists: 10,
    equals: 8,
    not: 7,
    start: 6,
    end: 6,
    any: 5,
    hyphen: 4,
    element: 4,
};
/**
 * Sort the parts of the passed selector,
 * as there is potential for optimization
 * (some types of selectors are faster than others)
 *
 * @param arr Selector to sort
 */
function sortByProcedure(arr) {
    var procs = arr.map(getProcedure);
    for (var i = 1; i < arr.length; i++) {
        var procNew = procs[i];
        if (procNew < 0)
            continue;
        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {
            var token = arr[j + 1];
            arr[j + 1] = arr[j];
            arr[j] = token;
            procs[j + 1] = procs[j];
            procs[j] = procNew;
        }
    }
}
exports.default = sortByProcedure;
function getProcedure(token) {
    var proc = procedure_1.procedure[token.type];
    if (token.type === "attribute") {
        proc = attributes[token.action];
        if (proc === attributes.equals && token.name === "id") {
            // Prefer ID selectors (eg. #ID)
            proc = 9;
        }
        if (token.ignoreCase) {
            /*
             * IgnoreCase adds some overhead, prefer "normal" token
             * this is a binary operation, to ensure it's still an int
             */
            proc >>= 1;
        }
    }
    else if (token.type === "pseudo") {
        if (!token.data) {
            proc = 3;
        }
        else if (token.name === "has" || token.name === "contains") {
            proc = 0; // Expensive in any case
        }
        else if (Array.isArray(token.data)) {
            // "matches" and "not"
            proc = 0;
            for (var i = 0; i < token.data.length; i++) {
                // TODO better handling of complex selectors
                if (token.data[i].length !== 1)
                    continue;
                var cur = getProcedure(token.data[i][0]);
                // Avoid executing :has or :contains
                if (cur === 0) {
                    proc = 0;
                    break;
                }
                if (cur > proc)
                    proc = cur;
            }
            if (token.data.length > 1 && proc > 0)
                proc -= 1;
        }
        else {
            proc = 1;
        }
    }
    return proc;
}

},{"./procedure":24}],30:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = exports.parse = void 0;
__exportStar(require("./parse"), exports);
var parse_1 = require("./parse");
Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return __importDefault(parse_1).default; } });
var stringify_1 = require("./stringify");
Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return __importDefault(stringify_1).default; } });

},{"./parse":31,"./stringify":32}],31:[function(require,module,exports){
"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTraversal = void 0;
var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
// Modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
var reAttr = /^\s*(?:(\*|[-\w]*)\|)?((?:\\.|[\w\u00b0-\uFFFF-])+)\s*(?:(\S?)=\s*(?:(['"])((?:[^\\]|\\[^])*?)\4|(#?(?:\\.|[\w\u00b0-\uFFFF-])*)|)|)\s*([iI])?\]/;
var actionTypes = {
    undefined: "exists",
    "": "equals",
    "~": "element",
    "^": "start",
    $: "end",
    "*": "any",
    "!": "not",
    "|": "hyphen",
};
var Traversals = {
    ">": "child",
    "<": "parent",
    "~": "sibling",
    "+": "adjacent",
};
var attribSelectors = {
    "#": ["id", "equals"],
    ".": ["class", "element"],
};
// Pseudos, whose data property is parsed as well.
var unpackPseudos = new Set([
    "has",
    "not",
    "matches",
    "is",
    "host",
    "host-context",
]);
var traversalNames = new Set(__spreadArrays([
    "descendant"
], Object.keys(Traversals).map(function (k) { return Traversals[k]; })));
/**
 * Checks whether a specific selector is a traversal.
 * This is useful eg. in swapping the order of elements that
 * are not traversals.
 *
 * @param selector Selector to check.
 */
function isTraversal(selector) {
    return traversalNames.has(selector.type);
}
exports.isTraversal = isTraversal;
var stripQuotesFromPseudos = new Set(["contains", "icontains"]);
var quotes = new Set(['"', "'"]);
// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152
function funescape(_, escaped, escapedWhitespace) {
    var high = parseInt(escaped, 16) - 0x10000;
    // NaN means non-codepoint
    return high !== high || escapedWhitespace
        ? escaped
        : high < 0
            ? // BMP codepoint
                String.fromCharCode(high + 0x10000)
            : // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);
}
function unescapeCSS(str) {
    return str.replace(reEscape, funescape);
}
function isWhitespace(c) {
    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}
/**
 * Parses `selector`, optionally with the passed `options`.
 *
 * @param selector Selector to parse.
 * @param options Options for parsing.
 * @returns Returns a two-dimensional array.
 * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),
 * the second contains the relevant tokens for that selector.
 */
function parse(selector, options) {
    var subselects = [];
    var endIndex = parseSelector(subselects, "" + selector, options, 0);
    if (endIndex < selector.length) {
        throw new Error("Unmatched selector: " + selector.slice(endIndex));
    }
    return subselects;
}
exports.default = parse;
function parseSelector(subselects, selector, options, selectorIndex) {
    var _a, _b;
    if (options === void 0) { options = {}; }
    var tokens = [];
    var sawWS = false;
    function getName(offset) {
        var match = selector.slice(selectorIndex + offset).match(reName);
        if (!match) {
            throw new Error("Expected name, found " + selector.slice(selectorIndex));
        }
        var name = match[0];
        selectorIndex += offset + name.length;
        return unescapeCSS(name);
    }
    function stripWhitespace(offset) {
        while (isWhitespace(selector.charAt(selectorIndex + offset)))
            offset++;
        selectorIndex += offset;
    }
    function isEscaped(pos) {
        var slashCount = 0;
        while (selector.charAt(--pos) === "\\")
            slashCount++;
        return (slashCount & 1) === 1;
    }
    function ensureNotTraversal() {
        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
            throw new Error("Did not expect successive traversals.");
        }
    }
    stripWhitespace(0);
    while (selector !== "") {
        var firstChar = selector.charAt(selectorIndex);
        if (isWhitespace(firstChar)) {
            sawWS = true;
            stripWhitespace(1);
        }
        else if (firstChar in Traversals) {
            ensureNotTraversal();
            tokens.push({ type: Traversals[firstChar] });
            sawWS = false;
            stripWhitespace(1);
        }
        else if (firstChar === ",") {
            if (tokens.length === 0) {
                throw new Error("Empty sub-selector");
            }
            subselects.push(tokens);
            tokens = [];
            sawWS = false;
            stripWhitespace(1);
        }
        else {
            if (sawWS) {
                ensureNotTraversal();
                tokens.push({ type: "descendant" });
                sawWS = false;
            }
            if (firstChar in attribSelectors) {
                var _c = attribSelectors[firstChar], name_1 = _c[0], action = _c[1];
                tokens.push({
                    type: "attribute",
                    name: name_1,
                    action: action,
                    value: getName(1),
                    ignoreCase: false,
                    namespace: null,
                });
            }
            else if (firstChar === "[") {
                var attributeMatch = selector
                    .slice(selectorIndex + 1)
                    .match(reAttr);
                if (!attributeMatch) {
                    throw new Error("Malformed attribute selector: " + selector.slice(selectorIndex));
                }
                var completeSelector = attributeMatch[0], _d = attributeMatch[1], namespace = _d === void 0 ? null : _d, baseName = attributeMatch[2], actionType = attributeMatch[3], _e = attributeMatch[5], quotedValue = _e === void 0 ? "" : _e, _f = attributeMatch[6], value = _f === void 0 ? quotedValue : _f, ignoreCase = attributeMatch[7];
                selectorIndex += completeSelector.length + 1;
                var name_2 = unescapeCSS(baseName);
                if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) {
                    name_2 = name_2.toLowerCase();
                }
                tokens.push({
                    type: "attribute",
                    name: name_2,
                    action: actionTypes[actionType],
                    value: unescapeCSS(value),
                    namespace: namespace,
                    ignoreCase: !!ignoreCase,
                });
            }
            else if (firstChar === ":") {
                if (selector.charAt(selectorIndex + 1) === ":") {
                    tokens.push({
                        type: "pseudo-element",
                        name: getName(2).toLowerCase(),
                    });
                    continue;
                }
                var name_3 = getName(1).toLowerCase();
                var data = null;
                if (selector.charAt(selectorIndex) === "(") {
                    if (unpackPseudos.has(name_3)) {
                        if (quotes.has(selector.charAt(selectorIndex + 1))) {
                            throw new Error("Pseudo-selector " + name_3 + " cannot be quoted");
                        }
                        data = [];
                        selectorIndex = parseSelector(data, selector, options, selectorIndex + 1);
                        if (selector.charAt(selectorIndex) !== ")") {
                            throw new Error("Missing closing parenthesis in :" + name_3 + " (" + selector + ")");
                        }
                        selectorIndex += 1;
                    }
                    else {
                        selectorIndex += 1;
                        var start = selectorIndex;
                        var counter = 1;
                        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
                            if (selector.charAt(selectorIndex) === "(" &&
                                !isEscaped(selectorIndex)) {
                                counter++;
                            }
                            else if (selector.charAt(selectorIndex) === ")" &&
                                !isEscaped(selectorIndex)) {
                                counter--;
                            }
                        }
                        if (counter) {
                            throw new Error("Parenthesis not matched");
                        }
                        data = selector.slice(start, selectorIndex - 1);
                        if (stripQuotesFromPseudos.has(name_3)) {
                            var quot = data.charAt(0);
                            if (quot === data.slice(-1) && quotes.has(quot)) {
                                data = data.slice(1, -1);
                            }
                            data = unescapeCSS(data);
                        }
                    }
                }
                tokens.push({ type: "pseudo", name: name_3, data: data });
            }
            else {
                var namespace = null;
                var name_4 = void 0;
                if (firstChar === "*") {
                    selectorIndex += 1;
                    name_4 = "*";
                }
                else if (reName.test(selector.slice(selectorIndex))) {
                    name_4 = getName(0);
                }
                else {
                    /*
                     * We have finished parsing the selector.
                     * Remove descendant tokens at the end if they exist,
                     * and return the last index, so that parsing can be
                     * picked up from here.
                     */
                    if (tokens.length &&
                        tokens[tokens.length - 1].type === "descendant") {
                        tokens.pop();
                    }
                    addToken(subselects, tokens);
                    return selectorIndex;
                }
                if (selector.charAt(selectorIndex) === "|") {
                    namespace = name_4;
                    if (selector.charAt(selectorIndex + 1) === "*") {
                        name_4 = "*";
                        selectorIndex += 2;
                    }
                    else {
                        name_4 = getName(1);
                    }
                }
                if (name_4 === "*") {
                    tokens.push({ type: "universal", namespace: namespace });
                }
                else {
                    if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) {
                        name_4 = name_4.toLowerCase();
                    }
                    tokens.push({ type: "tag", name: name_4, namespace: namespace });
                }
            }
        }
    }
    addToken(subselects, tokens);
    return selectorIndex;
}
function addToken(subselects, tokens) {
    if (subselects.length > 0 && tokens.length === 0) {
        throw new Error("Empty sub-selector");
    }
    subselects.push(tokens);
}

},{}],32:[function(require,module,exports){
"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var actionTypes = {
    equals: "",
    element: "~",
    start: "^",
    end: "$",
    any: "*",
    not: "!",
    hyphen: "|",
};
var charsToEscape = new Set(__spreadArrays(Object.keys(actionTypes)
    .map(function (typeKey) { return actionTypes[typeKey]; })
    .filter(Boolean), [
    ":",
    "[",
    "]",
    " ",
    "\\",
    "(",
    ")",
]));
/**
 * Turns `selector` back into a string.
 *
 * @param selector Selector to stringify.
 */
function stringify(selector) {
    return selector.map(stringifySubselector).join(", ");
}
exports.default = stringify;
function stringifySubselector(token) {
    return token.map(stringifyToken).join("");
}
function stringifyToken(token) {
    switch (token.type) {
        // Simple types
        case "child":
            return " > ";
        case "parent":
            return " < ";
        case "sibling":
            return " ~ ";
        case "adjacent":
            return " + ";
        case "descendant":
            return " ";
        case "universal":
            return getNamespace(token.namespace) + "*";
        case "tag":
            return getNamespacedName(token);
        case "pseudo-element":
            return "::" + escapeName(token.name);
        case "pseudo":
            if (token.data === null)
                return ":" + escapeName(token.name);
            if (typeof token.data === "string") {
                return ":" + escapeName(token.name) + "(" + escapeName(token.data) + ")";
            }
            return ":" + escapeName(token.name) + "(" + stringify(token.data) + ")";
        case "attribute": {
            if (token.name === "id" &&
                token.action === "equals" &&
                !token.ignoreCase &&
                !token.namespace) {
                return "#" + escapeName(token.value);
            }
            if (token.name === "class" &&
                token.action === "element" &&
                !token.ignoreCase &&
                !token.namespace) {
                return "." + escapeName(token.value);
            }
            var name_1 = getNamespacedName(token);
            if (token.action === "exists") {
                return "[" + name_1 + "]";
            }
            return "[" + name_1 + actionTypes[token.action] + "='" + escapeName(token.value) + "'" + (token.ignoreCase ? "i" : "") + "]";
        }
    }
}
function getNamespacedName(token) {
    return "" + getNamespace(token.namespace) + escapeName(token.name);
}
function getNamespace(namespace) {
    return namespace
        ? (namespace === "*" ? "*" : escapeName(namespace)) + "|"
        : "";
}
function escapeName(str) {
    return str
        .split("")
        .map(function (c) { return (charsToEscape.has(c) ? "\\" + c : c); })
        .join("");
}

},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attributeNames = exports.elementNames = void 0;
exports.elementNames = new Map([
    ["altglyph", "altGlyph"],
    ["altglyphdef", "altGlyphDef"],
    ["altglyphitem", "altGlyphItem"],
    ["animatecolor", "animateColor"],
    ["animatemotion", "animateMotion"],
    ["animatetransform", "animateTransform"],
    ["clippath", "clipPath"],
    ["feblend", "feBlend"],
    ["fecolormatrix", "feColorMatrix"],
    ["fecomponenttransfer", "feComponentTransfer"],
    ["fecomposite", "feComposite"],
    ["feconvolvematrix", "feConvolveMatrix"],
    ["fediffuselighting", "feDiffuseLighting"],
    ["fedisplacementmap", "feDisplacementMap"],
    ["fedistantlight", "feDistantLight"],
    ["fedropshadow", "feDropShadow"],
    ["feflood", "feFlood"],
    ["fefunca", "feFuncA"],
    ["fefuncb", "feFuncB"],
    ["fefuncg", "feFuncG"],
    ["fefuncr", "feFuncR"],
    ["fegaussianblur", "feGaussianBlur"],
    ["feimage", "feImage"],
    ["femerge", "feMerge"],
    ["femergenode", "feMergeNode"],
    ["femorphology", "feMorphology"],
    ["feoffset", "feOffset"],
    ["fepointlight", "fePointLight"],
    ["fespecularlighting", "feSpecularLighting"],
    ["fespotlight", "feSpotLight"],
    ["fetile", "feTile"],
    ["feturbulence", "feTurbulence"],
    ["foreignobject", "foreignObject"],
    ["glyphref", "glyphRef"],
    ["lineargradient", "linearGradient"],
    ["radialgradient", "radialGradient"],
    ["textpath", "textPath"],
]);
exports.attributeNames = new Map([
    ["definitionurl", "definitionURL"],
    ["attributename", "attributeName"],
    ["attributetype", "attributeType"],
    ["basefrequency", "baseFrequency"],
    ["baseprofile", "baseProfile"],
    ["calcmode", "calcMode"],
    ["clippathunits", "clipPathUnits"],
    ["diffuseconstant", "diffuseConstant"],
    ["edgemode", "edgeMode"],
    ["filterunits", "filterUnits"],
    ["glyphref", "glyphRef"],
    ["gradienttransform", "gradientTransform"],
    ["gradientunits", "gradientUnits"],
    ["kernelmatrix", "kernelMatrix"],
    ["kernelunitlength", "kernelUnitLength"],
    ["keypoints", "keyPoints"],
    ["keysplines", "keySplines"],
    ["keytimes", "keyTimes"],
    ["lengthadjust", "lengthAdjust"],
    ["limitingconeangle", "limitingConeAngle"],
    ["markerheight", "markerHeight"],
    ["markerunits", "markerUnits"],
    ["markerwidth", "markerWidth"],
    ["maskcontentunits", "maskContentUnits"],
    ["maskunits", "maskUnits"],
    ["numoctaves", "numOctaves"],
    ["pathlength", "pathLength"],
    ["patterncontentunits", "patternContentUnits"],
    ["patterntransform", "patternTransform"],
    ["patternunits", "patternUnits"],
    ["pointsatx", "pointsAtX"],
    ["pointsaty", "pointsAtY"],
    ["pointsatz", "pointsAtZ"],
    ["preservealpha", "preserveAlpha"],
    ["preserveaspectratio", "preserveAspectRatio"],
    ["primitiveunits", "primitiveUnits"],
    ["refx", "refX"],
    ["refy", "refY"],
    ["repeatcount", "repeatCount"],
    ["repeatdur", "repeatDur"],
    ["requiredextensions", "requiredExtensions"],
    ["requiredfeatures", "requiredFeatures"],
    ["specularconstant", "specularConstant"],
    ["specularexponent", "specularExponent"],
    ["spreadmethod", "spreadMethod"],
    ["startoffset", "startOffset"],
    ["stddeviation", "stdDeviation"],
    ["stitchtiles", "stitchTiles"],
    ["surfacescale", "surfaceScale"],
    ["systemlanguage", "systemLanguage"],
    ["tablevalues", "tableValues"],
    ["targetx", "targetX"],
    ["targety", "targetY"],
    ["textlength", "textLength"],
    ["viewbox", "viewBox"],
    ["viewtarget", "viewTarget"],
    ["xchannelselector", "xChannelSelector"],
    ["ychannelselector", "yChannelSelector"],
    ["zoomandpan", "zoomAndPan"],
]);

},{}],34:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Module dependencies
 */
var ElementType = __importStar(require("domelementtype"));
var entities_1 = require("entities");
/*
 * Mixed-case SVG and MathML tags & attributes
 * recognized by the HTML parser, see
 * https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
 */
var foreignNames_1 = require("./foreignNames");
var unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript",
]);
/**
 * Format attributes
 */
function formatAttributes(attributes, opts) {
    if (!attributes)
        return;
    return Object.keys(attributes)
        .map(function (key) {
        var _a, _b;
        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") {
            /* Fix up mixed-case attribute names */
            key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        }
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key;
        }
        return key + "=\"" + (opts.decodeEntities ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + "\"";
    })
        .join(" ");
}
/**
 * Self-enclosing tags
 */
var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
]);
/**
 * Renders a DOM node or an array of DOM nodes to a string.
 *
 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
 *
 * @param node Node to be rendered.
 * @param options Changes serialization behavior
 */
function render(node, options) {
    if (options === void 0) { options = {}; }
    // TODO: This is a bit hacky.
    var nodes = Array.isArray(node) || node.cheerio ? node : [node];
    var output = "";
    for (var i = 0; i < nodes.length; i++) {
        output += renderNode(nodes[i], options);
    }
    return output;
}
exports.default = render;
function renderNode(node, options) {
    switch (node.type) {
        case ElementType.Root:
            return render(node.children, options);
        case ElementType.Directive:
        case ElementType.Doctype:
            return renderDirective(node);
        case ElementType.Comment:
            return renderComment(node);
        case ElementType.CDATA:
            return renderCdata(node);
        case ElementType.Script:
        case ElementType.Style:
        case ElementType.Tag:
            return renderTag(node, options);
        case ElementType.Text:
            return renderText(node, options);
    }
}
var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title",
]);
var foreignElements = new Set(["svg", "math"]);
function renderTag(elem, opts) {
    var _a;
    // Handle SVG / MathML in HTML
    if (opts.xmlMode === "foreign") {
        /* Fix up mixed-case element names */
        elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        /* Exit foreign mode at integration points */
        if (elem.parent &&
            foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = __assign(__assign({}, opts), { xmlMode: false });
        }
    }
    if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
    }
    var tag = "<" + elem.name;
    var attribs = formatAttributes(elem.attribs, opts);
    if (attribs) {
        tag += " " + attribs;
    }
    if (elem.children.length === 0 &&
        (opts.xmlMode
            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
                opts.selfClosingTags !== false
            : // User explicitly asked for self-closing tags, even in HTML mode
                opts.selfClosingTags && singleTag.has(elem.name))) {
        if (!opts.xmlMode)
            tag += " ";
        tag += "/>";
    }
    else {
        tag += ">";
        if (elem.children.length > 0) {
            tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</" + elem.name + ">";
        }
    }
    return tag;
}
function renderDirective(elem) {
    return "<" + elem.data + ">";
}
function renderText(elem, opts) {
    var data = elem.data || "";
    // If entities weren't decoded, no need to encode them back
    if (opts.decodeEntities &&
        !(elem.parent && unencodedElements.has(elem.parent.name))) {
        data = entities_1.encodeXML(data);
    }
    return data;
}
function renderCdata(elem) {
    return "<![CDATA[" + elem.children[0].data + "]]>";
}
function renderComment(elem) {
    return "<!--" + elem.data + "-->";
}

},{"./foreignNames":33,"domelementtype":35,"entities":49}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = void 0;
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */
function isTag(elem) {
    return (elem.type === "tag" /* Tag */ ||
        elem.type === "script" /* Script */ ||
        elem.type === "style" /* Style */);
}
exports.isTag = isTag;
// Exports for backwards compatibility
/** Type for the root element of a document */
exports.Root = "root" /* Root */;
/** Type for Text */
exports.Text = "text" /* Text */;
/** Type for <? ... ?> */
exports.Directive = "directive" /* Directive */;
/** Type for <!-- ... --> */
exports.Comment = "comment" /* Comment */;
/** Type for <script> tags */
exports.Script = "script" /* Script */;
/** Type for <style> tags */
exports.Style = "style" /* Style */;
/** Type for Any tag */
exports.Tag = "tag" /* Tag */;
/** Type for <![CDATA[ ... ]]> */
exports.CDATA = "cdata" /* CDATA */;
/** Type for <!doctype ...> */
exports.Doctype = "doctype" /* Doctype */;

},{}],36:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomHandler = void 0;
var node_1 = require("./node");
__exportStar(require("./node"), exports);
var reWhitespace = /\s+/g;
// Default options
var defaultOpts = {
    normalizeWhitespace: false,
    withStartIndices: false,
    withEndIndices: false,
};
var DomHandler = /** @class */ (function () {
    /**
     * @param callback Called once parsing has completed.
     * @param options Settings for the handler.
     * @param elementCB Callback whenever a tag is closed.
     */
    function DomHandler(callback, options, elementCB) {
        /** The elements of the DOM */
        this.dom = [];
        /** The root element for the DOM */
        this.root = new node_1.Document(this.dom);
        /** Indicated whether parsing has been completed. */
        this.done = false;
        /** Stack of open tags. */
        this.tagStack = [this.root];
        /** A data node that is still being written to. */
        this.lastNode = null;
        /** Reference to the parser instance. Used for location information. */
        this.parser = null;
        // Make it possible to skip arguments, for backwards-compatibility
        if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
        }
        if (typeof callback === "object") {
            options = callback;
            callback = undefined;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options !== null && options !== void 0 ? options : defaultOpts;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    DomHandler.prototype.onparserinit = function (parser) {
        this.parser = parser;
    };
    // Resets the handler back to starting state
    DomHandler.prototype.onreset = function () {
        var _a;
        this.dom = [];
        this.root = new node_1.Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = (_a = this.parser) !== null && _a !== void 0 ? _a : null;
    };
    // Signals the handler that parsing is done
    DomHandler.prototype.onend = function () {
        if (this.done)
            return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
    };
    DomHandler.prototype.onerror = function (error) {
        this.handleCallback(error);
    };
    DomHandler.prototype.onclosetag = function () {
        this.lastNode = null;
        var elem = this.tagStack.pop();
        if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
        }
        if (this.elementCB)
            this.elementCB(elem);
    };
    DomHandler.prototype.onopentag = function (name, attribs) {
        var element = new node_1.Element(name, attribs);
        this.addNode(element);
        this.tagStack.push(element);
    };
    DomHandler.prototype.ontext = function (data) {
        var normalizeWhitespace = this.options.normalizeWhitespace;
        var lastNode = this.lastNode;
        if (lastNode && lastNode.type === "text" /* Text */) {
            if (normalizeWhitespace) {
                lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
            }
            else {
                lastNode.data += data;
            }
        }
        else {
            if (normalizeWhitespace) {
                data = data.replace(reWhitespace, " ");
            }
            var node = new node_1.Text(data);
            this.addNode(node);
            this.lastNode = node;
        }
    };
    DomHandler.prototype.oncomment = function (data) {
        if (this.lastNode && this.lastNode.type === "comment" /* Comment */) {
            this.lastNode.data += data;
            return;
        }
        var node = new node_1.Comment(data);
        this.addNode(node);
        this.lastNode = node;
    };
    DomHandler.prototype.oncommentend = function () {
        this.lastNode = null;
    };
    DomHandler.prototype.oncdatastart = function () {
        var text = new node_1.Text("");
        var node = new node_1.NodeWithChildren("cdata" /* CDATA */, [text]);
        this.addNode(node);
        text.parent = node;
        this.lastNode = text;
    };
    DomHandler.prototype.oncdataend = function () {
        this.lastNode = null;
    };
    DomHandler.prototype.onprocessinginstruction = function (name, data) {
        var node = new node_1.ProcessingInstruction(name, data);
        this.addNode(node);
    };
    DomHandler.prototype.handleCallback = function (error) {
        if (typeof this.callback === "function") {
            this.callback(error, this.dom);
        }
        else if (error) {
            throw error;
        }
    };
    DomHandler.prototype.addNode = function (node) {
        var parent = this.tagStack[this.tagStack.length - 1];
        var previousSibling = parent.children[parent.children.length - 1];
        if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
        }
        parent.children.push(node);
        if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
        }
        node.parent = parent;
        this.lastNode = null;
    };
    DomHandler.prototype.addDataNode = function (node) {
        this.addNode(node);
        this.lastNode = node;
    };
    return DomHandler;
}());
exports.DomHandler = DomHandler;
exports.default = DomHandler;

},{"./node":37}],37:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloneNode = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
var nodeTypes = new Map([
    ["tag" /* Tag */, 1],
    ["script" /* Script */, 1],
    ["style" /* Style */, 1],
    ["directive" /* Directive */, 1],
    ["text" /* Text */, 3],
    ["cdata" /* CDATA */, 4],
    ["comment" /* Comment */, 8],
    ["root" /* Root */, 9],
]);
/**
 * This object will be used as the prototype for Nodes when creating a
 * DOM-Level-1-compliant structure.
 */
var Node = /** @class */ (function () {
    /**
     *
     * @param type The type of the node.
     */
    function Node(type) {
        this.type = type;
        /** Parent of the node */
        this.parent = null;
        /** Previous sibling */
        this.prev = null;
        /** Next sibling */
        this.next = null;
        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
        this.startIndex = null;
        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
        this.endIndex = null;
    }
    Object.defineProperty(Node.prototype, "nodeType", {
        // Read-only aliases
        get: function () {
            var _a;
            return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "parentNode", {
        // Read-write aliases for properties
        get: function () {
            return this.parent;
        },
        set: function (parent) {
            this.parent = parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "previousSibling", {
        get: function () {
            return this.prev;
        },
        set: function (prev) {
            this.prev = prev;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "nextSibling", {
        get: function () {
            return this.next;
        },
        set: function (next) {
            this.next = next;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Clone this node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */
    Node.prototype.cloneNode = function (recursive) {
        if (recursive === void 0) { recursive = false; }
        return cloneNode(this, recursive);
    };
    return Node;
}());
exports.Node = Node;
var DataNode = /** @class */ (function (_super) {
    __extends(DataNode, _super);
    /**
     * @param type The type of the node
     * @param data The content of the data node
     */
    function DataNode(type, data) {
        var _this = _super.call(this, type) || this;
        _this.data = data;
        return _this;
    }
    Object.defineProperty(DataNode.prototype, "nodeValue", {
        get: function () {
            return this.data;
        },
        set: function (data) {
            this.data = data;
        },
        enumerable: false,
        configurable: true
    });
    return DataNode;
}(Node));
exports.DataNode = DataNode;
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(data) {
        return _super.call(this, "text" /* Text */, data) || this;
    }
    return Text;
}(DataNode));
exports.Text = Text;
var Comment = /** @class */ (function (_super) {
    __extends(Comment, _super);
    function Comment(data) {
        return _super.call(this, "comment" /* Comment */, data) || this;
    }
    return Comment;
}(DataNode));
exports.Comment = Comment;
var ProcessingInstruction = /** @class */ (function (_super) {
    __extends(ProcessingInstruction, _super);
    function ProcessingInstruction(name, data) {
        var _this = _super.call(this, "directive" /* Directive */, data) || this;
        _this.name = name;
        return _this;
    }
    return ProcessingInstruction;
}(DataNode));
exports.ProcessingInstruction = ProcessingInstruction;
/**
 * A `Node` that can have children.
 */
var NodeWithChildren = /** @class */ (function (_super) {
    __extends(NodeWithChildren, _super);
    /**
     * @param type Type of the node.
     * @param children Children of the node. Only certain node types can have children.
     */
    function NodeWithChildren(type, children) {
        var _this = _super.call(this, type) || this;
        _this.children = children;
        return _this;
    }
    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
        // Aliases
        get: function () {
            var _a;
            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
        get: function () {
            return this.children.length > 0
                ? this.children[this.children.length - 1]
                : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
        get: function () {
            return this.children;
        },
        set: function (children) {
            this.children = children;
        },
        enumerable: false,
        configurable: true
    });
    return NodeWithChildren;
}(Node));
exports.NodeWithChildren = NodeWithChildren;
var Document = /** @class */ (function (_super) {
    __extends(Document, _super);
    function Document(children) {
        return _super.call(this, "root" /* Root */, children) || this;
    }
    return Document;
}(NodeWithChildren));
exports.Document = Document;
var Element = /** @class */ (function (_super) {
    __extends(Element, _super);
    /**
     * @param name Name of the tag, eg. `div`, `span`.
     * @param attribs Object mapping attribute names to attribute values.
     * @param children Children of the node.
     */
    function Element(name, attribs, children) {
        if (children === void 0) { children = []; }
        var _this = _super.call(this, name === "script"
            ? "script" /* Script */
            : name === "style"
                ? "style" /* Style */
                : "tag" /* Tag */, children) || this;
        _this.name = name;
        _this.attribs = attribs;
        _this.attribs = attribs;
        return _this;
    }
    Object.defineProperty(Element.prototype, "tagName", {
        // DOM Level 1 aliases
        get: function () {
            return this.name;
        },
        set: function (name) {
            this.name = name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "attributes", {
        get: function () {
            var _this = this;
            return Object.keys(this.attribs).map(function (name) {
                var _a, _b;
                return ({
                    name: name,
                    value: _this.attribs[name],
                    namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                    prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name],
                });
            });
        },
        enumerable: false,
        configurable: true
    });
    return Element;
}(NodeWithChildren));
exports.Element = Element;
/**
 * Clone a node, and optionally its children.
 *
 * @param recursive Clone child nodes as well.
 * @returns A clone of the node.
 */
function cloneNode(node, recursive) {
    if (recursive === void 0) { recursive = false; }
    var result;
    switch (node.type) {
        case "text" /* Text */:
            result = new Text(node.data);
            break;
        case "directive" /* Directive */: {
            var instr = node;
            result = new ProcessingInstruction(instr.name, instr.data);
            if (instr["x-name"] != null) {
                result["x-name"] = instr["x-name"];
                result["x-publicId"] = instr["x-publicId"];
                result["x-systemId"] = instr["x-systemId"];
            }
            break;
        }
        case "comment" /* Comment */:
            result = new Comment(node.data);
            break;
        case "tag" /* Tag */:
        case "script" /* Script */:
        case "style" /* Style */: {
            var elem = node;
            var children = recursive ? cloneChildren(elem.children) : [];
            var clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
            children.forEach(function (child) { return (child.parent = clone_1); });
            if (elem["x-attribsNamespace"]) {
                clone_1["x-attribsNamespace"] = __assign({}, elem["x-attribsNamespace"]);
            }
            if (elem["x-attribsPrefix"]) {
                clone_1["x-attribsPrefix"] = __assign({}, elem["x-attribsPrefix"]);
            }
            result = clone_1;
            break;
        }
        case "cdata" /* CDATA */: {
            var cdata = node;
            var children = recursive ? cloneChildren(cdata.children) : [];
            var clone_2 = new NodeWithChildren(node.type, children);
            children.forEach(function (child) { return (child.parent = clone_2); });
            result = clone_2;
            break;
        }
        case "root" /* Root */: {
            var doc = node;
            var children = recursive ? cloneChildren(doc.children) : [];
            var clone_3 = new Document(children);
            children.forEach(function (child) { return (child.parent = clone_3); });
            if (doc["x-mode"]) {
                clone_3["x-mode"] = doc["x-mode"];
            }
            result = clone_3;
            break;
        }
        case "doctype" /* Doctype */: {
            // This type isn't used yet.
            throw new Error("Not implemented yet: ElementType.Doctype case");
        }
    }
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    return result;
}
exports.cloneNode = cloneNode;
function cloneChildren(childs) {
    var children = childs.map(function (child) { return cloneNode(child, true); });
    for (var i = 1; i < children.length; i++) {
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
    }
    return children;
}

},{}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
var tagtypes_1 = require("./tagtypes");
/**
 * Given an array of nodes, remove any member that is contained by another.
 *
 * @param nodes Nodes to filter.
 * @returns Remaining nodes that aren't subtrees of each other.
 */
function removeSubsets(nodes) {
    var idx = nodes.length;
    /*
     * Check if each node (or one of its ancestors) is already contained in the
     * array.
     */
    while (--idx >= 0) {
        var node = nodes[idx];
        /*
         * Remove the node if it is not unique.
         * We are going through the array from the end, so we only
         * have to check nodes that preceed the node under consideration in the array.
         */
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.includes(ancestor)) {
                nodes.splice(idx, 1);
                break;
            }
        }
    }
    return nodes;
}
exports.removeSubsets = removeSubsets;
/**
 * Compare the position of one node against another node in any other document.
 * The return value is a bitmask with the following values:
 *
 * Document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent./
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 *
 * @param nodeA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 * @returns A bitmask describing the input nodes' relative position.
 *
 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 * a description of these values.
 */
function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) {
        return 0;
    }
    var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent;
    while (current) {
        aParents.unshift(current);
        current = current.parent;
    }
    current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent;
    while (current) {
        bParents.unshift(current);
        current = current.parent;
    }
    var maxIdx = Math.min(aParents.length, bParents.length);
    var idx = 0;
    while (idx < maxIdx && aParents[idx] === bParents[idx]) {
        idx++;
    }
    if (idx === 0) {
        return 1 /* DISCONNECTED */;
    }
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
            return 4 /* FOLLOWING */ | 16 /* CONTAINED_BY */;
        }
        return 4 /* FOLLOWING */;
    }
    if (sharedParent === nodeA) {
        return 2 /* PRECEDING */ | 8 /* CONTAINS */;
    }
    return 2 /* PRECEDING */;
}
exports.compareDocumentPosition = compareDocumentPosition;
/**
 * Sort an array of nodes based on their relative position in the document and
 * remove any duplicate nodes. If the array contains nodes that do not belong
 * to the same document, sort order is unspecified.
 *
 * @param nodes Array of DOM nodes.
 * @returns Collection of unique nodes, sorted in document order.
 */
function uniqueSort(nodes) {
    nodes = nodes.filter(function (node, i, arr) { return !arr.includes(node, i + 1); });
    nodes.sort(function (a, b) {
        var relative = compareDocumentPosition(a, b);
        if (relative & 2 /* PRECEDING */) {
            return -1;
        }
        else if (relative & 4 /* FOLLOWING */) {
            return 1;
        }
        return 0;
    });
    return nodes;
}
exports.uniqueSort = uniqueSort;

},{"./tagtypes":44}],39:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./stringify"), exports);
__exportStar(require("./traversal"), exports);
__exportStar(require("./manipulation"), exports);
__exportStar(require("./querying"), exports);
__exportStar(require("./legacy"), exports);
__exportStar(require("./helpers"), exports);
__exportStar(require("./tagtypes"), exports);

},{"./helpers":38,"./legacy":40,"./manipulation":41,"./querying":42,"./stringify":43,"./tagtypes":44,"./traversal":45}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
var querying_1 = require("./querying");
var tagtypes_1 = require("./tagtypes");
var Checks = {
    tag_name: function (name) {
        if (typeof name === "function") {
            return function (elem) { return tagtypes_1.isTag(elem) && name(elem.name); };
        }
        else if (name === "*") {
            return tagtypes_1.isTag;
        }
        return function (elem) { return tagtypes_1.isTag(elem) && elem.name === name; };
    },
    tag_type: function (type) {
        if (typeof type === "function") {
            return function (elem) { return type(elem.type); };
        }
        return function (elem) { return elem.type === type; };
    },
    tag_contains: function (data) {
        if (typeof data === "function") {
            return function (elem) { return tagtypes_1.isText(elem) && data(elem.data); };
        }
        return function (elem) { return tagtypes_1.isText(elem) && elem.data === data; };
    },
};
/**
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a particular value.
 */
function getAttribCheck(attrib, value) {
    if (typeof value === "function") {
        return function (elem) { return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]); };
    }
    return function (elem) { return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value; };
}
/**
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either
 * of the input functions returns `true` for the node.
 */
function combineFuncs(a, b) {
    return function (elem) { return a(elem) || b(elem); };
}
/**
 * @param options An object describing nodes to look for.
 * @returns A function executing all checks in `options` and returning `true`
 * if any of them match a node.
 */
function compileTest(options) {
    var funcs = Object.keys(options).map(function (key) {
        var value = options[key];
        return key in Checks
            ? Checks[key](value)
            : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
/**
 * @param options An object describing nodes to look for.
 * @param node The element to test.
 * @returns Whether the element matches the description in `options`.
 */
function testElement(options, node) {
    var test = compileTest(options);
    return test ? test(node) : true;
}
exports.testElement = testElement;
/**
 * @param options An object describing nodes to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes that match `options`.
 */
function getElements(options, nodes, recurse, limit) {
    if (limit === void 0) { limit = Infinity; }
    var test = compileTest(options);
    return test ? querying_1.filter(test, nodes, recurse, limit) : [];
}
exports.getElements = getElements;
/**
 * @param id The unique ID attribute value to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @returns The node with the supplied ID.
 */
function getElementById(id, nodes, recurse) {
    if (recurse === void 0) { recurse = true; }
    if (!Array.isArray(nodes))
        nodes = [nodes];
    return querying_1.findOne(getAttribCheck("id", id), nodes, recurse);
}
exports.getElementById = getElementById;
/**
 * @param tagName Tag name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `tagName`.
 */
function getElementsByTagName(tagName, nodes, recurse, limit) {
    if (recurse === void 0) { recurse = true; }
    if (limit === void 0) { limit = Infinity; }
    return querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);
}
exports.getElementsByTagName = getElementsByTagName;
/**
 * @param type Element type to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `type`.
 */
function getElementsByTagType(type, nodes, recurse, limit) {
    if (recurse === void 0) { recurse = true; }
    if (limit === void 0) { limit = Infinity; }
    return querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);
}
exports.getElementsByTagType = getElementsByTagType;

},{"./querying":42,"./tagtypes":44}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
/**
 * Remove an element from the dom
 *
 * @param elem The element to be removed
 */
function removeElement(elem) {
    if (elem.prev)
        elem.prev.next = elem.next;
    if (elem.next)
        elem.next.prev = elem.prev;
    if (elem.parent) {
        var childs = elem.parent.children;
        childs.splice(childs.lastIndexOf(elem), 1);
    }
}
exports.removeElement = removeElement;
/**
 * Replace an element in the dom
 *
 * @param elem The element to be replaced
 * @param replacement The element to be added
 */
function replaceElement(elem, replacement) {
    var prev = (replacement.prev = elem.prev);
    if (prev) {
        prev.next = replacement;
    }
    var next = (replacement.next = elem.next);
    if (next) {
        next.prev = replacement;
    }
    var parent = (replacement.parent = elem.parent);
    if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
    }
}
exports.replaceElement = replaceElement;
/**
 * Append a child to an element.
 *
 * @param elem The element to append to.
 * @param child The element to be added as a child.
 */
function appendChild(elem, child) {
    removeElement(child);
    child.next = null;
    child.parent = elem;
    if (elem.children.push(child) > 1) {
        var sibling = elem.children[elem.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    }
    else {
        child.prev = null;
    }
}
exports.appendChild = appendChild;
/**
 * Append an element after another.
 *
 * @param elem The element to append after.
 * @param next The element be added.
 */
function append(elem, next) {
    removeElement(next);
    var parent = elem.parent;
    var currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    }
    else if (parent) {
        parent.children.push(next);
    }
}
exports.append = append;
/**
 * Prepend a child to an element.
 *
 * @param elem The element to prepend before.
 * @param child The element to be added as a child.
 */
function prependChild(elem, child) {
    removeElement(child);
    child.parent = elem;
    child.prev = null;
    if (elem.children.unshift(child) !== 1) {
        var sibling = elem.children[1];
        sibling.prev = child;
        child.next = sibling;
    }
    else {
        child.next = null;
    }
}
exports.prependChild = prependChild;
/**
 * Prepend an element before another.
 *
 * @param elem The element to prepend before.
 * @param prev The element be added.
 */
function prepend(elem, prev) {
    removeElement(prev);
    var parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
    }
    if (elem.prev) {
        elem.prev.next = prev;
    }
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
}
exports.prepend = prepend;

},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
var tagtypes_1 = require("./tagtypes");
/**
 * Search a node and its children for nodes passing a test function.
 *
 * @param test Function to test nodes on.
 * @param node Node to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */
function filter(test, node, recurse, limit) {
    if (recurse === void 0) { recurse = true; }
    if (limit === void 0) { limit = Infinity; }
    if (!Array.isArray(node))
        node = [node];
    return find(test, node, recurse, limit);
}
exports.filter = filter;
/**
 * Search an array of node and its children for nodes passing a test function.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */
function find(test, nodes, recurse, limit) {
    var result = [];
    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
        var elem = nodes_1[_i];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0)
                break;
        }
        if (recurse && tagtypes_1.hasChildren(elem) && elem.children.length > 0) {
            var children = find(test, elem.children, recurse, limit);
            result.push.apply(result, children);
            limit -= children.length;
            if (limit <= 0)
                break;
        }
    }
    return result;
}
exports.find = find;
/**
 * Finds the first element inside of an array that matches a test function.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns The first node in the array that passes `test`.
 */
function findOneChild(test, nodes) {
    return nodes.find(test);
}
exports.findOneChild = findOneChild;
/**
 * Finds one element in a tree that passes a test.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @returns The first child node that passes `test`.
 */
function findOne(test, nodes, recurse) {
    if (recurse === void 0) { recurse = true; }
    var elem = null;
    for (var i = 0; i < nodes.length && !elem; i++) {
        var checked = nodes[i];
        if (!tagtypes_1.isTag(checked)) {
            continue;
        }
        else if (test(checked)) {
            elem = checked;
        }
        else if (recurse && checked.children.length > 0) {
            elem = findOne(test, checked.children);
        }
    }
    return elem;
}
exports.findOne = findOne;
/**
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns Whether a tree of nodes contains at least one node passing a test.
 */
function existsOne(test, nodes) {
    return nodes.some(function (checked) {
        return tagtypes_1.isTag(checked) &&
            (test(checked) ||
                (checked.children.length > 0 &&
                    existsOne(test, checked.children)));
    });
}
exports.existsOne = existsOne;
/**
 * Search and array of nodes and its children for nodes passing a test function.
 *
 * Same as `find`, only with less options, leading to reduced complexity.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns All nodes passing `test`.
 */
function findAll(test, nodes) {
    var _a;
    var result = [];
    var stack = nodes.filter(tagtypes_1.isTag);
    var elem;
    while ((elem = stack.shift())) {
        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(tagtypes_1.isTag);
        if (children && children.length > 0) {
            stack.unshift.apply(stack, children);
        }
        if (test(elem))
            result.push(elem);
    }
    return result;
}
exports.findAll = findAll;

},{"./tagtypes":44}],43:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
var tagtypes_1 = require("./tagtypes");
var dom_serializer_1 = __importDefault(require("dom-serializer"));
/**
 * @param node Node to get the outer HTML of.
 * @param options Options for serialization.
 * @deprecated Use the `dom-serializer` module directly.
 * @returns `node`'s outer HTML.
 */
function getOuterHTML(node, options) {
    return dom_serializer_1.default(node, options);
}
exports.getOuterHTML = getOuterHTML;
/**
 * @param node Node to get the inner HTML of.
 * @param options Options for serialization.
 * @deprecated Use the `dom-serializer` module directly.
 * @returns `node`'s inner HTML.
 */
function getInnerHTML(node, options) {
    return tagtypes_1.hasChildren(node)
        ? node.children.map(function (node) { return getOuterHTML(node, options); }).join("")
        : "";
}
exports.getInnerHTML = getInnerHTML;
/**
 * Get a node's inner text.
 *
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 */
function getText(node) {
    if (Array.isArray(node))
        return node.map(getText).join("");
    if (tagtypes_1.isTag(node))
        return node.name === "br" ? "\n" : getText(node.children);
    if (tagtypes_1.isCDATA(node))
        return getText(node.children);
    if (tagtypes_1.isText(node))
        return node.data;
    return "";
}
exports.getText = getText;

},{"./tagtypes":44,"dom-serializer":34}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
var domelementtype_1 = require("domelementtype");
/**
 * @param node Node to check.
 * @returns `true` if the node is a `Element`, `false` otherwise.
 */
function isTag(node) {
    return domelementtype_1.isTag(node);
}
exports.isTag = isTag;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `NodeWithChildren`, `false` otherwise.
 */
function isCDATA(node) {
    return node.type === "cdata" /* CDATA */;
}
exports.isCDATA = isCDATA;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `DataNode`, `false` otherwise.
 */
function isText(node) {
    return node.type === "text" /* Text */;
}
exports.isText = isText;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `DataNode`, `false` otherwise.
 */
function isComment(node) {
    return node.type === "comment" /* Comment */;
}
exports.isComment = isComment;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.
 */
function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
exports.hasChildren = hasChildren;

},{"domelementtype":35}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
var tagtypes_1 = require("./tagtypes");
var emptyArray = [];
/**
 * Get a node's children.
 *
 * @param elem Node to get the children of.
 * @returns `elem`'s children, or an empty array.
 */
function getChildren(elem) {
    var _a;
    return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
}
exports.getChildren = getChildren;
/**
 * Get a node's parent.
 *
 * @param elem Node to get the parent of.
 * @returns `elem`'s parent node.
 */
function getParent(elem) {
    return elem.parent || null;
}
exports.getParent = getParent;
/**
 * Gets an elements siblings, including the element itself.
 *
 * Attempts to get the children through the element's parent first.
 * If we don't have a parent (the element is a root node),
 * we walk the element's `prev` & `next` to get all remaining nodes.
 *
 * @param elem Element to get the siblings of.
 * @returns `elem`'s siblings.
 */
function getSiblings(elem) {
    var _a, _b;
    var parent = getParent(elem);
    if (parent != null)
        return getChildren(parent);
    var siblings = [elem];
    var prev = elem.prev, next = elem.next;
    while (prev != null) {
        siblings.unshift(prev);
        (_a = prev, prev = _a.prev);
    }
    while (next != null) {
        siblings.push(next);
        (_b = next, next = _b.next);
    }
    return siblings;
}
exports.getSiblings = getSiblings;
/**
 * Gets an attribute from an element.
 *
 * @param elem Element to check.
 * @param name Attribute name to retrieve.
 * @returns The element's attribute value, or `undefined`.
 */
function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
exports.getAttributeValue = getAttributeValue;
/**
 * Checks whether an element has an attribute.
 *
 * @param elem Element to check.
 * @param name Attribute name to look for.
 * @returns Returns whether `elem` has the attribute `name`.
 */
function hasAttrib(elem, name) {
    return (elem.attribs != null &&
        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&
        elem.attribs[name] != null);
}
exports.hasAttrib = hasAttrib;
/**
 * Get the tag name of an element.
 *
 * @param elem The element to get the name for.
 * @returns The tag name of `elem`.
 */
function getName(elem) {
    return elem.name;
}
exports.getName = getName;
/**
 * Returns the next element sibling of a node.
 *
 * @param elem The element to get the next sibling of.
 * @returns `elem`'s next sibling that is a tag.
 */
function nextElementSibling(elem) {
    var _a;
    var next = elem.next;
    while (next !== null && !tagtypes_1.isTag(next))
        (_a = next, next = _a.next);
    return next;
}
exports.nextElementSibling = nextElementSibling;

},{"./tagtypes":44}],46:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
var entities_json_1 = __importDefault(require("./maps/entities.json"));
var legacy_json_1 = __importDefault(require("./maps/legacy.json"));
var xml_json_1 = __importDefault(require("./maps/xml.json"));
var decode_codepoint_1 = __importDefault(require("./decode_codepoint"));
exports.decodeXML = getStrictDecoder(xml_json_1.default);
exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
function getStrictDecoder(map) {
    var keys = Object.keys(map).join("|");
    var replace = getReplacer(map);
    keys += "|#[xX][\\da-fA-F]+|#\\d+";
    var re = new RegExp("&(?:" + keys + ");", "g");
    return function (str) { return String(str).replace(re, replace); };
}
var sorter = function (a, b) { return (a < b ? 1 : -1); };
exports.decodeHTML = (function () {
    var legacy = Object.keys(legacy_json_1.default).sort(sorter);
    var keys = Object.keys(entities_json_1.default).sort(sorter);
    for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
            keys[i] += ";?";
            j++;
        }
        else {
            keys[i] += ";";
        }
    }
    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
    var replace = getReplacer(entities_json_1.default);
    function replacer(str) {
        if (str.substr(-1) !== ";")
            str += ";";
        return replace(str);
    }
    // TODO consider creating a merged map
    return function (str) { return String(str).replace(re, replacer); };
})();
function getReplacer(map) {
    return function replace(str) {
        if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            if (secondChar === "X" || secondChar === "x") {
                return decode_codepoint_1.default(parseInt(str.substr(3), 16));
            }
            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)];
    };
}

},{"./decode_codepoint":47,"./maps/entities.json":51,"./maps/legacy.json":52,"./maps/xml.json":53}],47:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var decode_json_1 = __importDefault(require("./maps/decode.json"));
// Modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint) {
    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
        return "\uFFFD";
    }
    if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
    }
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
        codePoint = 0xdc00 | (codePoint & 0x3ff);
    }
    output += String.fromCharCode(codePoint);
    return output;
}
exports.default = decodeCodePoint;

},{"./maps/decode.json":50}],48:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.escape = exports.encodeHTML = exports.encodeXML = void 0;
var xml_json_1 = __importDefault(require("./maps/xml.json"));
var inverseXML = getInverseObj(xml_json_1.default);
var xmlReplacer = getInverseReplacer(inverseXML);
exports.encodeXML = getInverse(inverseXML, xmlReplacer);
var entities_json_1 = __importDefault(require("./maps/entities.json"));
var inverseHTML = getInverseObj(entities_json_1.default);
var htmlReplacer = getInverseReplacer(inverseHTML);
exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
function getInverseObj(obj) {
    return Object.keys(obj)
        .sort()
        .reduce(function (inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
    }, {});
}
function getInverseReplacer(inverse) {
    var single = [];
    var multiple = [];
    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
            // Add value to single array
            single.push("\\" + k);
        }
        else {
            // Add value to multiple array
            multiple.push(k);
        }
    }
    // Add ranges to single characters.
    single.sort();
    for (var start = 0; start < single.length - 1; start++) {
        // Find the end of a run of characters
        var end = start;
        while (end < single.length - 1 &&
            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
            end += 1;
        }
        var count = 1 + end - start;
        // We want to replace at least three characters
        if (count < 3)
            continue;
        single.splice(start, count, single[start] + "-" + single[end]);
    }
    multiple.unshift("[" + single.join("") + "]");
    return new RegExp(multiple.join("|"), "g");
}
var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
function singleCharReplacer(c) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return "&#x" + c.codePointAt(0).toString(16).toUpperCase() + ";";
}
function getInverse(inverse, re) {
    return function (data) {
        return data
            .replace(re, function (name) { return inverse[name]; })
            .replace(reNonASCII, singleCharReplacer);
    };
}
var reXmlChars = getInverseReplacer(inverseXML);
function escape(data) {
    return data
        .replace(reXmlChars, singleCharReplacer)
        .replace(reNonASCII, singleCharReplacer);
}
exports.escape = escape;

},{"./maps/entities.json":51,"./maps/xml.json":53}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escape = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
var decode_1 = require("./decode");
var encode_1 = require("./encode");
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 */
function decode(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
}
exports.decode = decode;
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 */
function decodeStrict(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
}
exports.decodeStrict = decodeStrict;
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
 */
function encode(data, level) {
    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
}
exports.encode = encode;
var encode_2 = require("./encode");
Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
// Legacy aliases
Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
var decode_2 = require("./decode");
Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
// Legacy aliases
Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } });

},{"./decode":46,"./encode":48}],50:[function(require,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}

},{}],51:[function(require,module,exports){
module.exports={"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}

},{}],52:[function(require,module,exports){
module.exports={"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\"","QUOT":"\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}

},{}],53:[function(require,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFeed = exports.FeedHandler = void 0;
var domhandler_1 = __importDefault(require("domhandler"));
var DomUtils = __importStar(require("domutils"));
var Parser_1 = require("./Parser");
var FeedItemMediaMedium;
(function (FeedItemMediaMedium) {
    FeedItemMediaMedium[FeedItemMediaMedium["image"] = 0] = "image";
    FeedItemMediaMedium[FeedItemMediaMedium["audio"] = 1] = "audio";
    FeedItemMediaMedium[FeedItemMediaMedium["video"] = 2] = "video";
    FeedItemMediaMedium[FeedItemMediaMedium["document"] = 3] = "document";
    FeedItemMediaMedium[FeedItemMediaMedium["executable"] = 4] = "executable";
})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
var FeedItemMediaExpression;
(function (FeedItemMediaExpression) {
    FeedItemMediaExpression[FeedItemMediaExpression["sample"] = 0] = "sample";
    FeedItemMediaExpression[FeedItemMediaExpression["full"] = 1] = "full";
    FeedItemMediaExpression[FeedItemMediaExpression["nonstop"] = 2] = "nonstop";
})(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
// TODO: Consume data as it is coming in
var FeedHandler = /** @class */ (function (_super) {
    __extends(FeedHandler, _super);
    /**
     *
     * @param callback
     * @param options
     */
    function FeedHandler(callback, options) {
        var _this = this;
        if (typeof callback === "object") {
            callback = undefined;
            options = callback;
        }
        _this = _super.call(this, callback, options) || this;
        return _this;
    }
    FeedHandler.prototype.onend = function () {
        var _a, _b;
        var feedRoot = getOneElement(isValidFeed, this.dom);
        if (!feedRoot) {
            this.handleCallback(new Error("couldn't find root of feed"));
            return;
        }
        var feed = {};
        if (feedRoot.name === "feed") {
            var childs = feedRoot.children;
            feed.type = "atom";
            addConditionally(feed, "id", "id", childs);
            addConditionally(feed, "title", "title", childs);
            var href = getAttribute("href", getOneElement("link", childs));
            if (href) {
                feed.link = href;
            }
            addConditionally(feed, "description", "subtitle", childs);
            var updated = fetch("updated", childs);
            if (updated) {
                feed.updated = new Date(updated);
            }
            addConditionally(feed, "author", "email", childs, true);
            feed.items = getElements("entry", childs).map(function (item) {
                var entry = {};
                var children = item.children;
                addConditionally(entry, "id", "id", children);
                addConditionally(entry, "title", "title", children);
                var href = getAttribute("href", getOneElement("link", children));
                if (href) {
                    entry.link = href;
                }
                var description = fetch("summary", children) || fetch("content", children);
                if (description) {
                    entry.description = description;
                }
                var pubDate = fetch("updated", children);
                if (pubDate) {
                    entry.pubDate = new Date(pubDate);
                }
                entry.media = getMediaElements(children);
                return entry;
            });
        }
        else {
            var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
            feed.type = feedRoot.name.substr(0, 3);
            feed.id = "";
            addConditionally(feed, "title", "title", childs);
            addConditionally(feed, "link", "link", childs);
            addConditionally(feed, "description", "description", childs);
            var updated = fetch("lastBuildDate", childs);
            if (updated) {
                feed.updated = new Date(updated);
            }
            addConditionally(feed, "author", "managingEditor", childs, true);
            feed.items = getElements("item", feedRoot.children).map(function (item) {
                var entry = {};
                var children = item.children;
                addConditionally(entry, "id", "guid", children);
                addConditionally(entry, "title", "title", children);
                addConditionally(entry, "link", "link", children);
                addConditionally(entry, "description", "description", children);
                var pubDate = fetch("pubDate", children);
                if (pubDate)
                    entry.pubDate = new Date(pubDate);
                entry.media = getMediaElements(children);
                return entry;
            });
        }
        this.feed = feed;
        this.handleCallback(null);
    };
    return FeedHandler;
}(domhandler_1.default));
exports.FeedHandler = FeedHandler;
function getMediaElements(where) {
    return getElements("media:content", where).map(function (elem) {
        var media = {
            medium: elem.attribs.medium,
            isDefault: !!elem.attribs.isDefault,
        };
        if (elem.attribs.url) {
            media.url = elem.attribs.url;
        }
        if (elem.attribs.fileSize) {
            media.fileSize = parseInt(elem.attribs.fileSize, 10);
        }
        if (elem.attribs.type) {
            media.type = elem.attribs.type;
        }
        if (elem.attribs.expression) {
            media.expression = elem.attribs
                .expression;
        }
        if (elem.attribs.bitrate) {
            media.bitrate = parseInt(elem.attribs.bitrate, 10);
        }
        if (elem.attribs.framerate) {
            media.framerate = parseInt(elem.attribs.framerate, 10);
        }
        if (elem.attribs.samplingrate) {
            media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
        }
        if (elem.attribs.channels) {
            media.channels = parseInt(elem.attribs.channels, 10);
        }
        if (elem.attribs.duration) {
            media.duration = parseInt(elem.attribs.duration, 10);
        }
        if (elem.attribs.height) {
            media.height = parseInt(elem.attribs.height, 10);
        }
        if (elem.attribs.width) {
            media.width = parseInt(elem.attribs.width, 10);
        }
        if (elem.attribs.lang) {
            media.lang = elem.attribs.lang;
        }
        return media;
    });
}
function getElements(tagName, where) {
    return DomUtils.getElementsByTagName(tagName, where, true);
}
function getOneElement(tagName, node) {
    return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];
}
function fetch(tagName, where, recurse) {
    if (recurse === void 0) { recurse = false; }
    return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();
}
function getAttribute(name, elem) {
    if (!elem) {
        return null;
    }
    var attribs = elem.attribs;
    return attribs[name];
}
function addConditionally(obj, prop, what, where, recurse) {
    if (recurse === void 0) { recurse = false; }
    var tmp = fetch(what, where, recurse);
    if (tmp)
        obj[prop] = tmp;
}
function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
}
/**
 * Parse a feed.
 *
 * @param feed The feed that should be parsed, as a string.
 * @param options Optionally, options for parsing. When using this option, you should set `xmlMode` to `true`.
 */
function parseFeed(feed, options) {
    if (options === void 0) { options = { xmlMode: true }; }
    var handler = new FeedHandler(options);
    new Parser_1.Parser(handler, options).end(feed);
    return handler.feed;
}
exports.parseFeed = parseFeed;

},{"./Parser":55,"domhandler":36,"domutils":39}],55:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
var Tokenizer_1 = __importDefault(require("./Tokenizer"));
var formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea",
]);
var pTag = new Set(["p"]);
var openImpliesClose = {
    tr: new Set(["tr", "th", "td"]),
    th: new Set(["th"]),
    td: new Set(["thead", "th", "td"]),
    body: new Set(["head", "link", "script"]),
    li: new Set(["li"]),
    p: pTag,
    h1: pTag,
    h2: pTag,
    h3: pTag,
    h4: pTag,
    h5: pTag,
    h6: pTag,
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: new Set(["option"]),
    optgroup: new Set(["optgroup", "option"]),
    dd: new Set(["dt", "dd"]),
    dt: new Set(["dt", "dd"]),
    address: pTag,
    article: pTag,
    aside: pTag,
    blockquote: pTag,
    details: pTag,
    div: pTag,
    dl: pTag,
    fieldset: pTag,
    figcaption: pTag,
    figure: pTag,
    footer: pTag,
    form: pTag,
    header: pTag,
    hr: pTag,
    main: pTag,
    nav: pTag,
    ol: pTag,
    pre: pTag,
    section: pTag,
    table: pTag,
    ul: pTag,
    rt: new Set(["rt", "rp"]),
    rp: new Set(["rt", "rp"]),
    tbody: new Set(["thead", "tbody"]),
    tfoot: new Set(["thead", "tbody"]),
};
var voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
]);
var foreignContextElements = new Set(["math", "svg"]);
var htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title",
]);
var reNameEnd = /\s|\//;
var Parser = /** @class */ (function () {
    function Parser(cbs, options) {
        if (options === void 0) { options = {}; }
        var _a, _b, _c, _d, _e;
        /** The start index of the last event. */
        this.startIndex = 0;
        /** The end index of the last event. */
        this.endIndex = null;
        this.tagname = "";
        this.attribname = "";
        this.attribvalue = "";
        this.attribs = null;
        this.stack = [];
        this.foreignContext = [];
        this.options = options;
        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
        this.lowerCaseAttributeNames =
            (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);
        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
    }
    Parser.prototype.updatePosition = function (initialOffset) {
        if (this.endIndex === null) {
            if (this.tokenizer.sectionStart <= initialOffset) {
                this.startIndex = 0;
            }
            else {
                this.startIndex = this.tokenizer.sectionStart - initialOffset;
            }
        }
        else {
            this.startIndex = this.endIndex + 1;
        }
        this.endIndex = this.tokenizer.getAbsoluteIndex();
    };
    // Tokenizer event handlers
    Parser.prototype.ontext = function (data) {
        var _a, _b;
        this.updatePosition(1);
        this.endIndex--;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
    };
    Parser.prototype.onopentagname = function (name) {
        var _a, _b;
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        this.tagname = name;
        if (!this.options.xmlMode &&
            Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
            var el = void 0;
            while (this.stack.length > 0 &&
                openImpliesClose[name].has((el = this.stack[this.stack.length - 1]))) {
                this.onclosetag(el);
            }
        }
        if (this.options.xmlMode || !voidElements.has(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
                this.foreignContext.push(true);
            }
            else if (htmlIntegrationElements.has(name)) {
                this.foreignContext.push(false);
            }
        }
        (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);
        if (this.cbs.onopentag)
            this.attribs = {};
    };
    Parser.prototype.onopentagend = function () {
        var _a, _b;
        this.updatePosition(1);
        if (this.attribs) {
            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);
            this.attribs = null;
        }
        if (!this.options.xmlMode &&
            this.cbs.onclosetag &&
            voidElements.has(this.tagname)) {
            this.cbs.onclosetag(this.tagname);
        }
        this.tagname = "";
    };
    Parser.prototype.onclosetag = function (name) {
        this.updatePosition(1);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        if (foreignContextElements.has(name) ||
            htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
        }
        if (this.stack.length &&
            (this.options.xmlMode || !voidElements.has(name))) {
            var pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
                if (this.cbs.onclosetag) {
                    pos = this.stack.length - pos;
                    while (pos--) {
                        // We know the stack has sufficient elements.
                        this.cbs.onclosetag(this.stack.pop());
                    }
                }
                else
                    this.stack.length = pos;
            }
            else if (name === "p" && !this.options.xmlMode) {
                this.onopentagname(name);
                this.closeCurrentTag();
            }
        }
        else if (!this.options.xmlMode && (name === "br" || name === "p")) {
            this.onopentagname(name);
            this.closeCurrentTag();
        }
    };
    Parser.prototype.onselfclosingtag = function () {
        if (this.options.xmlMode ||
            this.options.recognizeSelfClosing ||
            this.foreignContext[this.foreignContext.length - 1]) {
            this.closeCurrentTag();
        }
        else {
            this.onopentagend();
        }
    };
    Parser.prototype.closeCurrentTag = function () {
        var _a, _b;
        var name = this.tagname;
        this.onopentagend();
        /*
         * Self-closing tags will be on the top of the stack
         * (cheaper check than in onclosetag)
         */
        if (this.stack[this.stack.length - 1] === name) {
            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);
            this.stack.pop();
        }
    };
    Parser.prototype.onattribname = function (name) {
        if (this.lowerCaseAttributeNames) {
            name = name.toLowerCase();
        }
        this.attribname = name;
    };
    Parser.prototype.onattribdata = function (value) {
        this.attribvalue += value;
    };
    Parser.prototype.onattribend = function (quote) {
        var _a, _b;
        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);
        if (this.attribs &&
            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
        }
        this.attribname = "";
        this.attribvalue = "";
    };
    Parser.prototype.getInstructionName = function (value) {
        var idx = value.search(reNameEnd);
        var name = idx < 0 ? value : value.substr(0, idx);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        return name;
    };
    Parser.prototype.ondeclaration = function (value) {
        if (this.cbs.onprocessinginstruction) {
            var name_1 = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
        }
    };
    Parser.prototype.onprocessinginstruction = function (value) {
        if (this.cbs.onprocessinginstruction) {
            var name_2 = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
        }
    };
    Parser.prototype.oncomment = function (value) {
        var _a, _b, _c, _d;
        this.updatePosition(4);
        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);
        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
    };
    Parser.prototype.oncdata = function (value) {
        var _a, _b, _c, _d, _e, _f;
        this.updatePosition(1);
        if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
        }
        else {
            this.oncomment("[CDATA[" + value + "]]");
        }
    };
    Parser.prototype.onerror = function (err) {
        var _a, _b;
        (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    Parser.prototype.onend = function () {
        var _a, _b;
        if (this.cbs.onclosetag) {
            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
                ;
        }
        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    /**
     * Resets the parser to a blank state, ready to parse a new HTML document
     */
    Parser.prototype.reset = function () {
        var _a, _b, _c, _d;
        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.tokenizer.reset();
        this.tagname = "";
        this.attribname = "";
        this.attribs = null;
        this.stack = [];
        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
    };
    /**
     * Resets the parser, then parses a complete document and
     * pushes it to the handler.
     *
     * @param data Document to parse.
     */
    Parser.prototype.parseComplete = function (data) {
        this.reset();
        this.end(data);
    };
    /**
     * Parses a chunk of data and calls the corresponding callbacks.
     *
     * @param chunk Chunk to parse.
     */
    Parser.prototype.write = function (chunk) {
        this.tokenizer.write(chunk);
    };
    /**
     * Parses the end of the buffer and clears the stack, calls onend.
     *
     * @param chunk Optional final chunk to parse.
     */
    Parser.prototype.end = function (chunk) {
        this.tokenizer.end(chunk);
    };
    /**
     * Pauses parsing. The parser won't emit events until `resume` is called.
     */
    Parser.prototype.pause = function () {
        this.tokenizer.pause();
    };
    /**
     * Resumes parsing after `pause` was called.
     */
    Parser.prototype.resume = function () {
        this.tokenizer.resume();
    };
    /**
     * Alias of `write`, for backwards compatibility.
     *
     * @param chunk Chunk to parse.
     * @deprecated
     */
    Parser.prototype.parseChunk = function (chunk) {
        this.write(chunk);
    };
    /**
     * Alias of `end`, for backwards compatibility.
     *
     * @param chunk Optional final chunk to parse.
     * @deprecated
     */
    Parser.prototype.done = function (chunk) {
        this.end(chunk);
    };
    return Parser;
}());
exports.Parser = Parser;

},{"./Tokenizer":56}],56:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var decode_codepoint_1 = __importDefault(require("entities/lib/decode_codepoint"));
var entities_json_1 = __importDefault(require("entities/lib/maps/entities.json"));
var legacy_json_1 = __importDefault(require("entities/lib/maps/legacy.json"));
var xml_json_1 = __importDefault(require("entities/lib/maps/xml.json"));
function whitespace(c) {
    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}
function isASCIIAlpha(c) {
    return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z");
}
function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();
    if (upper === lower) {
        return function (t, c) {
            if (c === lower) {
                t._state = SUCCESS;
            }
            else {
                t._state = FAILURE;
                t._index--;
            }
        };
    }
    return function (t, c) {
        if (c === lower || c === upper) {
            t._state = SUCCESS;
        }
        else {
            t._state = FAILURE;
            t._index--;
        }
    };
}
function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();
    return function (t, c) {
        if (c === lower || c === upper) {
            t._state = NEXT_STATE;
        }
        else {
            t._state = 3 /* InTagName */;
            t._index--; // Consume the token again
        }
    };
}
var stateBeforeCdata1 = ifElseState("C", 24 /* BeforeCdata2 */, 16 /* InDeclaration */);
var stateBeforeCdata2 = ifElseState("D", 25 /* BeforeCdata3 */, 16 /* InDeclaration */);
var stateBeforeCdata3 = ifElseState("A", 26 /* BeforeCdata4 */, 16 /* InDeclaration */);
var stateBeforeCdata4 = ifElseState("T", 27 /* BeforeCdata5 */, 16 /* InDeclaration */);
var stateBeforeCdata5 = ifElseState("A", 28 /* BeforeCdata6 */, 16 /* InDeclaration */);
var stateBeforeScript1 = consumeSpecialNameChar("R", 35 /* BeforeScript2 */);
var stateBeforeScript2 = consumeSpecialNameChar("I", 36 /* BeforeScript3 */);
var stateBeforeScript3 = consumeSpecialNameChar("P", 37 /* BeforeScript4 */);
var stateBeforeScript4 = consumeSpecialNameChar("T", 38 /* BeforeScript5 */);
var stateAfterScript1 = ifElseState("R", 40 /* AfterScript2 */, 1 /* Text */);
var stateAfterScript2 = ifElseState("I", 41 /* AfterScript3 */, 1 /* Text */);
var stateAfterScript3 = ifElseState("P", 42 /* AfterScript4 */, 1 /* Text */);
var stateAfterScript4 = ifElseState("T", 43 /* AfterScript5 */, 1 /* Text */);
var stateBeforeStyle1 = consumeSpecialNameChar("Y", 45 /* BeforeStyle2 */);
var stateBeforeStyle2 = consumeSpecialNameChar("L", 46 /* BeforeStyle3 */);
var stateBeforeStyle3 = consumeSpecialNameChar("E", 47 /* BeforeStyle4 */);
var stateAfterStyle1 = ifElseState("Y", 49 /* AfterStyle2 */, 1 /* Text */);
var stateAfterStyle2 = ifElseState("L", 50 /* AfterStyle3 */, 1 /* Text */);
var stateAfterStyle3 = ifElseState("E", 51 /* AfterStyle4 */, 1 /* Text */);
var stateBeforeSpecialT = consumeSpecialNameChar("I", 54 /* BeforeTitle1 */);
var stateBeforeTitle1 = consumeSpecialNameChar("T", 55 /* BeforeTitle2 */);
var stateBeforeTitle2 = consumeSpecialNameChar("L", 56 /* BeforeTitle3 */);
var stateBeforeTitle3 = consumeSpecialNameChar("E", 57 /* BeforeTitle4 */);
var stateAfterSpecialTEnd = ifElseState("I", 58 /* AfterTitle1 */, 1 /* Text */);
var stateAfterTitle1 = ifElseState("T", 59 /* AfterTitle2 */, 1 /* Text */);
var stateAfterTitle2 = ifElseState("L", 60 /* AfterTitle3 */, 1 /* Text */);
var stateAfterTitle3 = ifElseState("E", 61 /* AfterTitle4 */, 1 /* Text */);
var stateBeforeEntity = ifElseState("#", 63 /* BeforeNumericEntity */, 64 /* InNamedEntity */);
var stateBeforeNumericEntity = ifElseState("X", 66 /* InHexEntity */, 65 /* InNumericEntity */);
var Tokenizer = /** @class */ (function () {
    function Tokenizer(options, cbs) {
        var _a;
        /** The current state the tokenizer is in. */
        this._state = 1 /* Text */;
        /** The read buffer. */
        this.buffer = "";
        /** The beginning of the section that is currently being read. */
        this.sectionStart = 0;
        /** The index within the buffer that we are currently looking at. */
        this._index = 0;
        /**
         * Data that has already been processed will be removed from the buffer occasionally.
         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
         */
        this.bufferOffset = 0;
        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
        this.baseState = 1 /* Text */;
        /** For special parsing behavior inside of script and style tags. */
        this.special = 1 /* None */;
        /** Indicates whether the tokenizer has been paused. */
        this.running = true;
        /** Indicates whether the tokenizer has finished running / `.end` has been called. */
        this.ended = false;
        this.cbs = cbs;
        this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);
        this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;
    }
    Tokenizer.prototype.reset = function () {
        this._state = 1 /* Text */;
        this.buffer = "";
        this.sectionStart = 0;
        this._index = 0;
        this.bufferOffset = 0;
        this.baseState = 1 /* Text */;
        this.special = 1 /* None */;
        this.running = true;
        this.ended = false;
    };
    Tokenizer.prototype.write = function (chunk) {
        if (this.ended)
            this.cbs.onerror(Error(".write() after done!"));
        this.buffer += chunk;
        this.parse();
    };
    Tokenizer.prototype.end = function (chunk) {
        if (this.ended)
            this.cbs.onerror(Error(".end() after done!"));
        if (chunk)
            this.write(chunk);
        this.ended = true;
        if (this.running)
            this.finish();
    };
    Tokenizer.prototype.pause = function () {
        this.running = false;
    };
    Tokenizer.prototype.resume = function () {
        this.running = true;
        if (this._index < this.buffer.length) {
            this.parse();
        }
        if (this.ended) {
            this.finish();
        }
    };
    /**
     * The current index within all of the written data.
     */
    Tokenizer.prototype.getAbsoluteIndex = function () {
        return this.bufferOffset + this._index;
    };
    Tokenizer.prototype.stateText = function (c) {
        if (c === "<") {
            if (this._index > this.sectionStart) {
                this.cbs.ontext(this.getSection());
            }
            this._state = 2 /* BeforeTagName */;
            this.sectionStart = this._index;
        }
        else if (this.decodeEntities &&
            c === "&" &&
            (this.special === 1 /* None */ || this.special === 4 /* Title */)) {
            if (this._index > this.sectionStart) {
                this.cbs.ontext(this.getSection());
            }
            this.baseState = 1 /* Text */;
            this._state = 62 /* BeforeEntity */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateBeforeTagName = function (c) {
        if (c === "/") {
            this._state = 5 /* BeforeClosingTagName */;
        }
        else if (c === "<") {
            this.cbs.ontext(this.getSection());
            this.sectionStart = this._index;
        }
        else if (c === ">" ||
            this.special !== 1 /* None */ ||
            whitespace(c)) {
            this._state = 1 /* Text */;
        }
        else if (c === "!") {
            this._state = 15 /* BeforeDeclaration */;
            this.sectionStart = this._index + 1;
        }
        else if (c === "?") {
            this._state = 17 /* InProcessingInstruction */;
            this.sectionStart = this._index + 1;
        }
        else if (!isASCIIAlpha(c)) {
            this._state = 1 /* Text */;
        }
        else {
            this._state =
                !this.xmlMode && (c === "s" || c === "S")
                    ? 32 /* BeforeSpecialS */
                    : !this.xmlMode && (c === "t" || c === "T")
                        ? 52 /* BeforeSpecialT */
                        : 3 /* InTagName */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateInTagName = function (c) {
        if (c === "/" || c === ">" || whitespace(c)) {
            this.emitToken("onopentagname");
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
    };
    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {
        if (whitespace(c)) {
            // Ignore
        }
        else if (c === ">") {
            this._state = 1 /* Text */;
        }
        else if (this.special !== 1 /* None */) {
            if (this.special !== 4 /* Title */ && (c === "s" || c === "S")) {
                this._state = 33 /* BeforeSpecialSEnd */;
            }
            else if (this.special === 4 /* Title */ &&
                (c === "t" || c === "T")) {
                this._state = 53 /* BeforeSpecialTEnd */;
            }
            else {
                this._state = 1 /* Text */;
                this._index--;
            }
        }
        else if (!isASCIIAlpha(c)) {
            this._state = 20 /* InSpecialComment */;
            this.sectionStart = this._index;
        }
        else {
            this._state = 6 /* InClosingTagName */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateInClosingTagName = function (c) {
        if (c === ">" || whitespace(c)) {
            this.emitToken("onclosetag");
            this._state = 7 /* AfterClosingTagName */;
            this._index--;
        }
    };
    Tokenizer.prototype.stateAfterClosingTagName = function (c) {
        // Skip everything until ">"
        if (c === ">") {
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype.stateBeforeAttributeName = function (c) {
        if (c === ">") {
            this.cbs.onopentagend();
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
        else if (c === "/") {
            this._state = 4 /* InSelfClosingTag */;
        }
        else if (!whitespace(c)) {
            this._state = 9 /* InAttributeName */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateInSelfClosingTag = function (c) {
        if (c === ">") {
            this.cbs.onselfclosingtag();
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
            this.special = 1 /* None */; // Reset special state, in case of self-closing special tags
        }
        else if (!whitespace(c)) {
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
    };
    Tokenizer.prototype.stateInAttributeName = function (c) {
        if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
            this.cbs.onattribname(this.getSection());
            this.sectionStart = -1;
            this._state = 10 /* AfterAttributeName */;
            this._index--;
        }
    };
    Tokenizer.prototype.stateAfterAttributeName = function (c) {
        if (c === "=") {
            this._state = 11 /* BeforeAttributeValue */;
        }
        else if (c === "/" || c === ">") {
            this.cbs.onattribend(undefined);
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
        else if (!whitespace(c)) {
            this.cbs.onattribend(undefined);
            this._state = 9 /* InAttributeName */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {
        if (c === '"') {
            this._state = 12 /* InAttributeValueDq */;
            this.sectionStart = this._index + 1;
        }
        else if (c === "'") {
            this._state = 13 /* InAttributeValueSq */;
            this.sectionStart = this._index + 1;
        }
        else if (!whitespace(c)) {
            this._state = 14 /* InAttributeValueNq */;
            this.sectionStart = this._index;
            this._index--; // Reconsume token
        }
    };
    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {
        if (c === quote) {
            this.emitToken("onattribdata");
            this.cbs.onattribend(quote);
            this._state = 8 /* BeforeAttributeName */;
        }
        else if (this.decodeEntities && c === "&") {
            this.emitToken("onattribdata");
            this.baseState = this._state;
            this._state = 62 /* BeforeEntity */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {
        this.handleInAttributeValue(c, '"');
    };
    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {
        this.handleInAttributeValue(c, "'");
    };
    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {
        if (whitespace(c) || c === ">") {
            this.emitToken("onattribdata");
            this.cbs.onattribend(null);
            this._state = 8 /* BeforeAttributeName */;
            this._index--;
        }
        else if (this.decodeEntities && c === "&") {
            this.emitToken("onattribdata");
            this.baseState = this._state;
            this._state = 62 /* BeforeEntity */;
            this.sectionStart = this._index;
        }
    };
    Tokenizer.prototype.stateBeforeDeclaration = function (c) {
        this._state =
            c === "["
                ? 23 /* BeforeCdata1 */
                : c === "-"
                    ? 18 /* BeforeComment */
                    : 16 /* InDeclaration */;
    };
    Tokenizer.prototype.stateInDeclaration = function (c) {
        if (c === ">") {
            this.cbs.ondeclaration(this.getSection());
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype.stateInProcessingInstruction = function (c) {
        if (c === ">") {
            this.cbs.onprocessinginstruction(this.getSection());
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype.stateBeforeComment = function (c) {
        if (c === "-") {
            this._state = 19 /* InComment */;
            this.sectionStart = this._index + 1;
        }
        else {
            this._state = 16 /* InDeclaration */;
        }
    };
    Tokenizer.prototype.stateInComment = function (c) {
        if (c === "-")
            this._state = 21 /* AfterComment1 */;
    };
    Tokenizer.prototype.stateInSpecialComment = function (c) {
        if (c === ">") {
            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
    };
    Tokenizer.prototype.stateAfterComment1 = function (c) {
        if (c === "-") {
            this._state = 22 /* AfterComment2 */;
        }
        else {
            this._state = 19 /* InComment */;
        }
    };
    Tokenizer.prototype.stateAfterComment2 = function (c) {
        if (c === ">") {
            // Remove 2 trailing chars
            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
        else if (c !== "-") {
            this._state = 19 /* InComment */;
        }
        // Else: stay in AFTER_COMMENT_2 (`--->`)
    };
    Tokenizer.prototype.stateBeforeCdata6 = function (c) {
        if (c === "[") {
            this._state = 29 /* InCdata */;
            this.sectionStart = this._index + 1;
        }
        else {
            this._state = 16 /* InDeclaration */;
            this._index--;
        }
    };
    Tokenizer.prototype.stateInCdata = function (c) {
        if (c === "]")
            this._state = 30 /* AfterCdata1 */;
    };
    Tokenizer.prototype.stateAfterCdata1 = function (c) {
        if (c === "]")
            this._state = 31 /* AfterCdata2 */;
        else
            this._state = 29 /* InCdata */;
    };
    Tokenizer.prototype.stateAfterCdata2 = function (c) {
        if (c === ">") {
            // Remove 2 trailing chars
            this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
            this._state = 1 /* Text */;
            this.sectionStart = this._index + 1;
        }
        else if (c !== "]") {
            this._state = 29 /* InCdata */;
        }
        // Else: stay in AFTER_CDATA_2 (`]]]>`)
    };
    Tokenizer.prototype.stateBeforeSpecialS = function (c) {
        if (c === "c" || c === "C") {
            this._state = 34 /* BeforeScript1 */;
        }
        else if (c === "t" || c === "T") {
            this._state = 44 /* BeforeStyle1 */;
        }
        else {
            this._state = 3 /* InTagName */;
            this._index--; // Consume the token again
        }
    };
    Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {
        if (this.special === 2 /* Script */ && (c === "c" || c === "C")) {
            this._state = 39 /* AfterScript1 */;
        }
        else if (this.special === 3 /* Style */ && (c === "t" || c === "T")) {
            this._state = 48 /* AfterStyle1 */;
        }
        else
            this._state = 1 /* Text */;
    };
    Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {
        if (c === "/" || c === ">" || whitespace(c)) {
            this.special = special;
        }
        this._state = 3 /* InTagName */;
        this._index--; // Consume the token again
    };
    Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {
        if (c === ">" || whitespace(c)) {
            this.special = 1 /* None */;
            this._state = 6 /* InClosingTagName */;
            this.sectionStart = this._index - sectionStartOffset;
            this._index--; // Reconsume the token
        }
        else
            this._state = 1 /* Text */;
    };
    // For entities terminated with a semicolon
    Tokenizer.prototype.parseFixedEntity = function (map) {
        if (map === void 0) { map = this.xmlMode ? xml_json_1.default : entities_json_1.default; }
        // Offset = 1
        if (this.sectionStart + 1 < this._index) {
            var entity = this.buffer.substring(this.sectionStart + 1, this._index);
            if (Object.prototype.hasOwnProperty.call(map, entity)) {
                this.emitPartial(map[entity]);
                this.sectionStart = this._index + 1;
            }
        }
    };
    // Parses legacy entities (without trailing semicolon)
    Tokenizer.prototype.parseLegacyEntity = function () {
        var start = this.sectionStart + 1;
        // The max length of legacy entities is 6
        var limit = Math.min(this._index - start, 6);
        while (limit >= 2) {
            // The min length of legacy entities is 2
            var entity = this.buffer.substr(start, limit);
            if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
                this.emitPartial(legacy_json_1.default[entity]);
                this.sectionStart += limit + 1;
                return;
            }
            limit--;
        }
    };
    Tokenizer.prototype.stateInNamedEntity = function (c) {
        if (c === ";") {
            this.parseFixedEntity();
            // Retry as legacy entity if entity wasn't parsed
            if (this.baseState === 1 /* Text */ &&
                this.sectionStart + 1 < this._index &&
                !this.xmlMode) {
                this.parseLegacyEntity();
            }
            this._state = this.baseState;
        }
        else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {
            if (this.xmlMode || this.sectionStart + 1 === this._index) {
                // Ignore
            }
            else if (this.baseState !== 1 /* Text */) {
                if (c !== "=") {
                    // Parse as legacy entity, without allowing additional characters.
                    this.parseFixedEntity(legacy_json_1.default);
                }
            }
            else {
                this.parseLegacyEntity();
            }
            this._state = this.baseState;
            this._index--;
        }
    };
    Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {
        var sectionStart = this.sectionStart + offset;
        if (sectionStart !== this._index) {
            // Parse entity
            var entity = this.buffer.substring(sectionStart, this._index);
            var parsed = parseInt(entity, base);
            this.emitPartial(decode_codepoint_1.default(parsed));
            this.sectionStart = strict ? this._index + 1 : this._index;
        }
        this._state = this.baseState;
    };
    Tokenizer.prototype.stateInNumericEntity = function (c) {
        if (c === ";") {
            this.decodeNumericEntity(2, 10, true);
        }
        else if (c < "0" || c > "9") {
            if (!this.xmlMode) {
                this.decodeNumericEntity(2, 10, false);
            }
            else {
                this._state = this.baseState;
            }
            this._index--;
        }
    };
    Tokenizer.prototype.stateInHexEntity = function (c) {
        if (c === ";") {
            this.decodeNumericEntity(3, 16, true);
        }
        else if ((c < "a" || c > "f") &&
            (c < "A" || c > "F") &&
            (c < "0" || c > "9")) {
            if (!this.xmlMode) {
                this.decodeNumericEntity(3, 16, false);
            }
            else {
                this._state = this.baseState;
            }
            this._index--;
        }
    };
    Tokenizer.prototype.cleanup = function () {
        if (this.sectionStart < 0) {
            this.buffer = "";
            this.bufferOffset += this._index;
            this._index = 0;
        }
        else if (this.running) {
            if (this._state === 1 /* Text */) {
                if (this.sectionStart !== this._index) {
                    this.cbs.ontext(this.buffer.substr(this.sectionStart));
                }
                this.buffer = "";
                this.bufferOffset += this._index;
                this._index = 0;
            }
            else if (this.sectionStart === this._index) {
                // The section just started
                this.buffer = "";
                this.bufferOffset += this._index;
                this._index = 0;
            }
            else {
                // Remove everything unnecessary
                this.buffer = this.buffer.substr(this.sectionStart);
                this._index -= this.sectionStart;
                this.bufferOffset += this.sectionStart;
            }
            this.sectionStart = 0;
        }
    };
    /**
     * Iterates through the buffer, calling the function corresponding to the current state.
     *
     * States that are more likely to be hit are higher up, as a performance improvement.
     */
    Tokenizer.prototype.parse = function () {
        while (this._index < this.buffer.length && this.running) {
            var c = this.buffer.charAt(this._index);
            if (this._state === 1 /* Text */) {
                this.stateText(c);
            }
            else if (this._state === 12 /* InAttributeValueDq */) {
                this.stateInAttributeValueDoubleQuotes(c);
            }
            else if (this._state === 9 /* InAttributeName */) {
                this.stateInAttributeName(c);
            }
            else if (this._state === 19 /* InComment */) {
                this.stateInComment(c);
            }
            else if (this._state === 20 /* InSpecialComment */) {
                this.stateInSpecialComment(c);
            }
            else if (this._state === 8 /* BeforeAttributeName */) {
                this.stateBeforeAttributeName(c);
            }
            else if (this._state === 3 /* InTagName */) {
                this.stateInTagName(c);
            }
            else if (this._state === 6 /* InClosingTagName */) {
                this.stateInClosingTagName(c);
            }
            else if (this._state === 2 /* BeforeTagName */) {
                this.stateBeforeTagName(c);
            }
            else if (this._state === 10 /* AfterAttributeName */) {
                this.stateAfterAttributeName(c);
            }
            else if (this._state === 13 /* InAttributeValueSq */) {
                this.stateInAttributeValueSingleQuotes(c);
            }
            else if (this._state === 11 /* BeforeAttributeValue */) {
                this.stateBeforeAttributeValue(c);
            }
            else if (this._state === 5 /* BeforeClosingTagName */) {
                this.stateBeforeClosingTagName(c);
            }
            else if (this._state === 7 /* AfterClosingTagName */) {
                this.stateAfterClosingTagName(c);
            }
            else if (this._state === 32 /* BeforeSpecialS */) {
                this.stateBeforeSpecialS(c);
            }
            else if (this._state === 21 /* AfterComment1 */) {
                this.stateAfterComment1(c);
            }
            else if (this._state === 14 /* InAttributeValueNq */) {
                this.stateInAttributeValueNoQuotes(c);
            }
            else if (this._state === 4 /* InSelfClosingTag */) {
                this.stateInSelfClosingTag(c);
            }
            else if (this._state === 16 /* InDeclaration */) {
                this.stateInDeclaration(c);
            }
            else if (this._state === 15 /* BeforeDeclaration */) {
                this.stateBeforeDeclaration(c);
            }
            else if (this._state === 22 /* AfterComment2 */) {
                this.stateAfterComment2(c);
            }
            else if (this._state === 18 /* BeforeComment */) {
                this.stateBeforeComment(c);
            }
            else if (this._state === 33 /* BeforeSpecialSEnd */) {
                this.stateBeforeSpecialSEnd(c);
            }
            else if (this._state === 53 /* BeforeSpecialTEnd */) {
                stateAfterSpecialTEnd(this, c);
            }
            else if (this._state === 39 /* AfterScript1 */) {
                stateAfterScript1(this, c);
            }
            else if (this._state === 40 /* AfterScript2 */) {
                stateAfterScript2(this, c);
            }
            else if (this._state === 41 /* AfterScript3 */) {
                stateAfterScript3(this, c);
            }
            else if (this._state === 34 /* BeforeScript1 */) {
                stateBeforeScript1(this, c);
            }
            else if (this._state === 35 /* BeforeScript2 */) {
                stateBeforeScript2(this, c);
            }
            else if (this._state === 36 /* BeforeScript3 */) {
                stateBeforeScript3(this, c);
            }
            else if (this._state === 37 /* BeforeScript4 */) {
                stateBeforeScript4(this, c);
            }
            else if (this._state === 38 /* BeforeScript5 */) {
                this.stateBeforeSpecialLast(c, 2 /* Script */);
            }
            else if (this._state === 42 /* AfterScript4 */) {
                stateAfterScript4(this, c);
            }
            else if (this._state === 43 /* AfterScript5 */) {
                this.stateAfterSpecialLast(c, 6);
            }
            else if (this._state === 44 /* BeforeStyle1 */) {
                stateBeforeStyle1(this, c);
            }
            else if (this._state === 29 /* InCdata */) {
                this.stateInCdata(c);
            }
            else if (this._state === 45 /* BeforeStyle2 */) {
                stateBeforeStyle2(this, c);
            }
            else if (this._state === 46 /* BeforeStyle3 */) {
                stateBeforeStyle3(this, c);
            }
            else if (this._state === 47 /* BeforeStyle4 */) {
                this.stateBeforeSpecialLast(c, 3 /* Style */);
            }
            else if (this._state === 48 /* AfterStyle1 */) {
                stateAfterStyle1(this, c);
            }
            else if (this._state === 49 /* AfterStyle2 */) {
                stateAfterStyle2(this, c);
            }
            else if (this._state === 50 /* AfterStyle3 */) {
                stateAfterStyle3(this, c);
            }
            else if (this._state === 51 /* AfterStyle4 */) {
                this.stateAfterSpecialLast(c, 5);
            }
            else if (this._state === 52 /* BeforeSpecialT */) {
                stateBeforeSpecialT(this, c);
            }
            else if (this._state === 54 /* BeforeTitle1 */) {
                stateBeforeTitle1(this, c);
            }
            else if (this._state === 55 /* BeforeTitle2 */) {
                stateBeforeTitle2(this, c);
            }
            else if (this._state === 56 /* BeforeTitle3 */) {
                stateBeforeTitle3(this, c);
            }
            else if (this._state === 57 /* BeforeTitle4 */) {
                this.stateBeforeSpecialLast(c, 4 /* Title */);
            }
            else if (this._state === 58 /* AfterTitle1 */) {
                stateAfterTitle1(this, c);
            }
            else if (this._state === 59 /* AfterTitle2 */) {
                stateAfterTitle2(this, c);
            }
            else if (this._state === 60 /* AfterTitle3 */) {
                stateAfterTitle3(this, c);
            }
            else if (this._state === 61 /* AfterTitle4 */) {
                this.stateAfterSpecialLast(c, 5);
            }
            else if (this._state === 17 /* InProcessingInstruction */) {
                this.stateInProcessingInstruction(c);
            }
            else if (this._state === 64 /* InNamedEntity */) {
                this.stateInNamedEntity(c);
            }
            else if (this._state === 23 /* BeforeCdata1 */) {
                stateBeforeCdata1(this, c);
            }
            else if (this._state === 62 /* BeforeEntity */) {
                stateBeforeEntity(this, c);
            }
            else if (this._state === 24 /* BeforeCdata2 */) {
                stateBeforeCdata2(this, c);
            }
            else if (this._state === 25 /* BeforeCdata3 */) {
                stateBeforeCdata3(this, c);
            }
            else if (this._state === 30 /* AfterCdata1 */) {
                this.stateAfterCdata1(c);
            }
            else if (this._state === 31 /* AfterCdata2 */) {
                this.stateAfterCdata2(c);
            }
            else if (this._state === 26 /* BeforeCdata4 */) {
                stateBeforeCdata4(this, c);
            }
            else if (this._state === 27 /* BeforeCdata5 */) {
                stateBeforeCdata5(this, c);
            }
            else if (this._state === 28 /* BeforeCdata6 */) {
                this.stateBeforeCdata6(c);
            }
            else if (this._state === 66 /* InHexEntity */) {
                this.stateInHexEntity(c);
            }
            else if (this._state === 65 /* InNumericEntity */) {
                this.stateInNumericEntity(c);
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            }
            else if (this._state === 63 /* BeforeNumericEntity */) {
                stateBeforeNumericEntity(this, c);
            }
            else {
                this.cbs.onerror(Error("unknown _state"), this._state);
            }
            this._index++;
        }
        this.cleanup();
    };
    Tokenizer.prototype.finish = function () {
        // If there is remaining data, emit it in a reasonable way
        if (this.sectionStart < this._index) {
            this.handleTrailingData();
        }
        this.cbs.onend();
    };
    Tokenizer.prototype.handleTrailingData = function () {
        var data = this.buffer.substr(this.sectionStart);
        if (this._state === 29 /* InCdata */ ||
            this._state === 30 /* AfterCdata1 */ ||
            this._state === 31 /* AfterCdata2 */) {
            this.cbs.oncdata(data);
        }
        else if (this._state === 19 /* InComment */ ||
            this._state === 21 /* AfterComment1 */ ||
            this._state === 22 /* AfterComment2 */) {
            this.cbs.oncomment(data);
        }
        else if (this._state === 64 /* InNamedEntity */ && !this.xmlMode) {
            this.parseLegacyEntity();
            if (this.sectionStart < this._index) {
                this._state = this.baseState;
                this.handleTrailingData();
            }
        }
        else if (this._state === 65 /* InNumericEntity */ && !this.xmlMode) {
            this.decodeNumericEntity(2, 10, false);
            if (this.sectionStart < this._index) {
                this._state = this.baseState;
                this.handleTrailingData();
            }
        }
        else if (this._state === 66 /* InHexEntity */ && !this.xmlMode) {
            this.decodeNumericEntity(3, 16, false);
            if (this.sectionStart < this._index) {
                this._state = this.baseState;
                this.handleTrailingData();
            }
        }
        else if (this._state !== 3 /* InTagName */ &&
            this._state !== 8 /* BeforeAttributeName */ &&
            this._state !== 11 /* BeforeAttributeValue */ &&
            this._state !== 10 /* AfterAttributeName */ &&
            this._state !== 9 /* InAttributeName */ &&
            this._state !== 13 /* InAttributeValueSq */ &&
            this._state !== 12 /* InAttributeValueDq */ &&
            this._state !== 14 /* InAttributeValueNq */ &&
            this._state !== 6 /* InClosingTagName */) {
            this.cbs.ontext(data);
        }
        /*
         * Else, ignore remaining data
         * TODO add a way to remove current tag
         */
    };
    Tokenizer.prototype.getSection = function () {
        return this.buffer.substring(this.sectionStart, this._index);
    };
    Tokenizer.prototype.emitToken = function (name) {
        this.cbs[name](this.getSection());
        this.sectionStart = -1;
    };
    Tokenizer.prototype.emitPartial = function (value) {
        if (this.baseState !== 1 /* Text */) {
            this.cbs.onattribdata(value); // TODO implement the new event
        }
        else {
            this.cbs.ontext(value);
        }
    };
    return Tokenizer;
}());
exports.default = Tokenizer;

},{"entities/lib/decode_codepoint":47,"entities/lib/maps/entities.json":51,"entities/lib/maps/legacy.json":52,"entities/lib/maps/xml.json":53}],57:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
var Parser_1 = require("./Parser");
Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return Parser_1.Parser; } });
var domhandler_1 = require("domhandler");
Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function () { return domhandler_1.DomHandler; } });
Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function () { return domhandler_1.DomHandler; } });
// Helper methods
/**
 * Parses the data, returns the resulting document.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 */
function parseDocument(data, options) {
    var handler = new domhandler_1.DomHandler(undefined, options);
    new Parser_1.Parser(handler, options).end(data);
    return handler.root;
}
exports.parseDocument = parseDocument;
/**
 * Parses data, returns an array of the root nodes.
 *
 * Note that the root nodes still have a `Document` node as their parent.
 * Use `parseDocument` to get the `Document` node instead.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 * @deprecated Use `parseDocument` instead.
 */
function parseDOM(data, options) {
    return parseDocument(data, options).children;
}
exports.parseDOM = parseDOM;
/**
 * Creates a parser instance, with an attached DOM handler.
 *
 * @param cb A callback that will be called once parsing has been completed.
 * @param options Optional options for the parser and DOM builder.
 * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
 */
function createDomStream(cb, options, elementCb) {
    var handler = new domhandler_1.DomHandler(cb, options, elementCb);
    return new Parser_1.Parser(handler, options);
}
exports.createDomStream = createDomStream;
var Tokenizer_1 = require("./Tokenizer");
Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function () { return __importDefault(Tokenizer_1).default; } });
var ElementType = __importStar(require("domelementtype"));
exports.ElementType = ElementType;
/*
 * All of the following exports exist for backwards-compatibility.
 * They should probably be removed eventually.
 */
__exportStar(require("./FeedHandler"), exports);
exports.DomUtils = __importStar(require("domutils"));
var FeedHandler_1 = require("./FeedHandler");
Object.defineProperty(exports, "RssHandler", { enumerable: true, get: function () { return FeedHandler_1.FeedHandler; } });

},{"./FeedHandler":54,"./Parser":55,"./Tokenizer":56,"domelementtype":35,"domhandler":36,"domutils":39}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
var boolbase_1 = require("boolbase");
/**
 * Returns a function that checks if an elements index matches the given rule
 * highly optimized to return the fastest solution.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A highly optimized function that returns whether an index matches the nth-check.
 * @example
 * const check = nthCheck.compile([2, 3]);
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */
function compile(parsed) {
    var a = parsed[0];
    // Subtract 1 from `b`, to convert from one- to zero-indexed.
    var b = parsed[1] - 1;
    /*
     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
     * Besides, the specification states that no elements are
     * matched when `a` and `b` are 0.
     *
     * `b < 0` here as we subtracted 1 from `b` above.
     */
    if (b < 0 && a <= 0)
        return boolbase_1.falseFunc;
    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
    if (a === -1)
        return function (index) { return index <= b; };
    if (a === 0)
        return function (index) { return index === b; };
    // When `b <= 0` and `a === 1`, they match any element.
    if (a === 1)
        return b < 0 ? boolbase_1.trueFunc : function (index) { return index >= b; };
    /*
     * Otherwise, modulo can be used to check if there is a match.
     *
     * Modulo doesn't care about the sign, so let's use `a`s absolute value.
     */
    var absA = Math.abs(a);
    // Get `b mod a`, + a if this is negative.
    var bMod = ((b % absA) + absA) % absA;
    return a > 1
        ? function (index) { return index >= b && index % absA === bMod; }
        : function (index) { return index <= b && index % absA === bMod; };
}
exports.compile = compile;

},{"boolbase":4}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = exports.parse = void 0;
var parse_1 = require("./parse");
Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return parse_1.parse; } });
var compile_1 = require("./compile");
Object.defineProperty(exports, "compile", { enumerable: true, get: function () { return compile_1.compile; } });
/**
 * Parses and compiles a formula to a highly optimized function.
 * Combination of `parse` and `compile`.
 *
 * If the formula doesn't match any elements,
 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
 * Otherwise, a function accepting an _index_ is returned, which returns
 * whether or not the passed _index_ matches the formula.
 *
 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
 *
 * @param formula The formula to compile.
 * @example
 * const check = nthCheck("2n+3");
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */
function nthCheck(formula) {
    return compile_1.compile(parse_1.parse(formula));
}
exports.default = nthCheck;

},{"./compile":58,"./parse":60}],60:[function(require,module,exports){
"use strict";
// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
// [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var RE_NTH_ELEMENT = /^([+-]?\d*n)?\s*(?:([+-]?)\s*(\d+))?$/;
/**
 * Parses an expression.
 *
 * @throws An `Error` if parsing fails.
 * @returns An array containing the integer step size and the integer offset of the nth rule.
 * @example nthCheck.parse("2n+3"); // returns [2, 3]
 */
function parse(formula) {
    formula = formula.trim().toLowerCase();
    if (formula === "even") {
        return [2, 0];
    }
    else if (formula === "odd") {
        return [2, 1];
    }
    var parsed = formula.match(RE_NTH_ELEMENT);
    if (!parsed) {
        throw new Error("n-th rule couldn't be parsed ('" + formula + "')");
    }
    var a;
    if (parsed[1]) {
        a = parseInt(parsed[1], 10);
        if (isNaN(a)) {
            a = parsed[1].startsWith("-") ? -1 : 1;
        }
    }
    else
        a = 0;
    var b = (parsed[2] === "-" ? -1 : 1) *
        (parsed[3] ? parseInt(parsed[3], 10) : 0);
    return [a, b];
}
exports.parse = parse;

},{}],61:[function(require,module,exports){
'use strict';

const doctype = require('parse5/lib/common/doctype');
const { DOCUMENT_MODE } = require('parse5/lib/common/html');

//Conversion tables for DOM Level1 structure emulation
const nodeTypes = {
    element: 1,
    text: 3,
    cdata: 4,
    comment: 8
};

const nodePropertyShorthands = {
    tagName: 'name',
    childNodes: 'children',
    parentNode: 'parent',
    previousSibling: 'prev',
    nextSibling: 'next',
    nodeValue: 'data'
};

//Node
class Node {
    constructor(props) {
        for (const key of Object.keys(props)) {
            this[key] = props[key];
        }
    }

    get firstChild() {
        const children = this.children;

        return (children && children[0]) || null;
    }

    get lastChild() {
        const children = this.children;

        return (children && children[children.length - 1]) || null;
    }

    get nodeType() {
        return nodeTypes[this.type] || nodeTypes.element;
    }
}

Object.keys(nodePropertyShorthands).forEach(key => {
    const shorthand = nodePropertyShorthands[key];

    Object.defineProperty(Node.prototype, key, {
        get: function() {
            return this[shorthand] || null;
        },
        set: function(val) {
            this[shorthand] = val;
            return val;
        }
    });
});

//Node construction
exports.createDocument = function() {
    return new Node({
        type: 'root',
        name: 'root',
        parent: null,
        prev: null,
        next: null,
        children: [],
        'x-mode': DOCUMENT_MODE.NO_QUIRKS
    });
};

exports.createDocumentFragment = function() {
    return new Node({
        type: 'root',
        name: 'root',
        parent: null,
        prev: null,
        next: null,
        children: []
    });
};

exports.createElement = function(tagName, namespaceURI, attrs) {
    const attribs = Object.create(null);
    const attribsNamespace = Object.create(null);
    const attribsPrefix = Object.create(null);

    for (let i = 0; i < attrs.length; i++) {
        const attrName = attrs[i].name;

        attribs[attrName] = attrs[i].value;
        attribsNamespace[attrName] = attrs[i].namespace;
        attribsPrefix[attrName] = attrs[i].prefix;
    }

    return new Node({
        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',
        name: tagName,
        namespace: namespaceURI,
        attribs: attribs,
        'x-attribsNamespace': attribsNamespace,
        'x-attribsPrefix': attribsPrefix,
        children: [],
        parent: null,
        prev: null,
        next: null
    });
};

exports.createCommentNode = function(data) {
    return new Node({
        type: 'comment',
        data: data,
        parent: null,
        prev: null,
        next: null
    });
};

const createTextNode = function(value) {
    return new Node({
        type: 'text',
        data: value,
        parent: null,
        prev: null,
        next: null
    });
};

//Tree mutation
const appendChild = (exports.appendChild = function(parentNode, newNode) {
    const prev = parentNode.children[parentNode.children.length - 1];

    if (prev) {
        prev.next = newNode;
        newNode.prev = prev;
    }

    parentNode.children.push(newNode);
    newNode.parent = parentNode;
});

const insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.children.indexOf(referenceNode);
    const prev = referenceNode.prev;

    if (prev) {
        prev.next = newNode;
        newNode.prev = prev;
    }

    referenceNode.prev = newNode;
    newNode.next = referenceNode;

    parentNode.children.splice(insertionIdx, 0, newNode);
    newNode.parent = parentNode;
});

exports.setTemplateContent = function(templateElement, contentElement) {
    appendChild(templateElement, contentElement);
};

exports.getTemplateContent = function(templateElement) {
    return templateElement.children[0];
};

exports.setDocumentType = function(document, name, publicId, systemId) {
    const data = doctype.serializeContent(name, publicId, systemId);
    let doctypeNode = null;

    for (let i = 0; i < document.children.length; i++) {
        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {
            doctypeNode = document.children[i];
            break;
        }
    }

    if (doctypeNode) {
        doctypeNode.data = data;
        doctypeNode['x-name'] = name;
        doctypeNode['x-publicId'] = publicId;
        doctypeNode['x-systemId'] = systemId;
    } else {
        appendChild(
            document,
            new Node({
                type: 'directive',
                name: '!doctype',
                data: data,
                'x-name': name,
                'x-publicId': publicId,
                'x-systemId': systemId
            })
        );
    }
};

exports.setDocumentMode = function(document, mode) {
    document['x-mode'] = mode;
};

exports.getDocumentMode = function(document) {
    return document['x-mode'];
};

exports.detachNode = function(node) {
    if (node.parent) {
        const idx = node.parent.children.indexOf(node);
        const prev = node.prev;
        const next = node.next;

        node.prev = null;
        node.next = null;

        if (prev) {
            prev.next = next;
        }

        if (next) {
            next.prev = prev;
        }

        node.parent.children.splice(idx, 1);
        node.parent = null;
    }
};

exports.insertText = function(parentNode, text) {
    const lastChild = parentNode.children[parentNode.children.length - 1];

    if (lastChild && lastChild.type === 'text') {
        lastChild.data += text;
    } else {
        appendChild(parentNode, createTextNode(text));
    }
};

exports.insertTextBefore = function(parentNode, text, referenceNode) {
    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];

    if (prevNode && prevNode.type === 'text') {
        prevNode.data += text;
    } else {
        insertBefore(parentNode, createTextNode(text), referenceNode);
    }
};

exports.adoptAttributes = function(recipient, attrs) {
    for (let i = 0; i < attrs.length; i++) {
        const attrName = attrs[i].name;

        if (typeof recipient.attribs[attrName] === 'undefined') {
            recipient.attribs[attrName] = attrs[i].value;
            recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;
            recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;
        }
    }
};

//Tree traversing
exports.getFirstChild = function(node) {
    return node.children[0];
};

exports.getChildNodes = function(node) {
    return node.children;
};

exports.getParentNode = function(node) {
    return node.parent;
};

exports.getAttrList = function(element) {
    const attrList = [];

    for (const name in element.attribs) {
        attrList.push({
            name: name,
            value: element.attribs[name],
            namespace: element['x-attribsNamespace'][name],
            prefix: element['x-attribsPrefix'][name]
        });
    }

    return attrList;
};

//Node data
exports.getTagName = function(element) {
    return element.name;
};

exports.getNamespaceURI = function(element) {
    return element.namespace;
};

exports.getTextNodeContent = function(textNode) {
    return textNode.data;
};

exports.getCommentNodeContent = function(commentNode) {
    return commentNode.data;
};

exports.getDocumentTypeNodeName = function(doctypeNode) {
    return doctypeNode['x-name'];
};

exports.getDocumentTypeNodePublicId = function(doctypeNode) {
    return doctypeNode['x-publicId'];
};

exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
    return doctypeNode['x-systemId'];
};

//Node types
exports.isTextNode = function(node) {
    return node.type === 'text';
};

exports.isCommentNode = function(node) {
    return node.type === 'comment';
};

exports.isDocumentTypeNode = function(node) {
    return node.type === 'directive' && node.name === '!doctype';
};

exports.isElementNode = function(node) {
    return !!node.attribs;
};

// Source code location
exports.setNodeSourceCodeLocation = function(node, location) {
    node.sourceCodeLocation = location;
};

exports.getNodeSourceCodeLocation = function(node) {
    return node.sourceCodeLocation;
};

exports.updateNodeSourceCodeLocation = function(node, endLocation) {
    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
};

},{"parse5/lib/common/doctype":62,"parse5/lib/common/html":65}],62:[function(require,module,exports){
'use strict';

const { DOCUMENT_MODE } = require('./html');

//Const
const VALID_DOCTYPE_NAME = 'html';
const VALID_SYSTEM_ID = 'about:legacy-compat';
const QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';

const QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
    '+//silmaril//dtd html pro v0r11 19970101//',
    '-//as//dtd html 3.0 aswedit + extensions//',
    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
    '-//ietf//dtd html 2.0 level 1//',
    '-//ietf//dtd html 2.0 level 2//',
    '-//ietf//dtd html 2.0 strict level 1//',
    '-//ietf//dtd html 2.0 strict level 2//',
    '-//ietf//dtd html 2.0 strict//',
    '-//ietf//dtd html 2.0//',
    '-//ietf//dtd html 2.1e//',
    '-//ietf//dtd html 3.0//',
    '-//ietf//dtd html 3.2 final//',
    '-//ietf//dtd html 3.2//',
    '-//ietf//dtd html 3//',
    '-//ietf//dtd html level 0//',
    '-//ietf//dtd html level 1//',
    '-//ietf//dtd html level 2//',
    '-//ietf//dtd html level 3//',
    '-//ietf//dtd html strict level 0//',
    '-//ietf//dtd html strict level 1//',
    '-//ietf//dtd html strict level 2//',
    '-//ietf//dtd html strict level 3//',
    '-//ietf//dtd html strict//',
    '-//ietf//dtd html//',
    '-//metrius//dtd metrius presentational//',
    '-//microsoft//dtd internet explorer 2.0 html strict//',
    '-//microsoft//dtd internet explorer 2.0 html//',
    '-//microsoft//dtd internet explorer 2.0 tables//',
    '-//microsoft//dtd internet explorer 3.0 html strict//',
    '-//microsoft//dtd internet explorer 3.0 html//',
    '-//microsoft//dtd internet explorer 3.0 tables//',
    '-//netscape comm. corp.//dtd html//',
    '-//netscape comm. corp.//dtd strict html//',
    "-//o'reilly and associates//dtd html 2.0//",
    "-//o'reilly and associates//dtd html extended 1.0//",
    "-//o'reilly and associates//dtd html extended relaxed 1.0//",
    '-//sq//dtd html 2.0 hotmetal + extensions//',
    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
    '-//spyglass//dtd html 2.0 extended//',
    '-//sun microsystems corp.//dtd hotjava html//',
    '-//sun microsystems corp.//dtd hotjava strict html//',
    '-//w3c//dtd html 3 1995-03-24//',
    '-//w3c//dtd html 3.2 draft//',
    '-//w3c//dtd html 3.2 final//',
    '-//w3c//dtd html 3.2//',
    '-//w3c//dtd html 3.2s draft//',
    '-//w3c//dtd html 4.0 frameset//',
    '-//w3c//dtd html 4.0 transitional//',
    '-//w3c//dtd html experimental 19960712//',
    '-//w3c//dtd html experimental 970421//',
    '-//w3c//dtd w3 html//',
    '-//w3o//dtd w3 html 3.0//',
    '-//webtechs//dtd mozilla html 2.0//',
    '-//webtechs//dtd mozilla html//'
];

const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
    '-//w3c//dtd html 4.01 frameset//',
    '-//w3c//dtd html 4.01 transitional//'
]);

const QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];
const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];

const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
    '-//w3c//dtd html 4.01 frameset//',
    '-//w3c//dtd html 4.01 transitional//'
]);

//Utils
function enquoteDoctypeId(id) {
    const quote = id.indexOf('"') !== -1 ? "'" : '"';

    return quote + id + quote;
}

function hasPrefix(publicId, prefixes) {
    for (let i = 0; i < prefixes.length; i++) {
        if (publicId.indexOf(prefixes[i]) === 0) {
            return true;
        }
    }

    return false;
}

//API
exports.isConforming = function(token) {
    return (
        token.name === VALID_DOCTYPE_NAME &&
        token.publicId === null &&
        (token.systemId === null || token.systemId === VALID_SYSTEM_ID)
    );
};

exports.getDocumentMode = function(token) {
    if (token.name !== VALID_DOCTYPE_NAME) {
        return DOCUMENT_MODE.QUIRKS;
    }

    const systemId = token.systemId;

    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
        return DOCUMENT_MODE.QUIRKS;
    }

    let publicId = token.publicId;

    if (publicId !== null) {
        publicId = publicId.toLowerCase();

        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
            return DOCUMENT_MODE.QUIRKS;
        }

        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;

        if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.QUIRKS;
        }

        prefixes =
            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;

        if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.LIMITED_QUIRKS;
        }
    }

    return DOCUMENT_MODE.NO_QUIRKS;
};

exports.serializeContent = function(name, publicId, systemId) {
    let str = '!DOCTYPE ';

    if (name) {
        str += name;
    }

    if (publicId) {
        str += ' PUBLIC ' + enquoteDoctypeId(publicId);
    } else if (systemId) {
        str += ' SYSTEM';
    }

    if (systemId !== null) {
        str += ' ' + enquoteDoctypeId(systemId);
    }

    return str;
};

},{"./html":65}],63:[function(require,module,exports){
'use strict';

module.exports = {
    controlCharacterInInputStream: 'control-character-in-input-stream',
    noncharacterInInputStream: 'noncharacter-in-input-stream',
    surrogateInInputStream: 'surrogate-in-input-stream',
    nonVoidHtmlElementStartTagWithTrailingSolidus: 'non-void-html-element-start-tag-with-trailing-solidus',
    endTagWithAttributes: 'end-tag-with-attributes',
    endTagWithTrailingSolidus: 'end-tag-with-trailing-solidus',
    unexpectedSolidusInTag: 'unexpected-solidus-in-tag',
    unexpectedNullCharacter: 'unexpected-null-character',
    unexpectedQuestionMarkInsteadOfTagName: 'unexpected-question-mark-instead-of-tag-name',
    invalidFirstCharacterOfTagName: 'invalid-first-character-of-tag-name',
    unexpectedEqualsSignBeforeAttributeName: 'unexpected-equals-sign-before-attribute-name',
    missingEndTagName: 'missing-end-tag-name',
    unexpectedCharacterInAttributeName: 'unexpected-character-in-attribute-name',
    unknownNamedCharacterReference: 'unknown-named-character-reference',
    missingSemicolonAfterCharacterReference: 'missing-semicolon-after-character-reference',
    unexpectedCharacterAfterDoctypeSystemIdentifier: 'unexpected-character-after-doctype-system-identifier',
    unexpectedCharacterInUnquotedAttributeValue: 'unexpected-character-in-unquoted-attribute-value',
    eofBeforeTagName: 'eof-before-tag-name',
    eofInTag: 'eof-in-tag',
    missingAttributeValue: 'missing-attribute-value',
    missingWhitespaceBetweenAttributes: 'missing-whitespace-between-attributes',
    missingWhitespaceAfterDoctypePublicKeyword: 'missing-whitespace-after-doctype-public-keyword',
    missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:
        'missing-whitespace-between-doctype-public-and-system-identifiers',
    missingWhitespaceAfterDoctypeSystemKeyword: 'missing-whitespace-after-doctype-system-keyword',
    missingQuoteBeforeDoctypePublicIdentifier: 'missing-quote-before-doctype-public-identifier',
    missingQuoteBeforeDoctypeSystemIdentifier: 'missing-quote-before-doctype-system-identifier',
    missingDoctypePublicIdentifier: 'missing-doctype-public-identifier',
    missingDoctypeSystemIdentifier: 'missing-doctype-system-identifier',
    abruptDoctypePublicIdentifier: 'abrupt-doctype-public-identifier',
    abruptDoctypeSystemIdentifier: 'abrupt-doctype-system-identifier',
    cdataInHtmlContent: 'cdata-in-html-content',
    incorrectlyOpenedComment: 'incorrectly-opened-comment',
    eofInScriptHtmlCommentLikeText: 'eof-in-script-html-comment-like-text',
    eofInDoctype: 'eof-in-doctype',
    nestedComment: 'nested-comment',
    abruptClosingOfEmptyComment: 'abrupt-closing-of-empty-comment',
    eofInComment: 'eof-in-comment',
    incorrectlyClosedComment: 'incorrectly-closed-comment',
    eofInCdata: 'eof-in-cdata',
    absenceOfDigitsInNumericCharacterReference: 'absence-of-digits-in-numeric-character-reference',
    nullCharacterReference: 'null-character-reference',
    surrogateCharacterReference: 'surrogate-character-reference',
    characterReferenceOutsideUnicodeRange: 'character-reference-outside-unicode-range',
    controlCharacterReference: 'control-character-reference',
    noncharacterCharacterReference: 'noncharacter-character-reference',
    missingWhitespaceBeforeDoctypeName: 'missing-whitespace-before-doctype-name',
    missingDoctypeName: 'missing-doctype-name',
    invalidCharacterSequenceAfterDoctypeName: 'invalid-character-sequence-after-doctype-name',
    duplicateAttribute: 'duplicate-attribute',
    nonConformingDoctype: 'non-conforming-doctype',
    missingDoctype: 'missing-doctype',
    misplacedDoctype: 'misplaced-doctype',
    endTagWithoutMatchingOpenElement: 'end-tag-without-matching-open-element',
    closingOfElementWithOpenChildElements: 'closing-of-element-with-open-child-elements',
    disallowedContentInNoscriptInHead: 'disallowed-content-in-noscript-in-head',
    openElementsLeftAfterEof: 'open-elements-left-after-eof',
    abandonedHeadElementChild: 'abandoned-head-element-child',
    misplacedStartTagForHeadElement: 'misplaced-start-tag-for-head-element',
    nestedNoscriptInHead: 'nested-noscript-in-head',
    eofInElementThatCanContainOnlyText: 'eof-in-element-that-can-contain-only-text'
};

},{}],64:[function(require,module,exports){
'use strict';

const Tokenizer = require('../tokenizer');
const HTML = require('./html');

//Aliases
const $ = HTML.TAG_NAMES;
const NS = HTML.NAMESPACES;
const ATTRS = HTML.ATTRS;

//MIME types
const MIME_TYPES = {
    TEXT_HTML: 'text/html',
    APPLICATION_XML: 'application/xhtml+xml'
};

//Attributes
const DEFINITION_URL_ATTR = 'definitionurl';
const ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
const SVG_ATTRS_ADJUSTMENT_MAP = {
    attributename: 'attributeName',
    attributetype: 'attributeType',
    basefrequency: 'baseFrequency',
    baseprofile: 'baseProfile',
    calcmode: 'calcMode',
    clippathunits: 'clipPathUnits',
    diffuseconstant: 'diffuseConstant',
    edgemode: 'edgeMode',
    filterunits: 'filterUnits',
    glyphref: 'glyphRef',
    gradienttransform: 'gradientTransform',
    gradientunits: 'gradientUnits',
    kernelmatrix: 'kernelMatrix',
    kernelunitlength: 'kernelUnitLength',
    keypoints: 'keyPoints',
    keysplines: 'keySplines',
    keytimes: 'keyTimes',
    lengthadjust: 'lengthAdjust',
    limitingconeangle: 'limitingConeAngle',
    markerheight: 'markerHeight',
    markerunits: 'markerUnits',
    markerwidth: 'markerWidth',
    maskcontentunits: 'maskContentUnits',
    maskunits: 'maskUnits',
    numoctaves: 'numOctaves',
    pathlength: 'pathLength',
    patterncontentunits: 'patternContentUnits',
    patterntransform: 'patternTransform',
    patternunits: 'patternUnits',
    pointsatx: 'pointsAtX',
    pointsaty: 'pointsAtY',
    pointsatz: 'pointsAtZ',
    preservealpha: 'preserveAlpha',
    preserveaspectratio: 'preserveAspectRatio',
    primitiveunits: 'primitiveUnits',
    refx: 'refX',
    refy: 'refY',
    repeatcount: 'repeatCount',
    repeatdur: 'repeatDur',
    requiredextensions: 'requiredExtensions',
    requiredfeatures: 'requiredFeatures',
    specularconstant: 'specularConstant',
    specularexponent: 'specularExponent',
    spreadmethod: 'spreadMethod',
    startoffset: 'startOffset',
    stddeviation: 'stdDeviation',
    stitchtiles: 'stitchTiles',
    surfacescale: 'surfaceScale',
    systemlanguage: 'systemLanguage',
    tablevalues: 'tableValues',
    targetx: 'targetX',
    targety: 'targetY',
    textlength: 'textLength',
    viewbox: 'viewBox',
    viewtarget: 'viewTarget',
    xchannelselector: 'xChannelSelector',
    ychannelselector: 'yChannelSelector',
    zoomandpan: 'zoomAndPan'
};

const XML_ATTRS_ADJUSTMENT_MAP = {
    'xlink:actuate': { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK },
    'xlink:arcrole': { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK },
    'xlink:href': { prefix: 'xlink', name: 'href', namespace: NS.XLINK },
    'xlink:role': { prefix: 'xlink', name: 'role', namespace: NS.XLINK },
    'xlink:show': { prefix: 'xlink', name: 'show', namespace: NS.XLINK },
    'xlink:title': { prefix: 'xlink', name: 'title', namespace: NS.XLINK },
    'xlink:type': { prefix: 'xlink', name: 'type', namespace: NS.XLINK },
    'xml:base': { prefix: 'xml', name: 'base', namespace: NS.XML },
    'xml:lang': { prefix: 'xml', name: 'lang', namespace: NS.XML },
    'xml:space': { prefix: 'xml', name: 'space', namespace: NS.XML },
    xmlns: { prefix: '', name: 'xmlns', namespace: NS.XMLNS },
    'xmlns:xlink': { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }
};

//SVG tag names adjustment map
const SVG_TAG_NAMES_ADJUSTMENT_MAP = (exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
    altglyph: 'altGlyph',
    altglyphdef: 'altGlyphDef',
    altglyphitem: 'altGlyphItem',
    animatecolor: 'animateColor',
    animatemotion: 'animateMotion',
    animatetransform: 'animateTransform',
    clippath: 'clipPath',
    feblend: 'feBlend',
    fecolormatrix: 'feColorMatrix',
    fecomponenttransfer: 'feComponentTransfer',
    fecomposite: 'feComposite',
    feconvolvematrix: 'feConvolveMatrix',
    fediffuselighting: 'feDiffuseLighting',
    fedisplacementmap: 'feDisplacementMap',
    fedistantlight: 'feDistantLight',
    feflood: 'feFlood',
    fefunca: 'feFuncA',
    fefuncb: 'feFuncB',
    fefuncg: 'feFuncG',
    fefuncr: 'feFuncR',
    fegaussianblur: 'feGaussianBlur',
    feimage: 'feImage',
    femerge: 'feMerge',
    femergenode: 'feMergeNode',
    femorphology: 'feMorphology',
    feoffset: 'feOffset',
    fepointlight: 'fePointLight',
    fespecularlighting: 'feSpecularLighting',
    fespotlight: 'feSpotLight',
    fetile: 'feTile',
    feturbulence: 'feTurbulence',
    foreignobject: 'foreignObject',
    glyphref: 'glyphRef',
    lineargradient: 'linearGradient',
    radialgradient: 'radialGradient',
    textpath: 'textPath'
});

//Tags that causes exit from foreign content
const EXITS_FOREIGN_CONTENT = {
    [$.B]: true,
    [$.BIG]: true,
    [$.BLOCKQUOTE]: true,
    [$.BODY]: true,
    [$.BR]: true,
    [$.CENTER]: true,
    [$.CODE]: true,
    [$.DD]: true,
    [$.DIV]: true,
    [$.DL]: true,
    [$.DT]: true,
    [$.EM]: true,
    [$.EMBED]: true,
    [$.H1]: true,
    [$.H2]: true,
    [$.H3]: true,
    [$.H4]: true,
    [$.H5]: true,
    [$.H6]: true,
    [$.HEAD]: true,
    [$.HR]: true,
    [$.I]: true,
    [$.IMG]: true,
    [$.LI]: true,
    [$.LISTING]: true,
    [$.MENU]: true,
    [$.META]: true,
    [$.NOBR]: true,
    [$.OL]: true,
    [$.P]: true,
    [$.PRE]: true,
    [$.RUBY]: true,
    [$.S]: true,
    [$.SMALL]: true,
    [$.SPAN]: true,
    [$.STRONG]: true,
    [$.STRIKE]: true,
    [$.SUB]: true,
    [$.SUP]: true,
    [$.TABLE]: true,
    [$.TT]: true,
    [$.U]: true,
    [$.UL]: true,
    [$.VAR]: true
};

//Check exit from foreign content
exports.causesExit = function(startTagToken) {
    const tn = startTagToken.tagName;
    const isFontWithAttrs =
        tn === $.FONT &&
        (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||
            Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||
            Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);

    return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
};

//Token adjustments
exports.adjustTokenMathMLAttrs = function(token) {
    for (let i = 0; i < token.attrs.length; i++) {
        if (token.attrs[i].name === DEFINITION_URL_ATTR) {
            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
        }
    }
};

exports.adjustTokenSVGAttrs = function(token) {
    for (let i = 0; i < token.attrs.length; i++) {
        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

        if (adjustedAttrName) {
            token.attrs[i].name = adjustedAttrName;
        }
    }
};

exports.adjustTokenXMLAttrs = function(token) {
    for (let i = 0; i < token.attrs.length; i++) {
        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

        if (adjustedAttrEntry) {
            token.attrs[i].prefix = adjustedAttrEntry.prefix;
            token.attrs[i].name = adjustedAttrEntry.name;
            token.attrs[i].namespace = adjustedAttrEntry.namespace;
        }
    }
};

exports.adjustTokenSVGTagName = function(token) {
    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

    if (adjustedTagName) {
        token.tagName = adjustedTagName;
    }
};

//Integration points
function isMathMLTextIntegrationPoint(tn, ns) {
    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
}

function isHtmlIntegrationPoint(tn, ns, attrs) {
    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
        for (let i = 0; i < attrs.length; i++) {
            if (attrs[i].name === ATTRS.ENCODING) {
                const value = attrs[i].value.toLowerCase();

                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
        }
    }

    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
}

exports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {
    if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
        return true;
    }

    if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
        return true;
    }

    return false;
};

},{"../tokenizer":80,"./html":65}],65:[function(require,module,exports){
'use strict';

const NS = (exports.NAMESPACES = {
    HTML: 'http://www.w3.org/1999/xhtml',
    MATHML: 'http://www.w3.org/1998/Math/MathML',
    SVG: 'http://www.w3.org/2000/svg',
    XLINK: 'http://www.w3.org/1999/xlink',
    XML: 'http://www.w3.org/XML/1998/namespace',
    XMLNS: 'http://www.w3.org/2000/xmlns/'
});

exports.ATTRS = {
    TYPE: 'type',
    ACTION: 'action',
    ENCODING: 'encoding',
    PROMPT: 'prompt',
    NAME: 'name',
    COLOR: 'color',
    FACE: 'face',
    SIZE: 'size'
};

exports.DOCUMENT_MODE = {
    NO_QUIRKS: 'no-quirks',
    QUIRKS: 'quirks',
    LIMITED_QUIRKS: 'limited-quirks'
};

const $ = (exports.TAG_NAMES = {
    A: 'a',
    ADDRESS: 'address',
    ANNOTATION_XML: 'annotation-xml',
    APPLET: 'applet',
    AREA: 'area',
    ARTICLE: 'article',
    ASIDE: 'aside',

    B: 'b',
    BASE: 'base',
    BASEFONT: 'basefont',
    BGSOUND: 'bgsound',
    BIG: 'big',
    BLOCKQUOTE: 'blockquote',
    BODY: 'body',
    BR: 'br',
    BUTTON: 'button',

    CAPTION: 'caption',
    CENTER: 'center',
    CODE: 'code',
    COL: 'col',
    COLGROUP: 'colgroup',

    DD: 'dd',
    DESC: 'desc',
    DETAILS: 'details',
    DIALOG: 'dialog',
    DIR: 'dir',
    DIV: 'div',
    DL: 'dl',
    DT: 'dt',

    EM: 'em',
    EMBED: 'embed',

    FIELDSET: 'fieldset',
    FIGCAPTION: 'figcaption',
    FIGURE: 'figure',
    FONT: 'font',
    FOOTER: 'footer',
    FOREIGN_OBJECT: 'foreignObject',
    FORM: 'form',
    FRAME: 'frame',
    FRAMESET: 'frameset',

    H1: 'h1',
    H2: 'h2',
    H3: 'h3',
    H4: 'h4',
    H5: 'h5',
    H6: 'h6',
    HEAD: 'head',
    HEADER: 'header',
    HGROUP: 'hgroup',
    HR: 'hr',
    HTML: 'html',

    I: 'i',
    IMG: 'img',
    IMAGE: 'image',
    INPUT: 'input',
    IFRAME: 'iframe',

    KEYGEN: 'keygen',

    LABEL: 'label',
    LI: 'li',
    LINK: 'link',
    LISTING: 'listing',

    MAIN: 'main',
    MALIGNMARK: 'malignmark',
    MARQUEE: 'marquee',
    MATH: 'math',
    MENU: 'menu',
    META: 'meta',
    MGLYPH: 'mglyph',
    MI: 'mi',
    MO: 'mo',
    MN: 'mn',
    MS: 'ms',
    MTEXT: 'mtext',

    NAV: 'nav',
    NOBR: 'nobr',
    NOFRAMES: 'noframes',
    NOEMBED: 'noembed',
    NOSCRIPT: 'noscript',

    OBJECT: 'object',
    OL: 'ol',
    OPTGROUP: 'optgroup',
    OPTION: 'option',

    P: 'p',
    PARAM: 'param',
    PLAINTEXT: 'plaintext',
    PRE: 'pre',

    RB: 'rb',
    RP: 'rp',
    RT: 'rt',
    RTC: 'rtc',
    RUBY: 'ruby',

    S: 's',
    SCRIPT: 'script',
    SECTION: 'section',
    SELECT: 'select',
    SOURCE: 'source',
    SMALL: 'small',
    SPAN: 'span',
    STRIKE: 'strike',
    STRONG: 'strong',
    STYLE: 'style',
    SUB: 'sub',
    SUMMARY: 'summary',
    SUP: 'sup',

    TABLE: 'table',
    TBODY: 'tbody',
    TEMPLATE: 'template',
    TEXTAREA: 'textarea',
    TFOOT: 'tfoot',
    TD: 'td',
    TH: 'th',
    THEAD: 'thead',
    TITLE: 'title',
    TR: 'tr',
    TRACK: 'track',
    TT: 'tt',

    U: 'u',
    UL: 'ul',

    SVG: 'svg',

    VAR: 'var',

    WBR: 'wbr',

    XMP: 'xmp'
});

exports.SPECIAL_ELEMENTS = {
    [NS.HTML]: {
        [$.ADDRESS]: true,
        [$.APPLET]: true,
        [$.AREA]: true,
        [$.ARTICLE]: true,
        [$.ASIDE]: true,
        [$.BASE]: true,
        [$.BASEFONT]: true,
        [$.BGSOUND]: true,
        [$.BLOCKQUOTE]: true,
        [$.BODY]: true,
        [$.BR]: true,
        [$.BUTTON]: true,
        [$.CAPTION]: true,
        [$.CENTER]: true,
        [$.COL]: true,
        [$.COLGROUP]: true,
        [$.DD]: true,
        [$.DETAILS]: true,
        [$.DIR]: true,
        [$.DIV]: true,
        [$.DL]: true,
        [$.DT]: true,
        [$.EMBED]: true,
        [$.FIELDSET]: true,
        [$.FIGCAPTION]: true,
        [$.FIGURE]: true,
        [$.FOOTER]: true,
        [$.FORM]: true,
        [$.FRAME]: true,
        [$.FRAMESET]: true,
        [$.H1]: true,
        [$.H2]: true,
        [$.H3]: true,
        [$.H4]: true,
        [$.H5]: true,
        [$.H6]: true,
        [$.HEAD]: true,
        [$.HEADER]: true,
        [$.HGROUP]: true,
        [$.HR]: true,
        [$.HTML]: true,
        [$.IFRAME]: true,
        [$.IMG]: true,
        [$.INPUT]: true,
        [$.LI]: true,
        [$.LINK]: true,
        [$.LISTING]: true,
        [$.MAIN]: true,
        [$.MARQUEE]: true,
        [$.MENU]: true,
        [$.META]: true,
        [$.NAV]: true,
        [$.NOEMBED]: true,
        [$.NOFRAMES]: true,
        [$.NOSCRIPT]: true,
        [$.OBJECT]: true,
        [$.OL]: true,
        [$.P]: true,
        [$.PARAM]: true,
        [$.PLAINTEXT]: true,
        [$.PRE]: true,
        [$.SCRIPT]: true,
        [$.SECTION]: true,
        [$.SELECT]: true,
        [$.SOURCE]: true,
        [$.STYLE]: true,
        [$.SUMMARY]: true,
        [$.TABLE]: true,
        [$.TBODY]: true,
        [$.TD]: true,
        [$.TEMPLATE]: true,
        [$.TEXTAREA]: true,
        [$.TFOOT]: true,
        [$.TH]: true,
        [$.THEAD]: true,
        [$.TITLE]: true,
        [$.TR]: true,
        [$.TRACK]: true,
        [$.UL]: true,
        [$.WBR]: true,
        [$.XMP]: true
    },
    [NS.MATHML]: {
        [$.MI]: true,
        [$.MO]: true,
        [$.MN]: true,
        [$.MS]: true,
        [$.MTEXT]: true,
        [$.ANNOTATION_XML]: true
    },
    [NS.SVG]: {
        [$.TITLE]: true,
        [$.FOREIGN_OBJECT]: true,
        [$.DESC]: true
    }
};

},{}],66:[function(require,module,exports){
'use strict';

const UNDEFINED_CODE_POINTS = [
    0xfffe,
    0xffff,
    0x1fffe,
    0x1ffff,
    0x2fffe,
    0x2ffff,
    0x3fffe,
    0x3ffff,
    0x4fffe,
    0x4ffff,
    0x5fffe,
    0x5ffff,
    0x6fffe,
    0x6ffff,
    0x7fffe,
    0x7ffff,
    0x8fffe,
    0x8ffff,
    0x9fffe,
    0x9ffff,
    0xafffe,
    0xaffff,
    0xbfffe,
    0xbffff,
    0xcfffe,
    0xcffff,
    0xdfffe,
    0xdffff,
    0xefffe,
    0xeffff,
    0xffffe,
    0xfffff,
    0x10fffe,
    0x10ffff
];

exports.REPLACEMENT_CHARACTER = '\uFFFD';

exports.CODE_POINTS = {
    EOF: -1,
    NULL: 0x00,
    TABULATION: 0x09,
    CARRIAGE_RETURN: 0x0d,
    LINE_FEED: 0x0a,
    FORM_FEED: 0x0c,
    SPACE: 0x20,
    EXCLAMATION_MARK: 0x21,
    QUOTATION_MARK: 0x22,
    NUMBER_SIGN: 0x23,
    AMPERSAND: 0x26,
    APOSTROPHE: 0x27,
    HYPHEN_MINUS: 0x2d,
    SOLIDUS: 0x2f,
    DIGIT_0: 0x30,
    DIGIT_9: 0x39,
    SEMICOLON: 0x3b,
    LESS_THAN_SIGN: 0x3c,
    EQUALS_SIGN: 0x3d,
    GREATER_THAN_SIGN: 0x3e,
    QUESTION_MARK: 0x3f,
    LATIN_CAPITAL_A: 0x41,
    LATIN_CAPITAL_F: 0x46,
    LATIN_CAPITAL_X: 0x58,
    LATIN_CAPITAL_Z: 0x5a,
    RIGHT_SQUARE_BRACKET: 0x5d,
    GRAVE_ACCENT: 0x60,
    LATIN_SMALL_A: 0x61,
    LATIN_SMALL_F: 0x66,
    LATIN_SMALL_X: 0x78,
    LATIN_SMALL_Z: 0x7a,
    REPLACEMENT_CHARACTER: 0xfffd
};

exports.CODE_POINT_SEQUENCES = {
    DASH_DASH_STRING: [0x2d, 0x2d], //--
    DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
    CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b], //[CDATA[
    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43], //PUBLIC
    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM
};

//Surrogates
exports.isSurrogate = function(cp) {
    return cp >= 0xd800 && cp <= 0xdfff;
};

exports.isSurrogatePair = function(cp) {
    return cp >= 0xdc00 && cp <= 0xdfff;
};

exports.getSurrogatePairCodePoint = function(cp1, cp2) {
    return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;
};

//NOTE: excluding NULL and ASCII whitespace
exports.isControlCodePoint = function(cp) {
    return (
        (cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||
        (cp >= 0x7f && cp <= 0x9f)
    );
};

exports.isUndefinedCodePoint = function(cp) {
    return (cp >= 0xfdd0 && cp <= 0xfdef) || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
};

},{}],67:[function(require,module,exports){
'use strict';

const Mixin = require('../../utils/mixin');

class ErrorReportingMixinBase extends Mixin {
    constructor(host, opts) {
        super(host);

        this.posTracker = null;
        this.onParseError = opts.onParseError;
    }

    _setErrorLocation(err) {
        err.startLine = err.endLine = this.posTracker.line;
        err.startCol = err.endCol = this.posTracker.col;
        err.startOffset = err.endOffset = this.posTracker.offset;
    }

    _reportError(code) {
        const err = {
            code: code,
            startLine: -1,
            startCol: -1,
            startOffset: -1,
            endLine: -1,
            endCol: -1,
            endOffset: -1
        };

        this._setErrorLocation(err);
        this.onParseError(err);
    }

    _getOverriddenMethods(mxn) {
        return {
            _err(code) {
                mxn._reportError(code);
            }
        };
    }
}

module.exports = ErrorReportingMixinBase;

},{"../../utils/mixin":85}],68:[function(require,module,exports){
'use strict';

const ErrorReportingMixinBase = require('./mixin-base');
const ErrorReportingTokenizerMixin = require('./tokenizer-mixin');
const LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');
const Mixin = require('../../utils/mixin');

class ErrorReportingParserMixin extends ErrorReportingMixinBase {
    constructor(parser, opts) {
        super(parser, opts);

        this.opts = opts;
        this.ctLoc = null;
        this.locBeforeToken = false;
    }

    _setErrorLocation(err) {
        if (this.ctLoc) {
            err.startLine = this.ctLoc.startLine;
            err.startCol = this.ctLoc.startCol;
            err.startOffset = this.ctLoc.startOffset;

            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
        }
    }

    _getOverriddenMethods(mxn, orig) {
        return {
            _bootstrap(document, fragmentContext) {
                orig._bootstrap.call(this, document, fragmentContext);

                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
            },

            _processInputToken(token) {
                mxn.ctLoc = token.location;

                orig._processInputToken.call(this, token);
            },

            _err(code, options) {
                mxn.locBeforeToken = options && options.beforeToken;
                mxn._reportError(code);
            }
        };
    }
}

module.exports = ErrorReportingParserMixin;

},{"../../utils/mixin":85,"../location-info/tokenizer-mixin":73,"./mixin-base":67,"./tokenizer-mixin":70}],69:[function(require,module,exports){
'use strict';

const ErrorReportingMixinBase = require('./mixin-base');
const PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');
const Mixin = require('../../utils/mixin');

class ErrorReportingPreprocessorMixin extends ErrorReportingMixinBase {
    constructor(preprocessor, opts) {
        super(preprocessor, opts);

        this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
        this.lastErrOffset = -1;
    }

    _reportError(code) {
        //NOTE: avoid reporting error twice on advance/retreat
        if (this.lastErrOffset !== this.posTracker.offset) {
            this.lastErrOffset = this.posTracker.offset;
            super._reportError(code);
        }
    }
}

module.exports = ErrorReportingPreprocessorMixin;

},{"../../utils/mixin":85,"../position-tracking/preprocessor-mixin":74,"./mixin-base":67}],70:[function(require,module,exports){
'use strict';

const ErrorReportingMixinBase = require('./mixin-base');
const ErrorReportingPreprocessorMixin = require('./preprocessor-mixin');
const Mixin = require('../../utils/mixin');

class ErrorReportingTokenizerMixin extends ErrorReportingMixinBase {
    constructor(tokenizer, opts) {
        super(tokenizer, opts);

        const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);

        this.posTracker = preprocessorMixin.posTracker;
    }
}

module.exports = ErrorReportingTokenizerMixin;

},{"../../utils/mixin":85,"./mixin-base":67,"./preprocessor-mixin":69}],71:[function(require,module,exports){
'use strict';

const Mixin = require('../../utils/mixin');

class LocationInfoOpenElementStackMixin extends Mixin {
    constructor(stack, opts) {
        super(stack);

        this.onItemPop = opts.onItemPop;
    }

    _getOverriddenMethods(mxn, orig) {
        return {
            pop() {
                mxn.onItemPop(this.current);
                orig.pop.call(this);
            },

            popAllUpToHtmlElement() {
                for (let i = this.stackTop; i > 0; i--) {
                    mxn.onItemPop(this.items[i]);
                }

                orig.popAllUpToHtmlElement.call(this);
            },

            remove(element) {
                mxn.onItemPop(this.current);
                orig.remove.call(this, element);
            }
        };
    }
}

module.exports = LocationInfoOpenElementStackMixin;

},{"../../utils/mixin":85}],72:[function(require,module,exports){
'use strict';

const Mixin = require('../../utils/mixin');
const Tokenizer = require('../../tokenizer');
const LocationInfoTokenizerMixin = require('./tokenizer-mixin');
const LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');
const HTML = require('../../common/html');

//Aliases
const $ = HTML.TAG_NAMES;

class LocationInfoParserMixin extends Mixin {
    constructor(parser) {
        super(parser);

        this.parser = parser;
        this.treeAdapter = this.parser.treeAdapter;
        this.posTracker = null;
        this.lastStartTagToken = null;
        this.lastFosterParentingLocation = null;
        this.currentToken = null;
    }

    _setStartLocation(element) {
        let loc = null;

        if (this.lastStartTagToken) {
            loc = Object.assign({}, this.lastStartTagToken.location);
            loc.startTag = this.lastStartTagToken.location;
        }

        this.treeAdapter.setNodeSourceCodeLocation(element, loc);
    }

    _setEndLocation(element, closingToken) {
        const loc = this.treeAdapter.getNodeSourceCodeLocation(element);

        if (loc) {
            if (closingToken.location) {
                const ctLoc = closingToken.location;
                const tn = this.treeAdapter.getTagName(element);

                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
                const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;
                const endLoc = {};
                if (isClosingEndTag) {
                    endLoc.endTag = Object.assign({}, ctLoc);
                    endLoc.endLine = ctLoc.endLine;
                    endLoc.endCol = ctLoc.endCol;
                    endLoc.endOffset = ctLoc.endOffset;
                } else {
                    endLoc.endLine = ctLoc.startLine;
                    endLoc.endCol = ctLoc.startCol;
                    endLoc.endOffset = ctLoc.startOffset;
                }

                this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
            }
        }
    }

    _getOverriddenMethods(mxn, orig) {
        return {
            _bootstrap(document, fragmentContext) {
                orig._bootstrap.call(this, document, fragmentContext);

                mxn.lastStartTagToken = null;
                mxn.lastFosterParentingLocation = null;
                mxn.currentToken = null;

                const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);

                mxn.posTracker = tokenizerMixin.posTracker;

                Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
                    onItemPop: function(element) {
                        mxn._setEndLocation(element, mxn.currentToken);
                    }
                });
            },

            _runParsingLoop(scriptHandler) {
                orig._runParsingLoop.call(this, scriptHandler);

                // NOTE: generate location info for elements
                // that remains on open element stack
                for (let i = this.openElements.stackTop; i >= 0; i--) {
                    mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
                }
            },

            //Token processing
            _processTokenInForeignContent(token) {
                mxn.currentToken = token;
                orig._processTokenInForeignContent.call(this, token);
            },

            _processToken(token) {
                mxn.currentToken = token;
                orig._processToken.call(this, token);

                //NOTE: <body> and <html> are never popped from the stack, so we need to updated
                //their end location explicitly.
                const requireExplicitUpdate =
                    token.type === Tokenizer.END_TAG_TOKEN &&
                    (token.tagName === $.HTML || (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)));

                if (requireExplicitUpdate) {
                    for (let i = this.openElements.stackTop; i >= 0; i--) {
                        const element = this.openElements.items[i];

                        if (this.treeAdapter.getTagName(element) === token.tagName) {
                            mxn._setEndLocation(element, token);
                            break;
                        }
                    }
                }
            },

            //Doctype
            _setDocumentType(token) {
                orig._setDocumentType.call(this, token);

                const documentChildren = this.treeAdapter.getChildNodes(this.document);
                const cnLength = documentChildren.length;

                for (let i = 0; i < cnLength; i++) {
                    const node = documentChildren[i];

                    if (this.treeAdapter.isDocumentTypeNode(node)) {
                        this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
                        break;
                    }
                }
            },

            //Elements
            _attachElementToTree(element) {
                //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
                //So we will use token location stored in this methods for the element.
                mxn._setStartLocation(element);
                mxn.lastStartTagToken = null;
                orig._attachElementToTree.call(this, element);
            },

            _appendElement(token, namespaceURI) {
                mxn.lastStartTagToken = token;
                orig._appendElement.call(this, token, namespaceURI);
            },

            _insertElement(token, namespaceURI) {
                mxn.lastStartTagToken = token;
                orig._insertElement.call(this, token, namespaceURI);
            },

            _insertTemplate(token) {
                mxn.lastStartTagToken = token;
                orig._insertTemplate.call(this, token);

                const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);

                this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
            },

            _insertFakeRootElement() {
                orig._insertFakeRootElement.call(this);
                this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
            },

            //Comments
            _appendCommentNode(token, parent) {
                orig._appendCommentNode.call(this, token, parent);

                const children = this.treeAdapter.getChildNodes(parent);
                const commentNode = children[children.length - 1];

                this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
            },

            //Text
            _findFosterParentingLocation() {
                //NOTE: store last foster parenting location, so we will be able to find inserted text
                //in case of foster parenting
                mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);

                return mxn.lastFosterParentingLocation;
            },

            _insertCharacters(token) {
                orig._insertCharacters.call(this, token);

                const hasFosterParent = this._shouldFosterParentOnInsertion();

                const parent =
                    (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||
                    this.openElements.currentTmplContent ||
                    this.openElements.current;

                const siblings = this.treeAdapter.getChildNodes(parent);

                const textNodeIdx =
                    hasFosterParent && mxn.lastFosterParentingLocation.beforeElement
                        ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1
                        : siblings.length - 1;

                const textNode = siblings[textNodeIdx];

                //NOTE: if we have location assigned by another token, then just update end position
                const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);

                if (tnLoc) {
                    const { endLine, endCol, endOffset } = token.location;
                    this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
                } else {
                    this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
                }
            }
        };
    }
}

module.exports = LocationInfoParserMixin;

},{"../../common/html":65,"../../tokenizer":80,"../../utils/mixin":85,"./open-element-stack-mixin":71,"./tokenizer-mixin":73}],73:[function(require,module,exports){
'use strict';

const Mixin = require('../../utils/mixin');
const Tokenizer = require('../../tokenizer');
const PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');

class LocationInfoTokenizerMixin extends Mixin {
    constructor(tokenizer) {
        super(tokenizer);

        this.tokenizer = tokenizer;
        this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
        this.currentAttrLocation = null;
        this.ctLoc = null;
    }

    _getCurrentLocation() {
        return {
            startLine: this.posTracker.line,
            startCol: this.posTracker.col,
            startOffset: this.posTracker.offset,
            endLine: -1,
            endCol: -1,
            endOffset: -1
        };
    }

    _attachCurrentAttrLocationInfo() {
        this.currentAttrLocation.endLine = this.posTracker.line;
        this.currentAttrLocation.endCol = this.posTracker.col;
        this.currentAttrLocation.endOffset = this.posTracker.offset;

        const currentToken = this.tokenizer.currentToken;
        const currentAttr = this.tokenizer.currentAttr;

        if (!currentToken.location.attrs) {
            currentToken.location.attrs = Object.create(null);
        }

        currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
    }

    _getOverriddenMethods(mxn, orig) {
        const methods = {
            _createStartTagToken() {
                orig._createStartTagToken.call(this);
                this.currentToken.location = mxn.ctLoc;
            },

            _createEndTagToken() {
                orig._createEndTagToken.call(this);
                this.currentToken.location = mxn.ctLoc;
            },

            _createCommentToken() {
                orig._createCommentToken.call(this);
                this.currentToken.location = mxn.ctLoc;
            },

            _createDoctypeToken(initialName) {
                orig._createDoctypeToken.call(this, initialName);
                this.currentToken.location = mxn.ctLoc;
            },

            _createCharacterToken(type, ch) {
                orig._createCharacterToken.call(this, type, ch);
                this.currentCharacterToken.location = mxn.ctLoc;
            },

            _createEOFToken() {
                orig._createEOFToken.call(this);
                this.currentToken.location = mxn._getCurrentLocation();
            },

            _createAttr(attrNameFirstCh) {
                orig._createAttr.call(this, attrNameFirstCh);
                mxn.currentAttrLocation = mxn._getCurrentLocation();
            },

            _leaveAttrName(toState) {
                orig._leaveAttrName.call(this, toState);
                mxn._attachCurrentAttrLocationInfo();
            },

            _leaveAttrValue(toState) {
                orig._leaveAttrValue.call(this, toState);
                mxn._attachCurrentAttrLocationInfo();
            },

            _emitCurrentToken() {
                const ctLoc = this.currentToken.location;

                //NOTE: if we have pending character token make it's end location equal to the
                //current token's start location.
                if (this.currentCharacterToken) {
                    this.currentCharacterToken.location.endLine = ctLoc.startLine;
                    this.currentCharacterToken.location.endCol = ctLoc.startCol;
                    this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
                }

                if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
                    ctLoc.endLine = ctLoc.startLine;
                    ctLoc.endCol = ctLoc.startCol;
                    ctLoc.endOffset = ctLoc.startOffset;
                } else {
                    ctLoc.endLine = mxn.posTracker.line;
                    ctLoc.endCol = mxn.posTracker.col + 1;
                    ctLoc.endOffset = mxn.posTracker.offset + 1;
                }

                orig._emitCurrentToken.call(this);
            },

            _emitCurrentCharacterToken() {
                const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;

                //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
                //then set it's location at the current preprocessor position.
                //We don't need to increment preprocessor position, since character token
                //emission is always forced by the start of the next character token here.
                //So, we already have advanced position.
                if (ctLoc && ctLoc.endOffset === -1) {
                    ctLoc.endLine = mxn.posTracker.line;
                    ctLoc.endCol = mxn.posTracker.col;
                    ctLoc.endOffset = mxn.posTracker.offset;
                }

                orig._emitCurrentCharacterToken.call(this);
            }
        };

        //NOTE: patch initial states for each mode to obtain token start position
        Object.keys(Tokenizer.MODE).forEach(modeName => {
            const state = Tokenizer.MODE[modeName];

            methods[state] = function(cp) {
                mxn.ctLoc = mxn._getCurrentLocation();
                orig[state].call(this, cp);
            };
        });

        return methods;
    }
}

module.exports = LocationInfoTokenizerMixin;

},{"../../tokenizer":80,"../../utils/mixin":85,"../position-tracking/preprocessor-mixin":74}],74:[function(require,module,exports){
'use strict';

const Mixin = require('../../utils/mixin');

class PositionTrackingPreprocessorMixin extends Mixin {
    constructor(preprocessor) {
        super(preprocessor);

        this.preprocessor = preprocessor;
        this.isEol = false;
        this.lineStartPos = 0;
        this.droppedBufferSize = 0;

        this.offset = 0;
        this.col = 0;
        this.line = 1;
    }

    _getOverriddenMethods(mxn, orig) {
        return {
            advance() {
                const pos = this.pos + 1;
                const ch = this.html[pos];

                //NOTE: LF should be in the last column of the line
                if (mxn.isEol) {
                    mxn.isEol = false;
                    mxn.line++;
                    mxn.lineStartPos = pos;
                }

                if (ch === '\n' || (ch === '\r' && this.html[pos + 1] !== '\n')) {
                    mxn.isEol = true;
                }

                mxn.col = pos - mxn.lineStartPos + 1;
                mxn.offset = mxn.droppedBufferSize + pos;

                return orig.advance.call(this);
            },

            retreat() {
                orig.retreat.call(this);

                mxn.isEol = false;
                mxn.col = this.pos - mxn.lineStartPos + 1;
            },

            dropParsedChunk() {
                const prevPos = this.pos;

                orig.dropParsedChunk.call(this);

                const reduction = prevPos - this.pos;

                mxn.lineStartPos -= reduction;
                mxn.droppedBufferSize += reduction;
                mxn.offset = mxn.droppedBufferSize + this.pos;
            }
        };
    }
}

module.exports = PositionTrackingPreprocessorMixin;

},{"../../utils/mixin":85}],75:[function(require,module,exports){
'use strict';

const Parser = require('./parser');
const Serializer = require('./serializer');

// Shorthands
exports.parse = function parse(html, options) {
    const parser = new Parser(options);

    return parser.parse(html);
};

exports.parseFragment = function parseFragment(fragmentContext, html, options) {
    if (typeof fragmentContext === 'string') {
        options = html;
        html = fragmentContext;
        fragmentContext = null;
    }

    const parser = new Parser(options);

    return parser.parseFragment(html, fragmentContext);
};

exports.serialize = function(node, options) {
    const serializer = new Serializer(node, options);

    return serializer.serialize();
};

},{"./parser":77,"./serializer":79}],76:[function(require,module,exports){
'use strict';

//Const
const NOAH_ARK_CAPACITY = 3;

//List of formatting elements
class FormattingElementList {
    constructor(treeAdapter) {
        this.length = 0;
        this.entries = [];
        this.treeAdapter = treeAdapter;
        this.bookmark = null;
    }

    //Noah Ark's condition
    //OPTIMIZATION: at first we try to find possible candidates for exclusion using
    //lightweight heuristics without thorough attributes check.
    _getNoahArkConditionCandidates(newElement) {
        const candidates = [];

        if (this.length >= NOAH_ARK_CAPACITY) {
            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
            const neTagName = this.treeAdapter.getTagName(newElement);
            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

            for (let i = this.length - 1; i >= 0; i--) {
                const entry = this.entries[i];

                if (entry.type === FormattingElementList.MARKER_ENTRY) {
                    break;
                }

                const element = entry.element;
                const elementAttrs = this.treeAdapter.getAttrList(element);

                const isCandidate =
                    this.treeAdapter.getTagName(element) === neTagName &&
                    this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&
                    elementAttrs.length === neAttrsLength;

                if (isCandidate) {
                    candidates.push({ idx: i, attrs: elementAttrs });
                }
            }
        }

        return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
    }

    _ensureNoahArkCondition(newElement) {
        const candidates = this._getNoahArkConditionCandidates(newElement);
        let cLength = candidates.length;

        if (cLength) {
            const neAttrs = this.treeAdapter.getAttrList(newElement);
            const neAttrsLength = neAttrs.length;
            const neAttrsMap = Object.create(null);

            //NOTE: build attrs map for the new element so we can perform fast lookups
            for (let i = 0; i < neAttrsLength; i++) {
                const neAttr = neAttrs[i];

                neAttrsMap[neAttr.name] = neAttr.value;
            }

            for (let i = 0; i < neAttrsLength; i++) {
                for (let j = 0; j < cLength; j++) {
                    const cAttr = candidates[j].attrs[i];

                    if (neAttrsMap[cAttr.name] !== cAttr.value) {
                        candidates.splice(j, 1);
                        cLength--;
                    }

                    if (candidates.length < NOAH_ARK_CAPACITY) {
                        return;
                    }
                }
            }

            //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
                this.entries.splice(candidates[i].idx, 1);
                this.length--;
            }
        }
    }

    //Mutations
    insertMarker() {
        this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
        this.length++;
    }

    pushElement(element, token) {
        this._ensureNoahArkCondition(element);

        this.entries.push({
            type: FormattingElementList.ELEMENT_ENTRY,
            element: element,
            token: token
        });

        this.length++;
    }

    insertElementAfterBookmark(element, token) {
        let bookmarkIdx = this.length - 1;

        for (; bookmarkIdx >= 0; bookmarkIdx--) {
            if (this.entries[bookmarkIdx] === this.bookmark) {
                break;
            }
        }

        this.entries.splice(bookmarkIdx + 1, 0, {
            type: FormattingElementList.ELEMENT_ENTRY,
            element: element,
            token: token
        });

        this.length++;
    }

    removeEntry(entry) {
        for (let i = this.length - 1; i >= 0; i--) {
            if (this.entries[i] === entry) {
                this.entries.splice(i, 1);
                this.length--;
                break;
            }
        }
    }

    clearToLastMarker() {
        while (this.length) {
            const entry = this.entries.pop();

            this.length--;

            if (entry.type === FormattingElementList.MARKER_ENTRY) {
                break;
            }
        }
    }

    //Search
    getElementEntryInScopeWithTagName(tagName) {
        for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];

            if (entry.type === FormattingElementList.MARKER_ENTRY) {
                return null;
            }

            if (this.treeAdapter.getTagName(entry.element) === tagName) {
                return entry;
            }
        }

        return null;
    }

    getElementEntry(element) {
        for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];

            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {
                return entry;
            }
        }

        return null;
    }
}

//Entry types
FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';

module.exports = FormattingElementList;

},{}],77:[function(require,module,exports){
'use strict';

const Tokenizer = require('../tokenizer');
const OpenElementStack = require('./open-element-stack');
const FormattingElementList = require('./formatting-element-list');
const LocationInfoParserMixin = require('../extensions/location-info/parser-mixin');
const ErrorReportingParserMixin = require('../extensions/error-reporting/parser-mixin');
const Mixin = require('../utils/mixin');
const defaultTreeAdapter = require('../tree-adapters/default');
const mergeOptions = require('../utils/merge-options');
const doctype = require('../common/doctype');
const foreignContent = require('../common/foreign-content');
const ERR = require('../common/error-codes');
const unicode = require('../common/unicode');
const HTML = require('../common/html');

//Aliases
const $ = HTML.TAG_NAMES;
const NS = HTML.NAMESPACES;
const ATTRS = HTML.ATTRS;

const DEFAULT_OPTIONS = {
    scriptingEnabled: true,
    sourceCodeLocationInfo: false,
    onParseError: null,
    treeAdapter: defaultTreeAdapter
};

//Misc constants
const HIDDEN_INPUT_TYPE = 'hidden';

//Adoption agency loops iteration count
const AA_OUTER_LOOP_ITER = 8;
const AA_INNER_LOOP_ITER = 3;

//Insertion modes
const INITIAL_MODE = 'INITIAL_MODE';
const BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';
const BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';
const IN_HEAD_MODE = 'IN_HEAD_MODE';
const IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';
const AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';
const IN_BODY_MODE = 'IN_BODY_MODE';
const TEXT_MODE = 'TEXT_MODE';
const IN_TABLE_MODE = 'IN_TABLE_MODE';
const IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';
const IN_CAPTION_MODE = 'IN_CAPTION_MODE';
const IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';
const IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';
const IN_ROW_MODE = 'IN_ROW_MODE';
const IN_CELL_MODE = 'IN_CELL_MODE';
const IN_SELECT_MODE = 'IN_SELECT_MODE';
const IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';
const IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';
const AFTER_BODY_MODE = 'AFTER_BODY_MODE';
const IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';
const AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';
const AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';
const AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';

//Insertion mode reset map
const INSERTION_MODE_RESET_MAP = {
    [$.TR]: IN_ROW_MODE,
    [$.TBODY]: IN_TABLE_BODY_MODE,
    [$.THEAD]: IN_TABLE_BODY_MODE,
    [$.TFOOT]: IN_TABLE_BODY_MODE,
    [$.CAPTION]: IN_CAPTION_MODE,
    [$.COLGROUP]: IN_COLUMN_GROUP_MODE,
    [$.TABLE]: IN_TABLE_MODE,
    [$.BODY]: IN_BODY_MODE,
    [$.FRAMESET]: IN_FRAMESET_MODE
};

//Template insertion mode switch map
const TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
    [$.CAPTION]: IN_TABLE_MODE,
    [$.COLGROUP]: IN_TABLE_MODE,
    [$.TBODY]: IN_TABLE_MODE,
    [$.TFOOT]: IN_TABLE_MODE,
    [$.THEAD]: IN_TABLE_MODE,
    [$.COL]: IN_COLUMN_GROUP_MODE,
    [$.TR]: IN_TABLE_BODY_MODE,
    [$.TD]: IN_ROW_MODE,
    [$.TH]: IN_ROW_MODE
};

//Token handlers map for insertion modes
const TOKEN_HANDLERS = {
    [INITIAL_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
        [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
        [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
        [Tokenizer.EOF_TOKEN]: tokenInInitialMode
    },
    [BEFORE_HTML_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
        [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
    },
    [BEFORE_HEAD_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
        [Tokenizer.EOF_TOKEN]: tokenBeforeHead
    },
    [IN_HEAD_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagInHead,
        [Tokenizer.END_TAG_TOKEN]: endTagInHead,
        [Tokenizer.EOF_TOKEN]: tokenInHead
    },
    [IN_HEAD_NO_SCRIPT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
        [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
        [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
    },
    [AFTER_HEAD_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
        [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
        [Tokenizer.EOF_TOKEN]: tokenAfterHead
    },
    [IN_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInBody,
        [Tokenizer.END_TAG_TOKEN]: endTagInBody,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [TEXT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: ignoreToken,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: ignoreToken,
        [Tokenizer.END_TAG_TOKEN]: endTagInText,
        [Tokenizer.EOF_TOKEN]: eofInText
    },
    [IN_TABLE_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInTable,
        [Tokenizer.END_TAG_TOKEN]: endTagInTable,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_TABLE_TEXT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
        [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
        [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
        [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
        [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
        [Tokenizer.EOF_TOKEN]: tokenInTableText
    },
    [IN_CAPTION_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
        [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_COLUMN_GROUP_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
        [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_TABLE_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
        [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_ROW_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInRow,
        [Tokenizer.END_TAG_TOKEN]: endTagInRow,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_CELL_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInCell,
        [Tokenizer.END_TAG_TOKEN]: endTagInCell,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_SELECT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
        [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_SELECT_IN_TABLE_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
        [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
        [Tokenizer.EOF_TOKEN]: eofInBody
    },
    [IN_TEMPLATE_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
        [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
        [Tokenizer.EOF_TOKEN]: eofInTemplate
    },
    [AFTER_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
        [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
        [Tokenizer.EOF_TOKEN]: stopParsing
    },
    [IN_FRAMESET_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
        [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
        [Tokenizer.EOF_TOKEN]: stopParsing
    },
    [AFTER_FRAMESET_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
        [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
        [Tokenizer.EOF_TOKEN]: stopParsing
    },
    [AFTER_AFTER_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
        [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
        [Tokenizer.EOF_TOKEN]: stopParsing
    },
    [AFTER_AFTER_FRAMESET_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
        [Tokenizer.END_TAG_TOKEN]: ignoreToken,
        [Tokenizer.EOF_TOKEN]: stopParsing
    }
};

//Parser
class Parser {
    constructor(options) {
        this.options = mergeOptions(DEFAULT_OPTIONS, options);

        this.treeAdapter = this.options.treeAdapter;
        this.pendingScript = null;

        if (this.options.sourceCodeLocationInfo) {
            Mixin.install(this, LocationInfoParserMixin);
        }

        if (this.options.onParseError) {
            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });
        }
    }

    // API
    parse(html) {
        const document = this.treeAdapter.createDocument();

        this._bootstrap(document, null);
        this.tokenizer.write(html, true);
        this._runParsingLoop(null);

        return document;
    }

    parseFragment(html, fragmentContext) {
        //NOTE: use <template> element as a fragment context if context element was not provided,
        //so we will parse in "forgiving" manner
        if (!fragmentContext) {
            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
        }

        //NOTE: create fake element which will be used as 'document' for fragment parsing.
        //This is important for jsdom there 'document' can't be recreated, therefore
        //fragment parsing causes messing of the main `document`.
        const documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

        this._bootstrap(documentMock, fragmentContext);

        if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
        }

        this._initTokenizerForFragmentParsing();
        this._insertFakeRootElement();
        this._resetInsertionMode();
        this._findFormInFragmentContext();
        this.tokenizer.write(html, true);
        this._runParsingLoop(null);

        const rootElement = this.treeAdapter.getFirstChild(documentMock);
        const fragment = this.treeAdapter.createDocumentFragment();

        this._adoptNodes(rootElement, fragment);

        return fragment;
    }

    //Bootstrap parser
    _bootstrap(document, fragmentContext) {
        this.tokenizer = new Tokenizer(this.options);

        this.stopped = false;

        this.insertionMode = INITIAL_MODE;
        this.originalInsertionMode = '';

        this.document = document;
        this.fragmentContext = fragmentContext;

        this.headElement = null;
        this.formElement = null;

        this.openElements = new OpenElementStack(this.document, this.treeAdapter);
        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);

        this.tmplInsertionModeStack = [];
        this.tmplInsertionModeStackTop = -1;
        this.currentTmplInsertionMode = null;

        this.pendingCharacterTokens = [];
        this.hasNonWhitespacePendingCharacterToken = false;

        this.framesetOk = true;
        this.skipNextNewLine = false;
        this.fosterParentingEnabled = false;
    }

    //Errors
    _err() {
        // NOTE: err reporting is noop by default. Enabled by mixin.
    }

    //Parsing loop
    _runParsingLoop(scriptHandler) {
        while (!this.stopped) {
            this._setupTokenizerCDATAMode();

            const token = this.tokenizer.getNextToken();

            if (token.type === Tokenizer.HIBERNATION_TOKEN) {
                break;
            }

            if (this.skipNextNewLine) {
                this.skipNextNewLine = false;

                if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
                    if (token.chars.length === 1) {
                        continue;
                    }

                    token.chars = token.chars.substr(1);
                }
            }

            this._processInputToken(token);

            if (scriptHandler && this.pendingScript) {
                break;
            }
        }
    }

    runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
        this._runParsingLoop(scriptHandler);

        if (scriptHandler && this.pendingScript) {
            const script = this.pendingScript;

            this.pendingScript = null;

            scriptHandler(script);

            return;
        }

        if (writeCallback) {
            writeCallback();
        }
    }

    //Text parsing
    _setupTokenizerCDATAMode() {
        const current = this._getAdjustedCurrentElement();

        this.tokenizer.allowCDATA =
            current &&
            current !== this.document &&
            this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&
            !this._isIntegrationPoint(current);
    }

    _switchToTextParsing(currentToken, nextTokenizerState) {
        this._insertElement(currentToken, NS.HTML);
        this.tokenizer.state = nextTokenizerState;
        this.originalInsertionMode = this.insertionMode;
        this.insertionMode = TEXT_MODE;
    }

    switchToPlaintextParsing() {
        this.insertionMode = TEXT_MODE;
        this.originalInsertionMode = IN_BODY_MODE;
        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
    }

    //Fragment parsing
    _getAdjustedCurrentElement() {
        return this.openElements.stackTop === 0 && this.fragmentContext
            ? this.fragmentContext
            : this.openElements.current;
    }

    _findFormInFragmentContext() {
        let node = this.fragmentContext;

        do {
            if (this.treeAdapter.getTagName(node) === $.FORM) {
                this.formElement = node;
                break;
            }

            node = this.treeAdapter.getParentNode(node);
        } while (node);
    }

    _initTokenizerForFragmentParsing() {
        if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
            const tn = this.treeAdapter.getTagName(this.fragmentContext);

            if (tn === $.TITLE || tn === $.TEXTAREA) {
                this.tokenizer.state = Tokenizer.MODE.RCDATA;
            } else if (
                tn === $.STYLE ||
                tn === $.XMP ||
                tn === $.IFRAME ||
                tn === $.NOEMBED ||
                tn === $.NOFRAMES ||
                tn === $.NOSCRIPT
            ) {
                this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
            } else if (tn === $.SCRIPT) {
                this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
            } else if (tn === $.PLAINTEXT) {
                this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
            }
        }
    }

    //Tree mutation
    _setDocumentType(token) {
        const name = token.name || '';
        const publicId = token.publicId || '';
        const systemId = token.systemId || '';

        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
    }

    _attachElementToTree(element) {
        if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentElement(element);
        } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;

            this.treeAdapter.appendChild(parent, element);
        }
    }

    _appendElement(token, namespaceURI) {
        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

        this._attachElementToTree(element);
    }

    _insertElement(token, namespaceURI) {
        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

        this._attachElementToTree(element);
        this.openElements.push(element);
    }

    _insertFakeElement(tagName) {
        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);

        this._attachElementToTree(element);
        this.openElements.push(element);
    }

    _insertTemplate(token) {
        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
        const content = this.treeAdapter.createDocumentFragment();

        this.treeAdapter.setTemplateContent(tmpl, content);
        this._attachElementToTree(tmpl);
        this.openElements.push(tmpl);
    }

    _insertFakeRootElement() {
        const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);

        this.treeAdapter.appendChild(this.openElements.current, element);
        this.openElements.push(element);
    }

    _appendCommentNode(token, parent) {
        const commentNode = this.treeAdapter.createCommentNode(token.data);

        this.treeAdapter.appendChild(parent, commentNode);
    }

    _insertCharacters(token) {
        if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentText(token.chars);
        } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;

            this.treeAdapter.insertText(parent, token.chars);
        }
    }

    _adoptNodes(donor, recipient) {
        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
            this.treeAdapter.detachNode(child);
            this.treeAdapter.appendChild(recipient, child);
        }
    }

    //Token processing
    _shouldProcessTokenInForeignContent(token) {
        const current = this._getAdjustedCurrentElement();

        if (!current || current === this.document) {
            return false;
        }

        const ns = this.treeAdapter.getNamespaceURI(current);

        if (ns === NS.HTML) {
            return false;
        }

        if (
            this.treeAdapter.getTagName(current) === $.ANNOTATION_XML &&
            ns === NS.MATHML &&
            token.type === Tokenizer.START_TAG_TOKEN &&
            token.tagName === $.SVG
        ) {
            return false;
        }

        const isCharacterToken =
            token.type === Tokenizer.CHARACTER_TOKEN ||
            token.type === Tokenizer.NULL_CHARACTER_TOKEN ||
            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;

        const isMathMLTextStartTag =
            token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;

        if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
            return false;
        }

        if (
            (token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) &&
            this._isIntegrationPoint(current, NS.HTML)
        ) {
            return false;
        }

        return token.type !== Tokenizer.EOF_TOKEN;
    }

    _processToken(token) {
        TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
    }

    _processTokenInBodyMode(token) {
        TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
    }

    _processTokenInForeignContent(token) {
        if (token.type === Tokenizer.CHARACTER_TOKEN) {
            characterInForeignContent(this, token);
        } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
            nullCharacterInForeignContent(this, token);
        } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
            insertCharacters(this, token);
        } else if (token.type === Tokenizer.COMMENT_TOKEN) {
            appendComment(this, token);
        } else if (token.type === Tokenizer.START_TAG_TOKEN) {
            startTagInForeignContent(this, token);
        } else if (token.type === Tokenizer.END_TAG_TOKEN) {
            endTagInForeignContent(this, token);
        }
    }

    _processInputToken(token) {
        if (this._shouldProcessTokenInForeignContent(token)) {
            this._processTokenInForeignContent(token);
        } else {
            this._processToken(token);
        }

        if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
        }
    }

    //Integration points
    _isIntegrationPoint(element, foreignNS) {
        const tn = this.treeAdapter.getTagName(element);
        const ns = this.treeAdapter.getNamespaceURI(element);
        const attrs = this.treeAdapter.getAttrList(element);

        return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
    }

    //Active formatting elements reconstruction
    _reconstructActiveFormattingElements() {
        const listLength = this.activeFormattingElements.length;

        if (listLength) {
            let unopenIdx = listLength;
            let entry = null;

            do {
                unopenIdx--;
                entry = this.activeFormattingElements.entries[unopenIdx];

                if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                    unopenIdx++;
                    break;
                }
            } while (unopenIdx > 0);

            for (let i = unopenIdx; i < listLength; i++) {
                entry = this.activeFormattingElements.entries[i];
                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
                entry.element = this.openElements.current;
            }
        }
    }

    //Close elements
    _closeTableCell() {
        this.openElements.generateImpliedEndTags();
        this.openElements.popUntilTableCellPopped();
        this.activeFormattingElements.clearToLastMarker();
        this.insertionMode = IN_ROW_MODE;
    }

    _closePElement() {
        this.openElements.generateImpliedEndTagsWithExclusion($.P);
        this.openElements.popUntilTagNamePopped($.P);
    }

    //Insertion modes
    _resetInsertionMode() {
        for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {
            let element = this.openElements.items[i];

            if (i === 0) {
                last = true;

                if (this.fragmentContext) {
                    element = this.fragmentContext;
                }
            }

            const tn = this.treeAdapter.getTagName(element);
            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

            if (newInsertionMode) {
                this.insertionMode = newInsertionMode;
                break;
            } else if (!last && (tn === $.TD || tn === $.TH)) {
                this.insertionMode = IN_CELL_MODE;
                break;
            } else if (!last && tn === $.HEAD) {
                this.insertionMode = IN_HEAD_MODE;
                break;
            } else if (tn === $.SELECT) {
                this._resetInsertionModeForSelect(i);
                break;
            } else if (tn === $.TEMPLATE) {
                this.insertionMode = this.currentTmplInsertionMode;
                break;
            } else if (tn === $.HTML) {
                this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
                break;
            } else if (last) {
                this.insertionMode = IN_BODY_MODE;
                break;
            }
        }
    }

    _resetInsertionModeForSelect(selectIdx) {
        if (selectIdx > 0) {
            for (let i = selectIdx - 1; i > 0; i--) {
                const ancestor = this.openElements.items[i];
                const tn = this.treeAdapter.getTagName(ancestor);

                if (tn === $.TEMPLATE) {
                    break;
                } else if (tn === $.TABLE) {
                    this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                    return;
                }
            }
        }

        this.insertionMode = IN_SELECT_MODE;
    }

    _pushTmplInsertionMode(mode) {
        this.tmplInsertionModeStack.push(mode);
        this.tmplInsertionModeStackTop++;
        this.currentTmplInsertionMode = mode;
    }

    _popTmplInsertionMode() {
        this.tmplInsertionModeStack.pop();
        this.tmplInsertionModeStackTop--;
        this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
    }

    //Foster parenting
    _isElementCausesFosterParenting(element) {
        const tn = this.treeAdapter.getTagName(element);

        return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
    }

    _shouldFosterParentOnInsertion() {
        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
    }

    _findFosterParentingLocation() {
        const location = {
            parent: null,
            beforeElement: null
        };

        for (let i = this.openElements.stackTop; i >= 0; i--) {
            const openElement = this.openElements.items[i];
            const tn = this.treeAdapter.getTagName(openElement);
            const ns = this.treeAdapter.getNamespaceURI(openElement);

            if (tn === $.TEMPLATE && ns === NS.HTML) {
                location.parent = this.treeAdapter.getTemplateContent(openElement);
                break;
            } else if (tn === $.TABLE) {
                location.parent = this.treeAdapter.getParentNode(openElement);

                if (location.parent) {
                    location.beforeElement = openElement;
                } else {
                    location.parent = this.openElements.items[i - 1];
                }

                break;
            }
        }

        if (!location.parent) {
            location.parent = this.openElements.items[0];
        }

        return location;
    }

    _fosterParentElement(element) {
        const location = this._findFosterParentingLocation();

        if (location.beforeElement) {
            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
        } else {
            this.treeAdapter.appendChild(location.parent, element);
        }
    }

    _fosterParentText(chars) {
        const location = this._findFosterParentingLocation();

        if (location.beforeElement) {
            this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
        } else {
            this.treeAdapter.insertText(location.parent, chars);
        }
    }

    //Special elements
    _isSpecialElement(element) {
        const tn = this.treeAdapter.getTagName(element);
        const ns = this.treeAdapter.getNamespaceURI(element);

        return HTML.SPECIAL_ELEMENTS[ns][tn];
    }
}

module.exports = Parser;

//Adoption agency algorithm
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
//------------------------------------------------------------------

//Steps 5-8 of the algorithm
function aaObtainFormattingElementEntry(p, token) {
    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

    if (formattingElementEntry) {
        if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
        } else if (!p.openElements.hasInScope(token.tagName)) {
            formattingElementEntry = null;
        }
    } else {
        genericEndTagInBody(p, token);
    }

    return formattingElementEntry;
}

//Steps 9 and 10 of the algorithm
function aaObtainFurthestBlock(p, formattingElementEntry) {
    let furthestBlock = null;

    for (let i = p.openElements.stackTop; i >= 0; i--) {
        const element = p.openElements.items[i];

        if (element === formattingElementEntry.element) {
            break;
        }

        if (p._isSpecialElement(element)) {
            furthestBlock = element;
        }
    }

    if (!furthestBlock) {
        p.openElements.popUntilElementPopped(formattingElementEntry.element);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
    }

    return furthestBlock;
}

//Step 13 of the algorithm
function aaInnerLoop(p, furthestBlock, formattingElement) {
    let lastElement = furthestBlock;
    let nextElement = p.openElements.getCommonAncestor(furthestBlock);

    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
        nextElement = p.openElements.getCommonAncestor(element);

        const elementEntry = p.activeFormattingElements.getElementEntry(element);
        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

        if (shouldRemoveFromOpenElements) {
            if (counterOverflow) {
                p.activeFormattingElements.removeEntry(elementEntry);
            }

            p.openElements.remove(element);
        } else {
            element = aaRecreateElementFromEntry(p, elementEntry);

            if (lastElement === furthestBlock) {
                p.activeFormattingElements.bookmark = elementEntry;
            }

            p.treeAdapter.detachNode(lastElement);
            p.treeAdapter.appendChild(element, lastElement);
            lastElement = element;
        }
    }

    return lastElement;
}

//Step 13.7 of the algorithm
function aaRecreateElementFromEntry(p, elementEntry) {
    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);

    p.openElements.replace(elementEntry.element, newElement);
    elementEntry.element = newElement;

    return newElement;
}

//Step 14 of the algorithm
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
    if (p._isElementCausesFosterParenting(commonAncestor)) {
        p._fosterParentElement(lastElement);
    } else {
        const tn = p.treeAdapter.getTagName(commonAncestor);
        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);

        if (tn === $.TEMPLATE && ns === NS.HTML) {
            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
        }

        p.treeAdapter.appendChild(commonAncestor, lastElement);
    }
}

//Steps 15-19 of the algorithm
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
    const token = formattingElementEntry.token;
    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

    p._adoptNodes(furthestBlock, newElement);
    p.treeAdapter.appendChild(furthestBlock, newElement);

    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
    p.activeFormattingElements.removeEntry(formattingElementEntry);

    p.openElements.remove(formattingElementEntry.element);
    p.openElements.insertAfter(furthestBlock, newElement);
}

//Algorithm entry point
function callAdoptionAgency(p, token) {
    let formattingElementEntry;

    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
        formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

        if (!formattingElementEntry) {
            break;
        }

        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

        if (!furthestBlock) {
            break;
        }

        p.activeFormattingElements.bookmark = formattingElementEntry;

        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);

        p.treeAdapter.detachNode(lastElement);
        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
    }
}

//Generic token handlers
//------------------------------------------------------------------
function ignoreToken() {
    //NOTE: do nothing =)
}

function misplacedDoctype(p) {
    p._err(ERR.misplacedDoctype);
}

function appendComment(p, token) {
    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}

function appendCommentToRootHtmlElement(p, token) {
    p._appendCommentNode(token, p.openElements.items[0]);
}

function appendCommentToDocument(p, token) {
    p._appendCommentNode(token, p.document);
}

function insertCharacters(p, token) {
    p._insertCharacters(token);
}

function stopParsing(p) {
    p.stopped = true;
}

// The "initial" insertion mode
//------------------------------------------------------------------
function doctypeInInitialMode(p, token) {
    p._setDocumentType(token);

    const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);

    if (!doctype.isConforming(token)) {
        p._err(ERR.nonConformingDoctype);
    }

    p.treeAdapter.setDocumentMode(p.document, mode);

    p.insertionMode = BEFORE_HTML_MODE;
}

function tokenInInitialMode(p, token) {
    p._err(ERR.missingDoctype, { beforeToken: true });
    p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
    p.insertionMode = BEFORE_HTML_MODE;
    p._processToken(token);
}

// The "before html" insertion mode
//------------------------------------------------------------------
function startTagBeforeHtml(p, token) {
    if (token.tagName === $.HTML) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = BEFORE_HEAD_MODE;
    } else {
        tokenBeforeHtml(p, token);
    }
}

function endTagBeforeHtml(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
        tokenBeforeHtml(p, token);
    }
}

function tokenBeforeHtml(p, token) {
    p._insertFakeRootElement();
    p.insertionMode = BEFORE_HEAD_MODE;
    p._processToken(token);
}

// The "before head" insertion mode
//------------------------------------------------------------------
function startTagBeforeHead(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.HEAD) {
        p._insertElement(token, NS.HTML);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
    } else {
        tokenBeforeHead(p, token);
    }
}

function endTagBeforeHead(p, token) {
    const tn = token.tagName;

    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
        tokenBeforeHead(p, token);
    } else {
        p._err(ERR.endTagWithoutMatchingOpenElement);
    }
}

function tokenBeforeHead(p, token) {
    p._insertFakeElement($.HEAD);
    p.headElement = p.openElements.current;
    p.insertionMode = IN_HEAD_MODE;
    p._processToken(token);
}

// The "in head" insertion mode
//------------------------------------------------------------------
function startTagInHead(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
    } else if (tn === $.TITLE) {
        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
    } else if (tn === $.NOSCRIPT) {
        if (p.options.scriptingEnabled) {
            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
        } else {
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
        }
    } else if (tn === $.NOFRAMES || tn === $.STYLE) {
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
    } else if (tn === $.SCRIPT) {
        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
    } else if (tn === $.TEMPLATE) {
        p._insertTemplate(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
        p.insertionMode = IN_TEMPLATE_MODE;
        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
    } else if (tn === $.HEAD) {
        p._err(ERR.misplacedStartTagForHeadElement);
    } else {
        tokenInHead(p, token);
    }
}

function endTagInHead(p, token) {
    const tn = token.tagName;

    if (tn === $.HEAD) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
    } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
        tokenInHead(p, token);
    } else if (tn === $.TEMPLATE) {
        if (p.openElements.tmplCount > 0) {
            p.openElements.generateImpliedEndTagsThoroughly();

            if (p.openElements.currentTagName !== $.TEMPLATE) {
                p._err(ERR.closingOfElementWithOpenChildElements);
            }

            p.openElements.popUntilTagNamePopped($.TEMPLATE);
            p.activeFormattingElements.clearToLastMarker();
            p._popTmplInsertionMode();
            p._resetInsertionMode();
        } else {
            p._err(ERR.endTagWithoutMatchingOpenElement);
        }
    } else {
        p._err(ERR.endTagWithoutMatchingOpenElement);
    }
}

function tokenInHead(p, token) {
    p.openElements.pop();
    p.insertionMode = AFTER_HEAD_MODE;
    p._processToken(token);
}

// The "in head no script" insertion mode
//------------------------------------------------------------------
function startTagInHeadNoScript(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (
        tn === $.BASEFONT ||
        tn === $.BGSOUND ||
        tn === $.HEAD ||
        tn === $.LINK ||
        tn === $.META ||
        tn === $.NOFRAMES ||
        tn === $.STYLE
    ) {
        startTagInHead(p, token);
    } else if (tn === $.NOSCRIPT) {
        p._err(ERR.nestedNoscriptInHead);
    } else {
        tokenInHeadNoScript(p, token);
    }
}

function endTagInHeadNoScript(p, token) {
    const tn = token.tagName;

    if (tn === $.NOSCRIPT) {
        p.openElements.pop();
        p.insertionMode = IN_HEAD_MODE;
    } else if (tn === $.BR) {
        tokenInHeadNoScript(p, token);
    } else {
        p._err(ERR.endTagWithoutMatchingOpenElement);
    }
}

function tokenInHeadNoScript(p, token) {
    const errCode =
        token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;

    p._err(errCode);
    p.openElements.pop();
    p.insertionMode = IN_HEAD_MODE;
    p._processToken(token);
}

// The "after head" insertion mode
//------------------------------------------------------------------
function startTagAfterHead(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.BODY) {
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_BODY_MODE;
    } else if (tn === $.FRAMESET) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_FRAMESET_MODE;
    } else if (
        tn === $.BASE ||
        tn === $.BASEFONT ||
        tn === $.BGSOUND ||
        tn === $.LINK ||
        tn === $.META ||
        tn === $.NOFRAMES ||
        tn === $.SCRIPT ||
        tn === $.STYLE ||
        tn === $.TEMPLATE ||
        tn === $.TITLE
    ) {
        p._err(ERR.abandonedHeadElementChild);
        p.openElements.push(p.headElement);
        startTagInHead(p, token);
        p.openElements.remove(p.headElement);
    } else if (tn === $.HEAD) {
        p._err(ERR.misplacedStartTagForHeadElement);
    } else {
        tokenAfterHead(p, token);
    }
}

function endTagAfterHead(p, token) {
    const tn = token.tagName;

    if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
        tokenAfterHead(p, token);
    } else if (tn === $.TEMPLATE) {
        endTagInHead(p, token);
    } else {
        p._err(ERR.endTagWithoutMatchingOpenElement);
    }
}

function tokenAfterHead(p, token) {
    p._insertFakeElement($.BODY);
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

// The "in body" insertion mode
//------------------------------------------------------------------
function whitespaceCharacterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
}

function characterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
    p.framesetOk = false;
}

function htmlStartTagInBody(p, token) {
    if (p.openElements.tmplCount === 0) {
        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
    }
}

function bodyStartTagInBody(p, token) {
    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

    if (bodyElement && p.openElements.tmplCount === 0) {
        p.framesetOk = false;
        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
    }
}

function framesetStartTagInBody(p, token) {
    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

    if (p.framesetOk && bodyElement) {
        p.treeAdapter.detachNode(bodyElement);
        p.openElements.popAllUpToHtmlElement();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_FRAMESET_MODE;
    }
}

function addressStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._insertElement(token, NS.HTML);
}

function numberedHeaderStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    const tn = p.openElements.currentTagName;

    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
        p.openElements.pop();
    }

    p._insertElement(token, NS.HTML);
}

function preStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._insertElement(token, NS.HTML);
    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
    p.skipNextNewLine = true;
    p.framesetOk = false;
}

function formStartTagInBody(p, token) {
    const inTemplate = p.openElements.tmplCount > 0;

    if (!p.formElement || inTemplate) {
        if (p.openElements.hasInButtonScope($.P)) {
            p._closePElement();
        }

        p._insertElement(token, NS.HTML);

        if (!inTemplate) {
            p.formElement = p.openElements.current;
        }
    }
}

function listItemStartTagInBody(p, token) {
    p.framesetOk = false;

    const tn = token.tagName;

    for (let i = p.openElements.stackTop; i >= 0; i--) {
        const element = p.openElements.items[i];
        const elementTn = p.treeAdapter.getTagName(element);
        let closeTn = null;

        if (tn === $.LI && elementTn === $.LI) {
            closeTn = $.LI;
        } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
            closeTn = elementTn;
        }

        if (closeTn) {
            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
            p.openElements.popUntilTagNamePopped(closeTn);
            break;
        }

        if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {
            break;
        }
    }

    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._insertElement(token, NS.HTML);
}

function plaintextStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._insertElement(token, NS.HTML);
    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}

function buttonStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.BUTTON)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped($.BUTTON);
    }

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
}

function aStartTagInBody(p, token) {
    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

    if (activeElementEntry) {
        callAdoptionAgency(p, token);
        p.openElements.remove(activeElementEntry.element);
        p.activeFormattingElements.removeEntry(activeElementEntry);
    }

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function bStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function nobrStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    if (p.openElements.hasInScope($.NOBR)) {
        callAdoptionAgency(p, token);
        p._reconstructActiveFormattingElements();
    }

    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function appletStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
}

function tableStartTagInBody(p, token) {
    if (
        p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS &&
        p.openElements.hasInButtonScope($.P)
    ) {
        p._closePElement();
    }

    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode = IN_TABLE_MODE;
}

function areaStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
    token.ackSelfClosing = true;
}

function inputStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);

    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
        p.framesetOk = false;
    }

    token.ackSelfClosing = true;
}

function paramStartTagInBody(p, token) {
    p._appendElement(token, NS.HTML);
    token.ackSelfClosing = true;
}

function hrStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
    token.ackSelfClosing = true;
}

function imageStartTagInBody(p, token) {
    token.tagName = $.IMG;
    areaStartTagInBody(p, token);
}

function textareaStartTagInBody(p, token) {
    p._insertElement(token, NS.HTML);
    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
    p.skipNextNewLine = true;
    p.tokenizer.state = Tokenizer.MODE.RCDATA;
    p.originalInsertionMode = p.insertionMode;
    p.framesetOk = false;
    p.insertionMode = TEXT_MODE;
}

function xmpStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._reconstructActiveFormattingElements();
    p.framesetOk = false;
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function iframeStartTagInBody(p, token) {
    p.framesetOk = false;
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
//<noembed> as a rawtext.
function noembedStartTagInBody(p, token) {
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function selectStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;

    if (
        p.insertionMode === IN_TABLE_MODE ||
        p.insertionMode === IN_CAPTION_MODE ||
        p.insertionMode === IN_TABLE_BODY_MODE ||
        p.insertionMode === IN_ROW_MODE ||
        p.insertionMode === IN_CELL_MODE
    ) {
        p.insertionMode = IN_SELECT_IN_TABLE_MODE;
    } else {
        p.insertionMode = IN_SELECT_MODE;
    }
}

function optgroupStartTagInBody(p, token) {
    if (p.openElements.currentTagName === $.OPTION) {
        p.openElements.pop();
    }

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}

function rbStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.RUBY)) {
        p.openElements.generateImpliedEndTags();
    }

    p._insertElement(token, NS.HTML);
}

function rtStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.RUBY)) {
        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
    }

    p._insertElement(token, NS.HTML);
}

function menuStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p._closePElement();
    }

    p._insertElement(token, NS.HTML);
}

function mathStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    foreignContent.adjustTokenMathMLAttrs(token);
    foreignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing) {
        p._appendElement(token, NS.MATHML);
    } else {
        p._insertElement(token, NS.MATHML);
    }

    token.ackSelfClosing = true;
}

function svgStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    foreignContent.adjustTokenSVGAttrs(token);
    foreignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing) {
        p._appendElement(token, NS.SVG);
    } else {
        p._insertElement(token, NS.SVG);
    }

    token.ackSelfClosing = true;
}

function genericStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function startTagInBody(p, token) {
    const tn = token.tagName;

    switch (tn.length) {
        case 1:
            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
                bStartTagInBody(p, token);
            } else if (tn === $.P) {
                addressStartTagInBody(p, token);
            } else if (tn === $.A) {
                aStartTagInBody(p, token);
            } else {
                genericStartTagInBody(p, token);
            }

            break;

        case 2:
            if (tn === $.DL || tn === $.OL || tn === $.UL) {
                addressStartTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
                numberedHeaderStartTagInBody(p, token);
            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
                listItemStartTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
                bStartTagInBody(p, token);
            } else if (tn === $.BR) {
                areaStartTagInBody(p, token);
            } else if (tn === $.HR) {
                hrStartTagInBody(p, token);
            } else if (tn === $.RB) {
                rbStartTagInBody(p, token);
            } else if (tn === $.RT || tn === $.RP) {
                rtStartTagInBody(p, token);
            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
                genericStartTagInBody(p, token);
            }

            break;

        case 3:
            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
                addressStartTagInBody(p, token);
            } else if (tn === $.PRE) {
                preStartTagInBody(p, token);
            } else if (tn === $.BIG) {
                bStartTagInBody(p, token);
            } else if (tn === $.IMG || tn === $.WBR) {
                areaStartTagInBody(p, token);
            } else if (tn === $.XMP) {
                xmpStartTagInBody(p, token);
            } else if (tn === $.SVG) {
                svgStartTagInBody(p, token);
            } else if (tn === $.RTC) {
                rbStartTagInBody(p, token);
            } else if (tn !== $.COL) {
                genericStartTagInBody(p, token);
            }

            break;

        case 4:
            if (tn === $.HTML) {
                htmlStartTagInBody(p, token);
            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
                startTagInHead(p, token);
            } else if (tn === $.BODY) {
                bodyStartTagInBody(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
                addressStartTagInBody(p, token);
            } else if (tn === $.FORM) {
                formStartTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT) {
                bStartTagInBody(p, token);
            } else if (tn === $.NOBR) {
                nobrStartTagInBody(p, token);
            } else if (tn === $.AREA) {
                areaStartTagInBody(p, token);
            } else if (tn === $.MATH) {
                mathStartTagInBody(p, token);
            } else if (tn === $.MENU) {
                menuStartTagInBody(p, token);
            } else if (tn !== $.HEAD) {
                genericStartTagInBody(p, token);
            }

            break;

        case 5:
            if (tn === $.STYLE || tn === $.TITLE) {
                startTagInHead(p, token);
            } else if (tn === $.ASIDE) {
                addressStartTagInBody(p, token);
            } else if (tn === $.SMALL) {
                bStartTagInBody(p, token);
            } else if (tn === $.TABLE) {
                tableStartTagInBody(p, token);
            } else if (tn === $.EMBED) {
                areaStartTagInBody(p, token);
            } else if (tn === $.INPUT) {
                inputStartTagInBody(p, token);
            } else if (tn === $.PARAM || tn === $.TRACK) {
                paramStartTagInBody(p, token);
            } else if (tn === $.IMAGE) {
                imageStartTagInBody(p, token);
            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
                genericStartTagInBody(p, token);
            }

            break;

        case 6:
            if (tn === $.SCRIPT) {
                startTagInHead(p, token);
            } else if (
                tn === $.CENTER ||
                tn === $.FIGURE ||
                tn === $.FOOTER ||
                tn === $.HEADER ||
                tn === $.HGROUP ||
                tn === $.DIALOG
            ) {
                addressStartTagInBody(p, token);
            } else if (tn === $.BUTTON) {
                buttonStartTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
                bStartTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
                appletStartTagInBody(p, token);
            } else if (tn === $.KEYGEN) {
                areaStartTagInBody(p, token);
            } else if (tn === $.SOURCE) {
                paramStartTagInBody(p, token);
            } else if (tn === $.IFRAME) {
                iframeStartTagInBody(p, token);
            } else if (tn === $.SELECT) {
                selectStartTagInBody(p, token);
            } else if (tn === $.OPTION) {
                optgroupStartTagInBody(p, token);
            } else {
                genericStartTagInBody(p, token);
            }

            break;

        case 7:
            if (tn === $.BGSOUND) {
                startTagInHead(p, token);
            } else if (
                tn === $.DETAILS ||
                tn === $.ADDRESS ||
                tn === $.ARTICLE ||
                tn === $.SECTION ||
                tn === $.SUMMARY
            ) {
                addressStartTagInBody(p, token);
            } else if (tn === $.LISTING) {
                preStartTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
                appletStartTagInBody(p, token);
            } else if (tn === $.NOEMBED) {
                noembedStartTagInBody(p, token);
            } else if (tn !== $.CAPTION) {
                genericStartTagInBody(p, token);
            }

            break;

        case 8:
            if (tn === $.BASEFONT) {
                startTagInHead(p, token);
            } else if (tn === $.FRAMESET) {
                framesetStartTagInBody(p, token);
            } else if (tn === $.FIELDSET) {
                addressStartTagInBody(p, token);
            } else if (tn === $.TEXTAREA) {
                textareaStartTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
                startTagInHead(p, token);
            } else if (tn === $.NOSCRIPT) {
                if (p.options.scriptingEnabled) {
                    noembedStartTagInBody(p, token);
                } else {
                    genericStartTagInBody(p, token);
                }
            } else if (tn === $.OPTGROUP) {
                optgroupStartTagInBody(p, token);
            } else if (tn !== $.COLGROUP) {
                genericStartTagInBody(p, token);
            }

            break;

        case 9:
            if (tn === $.PLAINTEXT) {
                plaintextStartTagInBody(p, token);
            } else {
                genericStartTagInBody(p, token);
            }

            break;

        case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
                addressStartTagInBody(p, token);
            } else {
                genericStartTagInBody(p, token);
            }

            break;

        default:
            genericStartTagInBody(p, token);
    }
}

function bodyEndTagInBody(p) {
    if (p.openElements.hasInScope($.BODY)) {
        p.insertionMode = AFTER_BODY_MODE;
    }
}

function htmlEndTagInBody(p, token) {
    if (p.openElements.hasInScope($.BODY)) {
        p.insertionMode = AFTER_BODY_MODE;
        p._processToken(token);
    }
}

function addressEndTagInBody(p, token) {
    const tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
    }
}

function formEndTagInBody(p) {
    const inTemplate = p.openElements.tmplCount > 0;
    const formElement = p.formElement;

    if (!inTemplate) {
        p.formElement = null;
    }

    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
        p.openElements.generateImpliedEndTags();

        if (inTemplate) {
            p.openElements.popUntilTagNamePopped($.FORM);
        } else {
            p.openElements.remove(formElement);
        }
    }
}

function pEndTagInBody(p) {
    if (!p.openElements.hasInButtonScope($.P)) {
        p._insertFakeElement($.P);
    }

    p._closePElement();
}

function liEndTagInBody(p) {
    if (p.openElements.hasInListItemScope($.LI)) {
        p.openElements.generateImpliedEndTagsWithExclusion($.LI);
        p.openElements.popUntilTagNamePopped($.LI);
    }
}

function ddEndTagInBody(p, token) {
    const tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTagsWithExclusion(tn);
        p.openElements.popUntilTagNamePopped(tn);
    }
}

function numberedHeaderEndTagInBody(p) {
    if (p.openElements.hasNumberedHeaderInScope()) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilNumberedHeaderPopped();
    }
}

function appletEndTagInBody(p, token) {
    const tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
        p.activeFormattingElements.clearToLastMarker();
    }
}

function brEndTagInBody(p) {
    p._reconstructActiveFormattingElements();
    p._insertFakeElement($.BR);
    p.openElements.pop();
    p.framesetOk = false;
}

function genericEndTagInBody(p, token) {
    const tn = token.tagName;

    for (let i = p.openElements.stackTop; i > 0; i--) {
        const element = p.openElements.items[i];

        if (p.treeAdapter.getTagName(element) === tn) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilElementPopped(element);
            break;
        }

        if (p._isSpecialElement(element)) {
            break;
        }
    }
}

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function endTagInBody(p, token) {
    const tn = token.tagName;

    switch (tn.length) {
        case 1:
            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
                callAdoptionAgency(p, token);
            } else if (tn === $.P) {
                pEndTagInBody(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 2:
            if (tn === $.DL || tn === $.UL || tn === $.OL) {
                addressEndTagInBody(p, token);
            } else if (tn === $.LI) {
                liEndTagInBody(p, token);
            } else if (tn === $.DD || tn === $.DT) {
                ddEndTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
                numberedHeaderEndTagInBody(p, token);
            } else if (tn === $.BR) {
                brEndTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
                callAdoptionAgency(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 3:
            if (tn === $.BIG) {
                callAdoptionAgency(p, token);
            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
                addressEndTagInBody(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 4:
            if (tn === $.BODY) {
                bodyEndTagInBody(p, token);
            } else if (tn === $.HTML) {
                htmlEndTagInBody(p, token);
            } else if (tn === $.FORM) {
                formEndTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
                callAdoptionAgency(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
                addressEndTagInBody(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 5:
            if (tn === $.ASIDE) {
                addressEndTagInBody(p, token);
            } else if (tn === $.SMALL) {
                callAdoptionAgency(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 6:
            if (
                tn === $.CENTER ||
                tn === $.FIGURE ||
                tn === $.FOOTER ||
                tn === $.HEADER ||
                tn === $.HGROUP ||
                tn === $.DIALOG
            ) {
                addressEndTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
                appletEndTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
                callAdoptionAgency(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 7:
            if (
                tn === $.ADDRESS ||
                tn === $.ARTICLE ||
                tn === $.DETAILS ||
                tn === $.SECTION ||
                tn === $.SUMMARY ||
                tn === $.LISTING
            ) {
                addressEndTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
                appletEndTagInBody(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 8:
            if (tn === $.FIELDSET) {
                addressEndTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
                endTagInHead(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
                addressEndTagInBody(p, token);
            } else {
                genericEndTagInBody(p, token);
            }

            break;

        default:
            genericEndTagInBody(p, token);
    }
}

function eofInBody(p, token) {
    if (p.tmplInsertionModeStackTop > -1) {
        eofInTemplate(p, token);
    } else {
        p.stopped = true;
    }
}

// The "text" insertion mode
//------------------------------------------------------------------
function endTagInText(p, token) {
    if (token.tagName === $.SCRIPT) {
        p.pendingScript = p.openElements.current;
    }

    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
}

function eofInText(p, token) {
    p._err(ERR.eofInElementThatCanContainOnlyText);
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}

// The "in table" insertion mode
//------------------------------------------------------------------
function characterInTable(p, token) {
    const curTn = p.openElements.currentTagName;

    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
        p.pendingCharacterTokens = [];
        p.hasNonWhitespacePendingCharacterToken = false;
        p.originalInsertionMode = p.insertionMode;
        p.insertionMode = IN_TABLE_TEXT_MODE;
        p._processToken(token);
    } else {
        tokenInTable(p, token);
    }
}

function captionStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p.activeFormattingElements.insertMarker();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_CAPTION_MODE;
}

function colgroupStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_COLUMN_GROUP_MODE;
}

function colStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement($.COLGROUP);
    p.insertionMode = IN_COLUMN_GROUP_MODE;
    p._processToken(token);
}

function tbodyStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_TABLE_BODY_MODE;
}

function tdStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement($.TBODY);
    p.insertionMode = IN_TABLE_BODY_MODE;
    p._processToken(token);
}

function tableStartTagInTable(p, token) {
    if (p.openElements.hasInTableScope($.TABLE)) {
        p.openElements.popUntilTagNamePopped($.TABLE);
        p._resetInsertionMode();
        p._processToken(token);
    }
}

function inputStartTagInTable(p, token) {
    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
        p._appendElement(token, NS.HTML);
    } else {
        tokenInTable(p, token);
    }

    token.ackSelfClosing = true;
}

function formStartTagInTable(p, token) {
    if (!p.formElement && p.openElements.tmplCount === 0) {
        p._insertElement(token, NS.HTML);
        p.formElement = p.openElements.current;
        p.openElements.pop();
    }
}

function startTagInTable(p, token) {
    const tn = token.tagName;

    switch (tn.length) {
        case 2:
            if (tn === $.TD || tn === $.TH || tn === $.TR) {
                tdStartTagInTable(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        case 3:
            if (tn === $.COL) {
                colStartTagInTable(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        case 4:
            if (tn === $.FORM) {
                formStartTagInTable(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        case 5:
            if (tn === $.TABLE) {
                tableStartTagInTable(p, token);
            } else if (tn === $.STYLE) {
                startTagInHead(p, token);
            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
                tbodyStartTagInTable(p, token);
            } else if (tn === $.INPUT) {
                inputStartTagInTable(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        case 6:
            if (tn === $.SCRIPT) {
                startTagInHead(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        case 7:
            if (tn === $.CAPTION) {
                captionStartTagInTable(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        case 8:
            if (tn === $.COLGROUP) {
                colgroupStartTagInTable(p, token);
            } else if (tn === $.TEMPLATE) {
                startTagInHead(p, token);
            } else {
                tokenInTable(p, token);
            }

            break;

        default:
            tokenInTable(p, token);
    }
}

function endTagInTable(p, token) {
    const tn = token.tagName;

    if (tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
        }
    } else if (tn === $.TEMPLATE) {
        endTagInHead(p, token);
    } else if (
        tn !== $.BODY &&
        tn !== $.CAPTION &&
        tn !== $.COL &&
        tn !== $.COLGROUP &&
        tn !== $.HTML &&
        tn !== $.TBODY &&
        tn !== $.TD &&
        tn !== $.TFOOT &&
        tn !== $.TH &&
        tn !== $.THEAD &&
        tn !== $.TR
    ) {
        tokenInTable(p, token);
    }
}

function tokenInTable(p, token) {
    const savedFosterParentingState = p.fosterParentingEnabled;

    p.fosterParentingEnabled = true;
    p._processTokenInBodyMode(token);
    p.fosterParentingEnabled = savedFosterParentingState;
}

// The "in table text" insertion mode
//------------------------------------------------------------------
function whitespaceCharacterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
}

function characterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
    p.hasNonWhitespacePendingCharacterToken = true;
}

function tokenInTableText(p, token) {
    let i = 0;

    if (p.hasNonWhitespacePendingCharacterToken) {
        for (; i < p.pendingCharacterTokens.length; i++) {
            tokenInTable(p, p.pendingCharacterTokens[i]);
        }
    } else {
        for (; i < p.pendingCharacterTokens.length; i++) {
            p._insertCharacters(p.pendingCharacterTokens[i]);
        }
    }

    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}

// The "in caption" insertion mode
//------------------------------------------------------------------
function startTagInCaption(p, token) {
    const tn = token.tagName;

    if (
        tn === $.CAPTION ||
        tn === $.COL ||
        tn === $.COLGROUP ||
        tn === $.TBODY ||
        tn === $.TD ||
        tn === $.TFOOT ||
        tn === $.TH ||
        tn === $.THEAD ||
        tn === $.TR
    ) {
        if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    } else {
        startTagInBody(p, token);
    }
}

function endTagInCaption(p, token) {
    const tn = token.tagName;

    if (tn === $.CAPTION || tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;

            if (tn === $.TABLE) {
                p._processToken(token);
            }
        }
    } else if (
        tn !== $.BODY &&
        tn !== $.COL &&
        tn !== $.COLGROUP &&
        tn !== $.HTML &&
        tn !== $.TBODY &&
        tn !== $.TD &&
        tn !== $.TFOOT &&
        tn !== $.TH &&
        tn !== $.THEAD &&
        tn !== $.TR
    ) {
        endTagInBody(p, token);
    }
}

// The "in column group" insertion mode
//------------------------------------------------------------------
function startTagInColumnGroup(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.COL) {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
    } else if (tn === $.TEMPLATE) {
        startTagInHead(p, token);
    } else {
        tokenInColumnGroup(p, token);
    }
}

function endTagInColumnGroup(p, token) {
    const tn = token.tagName;

    if (tn === $.COLGROUP) {
        if (p.openElements.currentTagName === $.COLGROUP) {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
        }
    } else if (tn === $.TEMPLATE) {
        endTagInHead(p, token);
    } else if (tn !== $.COL) {
        tokenInColumnGroup(p, token);
    }
}

function tokenInColumnGroup(p, token) {
    if (p.openElements.currentTagName === $.COLGROUP) {
        p.openElements.pop();
        p.insertionMode = IN_TABLE_MODE;
        p._processToken(token);
    }
}

// The "in table body" insertion mode
//------------------------------------------------------------------
function startTagInTableBody(p, token) {
    const tn = token.tagName;

    if (tn === $.TR) {
        p.openElements.clearBackToTableBodyContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_ROW_MODE;
    } else if (tn === $.TH || tn === $.TD) {
        p.openElements.clearBackToTableBodyContext();
        p._insertFakeElement($.TR);
        p.insertionMode = IN_ROW_MODE;
        p._processToken(token);
    } else if (
        tn === $.CAPTION ||
        tn === $.COL ||
        tn === $.COLGROUP ||
        tn === $.TBODY ||
        tn === $.TFOOT ||
        tn === $.THEAD
    ) {
        if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    } else {
        startTagInTable(p, token);
    }
}

function endTagInTableBody(p, token) {
    const tn = token.tagName;

    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
        }
    } else if (tn === $.TABLE) {
        if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    } else if (
        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||
        (tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)
    ) {
        endTagInTable(p, token);
    }
}

// The "in row" insertion mode
//------------------------------------------------------------------
function startTagInRow(p, token) {
    const tn = token.tagName;

    if (tn === $.TH || tn === $.TD) {
        p.openElements.clearBackToTableRowContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CELL_MODE;
        p.activeFormattingElements.insertMarker();
    } else if (
        tn === $.CAPTION ||
        tn === $.COL ||
        tn === $.COLGROUP ||
        tn === $.TBODY ||
        tn === $.TFOOT ||
        tn === $.THEAD ||
        tn === $.TR
    ) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
        }
    } else {
        startTagInTable(p, token);
    }
}

function endTagInRow(p, token) {
    const tn = token.tagName;

    if (tn === $.TR) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
        }
    } else if (tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
        }
    } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
        }
    } else if (
        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||
        (tn !== $.HTML && tn !== $.TD && tn !== $.TH)
    ) {
        endTagInTable(p, token);
    }
}

// The "in cell" insertion mode
//------------------------------------------------------------------
function startTagInCell(p, token) {
    const tn = token.tagName;

    if (
        tn === $.CAPTION ||
        tn === $.COL ||
        tn === $.COLGROUP ||
        tn === $.TBODY ||
        tn === $.TD ||
        tn === $.TFOOT ||
        tn === $.TH ||
        tn === $.THEAD ||
        tn === $.TR
    ) {
        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
            p._closeTableCell();
            p._processToken(token);
        }
    } else {
        startTagInBody(p, token);
    }
}

function endTagInCell(p, token) {
    const tn = token.tagName;

    if (tn === $.TD || tn === $.TH) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_ROW_MODE;
        }
    } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
        if (p.openElements.hasInTableScope(tn)) {
            p._closeTableCell();
            p._processToken(token);
        }
    } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
        endTagInBody(p, token);
    }
}

// The "in select" insertion mode
//------------------------------------------------------------------
function startTagInSelect(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.OPTION) {
        if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
        }

        p._insertElement(token, NS.HTML);
    } else if (tn === $.OPTGROUP) {
        if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
        }

        if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
        }

        p._insertElement(token, NS.HTML);
    } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
        if (p.openElements.hasInSelectScope($.SELECT)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();

            if (tn !== $.SELECT) {
                p._processToken(token);
            }
        }
    } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
        startTagInHead(p, token);
    }
}

function endTagInSelect(p, token) {
    const tn = token.tagName;

    if (tn === $.OPTGROUP) {
        const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
        const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
            p.openElements.pop();
        }

        if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
        }
    } else if (tn === $.OPTION) {
        if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
        }
    } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
        p.openElements.popUntilTagNamePopped($.SELECT);
        p._resetInsertionMode();
    } else if (tn === $.TEMPLATE) {
        endTagInHead(p, token);
    }
}

//12.2.5.4.17 The "in select in table" insertion mode
//------------------------------------------------------------------
function startTagInSelectInTable(p, token) {
    const tn = token.tagName;

    if (
        tn === $.CAPTION ||
        tn === $.TABLE ||
        tn === $.TBODY ||
        tn === $.TFOOT ||
        tn === $.THEAD ||
        tn === $.TR ||
        tn === $.TD ||
        tn === $.TH
    ) {
        p.openElements.popUntilTagNamePopped($.SELECT);
        p._resetInsertionMode();
        p._processToken(token);
    } else {
        startTagInSelect(p, token);
    }
}

function endTagInSelectInTable(p, token) {
    const tn = token.tagName;

    if (
        tn === $.CAPTION ||
        tn === $.TABLE ||
        tn === $.TBODY ||
        tn === $.TFOOT ||
        tn === $.THEAD ||
        tn === $.TR ||
        tn === $.TD ||
        tn === $.TH
    ) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            p._processToken(token);
        }
    } else {
        endTagInSelect(p, token);
    }
}

// The "in template" insertion mode
//------------------------------------------------------------------
function startTagInTemplate(p, token) {
    const tn = token.tagName;

    if (
        tn === $.BASE ||
        tn === $.BASEFONT ||
        tn === $.BGSOUND ||
        tn === $.LINK ||
        tn === $.META ||
        tn === $.NOFRAMES ||
        tn === $.SCRIPT ||
        tn === $.STYLE ||
        tn === $.TEMPLATE ||
        tn === $.TITLE
    ) {
        startTagInHead(p, token);
    } else {
        const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

        p._popTmplInsertionMode();
        p._pushTmplInsertionMode(newInsertionMode);
        p.insertionMode = newInsertionMode;
        p._processToken(token);
    }
}

function endTagInTemplate(p, token) {
    if (token.tagName === $.TEMPLATE) {
        endTagInHead(p, token);
    }
}

function eofInTemplate(p, token) {
    if (p.openElements.tmplCount > 0) {
        p.openElements.popUntilTagNamePopped($.TEMPLATE);
        p.activeFormattingElements.clearToLastMarker();
        p._popTmplInsertionMode();
        p._resetInsertionMode();
        p._processToken(token);
    } else {
        p.stopped = true;
    }
}

// The "after body" insertion mode
//------------------------------------------------------------------
function startTagAfterBody(p, token) {
    if (token.tagName === $.HTML) {
        startTagInBody(p, token);
    } else {
        tokenAfterBody(p, token);
    }
}

function endTagAfterBody(p, token) {
    if (token.tagName === $.HTML) {
        if (!p.fragmentContext) {
            p.insertionMode = AFTER_AFTER_BODY_MODE;
        }
    } else {
        tokenAfterBody(p, token);
    }
}

function tokenAfterBody(p, token) {
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

// The "in frameset" insertion mode
//------------------------------------------------------------------
function startTagInFrameset(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.FRAMESET) {
        p._insertElement(token, NS.HTML);
    } else if (tn === $.FRAME) {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
    } else if (tn === $.NOFRAMES) {
        startTagInHead(p, token);
    }
}

function endTagInFrameset(p, token) {
    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
        p.openElements.pop();

        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
            p.insertionMode = AFTER_FRAMESET_MODE;
        }
    }
}

// The "after frameset" insertion mode
//------------------------------------------------------------------
function startTagAfterFrameset(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.NOFRAMES) {
        startTagInHead(p, token);
    }
}

function endTagAfterFrameset(p, token) {
    if (token.tagName === $.HTML) {
        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
    }
}

// The "after after body" insertion mode
//------------------------------------------------------------------
function startTagAfterAfterBody(p, token) {
    if (token.tagName === $.HTML) {
        startTagInBody(p, token);
    } else {
        tokenAfterAfterBody(p, token);
    }
}

function tokenAfterAfterBody(p, token) {
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

// The "after after frameset" insertion mode
//------------------------------------------------------------------
function startTagAfterAfterFrameset(p, token) {
    const tn = token.tagName;

    if (tn === $.HTML) {
        startTagInBody(p, token);
    } else if (tn === $.NOFRAMES) {
        startTagInHead(p, token);
    }
}

// The rules for parsing tokens in foreign content
//------------------------------------------------------------------
function nullCharacterInForeignContent(p, token) {
    token.chars = unicode.REPLACEMENT_CHARACTER;
    p._insertCharacters(token);
}

function characterInForeignContent(p, token) {
    p._insertCharacters(token);
    p.framesetOk = false;
}

function startTagInForeignContent(p, token) {
    if (foreignContent.causesExit(token) && !p.fragmentContext) {
        while (
            p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
            !p._isIntegrationPoint(p.openElements.current)
        ) {
            p.openElements.pop();
        }

        p._processToken(token);
    } else {
        const current = p._getAdjustedCurrentElement();
        const currentNs = p.treeAdapter.getNamespaceURI(current);

        if (currentNs === NS.MATHML) {
            foreignContent.adjustTokenMathMLAttrs(token);
        } else if (currentNs === NS.SVG) {
            foreignContent.adjustTokenSVGTagName(token);
            foreignContent.adjustTokenSVGAttrs(token);
        }

        foreignContent.adjustTokenXMLAttrs(token);

        if (token.selfClosing) {
            p._appendElement(token, currentNs);
        } else {
            p._insertElement(token, currentNs);
        }

        token.ackSelfClosing = true;
    }
}

function endTagInForeignContent(p, token) {
    for (let i = p.openElements.stackTop; i > 0; i--) {
        const element = p.openElements.items[i];

        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
            p._processToken(token);
            break;
        }

        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
            p.openElements.popUntilElementPopped(element);
            break;
        }
    }
}

},{"../common/doctype":62,"../common/error-codes":63,"../common/foreign-content":64,"../common/html":65,"../common/unicode":66,"../extensions/error-reporting/parser-mixin":68,"../extensions/location-info/parser-mixin":72,"../tokenizer":80,"../tree-adapters/default":83,"../utils/merge-options":84,"../utils/mixin":85,"./formatting-element-list":76,"./open-element-stack":78}],78:[function(require,module,exports){
'use strict';

const HTML = require('../common/html');

//Aliases
const $ = HTML.TAG_NAMES;
const NS = HTML.NAMESPACES;

//Element utils

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function isImpliedEndTagRequired(tn) {
    switch (tn.length) {
        case 1:
            return tn === $.P;

        case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

        case 3:
            return tn === $.RTC;

        case 6:
            return tn === $.OPTION;

        case 8:
            return tn === $.OPTGROUP;
    }

    return false;
}

function isImpliedEndTagRequiredThoroughly(tn) {
    switch (tn.length) {
        case 1:
            return tn === $.P;

        case 2:
            return (
                tn === $.RB ||
                tn === $.RP ||
                tn === $.RT ||
                tn === $.DD ||
                tn === $.DT ||
                tn === $.LI ||
                tn === $.TD ||
                tn === $.TH ||
                tn === $.TR
            );

        case 3:
            return tn === $.RTC;

        case 5:
            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;

        case 6:
            return tn === $.OPTION;

        case 7:
            return tn === $.CAPTION;

        case 8:
            return tn === $.OPTGROUP || tn === $.COLGROUP;
    }

    return false;
}

function isScopingElement(tn, ns) {
    switch (tn.length) {
        case 2:
            if (tn === $.TD || tn === $.TH) {
                return ns === NS.HTML;
            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {
                return ns === NS.MATHML;
            }

            break;

        case 4:
            if (tn === $.HTML) {
                return ns === NS.HTML;
            } else if (tn === $.DESC) {
                return ns === NS.SVG;
            }

            break;

        case 5:
            if (tn === $.TABLE) {
                return ns === NS.HTML;
            } else if (tn === $.MTEXT) {
                return ns === NS.MATHML;
            } else if (tn === $.TITLE) {
                return ns === NS.SVG;
            }

            break;

        case 6:
            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

        case 7:
            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

        case 8:
            return tn === $.TEMPLATE && ns === NS.HTML;

        case 13:
            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

        case 14:
            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
    }

    return false;
}

//Stack of open elements
class OpenElementStack {
    constructor(document, treeAdapter) {
        this.stackTop = -1;
        this.items = [];
        this.current = document;
        this.currentTagName = null;
        this.currentTmplContent = null;
        this.tmplCount = 0;
        this.treeAdapter = treeAdapter;
    }

    //Index of element
    _indexOf(element) {
        let idx = -1;

        for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
                idx = i;
                break;
            }
        }
        return idx;
    }

    //Update current element
    _isInTemplate() {
        return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
    }

    _updateCurrentElement() {
        this.current = this.items[this.stackTop];
        this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);

        this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
    }

    //Mutations
    push(element) {
        this.items[++this.stackTop] = element;
        this._updateCurrentElement();

        if (this._isInTemplate()) {
            this.tmplCount++;
        }
    }

    pop() {
        this.stackTop--;

        if (this.tmplCount > 0 && this._isInTemplate()) {
            this.tmplCount--;
        }

        this._updateCurrentElement();
    }

    replace(oldElement, newElement) {
        const idx = this._indexOf(oldElement);

        this.items[idx] = newElement;

        if (idx === this.stackTop) {
            this._updateCurrentElement();
        }
    }

    insertAfter(referenceElement, newElement) {
        const insertionIdx = this._indexOf(referenceElement) + 1;

        this.items.splice(insertionIdx, 0, newElement);

        if (insertionIdx === ++this.stackTop) {
            this._updateCurrentElement();
        }
    }

    popUntilTagNamePopped(tagName) {
        while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);

            this.pop();

            if (tn === tagName && ns === NS.HTML) {
                break;
            }
        }
    }

    popUntilElementPopped(element) {
        while (this.stackTop > -1) {
            const poppedElement = this.current;

            this.pop();

            if (poppedElement === element) {
                break;
            }
        }
    }

    popUntilNumberedHeaderPopped() {
        while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);

            this.pop();

            if (
                tn === $.H1 ||
                tn === $.H2 ||
                tn === $.H3 ||
                tn === $.H4 ||
                tn === $.H5 ||
                (tn === $.H6 && ns === NS.HTML)
            ) {
                break;
            }
        }
    }

    popUntilTableCellPopped() {
        while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);

            this.pop();

            if (tn === $.TD || (tn === $.TH && ns === NS.HTML)) {
                break;
            }
        }
    }

    popAllUpToHtmlElement() {
        //NOTE: here we assume that root <html> element is always first in the open element stack, so
        //we perform this fast stack clean up.
        this.stackTop = 0;
        this._updateCurrentElement();
    }

    clearBackToTableContext() {
        while (
            (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||
            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML
        ) {
            this.pop();
        }
    }

    clearBackToTableBodyContext() {
        while (
            (this.currentTagName !== $.TBODY &&
                this.currentTagName !== $.TFOOT &&
                this.currentTagName !== $.THEAD &&
                this.currentTagName !== $.TEMPLATE &&
                this.currentTagName !== $.HTML) ||
            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML
        ) {
            this.pop();
        }
    }

    clearBackToTableRowContext() {
        while (
            (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||
            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML
        ) {
            this.pop();
        }
    }

    remove(element) {
        for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
                this.items.splice(i, 1);
                this.stackTop--;
                this._updateCurrentElement();
                break;
            }
        }
    }

    //Search
    tryPeekProperlyNestedBodyElement() {
        //Properly nested <body> element (should be second element in stack).
        const element = this.items[1];

        return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
    }

    contains(element) {
        return this._indexOf(element) > -1;
    }

    getCommonAncestor(element) {
        let elementIdx = this._indexOf(element);

        return --elementIdx >= 0 ? this.items[elementIdx] : null;
    }

    isRootHtmlElementCurrent() {
        return this.stackTop === 0 && this.currentTagName === $.HTML;
    }

    //Element in scope
    hasInScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (tn === tagName && ns === NS.HTML) {
                return true;
            }

            if (isScopingElement(tn, ns)) {
                return false;
            }
        }

        return true;
    }

    hasNumberedHeaderInScope() {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (
                (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) &&
                ns === NS.HTML
            ) {
                return true;
            }

            if (isScopingElement(tn, ns)) {
                return false;
            }
        }

        return true;
    }

    hasInListItemScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (tn === tagName && ns === NS.HTML) {
                return true;
            }

            if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || isScopingElement(tn, ns)) {
                return false;
            }
        }

        return true;
    }

    hasInButtonScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (tn === tagName && ns === NS.HTML) {
                return true;
            }

            if ((tn === $.BUTTON && ns === NS.HTML) || isScopingElement(tn, ns)) {
                return false;
            }
        }

        return true;
    }

    hasInTableScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (ns !== NS.HTML) {
                continue;
            }

            if (tn === tagName) {
                return true;
            }

            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {
                return false;
            }
        }

        return true;
    }

    hasTableBodyContextInTableScope() {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (ns !== NS.HTML) {
                continue;
            }

            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {
                return true;
            }

            if (tn === $.TABLE || tn === $.HTML) {
                return false;
            }
        }

        return true;
    }

    hasInSelectScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (ns !== NS.HTML) {
                continue;
            }

            if (tn === tagName) {
                return true;
            }

            if (tn !== $.OPTION && tn !== $.OPTGROUP) {
                return false;
            }
        }

        return true;
    }

    //Implied end tags
    generateImpliedEndTags() {
        while (isImpliedEndTagRequired(this.currentTagName)) {
            this.pop();
        }
    }

    generateImpliedEndTagsThoroughly() {
        while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
            this.pop();
        }
    }

    generateImpliedEndTagsWithExclusion(exclusionTagName) {
        while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
            this.pop();
        }
    }
}

module.exports = OpenElementStack;

},{"../common/html":65}],79:[function(require,module,exports){
'use strict';

const defaultTreeAdapter = require('../tree-adapters/default');
const mergeOptions = require('../utils/merge-options');
const doctype = require('../common/doctype');
const HTML = require('../common/html');

//Aliases
const $ = HTML.TAG_NAMES;
const NS = HTML.NAMESPACES;

//Default serializer options
const DEFAULT_OPTIONS = {
    treeAdapter: defaultTreeAdapter
};

//Escaping regexes
const AMP_REGEX = /&/g;
const NBSP_REGEX = /\u00a0/g;
const DOUBLE_QUOTE_REGEX = /"/g;
const LT_REGEX = /</g;
const GT_REGEX = />/g;

//Serializer
class Serializer {
    constructor(node, options) {
        this.options = mergeOptions(DEFAULT_OPTIONS, options);
        this.treeAdapter = this.options.treeAdapter;

        this.html = '';
        this.startNode = node;
    }

    //API
    serialize() {
        this._serializeChildNodes(this.startNode);

        return this.html;
    }

    //Internals
    _serializeChildNodes(parentNode) {
        const childNodes = this.treeAdapter.getChildNodes(parentNode);

        if (childNodes) {
            for (let i = 0, cnLength = childNodes.length; i < cnLength; i++) {
                const currentNode = childNodes[i];

                if (this.treeAdapter.isElementNode(currentNode)) {
                    this._serializeElement(currentNode);
                } else if (this.treeAdapter.isTextNode(currentNode)) {
                    this._serializeTextNode(currentNode);
                } else if (this.treeAdapter.isCommentNode(currentNode)) {
                    this._serializeCommentNode(currentNode);
                } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {
                    this._serializeDocumentTypeNode(currentNode);
                }
            }
        }
    }

    _serializeElement(node) {
        const tn = this.treeAdapter.getTagName(node);
        const ns = this.treeAdapter.getNamespaceURI(node);

        this.html += '<' + tn;
        this._serializeAttributes(node);
        this.html += '>';

        if (
            tn !== $.AREA &&
            tn !== $.BASE &&
            tn !== $.BASEFONT &&
            tn !== $.BGSOUND &&
            tn !== $.BR &&
            tn !== $.COL &&
            tn !== $.EMBED &&
            tn !== $.FRAME &&
            tn !== $.HR &&
            tn !== $.IMG &&
            tn !== $.INPUT &&
            tn !== $.KEYGEN &&
            tn !== $.LINK &&
            tn !== $.META &&
            tn !== $.PARAM &&
            tn !== $.SOURCE &&
            tn !== $.TRACK &&
            tn !== $.WBR
        ) {
            const childNodesHolder =
                tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;

            this._serializeChildNodes(childNodesHolder);
            this.html += '</' + tn + '>';
        }
    }

    _serializeAttributes(node) {
        const attrs = this.treeAdapter.getAttrList(node);

        for (let i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
            const attr = attrs[i];
            const value = Serializer.escapeString(attr.value, true);

            this.html += ' ';

            if (!attr.namespace) {
                this.html += attr.name;
            } else if (attr.namespace === NS.XML) {
                this.html += 'xml:' + attr.name;
            } else if (attr.namespace === NS.XMLNS) {
                if (attr.name !== 'xmlns') {
                    this.html += 'xmlns:';
                }

                this.html += attr.name;
            } else if (attr.namespace === NS.XLINK) {
                this.html += 'xlink:' + attr.name;
            } else {
                this.html += attr.prefix + ':' + attr.name;
            }

            this.html += '="' + value + '"';
        }
    }

    _serializeTextNode(node) {
        const content = this.treeAdapter.getTextNodeContent(node);
        const parent = this.treeAdapter.getParentNode(node);
        let parentTn = void 0;

        if (parent && this.treeAdapter.isElementNode(parent)) {
            parentTn = this.treeAdapter.getTagName(parent);
        }

        if (
            parentTn === $.STYLE ||
            parentTn === $.SCRIPT ||
            parentTn === $.XMP ||
            parentTn === $.IFRAME ||
            parentTn === $.NOEMBED ||
            parentTn === $.NOFRAMES ||
            parentTn === $.PLAINTEXT ||
            parentTn === $.NOSCRIPT
        ) {
            this.html += content;
        } else {
            this.html += Serializer.escapeString(content, false);
        }
    }

    _serializeCommentNode(node) {
        this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';
    }

    _serializeDocumentTypeNode(node) {
        const name = this.treeAdapter.getDocumentTypeNodeName(node);

        this.html += '<' + doctype.serializeContent(name, null, null) + '>';
    }
}

// NOTE: used in tests and by rewriting stream
Serializer.escapeString = function(str, attrMode) {
    str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');

    if (attrMode) {
        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');
    } else {
        str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');
    }

    return str;
};

module.exports = Serializer;

},{"../common/doctype":62,"../common/html":65,"../tree-adapters/default":83,"../utils/merge-options":84}],80:[function(require,module,exports){
'use strict';

const Preprocessor = require('./preprocessor');
const unicode = require('../common/unicode');
const neTree = require('./named-entity-data');
const ERR = require('../common/error-codes');

//Aliases
const $ = unicode.CODE_POINTS;
const $$ = unicode.CODE_POINT_SEQUENCES;

//C1 Unicode control character reference replacements
const C1_CONTROLS_REFERENCE_REPLACEMENTS = {
    0x80: 0x20ac,
    0x82: 0x201a,
    0x83: 0x0192,
    0x84: 0x201e,
    0x85: 0x2026,
    0x86: 0x2020,
    0x87: 0x2021,
    0x88: 0x02c6,
    0x89: 0x2030,
    0x8a: 0x0160,
    0x8b: 0x2039,
    0x8c: 0x0152,
    0x8e: 0x017d,
    0x91: 0x2018,
    0x92: 0x2019,
    0x93: 0x201c,
    0x94: 0x201d,
    0x95: 0x2022,
    0x96: 0x2013,
    0x97: 0x2014,
    0x98: 0x02dc,
    0x99: 0x2122,
    0x9a: 0x0161,
    0x9b: 0x203a,
    0x9c: 0x0153,
    0x9e: 0x017e,
    0x9f: 0x0178
};

// Named entity tree flags
const HAS_DATA_FLAG = 1 << 0;
const DATA_DUPLET_FLAG = 1 << 1;
const HAS_BRANCHES_FLAG = 1 << 2;
const MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;

//States
const DATA_STATE = 'DATA_STATE';
const RCDATA_STATE = 'RCDATA_STATE';
const RAWTEXT_STATE = 'RAWTEXT_STATE';
const SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';
const PLAINTEXT_STATE = 'PLAINTEXT_STATE';
const TAG_OPEN_STATE = 'TAG_OPEN_STATE';
const END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';
const TAG_NAME_STATE = 'TAG_NAME_STATE';
const RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';
const RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';
const RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';
const RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';
const RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';
const RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';
const SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';
const SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';
const SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';
const SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';
const SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';
const SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';
const SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';
const SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';
const SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';
const SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';
const SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';
const SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';
const SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';
const SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';
const SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';
const SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';
const SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';
const BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';
const ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';
const AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';
const BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';
const ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';
const ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';
const ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';
const AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';
const SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';
const BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';
const MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';
const COMMENT_START_STATE = 'COMMENT_START_STATE';
const COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';
const COMMENT_STATE = 'COMMENT_STATE';
const COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';
const COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';
const COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';
const COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';
const COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';
const COMMENT_END_STATE = 'COMMENT_END_STATE';
const COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';
const DOCTYPE_STATE = 'DOCTYPE_STATE';
const BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';
const DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';
const AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';
const AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';
const BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
const DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';
const DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';
const AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
const BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';
const AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';
const BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
const DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';
const DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';
const AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
const BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';
const CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';
const CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';
const CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';
const CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';
const NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';
const AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';
const NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';
const HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';
const DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';
const HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';
const DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';
const NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';

//Utils

//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').
function isWhitespace(cp) {
    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}

function isAsciiDigit(cp) {
    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}

function isAsciiUpper(cp) {
    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}

function isAsciiLower(cp) {
    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}

function isAsciiLetter(cp) {
    return isAsciiLower(cp) || isAsciiUpper(cp);
}

function isAsciiAlphaNumeric(cp) {
    return isAsciiLetter(cp) || isAsciiDigit(cp);
}

function isAsciiUpperHexDigit(cp) {
    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;
}

function isAsciiLowerHexDigit(cp) {
    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;
}

function isAsciiHexDigit(cp) {
    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}

function toAsciiLowerCodePoint(cp) {
    return cp + 0x0020;
}

//NOTE: String.fromCharCode() function can handle only characters from BMP subset.
//So, we need to workaround this manually.
//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
function toChar(cp) {
    if (cp <= 0xffff) {
        return String.fromCharCode(cp);
    }

    cp -= 0x10000;
    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));
}

function toAsciiLowerChar(cp) {
    return String.fromCharCode(toAsciiLowerCodePoint(cp));
}

function findNamedEntityTreeBranch(nodeIx, cp) {
    const branchCount = neTree[++nodeIx];
    let lo = ++nodeIx;
    let hi = lo + branchCount - 1;

    while (lo <= hi) {
        const mid = (lo + hi) >>> 1;
        const midCp = neTree[mid];

        if (midCp < cp) {
            lo = mid + 1;
        } else if (midCp > cp) {
            hi = mid - 1;
        } else {
            return neTree[mid + branchCount];
        }
    }

    return -1;
}

//Tokenizer
class Tokenizer {
    constructor() {
        this.preprocessor = new Preprocessor();

        this.tokenQueue = [];

        this.allowCDATA = false;

        this.state = DATA_STATE;
        this.returnState = '';

        this.charRefCode = -1;
        this.tempBuff = [];
        this.lastStartTagName = '';

        this.consumedAfterSnapshot = -1;
        this.active = false;

        this.currentCharacterToken = null;
        this.currentToken = null;
        this.currentAttr = null;
    }

    //Errors
    _err() {
        // NOTE: err reporting is noop by default. Enabled by mixin.
    }

    _errOnNextCodePoint(err) {
        this._consume();
        this._err(err);
        this._unconsume();
    }

    //API
    getNextToken() {
        while (!this.tokenQueue.length && this.active) {
            this.consumedAfterSnapshot = 0;

            const cp = this._consume();

            if (!this._ensureHibernation()) {
                this[this.state](cp);
            }
        }

        return this.tokenQueue.shift();
    }

    write(chunk, isLastChunk) {
        this.active = true;
        this.preprocessor.write(chunk, isLastChunk);
    }

    insertHtmlAtCurrentPos(chunk) {
        this.active = true;
        this.preprocessor.insertHtmlAtCurrentPos(chunk);
    }

    //Hibernation
    _ensureHibernation() {
        if (this.preprocessor.endOfChunkHit) {
            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
                this.preprocessor.retreat();
            }

            this.active = false;
            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });

            return true;
        }

        return false;
    }

    //Consumption
    _consume() {
        this.consumedAfterSnapshot++;
        return this.preprocessor.advance();
    }

    _unconsume() {
        this.consumedAfterSnapshot--;
        this.preprocessor.retreat();
    }

    _reconsumeInState(state) {
        this.state = state;
        this._unconsume();
    }

    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
        let consumedCount = 0;
        let isMatch = true;
        const patternLength = pattern.length;
        let patternPos = 0;
        let cp = startCp;
        let patternCp = void 0;

        for (; patternPos < patternLength; patternPos++) {
            if (patternPos > 0) {
                cp = this._consume();
                consumedCount++;
            }

            if (cp === $.EOF) {
                isMatch = false;
                break;
            }

            patternCp = pattern[patternPos];

            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
                isMatch = false;
                break;
            }
        }

        if (!isMatch) {
            while (consumedCount--) {
                this._unconsume();
            }
        }

        return isMatch;
    }

    //Temp buffer
    _isTempBufferEqualToScriptString() {
        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
            return false;
        }

        for (let i = 0; i < this.tempBuff.length; i++) {
            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
                return false;
            }
        }

        return true;
    }

    //Token creation
    _createStartTagToken() {
        this.currentToken = {
            type: Tokenizer.START_TAG_TOKEN,
            tagName: '',
            selfClosing: false,
            ackSelfClosing: false,
            attrs: []
        };
    }

    _createEndTagToken() {
        this.currentToken = {
            type: Tokenizer.END_TAG_TOKEN,
            tagName: '',
            selfClosing: false,
            attrs: []
        };
    }

    _createCommentToken() {
        this.currentToken = {
            type: Tokenizer.COMMENT_TOKEN,
            data: ''
        };
    }

    _createDoctypeToken(initialName) {
        this.currentToken = {
            type: Tokenizer.DOCTYPE_TOKEN,
            name: initialName,
            forceQuirks: false,
            publicId: null,
            systemId: null
        };
    }

    _createCharacterToken(type, ch) {
        this.currentCharacterToken = {
            type: type,
            chars: ch
        };
    }

    _createEOFToken() {
        this.currentToken = { type: Tokenizer.EOF_TOKEN };
    }

    //Tag attributes
    _createAttr(attrNameFirstCh) {
        this.currentAttr = {
            name: attrNameFirstCh,
            value: ''
        };
    }

    _leaveAttrName(toState) {
        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
            this.currentToken.attrs.push(this.currentAttr);
        } else {
            this._err(ERR.duplicateAttribute);
        }

        this.state = toState;
    }

    _leaveAttrValue(toState) {
        this.state = toState;
    }

    //Token emission
    _emitCurrentToken() {
        this._emitCurrentCharacterToken();

        const ct = this.currentToken;

        this.currentToken = null;

        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
        if (ct.type === Tokenizer.START_TAG_TOKEN) {
            this.lastStartTagName = ct.tagName;
        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
            if (ct.attrs.length > 0) {
                this._err(ERR.endTagWithAttributes);
            }

            if (ct.selfClosing) {
                this._err(ERR.endTagWithTrailingSolidus);
            }
        }

        this.tokenQueue.push(ct);
    }

    _emitCurrentCharacterToken() {
        if (this.currentCharacterToken) {
            this.tokenQueue.push(this.currentCharacterToken);
            this.currentCharacterToken = null;
        }
    }

    _emitEOFToken() {
        this._createEOFToken();
        this._emitCurrentToken();
    }

    //Characters emission

    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
    //If we have a sequence of characters that belong to the same group, parser can process it
    //as a single solid character token.
    //So, there are 3 types of character tokens in parse5:
    //1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
    _appendCharToCurrentCharacterToken(type, ch) {
        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
            this._emitCurrentCharacterToken();
        }

        if (this.currentCharacterToken) {
            this.currentCharacterToken.chars += ch;
        } else {
            this._createCharacterToken(type, ch);
        }
    }

    _emitCodePoint(cp) {
        let type = Tokenizer.CHARACTER_TOKEN;

        if (isWhitespace(cp)) {
            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
        } else if (cp === $.NULL) {
            type = Tokenizer.NULL_CHARACTER_TOKEN;
        }

        this._appendCharToCurrentCharacterToken(type, toChar(cp));
    }

    _emitSeveralCodePoints(codePoints) {
        for (let i = 0; i < codePoints.length; i++) {
            this._emitCodePoint(codePoints[i]);
        }
    }

    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
    //So we can avoid additional checks here.
    _emitChars(ch) {
        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
    }

    // Character reference helpers
    _matchNamedCharacterReference(startCp) {
        let result = null;
        let excess = 1;
        let i = findNamedEntityTreeBranch(0, startCp);

        this.tempBuff.push(startCp);

        while (i > -1) {
            const current = neTree[i];
            const inNode = current < MAX_BRANCH_MARKER_VALUE;
            const nodeWithData = inNode && current & HAS_DATA_FLAG;

            if (nodeWithData) {
                //NOTE: we use greedy search, so we continue lookup at this point
                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
                excess = 0;
            }

            const cp = this._consume();

            this.tempBuff.push(cp);
            excess++;

            if (cp === $.EOF) {
                break;
            }

            if (inNode) {
                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
            } else {
                i = cp === current ? ++i : -1;
            }
        }

        while (excess--) {
            this.tempBuff.pop();
            this._unconsume();
        }

        return result;
    }

    _isCharacterReferenceInAttribute() {
        return (
            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||
            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||
            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE
        );
    }

    _isCharacterReferenceAttributeQuirk(withSemicolon) {
        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
            const nextCp = this._consume();

            this._unconsume();

            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
        }

        return false;
    }

    _flushCodePointsConsumedAsCharacterReference() {
        if (this._isCharacterReferenceInAttribute()) {
            for (let i = 0; i < this.tempBuff.length; i++) {
                this.currentAttr.value += toChar(this.tempBuff[i]);
            }
        } else {
            this._emitSeveralCodePoints(this.tempBuff);
        }

        this.tempBuff = [];
    }

    // State machine

    // Data state
    //------------------------------------------------------------------
    [DATA_STATE](cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.LESS_THAN_SIGN) {
            this.state = TAG_OPEN_STATE;
        } else if (cp === $.AMPERSAND) {
            this.returnState = DATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitCodePoint(cp);
        } else if (cp === $.EOF) {
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    //  RCDATA state
    //------------------------------------------------------------------
    [RCDATA_STATE](cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.AMPERSAND) {
            this.returnState = RCDATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = RCDATA_LESS_THAN_SIGN_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // RAWTEXT state
    //------------------------------------------------------------------
    [RAWTEXT_STATE](cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.LESS_THAN_SIGN) {
            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // Script data state
    //------------------------------------------------------------------
    [SCRIPT_DATA_STATE](cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // PLAINTEXT state
    //------------------------------------------------------------------
    [PLAINTEXT_STATE](cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // Tag open state
    //------------------------------------------------------------------
    [TAG_OPEN_STATE](cp) {
        if (cp === $.EXCLAMATION_MARK) {
            this.state = MARKUP_DECLARATION_OPEN_STATE;
        } else if (cp === $.SOLIDUS) {
            this.state = END_TAG_OPEN_STATE;
        } else if (isAsciiLetter(cp)) {
            this._createStartTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
        } else if (cp === $.QUESTION_MARK) {
            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
        } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars('<');
            this._emitEOFToken();
        } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._emitChars('<');
            this._reconsumeInState(DATA_STATE);
        }
    }

    // End tag open state
    //------------------------------------------------------------------
    [END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingEndTagName);
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars('</');
            this._emitEOFToken();
        } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
        }
    }

    // Tag name state
    //------------------------------------------------------------------
    [TAG_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
        } else if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this.currentToken.tagName += toChar(cp);
        }
    }

    // RCDATA less-than sign state
    //------------------------------------------------------------------
    [RCDATA_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RCDATA_END_TAG_OPEN_STATE;
        } else {
            this._emitChars('<');
            this._reconsumeInState(RCDATA_STATE);
        }
    }

    // RCDATA end tag open state
    //------------------------------------------------------------------
    [RCDATA_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
        } else {
            this._emitChars('</');
            this._reconsumeInState(RCDATA_STATE);
        }
    }

    // RCDATA end tag name state
    //------------------------------------------------------------------
    [RCDATA_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                }

                if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                }

                if (cp === $.GREATER_THAN_SIGN) {
                    this.state = DATA_STATE;
                    this._emitCurrentToken();
                    return;
                }
            }

            this._emitChars('</');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RCDATA_STATE);
        }
    }

    // RAWTEXT less-than sign state
    //------------------------------------------------------------------
    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RAWTEXT_END_TAG_OPEN_STATE;
        } else {
            this._emitChars('<');
            this._reconsumeInState(RAWTEXT_STATE);
        }
    }

    // RAWTEXT end tag open state
    //------------------------------------------------------------------
    [RAWTEXT_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
        } else {
            this._emitChars('</');
            this._reconsumeInState(RAWTEXT_STATE);
        }
    }

    // RAWTEXT end tag name state
    //------------------------------------------------------------------
    [RAWTEXT_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                }

                if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                }

                if (cp === $.GREATER_THAN_SIGN) {
                    this._emitCurrentToken();
                    this.state = DATA_STATE;
                    return;
                }
            }

            this._emitChars('</');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RAWTEXT_STATE);
        }
    }

    // Script data less-than sign state
    //------------------------------------------------------------------
    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
        } else if (cp === $.EXCLAMATION_MARK) {
            this.state = SCRIPT_DATA_ESCAPE_START_STATE;
            this._emitChars('<!');
        } else {
            this._emitChars('<');
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    }

    // Script data end tag open state
    //------------------------------------------------------------------
    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
        } else {
            this._emitChars('</');
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    }

    // Script data end tag name state
    //------------------------------------------------------------------
    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                } else if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                } else if (cp === $.GREATER_THAN_SIGN) {
                    this._emitCurrentToken();
                    this.state = DATA_STATE;
                    return;
                }
            }

            this._emitChars('</');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    }

    // Script data escape start state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
            this._emitChars('-');
        } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    }

    // Script data escape start dash state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars('-');
        } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    }

    // Script data escaped state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPED_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
            this._emitChars('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // Script data escaped dash state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
        } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    }

    // Script data escaped dash dash state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this._emitChars('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars('>');
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
        } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    }

    // Script data escaped less-than sign state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
        } else if (isAsciiLetter(cp)) {
            this.tempBuff = [];
            this._emitChars('<');
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
        } else {
            this._emitChars('<');
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    }

    // Script data escaped end tag open state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
        } else {
            this._emitChars('</');
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    }

    // Script data escaped end tag name state
    //------------------------------------------------------------------
    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                }

                if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                }

                if (cp === $.GREATER_THAN_SIGN) {
                    this._emitCurrentToken();
                    this.state = DATA_STATE;
                    return;
                }
            }

            this._emitChars('</');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    }

    // Script data double escape start state
    //------------------------------------------------------------------
    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString()
                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE
                : SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
        } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
        } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
        } else {
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    }

    // Script data double escaped state
    //------------------------------------------------------------------
    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
            this._emitChars('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars('<');
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // Script data double escaped dash state
    //------------------------------------------------------------------
    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
            this._emitChars('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars('<');
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
        } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    }

    // Script data double escaped dash dash state
    //------------------------------------------------------------------
    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this._emitChars('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars('<');
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars('>');
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
        } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    }

    // Script data double escaped less-than sign state
    //------------------------------------------------------------------
    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
            this._emitChars('/');
        } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
        }
    }

    // Script data double escape end state
    //------------------------------------------------------------------
    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString()
                ? SCRIPT_DATA_ESCAPED_STATE
                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

            this._emitCodePoint(cp);
        } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
        } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
        } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
        }
    }

    // Before attribute name state
    //------------------------------------------------------------------
    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
        } else if (cp === $.EQUALS_SIGN) {
            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
            this._createAttr('=');
            this.state = ATTRIBUTE_NAME_STATE;
        } else {
            this._createAttr('');
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
        }
    }

    // Attribute name state
    //------------------------------------------------------------------
    [ATTRIBUTE_NAME_STATE](cp) {
        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
            this._unconsume();
        } else if (cp === $.EQUALS_SIGN) {
            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
        } else if (isAsciiUpper(cp)) {
            this.currentAttr.name += toAsciiLowerChar(cp);
        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
            this._err(ERR.unexpectedCharacterInAttributeName);
            this.currentAttr.name += toChar(cp);
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;
        } else {
            this.currentAttr.name += toChar(cp);
        }
    }

    // After attribute name state
    //------------------------------------------------------------------
    [AFTER_ATTRIBUTE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
        } else if (cp === $.EQUALS_SIGN) {
            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this._createAttr('');
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
        }
    }

    // Before attribute value state
    //------------------------------------------------------------------
    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.QUOTATION_MARK) {
            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingAttributeValue);
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else {
            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
        }
    }

    // Attribute value (double-quoted) state
    //------------------------------------------------------------------
    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
        if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
        } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this.currentAttr.value += toChar(cp);
        }
    }

    // Attribute value (single-quoted) state
    //------------------------------------------------------------------
    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
        if (cp === $.APOSTROPHE) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
        } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this.currentAttr.value += toChar(cp);
        }
    }

    // Attribute value (unquoted) state
    //------------------------------------------------------------------
    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
        if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
        } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
        } else if (
            cp === $.QUOTATION_MARK ||
            cp === $.APOSTROPHE ||
            cp === $.LESS_THAN_SIGN ||
            cp === $.EQUALS_SIGN ||
            cp === $.GRAVE_ACCENT
        ) {
            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
            this.currentAttr.value += toChar(cp);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this.currentAttr.value += toChar(cp);
        }
    }

    // After attribute value (quoted) state
    //------------------------------------------------------------------
    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
        if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
        } else if (cp === $.SOLIDUS) {
            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this._err(ERR.missingWhitespaceBetweenAttributes);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
        }
    }

    // Self-closing start tag state
    //------------------------------------------------------------------
    [SELF_CLOSING_START_TAG_STATE](cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.selfClosing = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
        } else {
            this._err(ERR.unexpectedSolidusInTag);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
        }
    }

    // Bogus comment state
    //------------------------------------------------------------------
    [BOGUS_COMMENT_STATE](cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
        } else {
            this.currentToken.data += toChar(cp);
        }
    }

    // Markup declaration open state
    //------------------------------------------------------------------
    [MARKUP_DECLARATION_OPEN_STATE](cp) {
        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
            this._createCommentToken();
            this.state = COMMENT_START_STATE;
        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
            this.state = DOCTYPE_STATE;
        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
            if (this.allowCDATA) {
                this.state = CDATA_SECTION_STATE;
            } else {
                this._err(ERR.cdataInHtmlContent);
                this._createCommentToken();
                this.currentToken.data = '[CDATA[';
                this.state = BOGUS_COMMENT_STATE;
            }
        }

        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
        //results are no longer valid and we will need to start over.
        else if (!this._ensureHibernation()) {
            this._err(ERR.incorrectlyOpenedComment);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
        }
    }

    // Comment start state
    //------------------------------------------------------------------
    [COMMENT_START_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_START_DASH_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else {
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // Comment start dash state
    //------------------------------------------------------------------
    [COMMENT_START_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.data += '-';
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // Comment state
    //------------------------------------------------------------------
    [COMMENT_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_DASH_STATE;
        } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += '<';
            this.state = COMMENT_LESS_THAN_SIGN_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.data += toChar(cp);
        }
    }

    // Comment less-than sign state
    //------------------------------------------------------------------
    [COMMENT_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $.EXCLAMATION_MARK) {
            this.currentToken.data += '!';
            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
        } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += '!';
        } else {
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // Comment less-than sign bang state
    //------------------------------------------------------------------
    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
        } else {
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // Comment less-than sign bang dash state
    //------------------------------------------------------------------
    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
        } else {
            this._reconsumeInState(COMMENT_END_DASH_STATE);
        }
    }

    // Comment less-than sign bang dash dash state
    //------------------------------------------------------------------
    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {
            this._err(ERR.nestedComment);
        }

        this._reconsumeInState(COMMENT_END_STATE);
    }

    // Comment end dash state
    //------------------------------------------------------------------
    [COMMENT_END_DASH_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.data += '-';
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // Comment end state
    //------------------------------------------------------------------
    [COMMENT_END_STATE](cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EXCLAMATION_MARK) {
            this.state = COMMENT_END_BANG_STATE;
        } else if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += '-';
        } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.data += '--';
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // Comment end bang state
    //------------------------------------------------------------------
    [COMMENT_END_BANG_STATE](cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += '--!';
            this.state = COMMENT_END_DASH_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.incorrectlyClosedComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.data += '--!';
            this._reconsumeInState(COMMENT_STATE);
        }
    }

    // DOCTYPE state
    //------------------------------------------------------------------
    [DOCTYPE_STATE](cp) {
        if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_NAME_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingWhitespaceBeforeDoctypeName);
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
        }
    }

    // Before DOCTYPE name state
    //------------------------------------------------------------------
    [BEFORE_DOCTYPE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (isAsciiUpper(cp)) {
            this._createDoctypeToken(toAsciiLowerChar(cp));
            this.state = DOCTYPE_NAME_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);
            this.state = DOCTYPE_NAME_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeName);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._createDoctypeToken(toChar(cp));
            this.state = DOCTYPE_NAME_STATE;
        }
    }

    // DOCTYPE name state
    //------------------------------------------------------------------
    [DOCTYPE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
            this.state = AFTER_DOCTYPE_NAME_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (isAsciiUpper(cp)) {
            this.currentToken.name += toAsciiLowerChar(cp);
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.name += toChar(cp);
        }
    }

    // After DOCTYPE name state
    //------------------------------------------------------------------
    [AFTER_DOCTYPE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
        }
        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
        //results are no longer valid and we will need to start over.
        else if (!this._ensureHibernation()) {
            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // After DOCTYPE public keyword state
    //------------------------------------------------------------------
    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
        if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
        } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = '';
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = '';
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // Before DOCTYPE public identifier state
    //------------------------------------------------------------------
    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.QUOTATION_MARK) {
            this.currentToken.publicId = '';
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.currentToken.publicId = '';
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // DOCTYPE public identifier (double-quoted) state
    //------------------------------------------------------------------
    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
        if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.publicId += toChar(cp);
        }
    }

    // DOCTYPE public identifier (single-quoted) state
    //------------------------------------------------------------------
    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
        if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.publicId += toChar(cp);
        }
    }

    // After DOCTYPE public identifier state
    //------------------------------------------------------------------
    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // Between DOCTYPE public and system identifiers state
    //------------------------------------------------------------------
    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // After DOCTYPE system keyword state
    //------------------------------------------------------------------
    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
        if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
        } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // Before DOCTYPE system identifier state
    //------------------------------------------------------------------
    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // DOCTYPE system identifier (double-quoted) state
    //------------------------------------------------------------------
    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
        if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.systemId += toChar(cp);
        }
    }

    // DOCTYPE system identifier (single-quoted) state
    //------------------------------------------------------------------
    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
        if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this.currentToken.systemId += toChar(cp);
        }
    }

    // After DOCTYPE system identifier state
    //------------------------------------------------------------------
    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
            return;
        }

        if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
        } else {
            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }

    // Bogus DOCTYPE state
    //------------------------------------------------------------------
    [BOGUS_DOCTYPE_STATE](cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
        }
    }

    // CDATA section state
    //------------------------------------------------------------------
    [CDATA_SECTION_STATE](cp) {
        if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_BRACKET_STATE;
        } else if (cp === $.EOF) {
            this._err(ERR.eofInCdata);
            this._emitEOFToken();
        } else {
            this._emitCodePoint(cp);
        }
    }

    // CDATA section bracket state
    //------------------------------------------------------------------
    [CDATA_SECTION_BRACKET_STATE](cp) {
        if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_END_STATE;
        } else {
            this._emitChars(']');
            this._reconsumeInState(CDATA_SECTION_STATE);
        }
    }

    // CDATA section end state
    //------------------------------------------------------------------
    [CDATA_SECTION_END_STATE](cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
        } else if (cp === $.RIGHT_SQUARE_BRACKET) {
            this._emitChars(']');
        } else {
            this._emitChars(']]');
            this._reconsumeInState(CDATA_SECTION_STATE);
        }
    }

    // Character reference state
    //------------------------------------------------------------------
    [CHARACTER_REFERENCE_STATE](cp) {
        this.tempBuff = [$.AMPERSAND];

        if (cp === $.NUMBER_SIGN) {
            this.tempBuff.push(cp);
            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
        } else if (isAsciiAlphaNumeric(cp)) {
            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
        } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
        }
    }

    // Named character reference state
    //------------------------------------------------------------------
    [NAMED_CHARACTER_REFERENCE_STATE](cp) {
        const matchResult = this._matchNamedCharacterReference(cp);

        //NOTE: matching can be abrupted by hibernation. In that case match
        //results are no longer valid and we will need to start over.
        if (this._ensureHibernation()) {
            this.tempBuff = [$.AMPERSAND];
        } else if (matchResult) {
            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;

            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
                if (!withSemicolon) {
                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
                }

                this.tempBuff = matchResult;
            }

            this._flushCodePointsConsumedAsCharacterReference();
            this.state = this.returnState;
        } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = AMBIGUOUS_AMPERSAND_STATE;
        }
    }

    // Ambiguos ampersand state
    //------------------------------------------------------------------
    [AMBIGUOUS_AMPERSAND_STATE](cp) {
        if (isAsciiAlphaNumeric(cp)) {
            if (this._isCharacterReferenceInAttribute()) {
                this.currentAttr.value += toChar(cp);
            } else {
                this._emitCodePoint(cp);
            }
        } else {
            if (cp === $.SEMICOLON) {
                this._err(ERR.unknownNamedCharacterReference);
            }

            this._reconsumeInState(this.returnState);
        }
    }

    // Numeric character reference state
    //------------------------------------------------------------------
    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
        this.charRefCode = 0;

        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {
            this.tempBuff.push(cp);
            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
        } else {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
        }
    }

    // Hexademical character reference start state
    //------------------------------------------------------------------
    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
        if (isAsciiHexDigit(cp)) {
            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
        } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
        }
    }

    // Decimal character reference start state
    //------------------------------------------------------------------
    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
        if (isAsciiDigit(cp)) {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
        } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
        }
    }

    // Hexademical character reference state
    //------------------------------------------------------------------
    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
        if (isAsciiUpperHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 0x37;
        } else if (isAsciiLowerHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 0x57;
        } else if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 0x30;
        } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
        } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
        }
    }

    // Decimal character reference state
    //------------------------------------------------------------------
    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
        if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 10 + cp - 0x30;
        } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
        } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
        }
    }

    // Numeric character reference end state
    //------------------------------------------------------------------
    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
        if (this.charRefCode === $.NULL) {
            this._err(ERR.nullCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
        } else if (this.charRefCode > 0x10ffff) {
            this._err(ERR.characterReferenceOutsideUnicodeRange);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
        } else if (unicode.isSurrogate(this.charRefCode)) {
            this._err(ERR.surrogateCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {
            this._err(ERR.noncharacterCharacterReference);
        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {
            this._err(ERR.controlCharacterReference);

            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];

            if (replacement) {
                this.charRefCode = replacement;
            }
        }

        this.tempBuff = [this.charRefCode];

        this._flushCodePointsConsumedAsCharacterReference();
        this._reconsumeInState(this.returnState);
    }
}

//Token types
Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';

//Tokenizer initial states for different modes
Tokenizer.MODE = {
    DATA: DATA_STATE,
    RCDATA: RCDATA_STATE,
    RAWTEXT: RAWTEXT_STATE,
    SCRIPT_DATA: SCRIPT_DATA_STATE,
    PLAINTEXT: PLAINTEXT_STATE
};

//Static
Tokenizer.getTokenAttr = function(token, attrName) {
    for (let i = token.attrs.length - 1; i >= 0; i--) {
        if (token.attrs[i].name === attrName) {
            return token.attrs[i].value;
        }
    }

    return null;
};

module.exports = Tokenizer;

},{"../common/error-codes":63,"../common/unicode":66,"./named-entity-data":81,"./preprocessor":82}],81:[function(require,module,exports){
'use strict';

//NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption
//(details: https://github.com/inikulin/parse5/tree/master/scripts/generate-named-entity-data/README.md)
module.exports = new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4000,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,10000,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13000,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);
},{}],82:[function(require,module,exports){
'use strict';

const unicode = require('../common/unicode');
const ERR = require('../common/error-codes');

//Aliases
const $ = unicode.CODE_POINTS;

//Const
const DEFAULT_BUFFER_WATERLINE = 1 << 16;

//Preprocessor
//NOTE: HTML input preprocessing
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
class Preprocessor {
    constructor() {
        this.html = null;

        this.pos = -1;
        this.lastGapPos = -1;
        this.lastCharPos = -1;

        this.gapStack = [];

        this.skipNextNewLine = false;

        this.lastChunkWritten = false;
        this.endOfChunkHit = false;
        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
    }

    _err() {
        // NOTE: err reporting is noop by default. Enabled by mixin.
    }

    _addGap() {
        this.gapStack.push(this.lastGapPos);
        this.lastGapPos = this.pos;
    }

    _processSurrogate(cp) {
        //NOTE: try to peek a surrogate pair
        if (this.pos !== this.lastCharPos) {
            const nextCp = this.html.charCodeAt(this.pos + 1);

            if (unicode.isSurrogatePair(nextCp)) {
                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
                this.pos++;

                //NOTE: add gap that should be avoided during retreat
                this._addGap();

                return unicode.getSurrogatePairCodePoint(cp, nextCp);
            }
        }

        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.
        else if (!this.lastChunkWritten) {
            this.endOfChunkHit = true;
            return $.EOF;
        }

        //NOTE: isolated surrogate
        this._err(ERR.surrogateInInputStream);

        return cp;
    }

    dropParsedChunk() {
        if (this.pos > this.bufferWaterline) {
            this.lastCharPos -= this.pos;
            this.html = this.html.substring(this.pos);
            this.pos = 0;
            this.lastGapPos = -1;
            this.gapStack = [];
        }
    }

    write(chunk, isLastChunk) {
        if (this.html) {
            this.html += chunk;
        } else {
            this.html = chunk;
        }

        this.lastCharPos = this.html.length - 1;
        this.endOfChunkHit = false;
        this.lastChunkWritten = isLastChunk;
    }

    insertHtmlAtCurrentPos(chunk) {
        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);

        this.lastCharPos = this.html.length - 1;
        this.endOfChunkHit = false;
    }

    advance() {
        this.pos++;

        if (this.pos > this.lastCharPos) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return $.EOF;
        }

        let cp = this.html.charCodeAt(this.pos);

        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
        //must be ignored.
        if (this.skipNextNewLine && cp === $.LINE_FEED) {
            this.skipNextNewLine = false;
            this._addGap();
            return this.advance();
        }

        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
        if (cp === $.CARRIAGE_RETURN) {
            this.skipNextNewLine = true;
            return $.LINE_FEED;
        }

        this.skipNextNewLine = false;

        if (unicode.isSurrogate(cp)) {
            cp = this._processSurrogate(cp);
        }

        //OPTIMIZATION: first check if code point is in the common allowed
        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)
        //before going into detailed performance cost validation.
        const isCommonValidRange =
            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);

        if (!isCommonValidRange) {
            this._checkForProblematicCharacters(cp);
        }

        return cp;
    }

    _checkForProblematicCharacters(cp) {
        if (unicode.isControlCodePoint(cp)) {
            this._err(ERR.controlCharacterInInputStream);
        } else if (unicode.isUndefinedCodePoint(cp)) {
            this._err(ERR.noncharacterInInputStream);
        }
    }

    retreat() {
        if (this.pos === this.lastGapPos) {
            this.lastGapPos = this.gapStack.pop();
            this.pos--;
        }

        this.pos--;
    }
}

module.exports = Preprocessor;

},{"../common/error-codes":63,"../common/unicode":66}],83:[function(require,module,exports){
'use strict';

const { DOCUMENT_MODE } = require('../common/html');

//Node construction
exports.createDocument = function() {
    return {
        nodeName: '#document',
        mode: DOCUMENT_MODE.NO_QUIRKS,
        childNodes: []
    };
};

exports.createDocumentFragment = function() {
    return {
        nodeName: '#document-fragment',
        childNodes: []
    };
};

exports.createElement = function(tagName, namespaceURI, attrs) {
    return {
        nodeName: tagName,
        tagName: tagName,
        attrs: attrs,
        namespaceURI: namespaceURI,
        childNodes: [],
        parentNode: null
    };
};

exports.createCommentNode = function(data) {
    return {
        nodeName: '#comment',
        data: data,
        parentNode: null
    };
};

const createTextNode = function(value) {
    return {
        nodeName: '#text',
        value: value,
        parentNode: null
    };
};

//Tree mutation
const appendChild = (exports.appendChild = function(parentNode, newNode) {
    parentNode.childNodes.push(newNode);
    newNode.parentNode = parentNode;
});

const insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);

    parentNode.childNodes.splice(insertionIdx, 0, newNode);
    newNode.parentNode = parentNode;
});

exports.setTemplateContent = function(templateElement, contentElement) {
    templateElement.content = contentElement;
};

exports.getTemplateContent = function(templateElement) {
    return templateElement.content;
};

exports.setDocumentType = function(document, name, publicId, systemId) {
    let doctypeNode = null;

    for (let i = 0; i < document.childNodes.length; i++) {
        if (document.childNodes[i].nodeName === '#documentType') {
            doctypeNode = document.childNodes[i];
            break;
        }
    }

    if (doctypeNode) {
        doctypeNode.name = name;
        doctypeNode.publicId = publicId;
        doctypeNode.systemId = systemId;
    } else {
        appendChild(document, {
            nodeName: '#documentType',
            name: name,
            publicId: publicId,
            systemId: systemId
        });
    }
};

exports.setDocumentMode = function(document, mode) {
    document.mode = mode;
};

exports.getDocumentMode = function(document) {
    return document.mode;
};

exports.detachNode = function(node) {
    if (node.parentNode) {
        const idx = node.parentNode.childNodes.indexOf(node);

        node.parentNode.childNodes.splice(idx, 1);
        node.parentNode = null;
    }
};

exports.insertText = function(parentNode, text) {
    if (parentNode.childNodes.length) {
        const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

        if (prevNode.nodeName === '#text') {
            prevNode.value += text;
            return;
        }
    }

    appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function(parentNode, text, referenceNode) {
    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

    if (prevNode && prevNode.nodeName === '#text') {
        prevNode.value += text;
    } else {
        insertBefore(parentNode, createTextNode(text), referenceNode);
    }
};

exports.adoptAttributes = function(recipient, attrs) {
    const recipientAttrsMap = [];

    for (let i = 0; i < recipient.attrs.length; i++) {
        recipientAttrsMap.push(recipient.attrs[i].name);
    }

    for (let j = 0; j < attrs.length; j++) {
        if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
            recipient.attrs.push(attrs[j]);
        }
    }
};

//Tree traversing
exports.getFirstChild = function(node) {
    return node.childNodes[0];
};

exports.getChildNodes = function(node) {
    return node.childNodes;
};

exports.getParentNode = function(node) {
    return node.parentNode;
};

exports.getAttrList = function(element) {
    return element.attrs;
};

//Node data
exports.getTagName = function(element) {
    return element.tagName;
};

exports.getNamespaceURI = function(element) {
    return element.namespaceURI;
};

exports.getTextNodeContent = function(textNode) {
    return textNode.value;
};

exports.getCommentNodeContent = function(commentNode) {
    return commentNode.data;
};

exports.getDocumentTypeNodeName = function(doctypeNode) {
    return doctypeNode.name;
};

exports.getDocumentTypeNodePublicId = function(doctypeNode) {
    return doctypeNode.publicId;
};

exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
    return doctypeNode.systemId;
};

//Node types
exports.isTextNode = function(node) {
    return node.nodeName === '#text';
};

exports.isCommentNode = function(node) {
    return node.nodeName === '#comment';
};

exports.isDocumentTypeNode = function(node) {
    return node.nodeName === '#documentType';
};

exports.isElementNode = function(node) {
    return !!node.tagName;
};

// Source code location
exports.setNodeSourceCodeLocation = function(node, location) {
    node.sourceCodeLocation = location;
};

exports.getNodeSourceCodeLocation = function(node) {
    return node.sourceCodeLocation;
};

exports.updateNodeSourceCodeLocation = function(node, endLocation) {
    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
};

},{"../common/html":65}],84:[function(require,module,exports){
'use strict';

module.exports = function mergeOptions(defaults, options) {
    options = options || Object.create(null);

    return [defaults, options].reduce((merged, optObj) => {
        Object.keys(optObj).forEach(key => {
            merged[key] = optObj[key];
        });

        return merged;
    }, Object.create(null));
};

},{}],85:[function(require,module,exports){
'use strict';

class Mixin {
    constructor(host) {
        const originalMethods = {};
        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);

        for (const key of Object.keys(overriddenMethods)) {
            if (typeof overriddenMethods[key] === 'function') {
                originalMethods[key] = host[key];
                host[key] = overriddenMethods[key];
            }
        }
    }

    _getOverriddenMethods() {
        throw new Error('Not implemented');
    }
}

Mixin.install = function(host, Ctor, opts) {
    if (!host.__mixins) {
        host.__mixins = [];
    }

    for (let i = 0; i < host.__mixins.length; i++) {
        if (host.__mixins[i].constructor === Ctor) {
            return host.__mixins[i];
        }
    }

    const mixin = new Ctor(host, opts);

    host.__mixins.push(mixin);

    return mixin;
};

module.exports = Mixin;

},{}],86:[function(require,module,exports){
var defaultStopwords = require('./stopwords_en.js').words

exports.removeStopwords = function (tokens, stopwords) {
  stopwords = stopwords || defaultStopwords
  if (typeof tokens !== 'object' || typeof stopwords !== 'object') {
    throw new Error('expected Arrays try: removeStopwords(Array[, Array])')
  }
  return tokens.filter(function (value) {
    return stopwords.indexOf(value.toLowerCase()) === -1
  })
}

exports.af = require('./stopwords_af.js').words
exports.ar = require('./stopwords_ar.js').words
exports.bn = require('./stopwords_bn.js').words
exports.bg = require('./stopwords_bg.js').words
exports.br = require('./stopwords_br.js').words
exports.ca = require('./stopwords_ca.js').words
exports.cs = require('./stopwords_cs.js').words
exports.da = require('./stopwords_da.js').words
exports.de = require('./stopwords_de.js').words
exports.el = require('./stopwords_el.js').words
exports.en = require('./stopwords_en.js').words
exports.eo = require('./stopwords_eo.js').words
exports.es = require('./stopwords_es.js').words
exports.et = require('./stopwords_et.js').words
exports.eu = require('./stopwords_eu.js').words
exports.fa = require('./stopwords_fa.js').words
exports.fr = require('./stopwords_fr.js').words
exports.ga = require('./stopwords_ga.js').words
exports.gl = require('./stopwords_gl.js').words
exports.fi = require('./stopwords_fi.js').words
exports.ha = require('./stopwords_ha.js').words
exports.he = require('./stopwords_he.js').words
exports.hi = require('./stopwords_hi.js').words
exports.hr = require('./stopwords_hr.js').words
exports.hu = require('./stopwords_hu.js').words
exports.hy = require('./stopwords_hy.js').words
exports.id = require('./stopwords_id.js').words
exports.it = require('./stopwords_it.js').words
exports.ja = require('./stopwords_ja.js').words
exports.ko = require('./stopwords_ko.js').words
exports.la = require('./stopwords_la.js').words
exports.lgg = require('./stopwords_lgg.js').words
exports.lggo = require('./stopwords_lggo.js').words
exports.lv = require('./stopwords_lv.js').words
exports.mr = require('./stopwords_mr.js').words
exports.my = require('./stopwords_my.js').words
exports.nl = require('./stopwords_nl.js').words
exports.no = require('./stopwords_no.js').words
exports.pa = require('./stopwords_pa.js').words
exports.pl = require('./stopwords_pl.js').words
exports.pt = require('./stopwords_pt.js').words
exports.ptbr = require('./stopwords_ptbr.js').words
exports.ro = require('./stopwords_ro.js').words
exports.ru = require('./stopwords_ru.js').words
exports.sk = require('./stopwords_sk.js').words
exports.sl = require('./stopwords_sl.js').words
exports.so = require('./stopwords_so.js').words
exports.st = require('./stopwords_st.js').words
exports.sv = require('./stopwords_sv.js').words
exports.sw = require('./stopwords_sw.js').words
exports.th = require('./stopwords_th.js').words
exports.tr = require('./stopwords_tr.js').words
exports.vi = require('./stopwords_vi.js').words
exports.yo = require('./stopwords_yo.js').words
exports.zh = require('./stopwords_zh.js').words
exports.zu = require('./stopwords_zu.js').words

},{"./stopwords_af.js":87,"./stopwords_ar.js":88,"./stopwords_bg.js":89,"./stopwords_bn.js":90,"./stopwords_br.js":91,"./stopwords_ca.js":92,"./stopwords_cs.js":93,"./stopwords_da.js":94,"./stopwords_de.js":95,"./stopwords_el.js":96,"./stopwords_en.js":97,"./stopwords_eo.js":98,"./stopwords_es.js":99,"./stopwords_et.js":100,"./stopwords_eu.js":101,"./stopwords_fa.js":102,"./stopwords_fi.js":103,"./stopwords_fr.js":104,"./stopwords_ga.js":105,"./stopwords_gl.js":106,"./stopwords_ha.js":107,"./stopwords_he.js":108,"./stopwords_hi.js":109,"./stopwords_hr.js":110,"./stopwords_hu.js":111,"./stopwords_hy.js":112,"./stopwords_id.js":113,"./stopwords_it.js":114,"./stopwords_ja.js":115,"./stopwords_ko.js":116,"./stopwords_la.js":117,"./stopwords_lgg.js":118,"./stopwords_lggo.js":119,"./stopwords_lv.js":120,"./stopwords_mr.js":121,"./stopwords_my.js":122,"./stopwords_nl.js":123,"./stopwords_no.js":124,"./stopwords_pa.js":125,"./stopwords_pl.js":126,"./stopwords_pt.js":127,"./stopwords_ptbr.js":128,"./stopwords_ro.js":129,"./stopwords_ru.js":130,"./stopwords_sk.js":131,"./stopwords_sl.js":132,"./stopwords_so.js":133,"./stopwords_st.js":134,"./stopwords_sv.js":135,"./stopwords_sw.js":136,"./stopwords_th.js":137,"./stopwords_tr.js":138,"./stopwords_vi.js":139,"./stopwords_yo.js":140,"./stopwords_zh.js":141,"./stopwords_zu.js":142}],87:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'die', 'het', 'en', 'sy', 'nie', 'was', 'hy', 'te', 'is', 'ek', 'om', 'hulle', 'in', 'my',
  '\'n', 'vir', 'toe', 'haar', 'van', 'dit', 'op', 'se', 'wat', 'met', 'gaan', 'baie', 'ons', 'jy',
  'na', 'maar', 'hom', 'so', 'n', 'huis', 'kan', 'aan', 'dat', 'daar', 'sal', 'jou', 'gesê', 'by',
  'kom', 'een', 'ma', 'as', 'son', 'groot', 'begin', 'al'
]


// Tell the world about the noise words.
exports.words = words

},{}],88:[function(require,module,exports){
/*
The MIT License (MIT)

Copyright (c) 2016 Gene Diaz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = ["،","آض","آمينَ","آه","آهاً","آي","أ","أب","أجل","أجمع","أخ","أخذ","أصبح","أضحى","أقبل","أقل","أكثر","ألا","أم","أما","أمامك","أمامكَ","أمسى","أمّا","أن","أنا","أنت","أنتم","أنتما","أنتن","أنتِ","أنشأ","أنّى","أو","أوشك","أولئك","أولئكم","أولاء","أولالك","أوّهْ","أي","أيا","أين","أينما","أيّ","أَنَّ","أََيُّ","أُفٍّ","إذ","إذا","إذاً","إذما","إذن","إلى","إليكم","إليكما","إليكنّ","إليكَ","إلَيْكَ","إلّا","إمّا","إن","إنّما","إي","إياك","إياكم","إياكما","إياكن","إيانا","إياه","إياها","إياهم","إياهما","إياهن","إياي","إيهٍ","إِنَّ","ا","ابتدأ","اثر","اجل","احد","اخرى","اخلولق","اذا","اربعة","ارتدّ","استحال","اطار","اعادة","اعلنت","اف","اكثر","اكد","الألاء","الألى","الا","الاخيرة","الان","الاول","الاولى","التى","التي","الثاني","الثانية","الذاتي","الذى","الذي","الذين","السابق","الف","اللائي","اللاتي","اللتان","اللتيا","اللتين","اللذان","اللذين","اللواتي","الماضي","المقبل","الوقت","الى","اليوم","اما","امام","امس","ان","انبرى","انقلب","انه","انها","او","اول","اي","ايار","ايام","ايضا","ب","بات","باسم","بان","بخٍ","برس","بسبب","بسّ","بشكل","بضع","بطآن","بعد","بعض","بك","بكم","بكما","بكن","بل","بلى","بما","بماذا","بمن","بن","بنا","به","بها","بي","بيد","بين","بَسْ","بَلْهَ","بِئْسَ","تانِ","تانِك","تبدّل","تجاه","تحوّل","تلقاء","تلك","تلكم","تلكما","تم","تينك","تَيْنِ","تِه","تِي","ثلاثة","ثم","ثمّ","ثمّة","ثُمَّ","جعل","جلل","جميع","جير","حار","حاشا","حاليا","حاي","حتى","حرى","حسب","حم","حوالى","حول","حيث","حيثما","حين","حيَّ","حَبَّذَا","حَتَّى","حَذارِ","خلا","خلال","دون","دونك","ذا","ذات","ذاك","ذانك","ذانِ","ذلك","ذلكم","ذلكما","ذلكن","ذو","ذوا","ذواتا","ذواتي","ذيت","ذينك","ذَيْنِ","ذِه","ذِي","راح","رجع","رويدك","ريث","رُبَّ","زيارة","سبحان","سرعان","سنة","سنوات","سوف","سوى","سَاءَ","سَاءَمَا","شبه","شخصا","شرع","شَتَّانَ","صار","صباح","صفر","صهٍ","صهْ","ضد","ضمن","طاق","طالما","طفق","طَق","ظلّ","عاد","عام","عاما","عامة","عدا","عدة","عدد","عدم","عسى","عشر","عشرة","علق","على","عليك","عليه","عليها","علًّ","عن","عند","عندما","عوض","عين","عَدَسْ","عَمَّا","غدا","غير","ـ","ف","فان","فلان","فو","فى","في","فيم","فيما","فيه","فيها","قال","قام","قبل","قد","قطّ","قلما","قوة","كأنّما","كأين","كأيّ","كأيّن","كاد","كان","كانت","كذا","كذلك","كرب","كل","كلا","كلاهما","كلتا","كلم","كليكما","كليهما","كلّما","كلَّا","كم","كما","كي","كيت","كيف","كيفما","كَأَنَّ","كِخ","لئن","لا","لات","لاسيما","لدن","لدى","لعمر","لقاء","لك","لكم","لكما","لكن","لكنَّما","لكي","لكيلا","للامم","لم","لما","لمّا","لن","لنا","له","لها","لو","لوكالة","لولا","لوما","لي","لَسْتَ","لَسْتُ","لَسْتُم","لَسْتُمَا","لَسْتُنَّ","لَسْتِ","لَسْنَ","لَعَلَّ","لَكِنَّ","لَيْتَ","لَيْسَ","لَيْسَا","لَيْسَتَا","لَيْسَتْ","لَيْسُوا","لَِسْنَا","ما","ماانفك","مابرح","مادام","ماذا","مازال","مافتئ","مايو","متى","مثل","مذ","مساء","مع","معاذ","مقابل","مكانكم","مكانكما","مكانكنّ","مكانَك","مليار","مليون","مما","ممن","من","منذ","منها","مه","مهما","مَنْ","مِن","نحن","نحو","نعم","نفس","نفسه","نهاية","نَخْ","نِعِمّا","نِعْمَ","ها","هاؤم","هاكَ","هاهنا","هبّ","هذا","هذه","هكذا","هل","هلمَّ","هلّا","هم","هما","هن","هنا","هناك","هنالك","هو","هي","هيا","هيت","هيّا","هَؤلاء","هَاتانِ","هَاتَيْنِ","هَاتِه","هَاتِي","هَجْ","هَذا","هَذانِ","هَذَيْنِ","هَذِه","هَذِي","هَيْهَاتَ","و","و6","وا","واحد","واضاف","واضافت","واكد","وان","واهاً","واوضح","وراءَك","وفي","وقال","وقالت","وقد","وقف","وكان","وكانت","ولا","ولم","ومن","وهو","وهي","ويكأنّ","وَيْ","وُشْكَانََ","يكون","يمكن","يوم","ّأيّان"]

// tell the world about the noise words.
exports.words = words

},{}],89:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['а', 'автентичен', 'аз', 'ако', 'ала', 'бе', 'без', 'беше', 'би', 'бивш', 'бивша', 'бившо', 'бил', 'била', 'били', 'било', 'благодаря', 'близо', 'бъдат', 'бъде', 'бяха', 'в', 'вас', 'ваш', 'ваша', 'вероятно', 'вече', 'взема', 'ви', 'вие', 'винаги', 'внимава', 'време', 'все', 'всеки', 'всички', 'всичко', 'всяка', 'във', 'въпреки', 'върху', 'г', 'ги', 'главен', 'главна', 'главно', 'глас', 'го', 'година', 'години', 'годишен', 'д', 'да', 'дали', 'два', 'двама', 'двамата', 'две', 'двете', 'ден', 'днес', 'дни', 'до', 'добра', 'добре', 'добро', 'добър', 'докато', 'докога', 'дори', 'досега', 'доста', 'друг', 'друга', 'други', 'е', 'евтин', 'едва', 'един', 'една', 'еднаква', 'еднакви', 'еднакъв', 'едно', 'екип', 'ето', 'живот', 'за', 'забавям', 'зад', 'заедно', 'заради', 'засега', 'заспал', 'затова', 'защо', 'защото', 'и', 'из', 'или', 'им', 'има', 'имат', 'иска', 'й', 'каза', 'как', 'каква', 'какво', 'както', 'какъв', 'като', 'кога', 'когато', 'което', 'които', 'кой', 'който', 'колко', 'която', 'къде', 'където', 'към', 'лесен', 'лесно', 'ли', 'лош', 'м', 'май', 'малко', 'ме', 'между', 'мек', 'мен', 'месец', 'ми', 'много', 'мнозина', 'мога', 'могат', 'може', 'мокър', 'моля', 'момента', 'му', 'н', 'на', 'над', 'назад', 'най', 'направи', 'напред', 'например', 'нас', 'не', 'него', 'нещо', 'нея', 'ни', 'ние', 'никой', 'нито', 'нищо', 'но', 'нов', 'нова', 'нови', 'новина', 'някои', 'някой', 'няколко', 'няма', 'обаче', 'около', 'освен', 'особено', 'от', 'отгоре', 'отново', 'още', 'пак', 'по', 'повече', 'повечето', 'под', 'поне', 'поради', 'после', 'почти', 'прави', 'пред', 'преди', 'през', 'при', 'пък', 'първата', 'първи', 'първо', 'пъти', 'равен', 'равна', 'с', 'са', 'сам', 'само', 'се', 'сега', 'си', 'син', 'скоро', 'след', 'следващ', 'сме', 'смях', 'според', 'сред', 'срещу', 'сте', 'съм', 'със', 'също', 'т', 'т.н.', 'тази', 'така', 'такива', 'такъв', 'там', 'твой', 'те', 'тези', 'ти', 'то', 'това', 'тогава', 'този', 'той', 'толкова', 'точно', 'три', 'трябва', 'тук', 'тъй', 'тя', 'тях', 'у', 'утре', 'харесва', 'хиляди', 'ч', 'часа', 'че', 'често', 'чрез', 'ще', 'щом', 'юмрук', 'я', 'як']

// tell the world about the noise words.
exports.words = words

},{}],90:[function(require,module,exports){
/*
The MIT License (MIT)

Copyright (c) 2016 Gene Diaz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = ["অতএব","অথচ","অথবা","অনুযায়ী","অনেক","অনেকে","অনেকেই","অন্তত","অন্য","অবধি","অবশ্য","অর্থাত","আই","আগামী","আগে","আগেই","আছে","আজ","আদ্যভাগে","আপনার","আপনি","আবার","আমরা","আমাকে","আমাদের","আমার","আমি","আর","আরও","ই","ইত্যাদি","ইহা","উচিত","উত্তর","উনি","উপর","উপরে","এ","এঁদের","এঁরা","এই","একই","একটি","একবার","একে","এক্","এখন","এখনও","এখানে","এখানেই","এটা","এটাই","এটি","এত","এতটাই","এতে","এদের","এব","এবং","এবার","এমন","এমনকী","এমনি","এর","এরা","এল","এস","এসে","ঐ","ও","ওঁদের","ওঁর","ওঁরা","ওই","ওকে","ওখানে","ওদের","ওর","ওরা","কখনও","কত","কবে","কমনে","কয়েক","কয়েকটি","করছে","করছেন","করতে","করবে","করবেন","করলে","করলেন","করা","করাই","করায়","করার","করি","করিতে","করিয়া","করিয়ে","করে","করেই","করেছিলেন","করেছে","করেছেন","করেন","কাউকে","কাছ","কাছে","কাজ","কাজে","কারও","কারণ","কি","কিংবা","কিছু","কিছুই","কিন্তু","কী","কে","কেউ","কেউই","কেখা","কেন","কোটি","কোন","কোনও","কোনো","ক্ষেত্রে","কয়েক","খুব","গিয়ে","গিয়েছে","গিয়ে","গুলি","গেছে","গেল","গেলে","গোটা","চলে","চান","চায়","চার","চালু","চেয়ে","চেষ্টা","ছাড়া","ছাড়াও","ছিল","ছিলেন","জন","জনকে","জনের","জন্য","জন্যওজে","জানতে","জানা","জানানো","জানায়","জানিয়ে","জানিয়েছে","জে","জ্নজন","টি","ঠিক","তখন","তত","তথা","তবু","তবে","তা","তাঁকে","তাঁদের","তাঁর","তাঁরা","তাঁাহারা","তাই","তাও","তাকে","তাতে","তাদের","তার","তারপর","তারা","তারৈ","তাহলে","তাহা","তাহাতে","তাহার","তিনঐ","তিনি","তিনিও","তুমি","তুলে","তেমন","তো","তোমার","থাকবে","থাকবেন","থাকা","থাকায়","থাকে","থাকেন","থেকে","থেকেই","থেকেও","দিকে","দিতে","দিন","দিয়ে","দিয়েছে","দিয়েছেন","দিলেন","দু","দুই","দুটি","দুটো","দেওয়া","দেওয়ার","দেওয়া","দেখতে","দেখা","দেখে","দেন","দেয়","দ্বারা","ধরা","ধরে","ধামার","নতুন","নয়","না","নাই","নাকি","নাগাদ","নানা","নিজে","নিজেই","নিজেদের","নিজের","নিতে","নিয়ে","নিয়ে","নেই","নেওয়া","নেওয়ার","নেওয়া","নয়","পক্ষে","পর","পরে","পরেই","পরেও","পর্যন্ত","পাওয়া","পাচ","পারি","পারে","পারেন","পি","পেয়ে","পেয়্র্","প্রতি","প্রথম","প্রভৃতি","প্রযন্ত","প্রাথমিক","প্রায়","প্রায়","ফলে","ফিরে","ফের","বক্তব্য","বদলে","বন","বরং","বলতে","বলল","বললেন","বলা","বলে","বলেছেন","বলেন","বসে","বহু","বা","বাদে","বার","বি","বিনা","বিভিন্ন","বিশেষ","বিষয়টি","বেশ","বেশি","ব্যবহার","ব্যাপারে","ভাবে","ভাবেই","মতো","মতোই","মধ্যভাগে","মধ্যে","মধ্যেই","মধ্যেও","মনে","মাত্র","মাধ্যমে","মোট","মোটেই","যখন","যত","যতটা","যথেষ্ট","যদি","যদিও","যা","যাঁর","যাঁরা","যাওয়া","যাওয়ার","যাওয়া","যাকে","যাচ্ছে","যাতে","যাদের","যান","যাবে","যায়","যার","যারা","যিনি","যে","যেখানে","যেতে","যেন","যেমন","র","রকম","রয়েছে","রাখা","রেখে","লক্ষ","শুধু","শুরু","সঙ্গে","সঙ্গেও","সব","সবার","সমস্ত","সম্প্রতি","সহ","সহিত","সাধারণ","সামনে","সি","সুতরাং","সে","সেই","সেখান","সেখানে","সেটা","সেটাই","সেটাও","সেটি","স্পষ্ট","স্বয়ং","হইতে","হইবে","হইয়া","হওয়া","হওয়ায়","হওয়ার","হচ্ছে","হত","হতে","হতেই","হন","হবে","হবেন","হয়","হয়তো","হয়নি","হয়ে","হয়েই","হয়েছিল","হয়েছে","হয়েছেন","হল","হলে","হলেই","হলেও","হলো","হাজার","হিসাবে","হৈলে","হোক","হয়"]
// tell the world about the noise words.
exports.words = words

},{}],91:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = [
  'a', 'ainda', 'alem', 'ambas', 'ambos', 'antes', 'ao', 'aonde', 'aos',
  'apos', 'aquele', 'aqueles', 'as', 'assim', 'com', 'como', 'contra',
  'contudo', 'cuja', 'cujas', 'cujo', 'cujos', 'da', 'das', 'de', 'dela',
  'dele', 'deles', 'demais', 'depois', 'desde', 'desta', 'deste', 'dispoe',
  'dispoem', 'diversa', 'diversas', 'diversos', 'do', 'dos', 'durante', 'e',
  'ela', 'elas', 'ele', 'eles', 'em', 'entao', 'entre', 'essa', 'essas',
  'esse', 'esses', 'esta', 'estas', 'este', 'estes', 'ha', 'isso', 'isto',
  'logo', 'mais', 'mas', 'mediante', 'menos', 'mesma', 'mesmas', 'mesmo',
  'mesmos', 'na', 'nao', 'nas', 'nem', 'nesse', 'neste', 'nos', 'o', 'os',
  'ou', 'outra', 'outras', 'outro', 'outros', 'pelas', 'pelo', 'pelos',
  'perante', 'pois', 'por', 'porque', 'portanto', 'propios', 'proprio',
  'quais', 'qual', 'qualquer', 'quando', 'quanto', 'que', 'quem', 'quer', 'se',
  'seja', 'sem', 'sendo', 'seu', 'seus', 'sob', 'sobre', 'sua', 'suas', 'tal',
  'tambem', 'teu', 'teus', 'toda', 'todas', 'todo', 'todos', 'tua', 'tuas',
  'tudo', 'um', 'uma', 'umas', 'uns'
]

// tell the world about the noise words.
exports.words = words

},{}],92:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'abans', 'ací', 'ah', 'així', 'això', 'al', 'aleshores', 'algun', 'alguna', 'algunes', 'alguns', 'alhora', 'allà', 'allí', 'allò', 'als', 'altra', 'altre', 'altres', 'amb', 'ambdues', 'ambdós', 'apa', 'aquell', 'aquella', 'aquelles', 'aquells', 'aquest', 'aquesta', 'aquestes', 'aquests', 'aquí', 'baix', 'cada', 'cadascuna', 'cadascunes', 'cadascuns', 'cadascú', 'com', 'contra', 'd\'un', 'd\'una', 'd\'unes', 'd\'uns', 'dalt', 'de', 'del', 'dels', 'des', 'després', 'dins', 'dintre', 'donat', 'doncs', 'durant', 'e', 'eh', 'el', 'els', 'em', 'en', 'encara', 'ens', 'entre', 'eren', 'es', 'esta', 'estaven', 'esteu', 'està', 'estàvem', 'estàveu', 'et', 'etc', 'ets', 'fins', 'fora', 'gairebé', 'ha', 'han', 'has', 'havia', 'he', 'hem', 'heu', 'hi', 'ho', 'i', 'igual', 'iguals', 'ja', 'l\'hi', 'la', 'les', 'li', 'li\'n', 'llavors', 'm\'he', 'ma', 'mal', 'malgrat', 'mateix', 'mateixa', 'mateixes', 'mateixos', 'me', 'mentre', 'meu', 'meus', 'meva', 'meves', 'molt', 'molta', 'moltes', 'molts', 'mon', 'mons', 'més', 'n\'he', 'n\'hi', 'ne', 'ni', 'no', 'nogensmenys', 'només', 'nosaltres', 'nostra', 'nostre', 'nostres', 'o', 'oh', 'oi', 'on', 'pas', 'pel', 'pels', 'per', 'perquè', 'però', 'poc', 'poca', 'pocs', 'poques', 'potser', 'propi', 'qual', 'quals', 'quan', 'quant', 'que', 'quelcom', 'qui', 'quin', 'quina', 'quines', 'quins', 'què', 's\'ha', 's\'han', 'sa', 'semblant', 'semblants', 'ses', 'seu', 'seus', 'seva', 'seves', 'si', 'sobre', 'sobretot', 'solament', 'sols', 'son', 'sons', 'sota', 'sou', 'sóc', 'són', 't\'ha', 't\'han', 't\'he', 'ta', 'tal', 'també', 'tampoc', 'tan', 'tant', 'tanta', 'tantes', 'teu', 'teus', 'teva', 'teves', 'ton', 'tons', 'tot', 'tota', 'totes', 'tots', 'un', 'una', 'unes', 'uns', 'us', 'va', 'vaig', 'vam', 'van', 'vas', 'veu', 'vosaltres', 'vostra', 'vostre', 'vostres', 'érem', 'éreu', 'és']

// tell the world about the noise words.
exports.words = words

},{}],93:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'aby', 'ahoj', 'aj', 'ale', 'anebo', 'ani', 'ano', 'asi', 'aspoň', 'atd', 'atp', 'ačkoli', 'až', 'bez', 'beze', 'blízko', 'bohužel', 'brzo', 'bude', 'budem', 'budeme', 'budete', 'budeš', 'budou', 'budu', 'by', 'byl', 'byla', 'byli', 'bylo', 'byly', 'bys', 'být', 'během', 'chce', 'chceme', 'chcete', 'chceš', 'chci', 'chtít', 'chtějí', 'chut\'', 'chuti', 'co', 'což', 'cz', 'daleko', 'další', 'den', 'deset', 'devatenáct', 'devět', 'dnes', 'do', 'dobrý', 'docela', 'dva', 'dvacet', 'dvanáct', 'dvě', 'dál', 'dále', 'děkovat', 'děkujeme', 'děkuji', 'ho', 'hodně', 'i', 'jak', 'jakmile', 'jako', 'jakož', 'jde', 'je', 'jeden', 'jedenáct', 'jedna', 'jedno', 'jednou', 'jedou', 'jeho', 'jehož', 'jej', 'jejich', 'její', 'jelikož', 'jemu', 'jen', 'jenom', 'jestli', 'jestliže', 'ještě', 'jež', 'ji', 'jich', 'jimi', 'jinak', 'jiné', 'již', 'jsem', 'jseš', 'jsi', 'jsme', 'jsou', 'jste', 'já', 'jí', 'jím', 'jíž', 'k', 'kam', 'kde', 'kdo', 'kdy', 'když', 'ke', 'kolik', 'kromě', 'kterou', 'která', 'které', 'který', 'kteří', 'kvůli', 'mají', 'mezi', 'mi', 'mne', 'mnou', 'mně', 'moc', 'mohl', 'mohou', 'moje', 'moji', 'možná', 'musí', 'my', 'má', 'málo', 'mám', 'máme', 'máte', 'máš', 'mé', 'mí', 'mít', 'mě', 'můj', 'může', 'na', 'nad', 'nade', 'napište', 'naproti', 'načež', 'naše', 'naši', 'ne', 'nebo', 'nebyl', 'nebyla', 'nebyli', 'nebyly', 'nedělají', 'nedělá', 'nedělám', 'neděláme', 'neděláte', 'neděláš', 'neg', 'nejsi', 'nejsou', 'nemají', 'nemáme', 'nemáte', 'neměl', 'není', 'nestačí', 'nevadí', 'než', 'nic', 'nich', 'nimi', 'nové', 'nový', 'nula', 'nám', 'námi', 'nás', 'náš', 'ním', 'ně', 'něco', 'nějak', 'někde', 'někdo', 'němu', 'němuž', 'o', 'od', 'ode', 'on', 'ona', 'oni', 'ono', 'ony', 'osm', 'osmnáct', 'pak', 'patnáct', 'po', 'pod', 'podle', 'pokud', 'potom', 'pouze', 'pozdě', 'pořád', 'pravé', 'pro', 'prostě', 'prosím', 'proti', 'proto', 'protože', 'proč', 'první', 'pta', 'pět', 'před', 'přes', 'přese', 'při', 'přičemž', 're', 'rovně', 's', 'se', 'sedm', 'sedmnáct', 'si', 'skoro', 'smí', 'smějí', 'snad', 'spolu', 'sta', 'sto', 'strana', 'sté', 'své', 'svých', 'svým', 'svými', 'ta', 'tady', 'tak', 'takhle', 'taky', 'také', 'takže', 'tam', 'tamhle', 'tamhleto', 'tamto', 'tato', 'tebe', 'tebou', 'ted\'', 'tedy', 'ten', 'tento', 'teto', 'ti', 'tipy', 'tisíc', 'tisíce', 'to', 'tobě', 'tohle', 'toho', 'tohoto', 'tom', 'tomto', 'tomu', 'tomuto', 'toto', 'trošku', 'tu', 'tuto', 'tvoje', 'tvá', 'tvé', 'tvůj', 'ty', 'tyto', 'téma', 'tím', 'tímto', 'tě', 'těm', 'těmu', 'třeba', 'tři', 'třináct', 'u', 'určitě', 'už', 'v', 'vaše', 'vaši', 've', 'vedle', 'večer', 'vlastně', 'vy', 'vám', 'vámi', 'vás', 'váš', 'více', 'však', 'všechno', 'všichni', 'vůbec', 'vždy', 'z', 'za', 'zatímco', 'zač', 'zda', 'zde', 'ze', 'zprávy', 'zpět', 'čau', 'či', 'článku', 'články', 'čtrnáct', 'čtyři', 'šest', 'šestnáct', 'že']

// tell the world about the noise words.
exports.words = words

},{}],94:[function(require,module,exports){
/*
Creative Commons – Attribution / ShareAlike 3.0 license
http://creativecommons.org/licenses/by-sa/3.0/

List based on frequently used words in subtitles in 2012.

Thanks to
opensubtitles.org
https://invokeit.wordpress.com/frequency-word-lists/#comment-9707
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'er', 'jeg', 'det', 'du', 'ikke', 'i', 'at', 'en', 'og', 'har',
  'vi', 'til', 'på', 'hvad', 'med', 'mig', 'så', 'for', 'de', 'dig',
  'der', 'den', 'han', 'kan', 'af', 'vil', 'var', 'her', 'et', 'skal',
  'ved', 'nu', 'men', 'om', 'ja', 'som', 'nej', 'min', 'noget', 'ham',
  'hun', 'bare', 'kom', 'være', 'din', 'hvor', 'dem', 'ud', 'os', 'hvis',
  'må', 'se', 'godt', 'have', 'fra', 'ville', 'okay', 'lige', 'op', 'alle',
  'lad', 'hvorfor', 'sig', 'hvordan', 'få', 'kunne', 'eller', 'hvem', 'man', 'bliver',
  'havde', 'da', 'ingen', 'efter', 'når', 'alt', 'jo', 'to', 'mit', 'ind',
  'hej', 'aldrig', 'lidt', 'nogen', 'over', 'også', 'mand', 'far', 'skulle', 'selv',
  'får', 'hans', 'ser', 'vores', 'jer', 'sådan', 'dit', 'kun', 'deres', 'ned',
  'mine', 'komme', 'tage', 'denne', 'sige', 'dette', 'blive', 'helt', 'fordi',
  'end', 'tag', 'før', 'fik', 'dine',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_']

// tell the world about the noise words.
exports.words = words

},{}],95:[function(require,module,exports){
/*
The MIT License (MIT)

Copyright (c) 2016 Gene Diaz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'a', 'ab', 'aber', 'ach', 'acht', 'achte', 'achten', 'achter', 'achtes', 'ag', 'alle', 'allein', 'allem', 'allen', 'aller', 'allerdings', 'alles', 'allgemeinen', 'als', 'also', 'am', 'an', 'ander', 'andere', 'anderem', 'anderen', 'anderer', 'anderes', 'anderm', 'andern', 'anderr', 'anders', 'au', 'auch', 'auf', 'aus', 'ausser', 'ausserdem', 'außer', 'außerdem', 'b', 'bald', 'bei', 'beide', 'beiden', 'beim', 'beispiel', 'bekannt', 'bereits', 'besonders', 'besser', 'besten', 'bin', 'bis', 'bisher', 'bist', 'c', 'd', 'd.h', 'da', 'dabei', 'dadurch', 'dafür', 'dagegen', 'daher', 'dahin', 'dahinter', 'damals', 'damit', 'danach', 'daneben', 'dank', 'dann', 'daran', 'darauf', 'daraus', 'darf', 'darfst', 'darin', 'darum', 'darunter', 'darüber', 'das', 'dasein', 'daselbst', 'dass', 'dasselbe', 'davon', 'davor', 'dazu', 'dazwischen', 'daß', 'dein', 'deine', 'deinem', 'deinen', 'deiner', 'deines', 'dem', 'dementsprechend', 'demgegenüber', 'demgemäss', 'demgemäß', 'demselben', 'demzufolge', 'den', 'denen', 'denn', 'denselben', 'der', 'deren', 'derer', 'derjenige', 'derjenigen', 'dermassen', 'dermaßen', 'derselbe', 'derselben', 'des', 'deshalb', 'desselben', 'dessen', 'deswegen', 'dich', 'die', 'diejenige', 'diejenigen', 'dies', 'diese', 'dieselbe', 'dieselben', 'diesem', 'diesen', 'dieser', 'dieses', 'dir', 'doch', 'dort', 'drei', 'drin', 'dritte', 'dritten', 'dritter', 'drittes', 'du', 'durch', 'durchaus', 'durfte', 'durften', 'dürfen', 'dürft', 'e', 'eben', 'ebenso', 'ehrlich', 'ei', 'ei, ', 'eigen', 'eigene', 'eigenen', 'eigener', 'eigenes', 'ein', 'einander', 'eine', 'einem', 'einen', 'einer', 'eines', 'einig', 'einige', 'einigem', 'einigen', 'einiger', 'einiges', 'einmal', 'eins', 'elf', 'en', 'ende', 'endlich', 'entweder', 'er', 'ernst', 'erst', 'erste', 'ersten', 'erster', 'erstes', 'es', 'etwa', 'etwas', 'euch', 'euer', 'eure', 'eurem', 'euren', 'eurer', 'eures', 'f', 'folgende', 'früher', 'fünf', 'fünfte', 'fünften', 'fünfter', 'fünftes', 'für', 'g', 'gab', 'ganz', 'ganze', 'ganzen', 'ganzer', 'ganzes', 'gar', 'gedurft', 'gegen', 'gegenüber', 'gehabt', 'gehen', 'geht', 'gekannt', 'gekonnt', 'gemacht', 'gemocht', 'gemusst', 'genug', 'gerade', 'gern', 'gesagt', 'geschweige', 'gewesen', 'gewollt', 'geworden', 'gibt', 'ging', 'gleich', 'gott', 'gross', 'grosse', 'grossen', 'grosser', 'grosses', 'groß', 'große', 'großen', 'großer', 'großes', 'gut', 'gute', 'guter', 'gutes', 'h', 'hab', 'habe', 'haben', 'habt', 'hast', 'hat', 'hatte', 'hatten', 'hattest', 'hattet', 'heisst', 'her', 'heute', 'hier', 'hin', 'hinter', 'hoch', 'hätte', 'hätten', 'i', 'ich', 'ihm', 'ihn', 'ihnen', 'ihr', 'ihre', 'ihrem', 'ihren', 'ihrer', 'ihres', 'im', 'immer', 'in', 'indem', 'infolgedessen', 'ins', 'irgend', 'ist', 'j', 'ja', 'jahr', 'jahre', 'jahren', 'je', 'jede', 'jedem', 'jeden', 'jeder', 'jedermann', 'jedermanns', 'jedes', 'jedoch', 'jemand', 'jemandem', 'jemanden', 'jene', 'jenem', 'jenen', 'jener', 'jenes', 'jetzt', 'k', 'kam', 'kann', 'kannst', 'kaum', 'kein', 'keine', 'keinem', 'keinen', 'keiner', 'keines', 'kleine', 'kleinen', 'kleiner', 'kleines', 'kommen', 'kommt', 'konnte', 'konnten', 'kurz', 'können', 'könnt', 'könnte', 'l', 'lang', 'lange', 'leicht', 'leide', 'lieber', 'los', 'm', 'machen', 'macht', 'machte', 'mag', 'magst', 'mahn', 'mal', 'man', 'manche', 'manchem', 'manchen', 'mancher', 'manches', 'mann', 'mehr', 'mein', 'meine', 'meinem', 'meinen', 'meiner', 'meines', 'mensch', 'menschen', 'mich', 'mir', 'mit', 'mittel', 'mochte', 'mochten', 'morgen', 'muss', 'musst', 'musste', 'mussten', 'muß', 'mußt', 'möchte', 'mögen', 'möglich', 'mögt', 'müssen', 'müsst', 'müßt', 'n', 'na', 'nach', 'nachdem', 'nahm', 'natürlich', 'neben', 'nein', 'neue', 'neuen', 'neun', 'neunte', 'neunten', 'neunter', 'neuntes', 'nicht', 'nichts', 'nie', 'niemand', 'niemandem', 'niemanden', 'noch', 'nun', 'nur', 'o', 'ob', 'oben', 'oder', 'offen', 'oft', 'ohne', 'ordnung', 'p', 'q', 'r', 'recht', 'rechte', 'rechten', 'rechter', 'rechtes', 'richtig', 'rund', 's', 'sa', 'sache', 'sagt', 'sagte', 'sah', 'satt', 'schlecht', 'schluss', 'schon', 'sechs', 'sechste', 'sechsten', 'sechster', 'sechstes', 'sehr', 'sei', 'seid', 'seien', 'sein', 'seine', 'seinem', 'seinen', 'seiner', 'seines', 'seit', 'seitdem', 'selbst', 'sich', 'sie', 'sieben', 'siebente', 'siebenten', 'siebenter', 'siebentes', 'sind', 'so', 'solang', 'solche', 'solchem', 'solchen', 'solcher', 'solches', 'soll', 'sollen', 'sollst', 'sollt', 'sollte', 'sollten', 'sondern', 'sonst', 'soweit', 'sowie', 'später', 'startseite', 'statt', 'steht', 'suche', 't', 'tag', 'tage', 'tagen', 'tat', 'teil', 'tel', 'tritt', 'trotzdem', 'tun', 'u', 'uhr', 'um', 'und', 'und?', 'uns', 'unse', 'unsem', 'unsen', 'unser', 'unsere', 'unserer', 'unses', 'unter', 'v', 'vergangenen', 'viel', 'viele', 'vielem', 'vielen', 'vielleicht', 'vier', 'vierte', 'vierten', 'vierter', 'viertes', 'vom', 'von', 'vor', 'w', 'wahr?', 'wann', 'war', 'waren', 'warst', 'wart', 'warum', 'was', 'weg', 'wegen', 'weil', 'weit', 'weiter', 'weitere', 'weiteren', 'weiteres', 'welche', 'welchem', 'welchen', 'welcher', 'welches', 'wem', 'wen', 'wenig', 'wenige', 'weniger', 'weniges', 'wenigstens', 'wenn', 'wer', 'werde', 'werden', 'werdet', 'weshalb', 'wessen', 'wie', 'wieder', 'wieso', 'will', 'willst', 'wir', 'wird', 'wirklich', 'wirst', 'wissen', 'wo', 'woher', 'wohin', 'wohl', 'wollen', 'wollt', 'wollte', 'wollten', 'worden', 'wurde', 'wurden', 'während', 'währenddem', 'währenddessen', 'wäre', 'würde', 'würden', 'x', 'y', 'z', 'z.b', 'zehn', 'zehnte', 'zehnten', 'zehnter', 'zehntes', 'zeit', 'zu', 'zuerst', 'zugleich', 'zum', 'zunächst', 'zur', 'zurück', 'zusammen', 'zwanzig', 'zwar', 'zwei', 'zweite', 'zweiten', 'zweiter', 'zweites', 'zwischen', 'zwölf', 'über', 'überhaupt', 'übrigens'
]

// tell the world about the noise words.
exports.words = words

},{}],96:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['αλλα', 'αν', 'αντι', 'απο', 'αυτα', 'αυτεσ', 'αυτη', 'αυτο', 'αυτοι', 'αυτοσ', 'αυτουσ', 'αυτων', 'για', 'δε', 'δεν', 'εαν', 'ειμαι', 'ειμαστε', 'ειναι', 'εισαι', 'ειστε', 'εκεινα', 'εκεινεσ', 'εκεινη', 'εκεινο', 'εκεινοι', 'εκεινοσ', 'εκεινουσ', 'εκεινων', 'ενω', 'επι', 'η', 'θα', 'ισωσ', 'κ', 'και', 'κατα', 'κι', 'μα', 'με', 'μετα', 'μη', 'μην', 'να', 'ο', 'οι', 'ομωσ', 'οπωσ', 'οσο', 'οτι', 'παρα', 'ποια', 'ποιεσ', 'ποιο', 'ποιοι', 'ποιοσ', 'ποιουσ', 'ποιων', 'που', 'προσ', 'πωσ', 'σε', 'στη', 'στην', 'στο', 'στον', 'τα', 'την', 'τησ', 'το', 'τον', 'τοτε', 'του', 'των', 'ωσ']

// tell the world about the noise words.
exports.words = words

},{}],97:[function(require,module,exports){
/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'about', 'after', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be',
  'because', 'been', 'before', 'being', 'between', 'both', 'but', 'by', 'came', 'can',
  'come', 'could', 'did', 'do', 'each', 'for', 'from', 'get', 'got', 'has', 'had',
  'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into',
  'is', 'it', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must',
  'my', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'out', 'over',
  'said', 'same', 'see', 'should', 'since', 'some', 'still', 'such', 'take', 'than',
  'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those',
  'through', 'to', 'too', 'under', 'up', 'very', 'was', 'way', 'we', 'well', 'were',
  'what', 'where', 'which', 'while', 'who', 'with', 'would', 'you', 'your', 'a', 'i']

// tell the world about the noise words.
exports.words = words

},{}],98:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['adiaŭ', 'ajn', 'al', 'ankoraŭ', 'antaŭ', 'aŭ', 'bonan', 'bonvole', 'bonvolu', 'bv', 'ci', 'cia', 'cian', 'cin', 'd-ro', 'da', 'de', 'dek', 'deka', 'do', 'doktor\'', 'doktoro', 'du', 'dua', 'dum', 'eble', 'ekz', 'ekzemple', 'en', 'estas', 'estis', 'estos', 'estu', 'estus', 'eĉ', 'f-no', 'feliĉan', 'for', 'fraŭlino', 'ha', 'havas', 'havis', 'havos', 'havu', 'havus', 'he', 'ho', 'hu', 'ili', 'ilia', 'ilian', 'ilin', 'inter', 'io', 'ion', 'iu', 'iujn', 'iun', 'ja', 'jam', 'je', 'jes', 'k', 'kaj', 'ke', 'kio', 'kion', 'kiu', 'kiujn', 'kiun', 'kvankam', 'kvar', 'kvara', 'kvazaŭ', 'kvin', 'kvina', 'la', 'li', 'lia', 'lian', 'lin', 'malantaŭ', 'male', 'malgraŭ', 'mem', 'mi', 'mia', 'mian', 'min', 'minus', 'naŭ', 'naŭa', 'ne', 'nek', 'nenio', 'nenion', 'neniu', 'neniun', 'nepre', 'ni', 'nia', 'nian', 'nin', 'nu', 'nun', 'nur', 'ok', 'oka', 'oni', 'onia', 'onian', 'onin', 'plej', 'pli', 'plu', 'plus', 'por', 'post', 'preter', 's-no', 's-ro', 'se', 'sed', 'sep', 'sepa', 'ses', 'sesa', 'si', 'sia', 'sian', 'sin', 'sinjor\'', 'sinjorino', 'sinjoro', 'sub', 'super', 'supren', 'sur', 'tamen', 'tio', 'tion', 'tiu', 'tiujn', 'tiun', 'tra', 'tri', 'tria', 'tuj', 'tute', 'unu', 'unua', 've', 'verŝajne', 'vi', 'via', 'vian', 'vin', 'ĉi', 'ĉio', 'ĉion', 'ĉiu', 'ĉiujn', 'ĉiun', 'ĉu', 'ĝi', 'ĝia', 'ĝian', 'ĝin', 'ĝis', 'ĵus', 'ŝi', 'ŝia', 'ŝin']

// tell the world about the noise words.
exports.words = words

},{}],99:[function(require,module,exports){
/*
Copyright (c) 2011, David Przybilla, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'a', 'un', 'el', 'ella', 'y', 'sobre', 'de', 'la', 'que', 'en',
  'los', 'del', 'se', 'las', 'por', 'un', 'para', 'con', 'no',
  'una', 'su', 'al', 'lo', 'como', 'más', 'pero', 'sus', 'le',
  'ya', 'o', 'porque', 'cuando', 'muy', 'sin', 'sobre', 'también',
  'me', 'hasta', 'donde', 'quien', 'desde', 'nos', 'durante', 'uno',
  'ni', 'contra', 'ese', 'eso', 'mí', 'qué', 'otro', 'él', 'cual',
  'poco', 'mi', 'tú', 'te', 'ti', 'sí',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_']

// tell the world about the noise words.
exports.words = words

},{}],100:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['aga', 'ei', 'et', 'ja', 'jah', 'kas', 'kui', 'kõik', 'ma', 'me', 'mida', 'midagi', 'mind', 'minu', 'mis', 'mu', 'mul', 'mulle', 'nad', 'nii', 'oled', 'olen', 'oli', 'oma', 'on', 'pole', 'sa', 'seda', 'see', 'selle', 'siin', 'siis', 'ta', 'te', 'ära']

// tell the world about the noise words.
exports.words = words

},{}],101:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = [
  'al', 'anitz', 'arabera', 'asko', 'baina', 'bat', 'batean', 'batek', 'bati',
  'batzuei', 'batzuek', 'batzuetan', 'batzuk', 'bera', 'beraiek', 'berau',
  'berauek', 'bere', 'berori', 'beroriek', 'beste', 'bezala', 'da', 'dago',
  'dira', 'ditu', 'du', 'dute', 'edo', 'egin', 'ere', 'eta', 'eurak', 'ez',
  'gainera', 'gu', 'gutxi', 'guzti', 'haiei', 'haiek', 'haietan', 'hainbeste',
  'hala', 'han', 'handik', 'hango', 'hara', 'hari', 'hark', 'hartan', 'hau',
  'hauei', 'hauek', 'hauetan', 'hemen', 'hemendik', 'hemengo', 'hi', 'hona',
  'honek', 'honela', 'honetan', 'honi', 'hor', 'hori', 'horiei', 'horiek',
  'horietan', 'horko', 'horra', 'horrek', 'horrela', 'horretan', 'horri',
  'hortik', 'hura', 'izan', 'ni', 'noiz', 'nola', 'non', 'nondik', 'nongo',
  'nor', 'nora', 'ze', 'zein', 'zen', 'zenbait', 'zenbat', 'zer', 'zergatik',
  'ziren', 'zituen', 'zu', 'zuek', 'zuen', 'zuten'
]

// tell the world about the noise words.
exports.words = words

},{}],102:[function(require,module,exports){
/*
Copyright (c) 2011, Chris Umbel
Farsi Stop Words by Fardin Koochaki <me@fardinak.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  // Words
  'از', 'با', 'یه', 'برای', 'و', 'باید', 'شاید',

  // Symbols
  '؟', '!', '٪', '.', '،', '؛', ':', ';', ',',

  // Numbers
  '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', '۰'
]

// tell the world about the noise words.
exports.words = words

},{}],103:[function(require,module,exports){
/* The MIT License (MIT)
Copyright (c) 2018 Espen Klem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words =[
  "0",
  "ja",
  "on",
  "1",
  "oli",
  "hän",
  "vuonna",
  "2",
  "myös",
  "joka",
  "3",
  "se",
  "sekä",
  "sen",
  "mutta",
  "4",
  "ei",
  "ovat",
  "hänen",
  "n",
  "kanssa",
  "vuoden",
  "jälkeen",
  "että",
  "5",
  "s",
  "tai",
  "jonka",
  "jossa",
  "6",
  "mukaan",
  "kun",
  "muun",
  "muassa",
  "hänet",
  "olivat",
  "kuitenkin",
  "noin",
  "vuosina",
  "7",
  "aikana",
  "lisäksi",
  "kaksi",
  "kuin",
  "ollut",
  "the",
  "myöhemmin",
  "8",
  "eli",
  "10",
  "vain",
  "teki",
  "mm",
  "jotka",
  "ennen",
  "ensimmäinen",
  "a",
  "9",
  "jo",
  "kuten",
  "yksi",
  "ensimmäisen",
  "vastaan",
  "tämän",
  "vuodesta",
  "sitä",
  "000",
  "voi",
  "luvun",
  "luvulla",
  "of",
  "ole",
  "kauden",
  "osa",
  "esimerkiksi",
  "jolloin",
  "yli",
  "de",
  "kaudella",
  "eri",
  "sillä",
  "kolme",
  "he",
  "vuotta"
]

exports.words = words
},{}],104:[function(require,module,exports){
/*
 Copyright (c) 2014, Ismaël Héry

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */

// A list of commonly used french words that have little meaning and can be excluded
// from analysis.

var words = ['être', 'avoir', 'faire',
  'a',
  'au',
  'aux',
  'avec',
  'ce',
  'ces',
  'dans',
  'de',
  'des',
  'du',
  'elle',
  'en',
  'et',
  'eux',
  'il',
  'je',
  'la',
  'le',
  'leur',
  'lui',
  'ma',
  'mais',
  'me',
  'même',
  'mes',
  'moi',
  'mon',
  'ne',
  'nos',
  'notre',
  'nous',
  'on',
  'ou',
  'où',
  'par',
  'pas',
  'pour',
  'qu',
  'que',
  'qui',
  'sa',
  'se',
  'ses',
  'son',
  'sur',
  'ta',
  'te',
  'tes',
  'toi',
  'ton',
  'tu',
  'un',
  'une',
  'vos',
  'votre',
  'vous',
  'c',
  'd',
  'j',
  'l',
  'à',
  'm',
  'n',
  's',
  't',
  'y',
  'été',
  'étée',
  'étées',
  'étés',
  'étant',
  'suis',
  'es',
  'est',
  'sommes',
  'êtes',
  'sont',
  'serai',
  'seras',
  'sera',
  'serons',
  'serez',
  'seront',
  'serais',
  'serait',
  'serions',
  'seriez',
  'seraient',
  'étais',
  'était',
  'étions',
  'étiez',
  'étaient',
  'fus',
  'fut',
  'fûmes',
  'fûtes',
  'furent',
  'sois',
  'soit',
  'soyons',
  'soyez',
  'soient',
  'fusse',
  'fusses',
  'fût',
  'fussions',
  'fussiez',
  'fussent',
  'ayant',
  'eu',
  'eue',
  'eues',
  'eus',
  'ai',
  'as',
  'avons',
  'avez',
  'ont',
  'aurai',
  'auras',
  'aura',
  'aurons',
  'aurez',
  'auront',
  'aurais',
  'aurait',
  'aurions',
  'auriez',
  'auraient',
  'avais',
  'avait',
  'avions',
  'aviez',
  'avaient',
  'eut',
  'eûmes',
  'eûtes',
  'eurent',
  'aie',
  'aies',
  'ait',
  'ayons',
  'ayez',
  'aient',
  'eusse',
  'eusses',
  'eût',
  'eussions',
  'eussiez',
  'eussent',
  'ceci',
  'cela',
  'cet',
  'cette',
  'ici',
  'ils',
  'les',
  'leurs',
  'quel',
  'quels',
  'quelle',
  'quelles',
  'sans',
  'soi'
]

exports.words = words

},{}],105:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'ach', 'ag', 'agus', 'an', 'aon', 'ar', 'arna', 'as', 'b\'', 'ba', 'beirt', 'bhúr', 'caoga', 'ceathair', 'ceathrar', 'chomh', 'chtó', 'chuig', 'chun', 'cois', 'céad', 'cúig', 'cúigear', 'd\'', 'daichead', 'dar', 'de', 'deich', 'deichniúr', 'den', 'dhá', 'do', 'don', 'dtí', 'dá', 'dár', 'dó', 'faoi', 'faoin', 'faoina', 'faoinár', 'fara', 'fiche', 'gach', 'gan', 'go', 'gur', 'haon', 'hocht', 'i', 'iad', 'idir', 'in', 'ina', 'ins', 'inár', 'is', 'le', 'leis', 'lena', 'lenár', 'm\'', 'mar', 'mo', 'mé', 'na', 'nach', 'naoi', 'naonúr', 'ná', 'ní', 'níor', 'nó', 'nócha', 'ocht', 'ochtar', 'os', 'roimh', 'sa', 'seacht', 'seachtar', 'seachtó', 'seasca', 'seisear', 'siad', 'sibh', 'sinn', 'sna', 'sé', 'sí', 'tar', 'thar', 'thú', 'triúr', 'trí', 'trína', 'trínár', 'tríocha', 'tú', 'um', 'ár', 'é', 'éis', 'í', 'ó', 'ón', 'óna', 'ónár']

// tell the world about the noise words.
exports.words = words

},{}],106:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'alí', 'ao', 'aos', 'aquel', 'aquela', 'aquelas', 'aqueles', 'aquilo', 'aquí', 'as', 'así', 'aínda', 'ben', 'cando', 'che', 'co', 'coa', 'coas', 'comigo', 'con', 'connosco', 'contigo', 'convosco', 'cos', 'cun', 'cunha', 'cunhas', 'cuns', 'da', 'dalgunha', 'dalgunhas', 'dalgún', 'dalgúns', 'das', 'de', 'del', 'dela', 'delas', 'deles', 'desde', 'deste', 'do', 'dos', 'dun', 'dunha', 'dunhas', 'duns', 'e', 'el', 'ela', 'elas', 'eles', 'en', 'era', 'eran', 'esa', 'esas', 'ese', 'eses', 'esta', 'estaba', 'estar', 'este', 'estes', 'estiven', 'estou', 'está', 'están', 'eu', 'facer', 'foi', 'foron', 'fun', 'había', 'hai', 'iso', 'isto', 'la', 'las', 'lle', 'lles', 'lo', 'los', 'mais', 'me', 'meu', 'meus', 'min', 'miña', 'miñas', 'moi', 'na', 'nas', 'neste', 'nin', 'no', 'non', 'nos', 'nosa', 'nosas', 'noso', 'nosos', 'nun', 'nunha', 'nunhas', 'nuns', 'nós', 'o', 'os', 'ou', 'para', 'pero', 'pode', 'pois', 'pola', 'polas', 'polo', 'polos', 'por', 'que', 'se', 'senón', 'ser', 'seu', 'seus', 'sexa', 'sido', 'sobre', 'súa', 'súas', 'tamén', 'tan', 'te', 'ten', 'ter', 'teu', 'teus', 'teñen', 'teño', 'ti', 'tido', 'tiven', 'tiña', 'túa', 'túas', 'un', 'unha', 'unhas', 'uns', 'vos', 'vosa', 'vosas', 'voso', 'vosos', 'vós', 'á', 'é', 'ó', 'ós']

// tell the world about the noise words.
exports.words = words

},{}],107:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'ta', 'da', 'ya', 'sai', 'ba', 'yi', 'na', 'kuma', 'ma', 'ji', 'cikin', 'in', 'ni', 'wata', 'wani',
  'ce', 'tana', 'don', 'za', 'sun', 'amma', 'ga', 'ina', 'ne', 'tselane', 'mai', 'suka', 'wannan',
  'a', 'ko', 'lokacin', 'su', 'take', 'kaka', 'shi', 'yake', 'yana', 'mulongo', 'mata', 'ka', 'ban',
  'ita', 'tafi', 'shanshani', 'kai', 'daɗi', 'mi', 'ƙato', 'fara', 'rana'
]


// Tell the world about the noise words.
exports.words = words

},{}],108:[function(require,module,exports){
/*
The MIT License (MIT)

Guy Saar - Stop words list

*/
var words = [
"אבל",
"או",
"אולי",
"אותה",
"אותו",
"אותי",
"אותך",
"אותם",
"אותן",
"אותנו",
"אז",
"אחר",
"אחרות",
"אחרי",
"אחריכן",
"אחרים",
"אחרת",
"אי",
"איזה",
"איך",
"אין",
"איפה",
"איתה",
"איתו",
"איתי",
"איתך",
"איתכם",
"איתכן",
"איתם",
"איתן",
"איתנו",
"אך",
"אל",
"אלה",
"אלו",
"אם",
"אנחנו",
"אני",
"אס",
"אף",
"אצל",
"אשר",
"את",
"אתה",
"אתכם",
"אתכן",
"אתם",
"אתן",
"באיזומידה",
"באמצע",
"באמצעות",
"בגלל",
"בין",
"בלי",
"במידה",
"במקוםשבו",
"ברם",
"בשביל",
"בשעהש",
"בתוך",
"גם",
"דרך",
"הוא",
"היא",
"היה",
"היכן",
"היתה",
"היתי",
"הם",
"הן",
"הנה",
"הסיבהשבגללה",
"הרי",
"ואילו",
"ואת",
"זאת",
"זה",
"זות",
"יהיה",
"יוכל",
"יוכלו",
"יותרמדי",
"יכול",
"יכולה",
"יכולות",
"יכולים",
"יכל",
"יכלה",
"יכלו",
"יש",
"כאן",
"כאשר",
"כולם",
"כולן",
"כזה",
"כי",
"כיצד",
"כך",
"ככה",
"כל",
"כלל",
"כמו",
"כן",
"כפי",
"כש",
"לא",
"לאו",
"לאיזותכלית",
"לאן",
"לבין",
"לה",
"להיות",
"להם",
"להן",
"לו",
"לי",
"לכם",
"לכן",
"למה",
"למטה",
"למעלה",
"למקוםשבו",
"למרות",
"לנו",
"לעבר",
"לעיכן",
"לפיכך",
"לפני",
"מאד",
"מאחורי",
"מאיזוסיבה",
"מאין",
"מאיפה",
"מבלי",
"מבעד",
"מדוע",
"מה",
"מהיכן",
"מול",
"מחוץ",
"מי",
"מכאן",
"מכיוון",
"מלבד",
"מן",
"מנין",
"מסוגל",
"מעט",
"מעטים",
"מעל",
"מצד",
"מקוםבו",
"מתחת",
"מתי",
"נגד",
"נגר",
"נו",
"עד",
"עז",
"על",
"עלי",
"עליה",
"עליהם",
"עליהן",
"עליו",
"עליך",
"עליכם",
"עלינו",
"עם",
"עצמה",
"עצמהם",
"עצמהן",
"עצמו",
"עצמי",
"עצמם",
"עצמן",
"עצמנו",
"פה",
"רק",
"שוב",
"של",
"שלה",
"שלהם",
"שלהן",
"שלו",
"שלי",
"שלך",
"שלכה",
"שלכם",
"שלכן",
"שלנו",
"שם",
"תהיה",
"תחת"
]

exports.words = words


},{}],109:[function(require,module,exports){
/*
The MIT License (MIT)

Copyright (c) 2016 Gene Diaz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Originates from: https://github.com/stopwords-iso/stopwords-hi/
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'अंदर','अत','अदि','अप','अपना','अपनि','अपनी','अपने','अभि','अभी','आदि','आप','इंहिं',
  'इंहें','इंहों','इतयादि','इत्यादि','इन','इनका','इन्हीं','इन्हें','इन्हों','इस','इसका','इसकि',
  'इसकी','इसके','इसमें','इसि','इसी','इसे','उंहिं','उंहें','उंहों','उन','उनका','उनकि','उनकी',
  'उनके','उनको','उन्हीं','उन्हें','उन्हों','उस','उसके','उसि','उसी','उसे','एक','एवं','एस',
  'एसे','ऐसे','ओर','और','कइ','कई','कर','करता','करते','करना','करने','करें','कहते',
  'कहा','का','काफि','काफ़ी','कि','किंहें','किंहों','कितना','किन्हें','किन्हों','किया','किर','किस',
  'किसि','किसी','किसे','की','कुछ','कुल','के','को','कोइ','कोई','कोन','कोनसा','कौन',
  'कौनसा','गया','घर','जब','जहाँ','जहां','जा','जिंहें','जिंहों','जितना','जिधर','जिन','जिन्हें',
  'जिन्हों','जिस','जिसे','जीधर','जेसा','जेसे','जैसा','जैसे','जो','तक','तब','तरह','तिंहें',
  'तिंहों','तिन','तिन्हें','तिन्हों','तिस','तिसे','तो','था','थि','थी','थे','दबारा','दवारा','दिया',
  'दुसरा','दुसरे','दूसरे','दो','द्वारा','न','नहिं','नहीं','ना','निचे','निहायत','नीचे','ने','पर',
  'पहले','पुरा','पूरा','पे','फिर','बनि','बनी','बहि','बही','बहुत','बाद','बाला','बिलकुल',
  'भि','भितर','भी','भीतर','मगर','मानो','मे','में','यदि','यह','यहाँ','यहां','यहि','यही',
  'या','यिह','ये','रखें','रवासा','रहा','रहे','ऱ्वासा','लिए','लिये','लेकिन','व','वगेरह','वरग',
  'वर्ग','वह','वहाँ','वहां','वहिं','वहीं','वाले','वुह','वे','वग़ैरह','संग','सकता','सकते','सबसे',
  'सभि','सभी','साथ','साबुत','साभ','सारा','से','सो','हि','ही','हुअ','हुआ','हुइ','हुई',
  'हुए','हे','हें','है','हैं','हो','होता','होति','होती','होते','होना','होने']

// tell the world about the noise words.
exports.words = words

},{}],110:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'ako', 'ali', 'bi', 'bih', 'bila', 'bili', 'bilo', 'bio', 'bismo', 'biste', 'biti', 'bumo', 'da', 'do', 'duž', 'ga', 'hoće', 'hoćemo', 'hoćete', 'hoćeš', 'hoću', 'i', 'iako', 'ih', 'ili', 'iz', 'ja', 'je', 'jedna', 'jedne', 'jedno', 'jer', 'jesam', 'jesi', 'jesmo', 'jest', 'jeste', 'jesu', 'jim', 'joj', 'još', 'ju', 'kada', 'kako', 'kao', 'koja', 'koje', 'koji', 'kojima', 'koju', 'kroz', 'li', 'me', 'mene', 'meni', 'mi', 'mimo', 'moj', 'moja', 'moje', 'mu', 'na', 'nad', 'nakon', 'nam', 'nama', 'nas', 'naš', 'naša', 'naše', 'našeg', 'ne', 'nego', 'neka', 'neki', 'nekog', 'neku', 'nema', 'netko', 'neće', 'nećemo', 'nećete', 'nećeš', 'neću', 'nešto', 'ni', 'nije', 'nikoga', 'nikoje', 'nikoju', 'nisam', 'nisi', 'nismo', 'niste', 'nisu', 'njega', 'njegov', 'njegova', 'njegovo', 'njemu', 'njezin', 'njezina', 'njezino', 'njih', 'njihov', 'njihova', 'njihovo', 'njim', 'njima', 'njoj', 'nju', 'no', 'o', 'od', 'odmah', 'on', 'ona', 'oni', 'ono', 'ova', 'pa', 'pak', 'po', 'pod', 'pored', 'prije', 's', 'sa', 'sam', 'samo', 'se', 'sebe', 'sebi', 'si', 'smo', 'ste', 'su', 'sve', 'svi', 'svog', 'svoj', 'svoja', 'svoje', 'svom', 'ta', 'tada', 'taj', 'tako', 'te', 'tebe', 'tebi', 'ti', 'to', 'toj', 'tome', 'tu', 'tvoj', 'tvoja', 'tvoje', 'u', 'uz', 'vam', 'vama', 'vas', 'vaš', 'vaša', 'vaše', 'već', 'vi', 'vrlo', 'za', 'zar', 'će', 'ćemo', 'ćete', 'ćeš', 'ću', 'što']

// tell the world about the noise words.
exports.words = words

},{}],111:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'abba', 'abban', 'abból', 'addig', 'ahhoz', 'ahogy', 'ahol', 'aki', 'akik', 'akkor', 'akár', 'alapján', 'alatt', 'alatta', 'alattad', 'alattam', 'alattatok', 'alattuk', 'alattunk', 'alá', 'alád', 'alájuk', 'alám', 'alánk', 'alátok', 'alól', 'alóla', 'alólad', 'alólam', 'alólatok', 'alóluk', 'alólunk', 'amely', 'amelybol', 'amelyek', 'amelyekben', 'amelyeket', 'amelyet', 'amelyik', 'amelynek', 'ami', 'amikor', 'amit', 'amolyan', 'amott', 'amíg', 'annak', 'annál', 'arra', 'arról', 'attól', 'az', 'aznap', 'azok', 'azokat', 'azokba', 'azokban', 'azokból', 'azokhoz', 'azokig', 'azokkal', 'azokká', 'azoknak', 'azoknál', 'azokon', 'azokra', 'azokról', 'azoktól', 'azokért', 'azon', 'azonban', 'azonnal', 'azt', 'aztán', 'azután', 'azzal', 'azzá', 'azért', 'bal', 'balra', 'ban', 'be', 'belé', 'beléd', 'beléjük', 'belém', 'belénk', 'belétek', 'belül', 'belőle', 'belőled', 'belőlem', 'belőletek', 'belőlük', 'belőlünk', 'ben', 'benne', 'benned', 'bennem', 'bennetek', 'bennük', 'bennünk', 'bár', 'bárcsak', 'bármilyen', 'búcsú', 'cikk', 'cikkek', 'cikkeket', 'csak', 'csakhogy', 'csupán', 'de', 'dehogy', 'e', 'ebbe', 'ebben', 'ebből', 'eddig', 'egy', 'egyebek', 'egyebet', 'egyedül', 'egyelőre', 'egyes', 'egyet', 'egyetlen', 'egyik', 'egymás', 'egyre', 'egyszerre', 'egyéb', 'együtt', 'egész', 'egészen', 'ehhez', 'ekkor', 'el', 'eleinte', 'ellen', 'ellenes', 'elleni', 'ellenére', 'elmondta', 'első', 'elsők', 'elsősorban', 'elsőt', 'elé', 'eléd', 'elég', 'eléjük', 'elém', 'elénk', 'elétek', 'elő', 'előbb', 'elől', 'előle', 'előled', 'előlem', 'előletek', 'előlük', 'előlünk', 'először', 'előtt', 'előtte', 'előtted', 'előttem', 'előttetek', 'előttük', 'előttünk', 'előző', 'emilyen', 'engem', 'ennek', 'ennyi', 'ennél', 'enyém', 'erre', 'erről', 'esetben', 'ettől', 'ez', 'ezek', 'ezekbe', 'ezekben', 'ezekből', 'ezeken', 'ezeket', 'ezekhez', 'ezekig', 'ezekkel', 'ezekké', 'ezeknek', 'ezeknél', 'ezekre', 'ezekről', 'ezektől', 'ezekért', 'ezen', 'ezentúl', 'ezer', 'ezret', 'ezt', 'ezután', 'ezzel', 'ezzé', 'ezért', 'fel', 'fele', 'felek', 'felet', 'felett', 'felé', 'fent', 'fenti', 'fél', 'fölé', 'gyakran', 'ha', 'halló', 'hamar', 'hanem', 'harmadik', 'harmadikat', 'harminc', 'hat', 'hatodik', 'hatodikat', 'hatot', 'hatvan', 'helyett', 'hetedik', 'hetediket', 'hetet', 'hetven', 'hirtelen', 'hiszen', 'hiába', 'hogy', 'hogyan', 'hol', 'holnap', 'holnapot', 'honnan', 'hova', 'hozzá', 'hozzád', 'hozzájuk', 'hozzám', 'hozzánk', 'hozzátok', 'hurrá', 'huszadik', 'hány', 'hányszor', 'hármat', 'három', 'hát', 'hátha', 'hátulsó', 'hét', 'húsz', 'ide', 'ide-оda', 'idén', 'igazán', 'igen', 'ill', 'illetve', 'ilyen', 'ilyenkor', 'immár', 'inkább', 'is', 'ismét', 'ison', 'itt', 'jelenleg', 'jobban', 'jobbra', 'jó', 'jól', 'jólesik', 'jóval', 'jövőre', 'kell', 'kellene', 'kellett', 'kelljen', 'keressünk', 'keresztül', 'ketten', 'kettő', 'kettőt', 'kevés', 'ki', 'kiben', 'kiből', 'kicsit', 'kicsoda', 'kihez', 'kik', 'kikbe', 'kikben', 'kikből', 'kiken', 'kiket', 'kikhez', 'kikkel', 'kikké', 'kiknek', 'kiknél', 'kikre', 'kikről', 'kiktől', 'kikért', 'kilenc', 'kilencedik', 'kilencediket', 'kilencet', 'kilencven', 'kin', 'kinek', 'kinél', 'kire', 'kiről', 'kit', 'kitől', 'kivel', 'kivé', 'kié', 'kiért', 'korábban', 'képest', 'kérem', 'kérlek', 'kész', 'késő', 'később', 'későn', 'két', 'kétszer', 'kívül', 'körül', 'köszönhetően', 'köszönöm', 'közben', 'közel', 'közepesen', 'közepén', 'közé', 'között', 'közül', 'külön', 'különben', 'különböző', 'különbözőbb', 'különbözőek', 'lassan', 'le', 'legalább', 'legyen', 'lehet', 'lehetetlen', 'lehetett', 'lehetőleg', 'lehetőség', 'lenne', 'lenni', 'lennék', 'lennének', 'lesz', 'leszek', 'lesznek', 'leszünk', 'lett', 'lettek', 'lettem', 'lettünk', 'lévő', 'ma', 'maga', 'magad', 'magam', 'magatokat', 'magukat', 'magunkat', 'magát', 'mai', 'majd', 'majdnem', 'manapság', 'meg', 'megcsinál', 'megcsinálnak', 'megint', 'megvan', 'mellett', 'mellette', 'melletted', 'mellettem', 'mellettetek', 'mellettük', 'mellettünk', 'mellé', 'melléd', 'melléjük', 'mellém', 'mellénk', 'mellétek', 'mellől', 'mellőle', 'mellőled', 'mellőlem', 'mellőletek', 'mellőlük', 'mellőlünk', 'mely', 'melyek', 'melyik', 'mennyi', 'mert', 'mi', 'miatt', 'miatta', 'miattad', 'miattam', 'miattatok', 'miattuk', 'miattunk', 'mibe', 'miben', 'miből', 'mihez', 'mik', 'mikbe', 'mikben', 'mikből', 'miken', 'miket', 'mikhez', 'mikkel', 'mikké', 'miknek', 'miknél', 'mikor', 'mikre', 'mikről', 'miktől', 'mikért', 'milyen', 'min', 'mind', 'mindegyik', 'mindegyiket', 'minden', 'mindenesetre', 'mindenki', 'mindent', 'mindenütt', 'mindig', 'mindketten', 'minek', 'minket', 'mint', 'mintha', 'minél', 'mire', 'miről', 'mit', 'mitől', 'mivel', 'mivé', 'miért', 'mondta', 'most', 'mostanáig', 'már', 'más', 'másik', 'másikat', 'másnap', 'második', 'másodszor', 'mások', 'másokat', 'mást', 'még', 'mégis', 'míg', 'mögé', 'mögéd', 'mögéjük', 'mögém', 'mögénk', 'mögétek', 'mögött', 'mögötte', 'mögötted', 'mögöttem', 'mögöttetek', 'mögöttük', 'mögöttünk', 'mögül', 'mögüle', 'mögüled', 'mögülem', 'mögületek', 'mögülük', 'mögülünk', 'múltkor', 'múlva', 'na', 'nagy', 'nagyobb', 'nagyon', 'naponta', 'napot', 'ne', 'negyedik', 'negyediket', 'negyven', 'neked', 'nekem', 'neki', 'nekik', 'nektek', 'nekünk', 'nem', 'nemcsak', 'nemrég', 'nincs', 'nyolc', 'nyolcadik', 'nyolcadikat', 'nyolcat', 'nyolcvan', 'nála', 'nálad', 'nálam', 'nálatok', 'náluk', 'nálunk', 'négy', 'négyet', 'néha', 'néhány', 'nélkül', 'o', 'oda', 'ok', 'olyan', 'onnan', 'ott', 'pedig', 'persze', 'pár', 'például', 'rajta', 'rajtad', 'rajtam', 'rajtatok', 'rajtuk', 'rajtunk', 'rendben', 'rosszul', 'rá', 'rád', 'rájuk', 'rám', 'ránk', 'rátok', 'régen', 'régóta', 'részére', 'róla', 'rólad', 'rólam', 'rólatok', 'róluk', 'rólunk', 'rögtön', 's', 'saját', 'se', 'sem', 'semmi', 'semmilyen', 'semmiség', 'senki', 'soha', 'sok', 'sokan', 'sokat', 'sokkal', 'sokszor', 'sokáig', 'során', 'stb.', 'szemben', 'szerbusz', 'szerint', 'szerinte', 'szerinted', 'szerintem', 'szerintetek', 'szerintük', 'szerintünk', 'szervusz', 'szinte', 'számára', 'száz', 'századik', 'százat', 'szépen', 'szét', 'szíves', 'szívesen', 'szíveskedjék', 'sőt', 'talán', 'tavaly', 'te', 'tegnap', 'tegnapelőtt', 'tehát', 'tele', 'teljes', 'tessék', 'ti', 'tied', 'titeket', 'tizedik', 'tizediket', 'tizenegy', 'tizenegyedik', 'tizenhat', 'tizenhárom', 'tizenhét', 'tizenkettedik', 'tizenkettő', 'tizenkilenc', 'tizenkét', 'tizennyolc', 'tizennégy', 'tizenöt', 'tizet', 'tovább', 'további', 'továbbá', 'távol', 'téged', 'tényleg', 'tíz', 'több', 'többi', 'többször', 'túl', 'tőle', 'tőled', 'tőlem', 'tőletek', 'tőlük', 'tőlünk', 'ugyanakkor', 'ugyanez', 'ugyanis', 'ugye', 'urak', 'uram', 'urat', 'utoljára', 'utolsó', 'után', 'utána', 'vagy', 'vagyis', 'vagyok', 'vagytok', 'vagyunk', 'vajon', 'valahol', 'valaki', 'valakit', 'valamelyik', 'valami', 'valamint', 'való', 'van', 'vannak', 'vele', 'veled', 'velem', 'veletek', 'velük', 'velünk', 'vissza', 'viszlát', 'viszont', 'viszontlátásra', 'volna', 'volnának', 'volnék', 'volt', 'voltak', 'voltam', 'voltunk', 'végre', 'végén', 'végül', 'által', 'általában', 'ám', 'át', 'éljen', 'én', 'éppen', 'érte', 'érted', 'értem', 'értetek', 'értük', 'értünk', 'és', 'év', 'évben', 'éve', 'évek', 'éves', 'évi', 'évvel', 'így', 'óta', 'ön', 'önbe', 'önben', 'önből', 'önhöz', 'önnek', 'önnel', 'önnél', 'önre', 'önről', 'önt', 'öntől', 'önért', 'önök', 'önökbe', 'önökben', 'önökből', 'önöket', 'önökhöz', 'önökkel', 'önöknek', 'önöknél', 'önökre', 'önökről', 'önöktől', 'önökért', 'önökön', 'önön', 'össze', 'öt', 'ötven', 'ötödik', 'ötödiket', 'ötöt', 'úgy', 'úgyis', 'úgynevezett', 'új', 'újabb', 'újra', 'úr', 'ő', 'ők', 'őket', 'őt']

// tell the world about the noise words.
exports.words = words

},{}],112:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = [
  'այդ', 'այլ', 'այն', 'այս', 'դու', 'դուք', 'եմ', 'են', 'ենք', 'ես', 'եք', 'է',
  'էի', 'էին', 'էինք', 'էիր', 'էիք', 'էր', 'ըստ', 'թ', 'ի', 'ին', 'իսկ', 'իր',
  'կամ', 'համար', 'հետ', 'հետո', 'մենք', 'մեջ', 'մի', 'ն', 'նա', 'նաև', 'նրա',
  'նրանք', 'որ', 'որը', 'որոնք', 'որպես', 'ու', 'ում', 'պիտի', 'վրա', 'և'
]

// tell the world about the noise words.
exports.words = words

},{}],113:[function(require,module,exports){
/*
Copyright (c) 2019, Luthfi Azhari

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Originates from: https://github.com/stopwords-iso/stopwords-hi/
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'ada',
  'adalah',
  'adanya',
  'adapun',
  'agak',
  'agaknya',
  'agar',
  'akan',
  'akankah',
  'akhir',
  'akhiri',
  'akhirnya',
  'aku',
  'akulah',
  'amat',
  'amatlah',
  'anda',
  'andalah',
  'antar',
  'antara',
  'antaranya',
  'apa',
  'apaan',
  'apabila',
  'apakah',
  'apalagi',
  'apatah',
  'artinya',
  'asal',
  'asalkan',
  'atas',
  'atau',
  'ataukah',
  'ataupun',
  'awal',
  'awalnya',
  'bagai',
  'bagaikan',
  'bagaimana',
  'bagaimanakah',
  'bagaimanapun',
  'bagi',
  'bagian',
  'bahkan',
  'bahwa',
  'bahwasanya',
  'bakal',
  'bakalan',
  'balik',
  'banyak',
  'bapak',
  'baru',
  'bawah',
  'beberapa',
  'begini',
  'beginian',
  'beginikah',
  'beginilah',
  'begitu',
  'begitukah',
  'begitulah',
  'begitupun',
  'bekerja',
  'belakang',
  'belakangan',
  'belum',
  'belumlah',
  'benar',
  'benarkah',
  'benarlah',
  'berada',
  'berakhir',
  'berakhirlah',
  'berakhirnya',
  'berapa',
  'berapakah',
  'berapalah',
  'berapapun',
  'berarti',
  'berawal',
  'berbagai',
  'berdatangan',
  'beri',
  'berikan',
  'berikut',
  'berikutnya',
  'berjumlah',
  'berkali-kali',
  'berkata',
  'berkehendak',
  'berkeinginan',
  'berkenaan',
  'berlainan',
  'berlalu',
  'berlangsung',
  'berlebihan',
  'bermacam',
  'bermacam-macam',
  'bermaksud',
  'bermula',
  'bersama',
  'bersama-sama',
  'bersiap',
  'bersiap-siap',
  'bertanya',
  'bertanya-tanya',
  'berturut',
  'berturut-turut',
  'bertutur',
  'berujar',
  'berupa',
  'besar',
  'betul',
  'betulkah',
  'biasa',
  'biasanya',
  'bila',
  'bilakah',
  'bisa',
  'bisakah',
  'boleh',
  'bolehkah',
  'bolehlah',
  'buat',
  'bukan',
  'bukankah',
  'bukanlah',
  'bukannya',
  'bulan',
  'bung',
  'cara',
  'caranya',
  'cukup',
  'cukupkah',
  'cukuplah',
  'cuma',
  'dahulu',
  'dalam',
  'dan',
  'dapat',
  'dari',
  'daripada',
  'datang',
  'dekat',
  'demi',
  'demikian',
  'demikianlah',
  'dengan',
  'depan',
  'di',
  'dia',
  'diakhiri',
  'diakhirinya',
  'dialah',
  'diantara',
  'diantaranya',
  'diberi',
  'diberikan',
  'diberikannya',
  'dibuat',
  'dibuatnya',
  'didapat',
  'didatangkan',
  'digunakan',
  'diibaratkan',
  'diibaratkannya',
  'diingat',
  'diingatkan',
  'diinginkan',
  'dijawab',
  'dijelaskan',
  'dijelaskannya',
  'dikarenakan',
  'dikatakan',
  'dikatakannya',
  'dikerjakan',
  'diketahui',
  'diketahuinya',
  'dikira',
  'dilakukan',
  'dilalui',
  'dilihat',
  'dimaksud',
  'dimaksudkan',
  'dimaksudkannya',
  'dimaksudnya',
  'diminta',
  'dimintai',
  'dimisalkan',
  'dimulai',
  'dimulailah',
  'dimulainya',
  'dimungkinkan',
  'dini',
  'dipastikan',
  'diperbuat',
  'diperbuatnya',
  'dipergunakan',
  'diperkirakan',
  'diperlihatkan',
  'diperlukan',
  'diperlukannya',
  'dipersoalkan',
  'dipertanyakan',
  'dipunyai',
  'diri',
  'dirinya',
  'disampaikan',
  'disebut',
  'disebutkan',
  'disebutkannya',
  'disini',
  'disinilah',
  'ditambahkan',
  'ditandaskan',
  'ditanya',
  'ditanyai',
  'ditanyakan',
  'ditegaskan',
  'ditujukan',
  'ditunjuk',
  'ditunjuki',
  'ditunjukkan',
  'ditunjukkannya',
  'ditunjuknya',
  'dituturkan',
  'dituturkannya',
  'diucapkan',
  'diucapkannya',
  'diungkapkan',
  'dong',
  'dulu',
  'empat',
  'enggak',
  'enggaknya',
  'entah',
  'entahlah',
  'guna',
  'gunakan',
  'hal',
  'hampir',
  'hanya',
  'hanyalah',
  'harus',
  'haruslah',
  'harusnya',
  'hendak',
  'hendaklah',
  'hendaknya',
  'hingga',
  'ia',
  'ialah',
  'ibarat',
  'ibaratkan',
  'ibaratnya',
  'ikut',
  'ingat',
  'ingat-ingat',
  'ingin',
  'inginkah',
  'inginkan',
  'ini',
  'inikah',
  'inilah',
  'itu',
  'itukah',
  'itulah',
  'jadi',
  'jadilah',
  'jadinya',
  'jangan',
  'jangankan',
  'janganlah',
  'jauh',
  'jawab',
  'jawaban',
  'jawabnya',
  'jelas',
  'jelaskan',
  'jelaslah',
  'jelasnya',
  'jika',
  'jikalau',
  'juga',
  'jumlah',
  'jumlahnya',
  'justru',
  'kala',
  'kalau',
  'kalaulah',
  'kalaupun',
  'kalian',
  'kami',
  'kamilah',
  'kamu',
  'kamulah',
  'kan',
  'kapan',
  'kapankah',
  'kapanpun',
  'karena',
  'karenanya',
  'kasus',
  'kata',
  'katakan',
  'katakanlah',
  'katanya',
  'ke',
  'keadaan',
  'kebetulan',
  'kecil',
  'kedua',
  'keduanya',
  'keinginan',
  'kelamaan',
  'kelihatan',
  'kelihatannya',
  'kelima',
  'keluar',
  'kembali',
  'kemudian',
  'kemungkinan',
  'kemungkinannya',
  'kenapa',
  'kepada',
  'kepadanya',
  'kesampaian',
  'keseluruhan',
  'keseluruhannya',
  'keterlaluan',
  'ketika',
  'khususnya',
  'kini',
  'kinilah',
  'kira',
  'kira-kira',
  'kiranya',
  'kita',
  'kitalah',
  'kok',
  'kurang',
  'lagi',
  'lagian',
  'lah',
  'lain',
  'lainnya',
  'lalu',
  'lama',
  'lamanya',
  'lanjut',
  'lanjutnya',
  'lebih',
  'lewat',
  'lima',
  'luar',
  'macam',
  'maka',
  'makanya',
  'makin',
  'malah',
  'malahan',
  'mampu',
  'mampukah',
  'mana',
  'manakala',
  'manalagi',
  'masa',
  'masalah',
  'masalahnya',
  'masih',
  'masihkah',
  'masing',
  'masing-masing',
  'mau',
  'maupun',
  'melainkan',
  'melakukan',
  'melalui',
  'melihat',
  'melihatnya',
  'memang',
  'memastikan',
  'memberi',
  'memberikan',
  'membuat',
  'memerlukan',
  'memihak',
  'meminta',
  'memintakan',
  'memisalkan',
  'memperbuat',
  'mempergunakan',
  'memperkirakan',
  'memperlihatkan',
  'mempersiapkan',
  'mempersoalkan',
  'mempertanyakan',
  'mempunyai',
  'memulai',
  'memungkinkan',
  'menaiki',
  'menambahkan',
  'menandaskan',
  'menanti',
  'menanti-nanti',
  'menantikan',
  'menanya',
  'menanyai',
  'menanyakan',
  'mendapat',
  'mendapatkan',
  'mendatang',
  'mendatangi',
  'mendatangkan',
  'menegaskan',
  'mengakhiri',
  'mengapa',
  'mengatakan',
  'mengatakannya',
  'mengenai',
  'mengerjakan',
  'mengetahui',
  'menggunakan',
  'menghendaki',
  'mengibaratkan',
  'mengibaratkannya',
  'mengingat',
  'mengingatkan',
  'menginginkan',
  'mengira',
  'mengucapkan',
  'mengucapkannya',
  'mengungkapkan',
  'menjadi',
  'menjawab',
  'menjelaskan',
  'menuju',
  'menunjuk',
  'menunjuki',
  'menunjukkan',
  'menunjuknya',
  'menurut',
  'menuturkan',
  'menyampaikan',
  'menyangkut',
  'menyatakan',
  'menyebutkan',
  'menyeluruh',
  'menyiapkan',
  'merasa',
  'mereka',
  'merekalah',
  'merupakan',
  'meski',
  'meskipun',
  'meyakini',
  'meyakinkan',
  'minta',
  'mirip',
  'misal',
  'misalkan',
  'misalnya',
  'mula',
  'mulai',
  'mulailah',
  'mulanya',
  'mungkin',
  'mungkinkah',
  'nah',
  'naik',
  'namun',
  'nanti',
  'nantinya',
  'nyaris',
  'nyatanya',
  'oleh',
  'olehnya',
  'pada',
  'padahal',
  'padanya',
  'paling',
  'panjang',
  'pantas',
  'para',
  'pasti',
  'pastilah',
  'penting',
  'pentingnya',
  'per',
  'percuma',
  'perlu',
  'perlukah',
  'perlunya',
  'pernah',
  'persoalan',
  'pertama',
  'pertama-tama',
  'pertanyaan',
  'pertanyakan',
  'pihak',
  'pihaknya',
  'pukul',
  'pula',
  'pun',
  'punya',
  'rasa',
  'rasanya',
  'rata',
  'rupanya',
  'saat',
  'saatnya',
  'saja',
  'sajalah',
  'saling',
  'sama',
  'sama-sama',
  'sambil',
  'sampai',
  'sampai-sampai',
  'sampaikan',
  'sana',
  'sangat',
  'sangatlah',
  'satu',
  'saya',
  'sayalah',
  'se',
  'sebab',
  'sebabnya',
  'sebagai',
  'sebagaimana',
  'sebagainya',
  'sebagian',
  'sebaik',
  'sebaik-baiknya',
  'sebaiknya',
  'sebaliknya',
  'sebanyak',
  'sebegini',
  'sebegitu',
  'sebelum',
  'sebelumnya',
  'sebenarnya',
  'seberapa',
  'sebesar',
  'sebetulnya',
  'sebisanya',
  'sebuah',
  'sebut',
  'sebutlah',
  'sebutnya',
  'secara',
  'secukupnya',
  'sedang',
  'sedangkan',
  'sedemikian',
  'sedikit',
  'sedikitnya',
  'seenaknya',
  'segala',
  'segalanya',
  'segera',
  'seharusnya',
  'sehingga',
  'seingat',
  'sejak',
  'sejauh',
  'sejenak',
  'sejumlah',
  'sekadar',
  'sekadarnya',
  'sekali',
  'sekali-kali',
  'sekalian',
  'sekaligus',
  'sekalipun',
  'sekarang',
  'sekarang',
  'sekecil',
  'seketika',
  'sekiranya',
  'sekitar',
  'sekitarnya',
  'sekurang-kurangnya',
  'sekurangnya',
  'sela',
  'selain',
  'selaku',
  'selalu',
  'selama',
  'selama-lamanya',
  'selamanya',
  'selanjutnya',
  'seluruh',
  'seluruhnya',
  'semacam',
  'semakin',
  'semampu',
  'semampunya',
  'semasa',
  'semasih',
  'semata',
  'semata-mata',
  'semaunya',
  'sementara',
  'semisal',
  'semisalnya',
  'sempat',
  'semua',
  'semuanya',
  'semula',
  'sendiri',
  'sendirian',
  'sendirinya',
  'seolah',
  'seolah-olah',
  'seorang',
  'sepanjang',
  'sepantasnya',
  'sepantasnyalah',
  'seperlunya',
  'seperti',
  'sepertinya',
  'sepihak',
  'sering',
  'seringnya',
  'serta',
  'serupa',
  'sesaat',
  'sesama',
  'sesampai',
  'sesegera',
  'sesekali',
  'seseorang',
  'sesuatu',
  'sesuatunya',
  'sesudah',
  'sesudahnya',
  'setelah',
  'setempat',
  'setengah',
  'seterusnya',
  'setiap',
  'setiba',
  'setibanya',
  'setidak-tidaknya',
  'setidaknya',
  'setinggi',
  'seusai',
  'sewaktu',
  'siap',
  'siapa',
  'siapakah',
  'siapapun',
  'sini',
  'sinilah',
  'soal',
  'soalnya',
  'suatu',
  'sudah',
  'sudahkah',
  'sudahlah',
  'supaya',
  'tadi',
  'tadinya',
  'tahu',
  'tahun',
  'tak',
  'tambah',
  'tambahnya',
  'tampak',
  'tampaknya',
  'tandas',
  'tandasnya',
  'tanpa',
  'tanya',
  'tanyakan',
  'tanyanya',
  'tapi',
  'tegas',
  'tegasnya',
  'telah',
  'tempat',
  'tengah',
  'tentang',
  'tentu',
  'tentulah',
  'tentunya',
  'tepat',
  'terakhir',
  'terasa',
  'terbanyak',
  'terdahulu',
  'terdapat',
  'terdiri',
  'terhadap',
  'terhadapnya',
  'teringat',
  'teringat-ingat',
  'terjadi',
  'terjadilah',
  'terjadinya',
  'terkira',
  'terlalu',
  'terlebih',
  'terlihat',
  'termasuk',
  'ternyata',
  'tersampaikan',
  'tersebut',
  'tersebutlah',
  'tertentu',
  'tertuju',
  'terus',
  'terutama',
  'tetap',
  'tetapi',
  'tiap',
  'tiba',
  'tiba-tiba',
  'tidak',
  'tidakkah',
  'tidaklah',
  'tiga',
  'tinggi',
  'toh',
  'tunjuk',
  'turut',
  'tutur',
  'tuturnya',
  'ucap',
  'ucapnya',
  'ujar',
  'ujarnya',
  'umum',
  'umumnya',
  'ungkap',
  'ungkapnya',
  'untuk',
  'usah',
  'usai',
  'waduh',
  'wah',
  'wahai',
  'waktu',
  'waktunya',
  'walau',
  'walaupun',
  'wong',
  'yaitu',
  'yakin',
  'yakni',
  'yang'
];
// tell the world about the noise words.
exports.words = words;

},{}],114:[function(require,module,exports){
/*
Copyright (c) 2011, David Przybilla, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'ad', 'al', 'allo', 'ai', 'agli', 'all', 'agl', 'alla', 'alle', 'con', 'col', 'coi', 'da', 'dal', 'dallo',
  'dai', 'dagli', 'dall', 'dagl', 'dalla', 'dalle', 'di', 'del', 'dello', 'dei', 'degli', 'dell', 'degl',
  'della', 'delle', 'in', 'nel', 'nello', 'nei', 'negli', 'nell', 'negl', 'nella', 'nelle', 'su', 'sul',
  'sullo', 'sui', 'sugli', 'sull', 'sugl', 'sulla', 'sulle', 'per', 'tra', 'contro', 'io', 'tu', 'lui',
  'lei', 'noi', 'voi', 'loro', 'mio', 'mia', 'miei', 'mie', 'tuo', 'tua', 'tuoi', 'tue', 'suo', 'sua', 'suoi',
  'sue', 'nostro', 'nostra', 'nostri', 'nostre', 'vostro', 'vostra', 'vostri', 'vostre', 'mi', 'ti', 'ci',
  'vi', 'lo', 'la', 'li', 'le', 'gli', 'ne', 'il', 'un', 'uno', 'una', 'ma', 'ed', 'se', 'perché', 'anche', 'come',
  'dov', 'dove', 'che', 'chi', 'cui', 'non', 'più', 'quale', 'quanto', 'quanti', 'quanta', 'quante', 'quello',
  'quelli', 'quella', 'quelle', 'questo', 'questi', 'questa', 'queste', 'si', 'tutto', 'tutti', 'a', 'c', 'e',
  'i', 'l', 'o', 'ho', 'hai', 'ha', 'abbiamo', 'avete', 'hanno', 'abbia', 'abbiate', 'abbiano', 'avrò', 'avrai',
  'avrà', 'avremo', 'avrete', 'avranno', 'avrei', 'avresti', 'avrebbe', 'avremmo', 'avreste', 'avrebbero',
  'avevo', 'avevi', 'aveva', 'avevamo', 'avevate', 'avevano', 'ebbi', 'avesti', 'ebbe', 'avemmo', 'aveste',
  'ebbero', 'avessi', 'avesse', 'avessimo', 'avessero', 'avendo', 'avuto', 'avuta', 'avuti', 'avute', 'sono',
  'sei', 'è', 'siamo', 'siete', 'sia', 'siate', 'siano', 'sarò', 'sarai', 'sarà', 'saremo', 'sarete', 'saranno',
  'sarei', 'saresti', 'sarebbe', 'saremmo', 'sareste', 'sarebbero', 'ero', 'eri', 'era', 'eravamo', 'eravate',
  'erano', 'fui', 'fosti', 'fu', 'fummo', 'foste', 'furono', 'fossi', 'fosse', 'fossimo', 'fossero', 'essendo',
  'faccio', 'fai', 'facciamo', 'fanno', 'faccia', 'facciate', 'facciano', 'farò', 'farai', 'farà', 'faremo',
  'farete', 'faranno', 'farei', 'faresti', 'farebbe', 'faremmo', 'fareste', 'farebbero', 'facevo', 'facevi',
  'faceva', 'facevamo', 'facevate', 'facevano', 'feci', 'facesti', 'fece', 'facemmo', 'faceste', 'fecero',
  'facessi', 'facesse', 'facessimo', 'facessero', 'facendo', 'sto', 'stai', 'sta', 'stiamo', 'stanno', 'stia',
  'stiate', 'stiano', 'starò', 'starai', 'starà', 'staremo', 'starete', 'staranno', 'starei', 'staresti',
  'starebbe', 'staremmo', 'stareste', 'starebbero', 'stavo', 'stavi', 'stava', 'stavamo', 'stavate', 'stavano',
  'stetti', 'stesti', 'stette', 'stemmo', 'steste', 'stettero', 'stessi', 'stesse', 'stessimo', 'stessero', 'stando',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_']

// tell the world about the noise words.
exports.words = words

},{}],115:[function(require,module,exports){
// Original copyright:
/*
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// This version:
/*
Copyright (c) 2012, Guillaume Marty

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
// Original location:
// http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/resources/org/apache/lucene/analysis/ja/stopwords.txt
var words = ['の', 'に', 'は', 'を', 'た', 'が', 'で', 'て', 'と', 'し', 'れ', 'さ',
  'ある', 'いる', 'も', 'する', 'から', 'な', 'こと', 'として', 'い', 'や', 'れる',
  'など', 'なっ', 'ない', 'この', 'ため', 'その', 'あっ', 'よう', 'また', 'もの',
  'という', 'あり', 'まで', 'られ', 'なる', 'へ', 'か', 'だ', 'これ', 'によって',
  'により', 'おり', 'より', 'による', 'ず', 'なり', 'られる', 'において', 'ば', 'なかっ',
  'なく', 'しかし', 'について', 'せ', 'だっ', 'その後', 'できる', 'それ', 'う', 'ので',
  'なお', 'のみ', 'でき', 'き', 'つ', 'における', 'および', 'いう', 'さらに', 'でも',
  'ら', 'たり', 'その他', 'に関する', 'たち', 'ます', 'ん', 'なら', 'に対して', '特に',
  'せる', '及び', 'これら', 'とき', 'では', 'にて', 'ほか', 'ながら', 'うち', 'そして',
  'とともに', 'ただし', 'かつて', 'それぞれ', 'または', 'お', 'ほど', 'ものの', 'に対する',
  'ほとんど', 'と共に', 'といった', 'です', 'とも', 'ところ', 'ここ']

// tell the world about the noise words.
exports.words = words

},{}],116:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '０', '１', '２', '３', '４', '５', '６', '７', '８', '９', '가', '가까스로', '가령', '각', '각각', '각자', '각종', '갖고말하자면', '같다', '같이', '개의치않고', '거니와', '거바', '거의', '것', '것과 같이', '것들', '게다가', '게우다', '겨우', '견지에서', '결과에 이르다', '결국', '결론을 낼 수 있다', '겸사겸사', '고려하면', '고로', '곧', '공동으로', '과', '과연', '관계가 있다', '관계없이', '관련이 있다', '관하여', '관한', '관해서는', '구', '구체적으로', '구토하다', '그', '그들', '그때', '그래', '그래도', '그래서', '그러나', '그러니', '그러니까', '그러면', '그러므로', '그러한즉', '그런 까닭에', '그런데', '그런즉', '그럼', '그럼에도 불구하고', '그렇게 함으로써', '그렇지', '그렇지 않다면', '그렇지 않으면', '그렇지만', '그렇지않으면', '그리고', '그리하여', '그만이다', '그에 따르는', '그위에', '그저', '그중에서', '그치지 않다', '근거로', '근거하여', '기대여', '기점으로', '기준으로', '기타', '까닭으로', '까악', '까지', '까지 미치다', '까지도', '꽈당', '끙끙', '끼익', '나', '나머지는', '남들', '남짓', '너', '너희', '너희들', '네', '넷', '년', '논하지 않다', '놀라다', '누가 알겠는가', '누구', '다른', '다른 방면으로', '다만', '다섯', '다소', '다수', '다시 말하자면', '다시말하면', '다음', '다음에', '다음으로', '단지', '답다', '당신', '당장', '대로 하다', '대하면', '대하여', '대해 말하자면', '대해서', '댕그', '더구나', '더군다나', '더라도', '더불어', '더욱더', '더욱이는', '도달하다', '도착하다', '동시에', '동안', '된바에야', '된이상', '두번째로', '둘', '둥둥', '뒤따라', '뒤이어', '든간에', '들', '등', '등등', '딩동', '따라', '따라서', '따위', '따지지 않다', '딱', '때', '때가 되어', '때문에', '또', '또한', '뚝뚝', '라 해도', '령', '로', '로 인하여', '로부터', '로써', '륙', '를', '마음대로', '마저', '마저도', '마치', '막론하고', '만 못하다', '만약', '만약에', '만은 아니다', '만이 아니다', '만일', '만큼', '말하자면', '말할것도 없고', '매', '매번', '메쓰겁다', '몇', '모', '모두', '무렵', '무릎쓰고', '무슨', '무엇', '무엇때문에', '물론', '및', '바꾸어말하면', '바꾸어말하자면', '바꾸어서 말하면', '바꾸어서 한다면', '바꿔 말하면', '바로', '바와같이', '밖에 안된다', '반대로', '반대로 말하자면', '반드시', '버금', '보는데서', '보다더', '보드득', '본대로', '봐', '봐라', '부류의 사람들', '부터', '불구하고', '불문하고', '붕붕', '비걱거리다', '비교적', '비길수 없다', '비로소', '비록', '비슷하다', '비추어 보아', '비하면', '뿐만 아니라', '뿐만아니라', '뿐이다', '삐걱', '삐걱거리다', '사', '삼', '상대적으로 말하자면', '생각한대로', '설령', '설마', '설사', '셋', '소생', '소인', '솨', '쉿', '습니까', '습니다', '시각', '시간', '시작하여', '시초에', '시키다', '실로', '심지어', '아', '아니', '아니나다를가', '아니라면', '아니면', '아니었다면', '아래윗', '아무거나', '아무도', '아야', '아울러', '아이', '아이고', '아이구', '아이야', '아이쿠', '아하', '아홉', '안 그러면', '않기 위하여', '않기 위해서', '알 수 있다', '알았어', '앗', '앞에서', '앞의것', '야', '약간', '양자', '어', '어기여차', '어느', '어느 년도', '어느것', '어느곳', '어느때', '어느쪽', '어느해', '어디', '어때', '어떠한', '어떤', '어떤것', '어떤것들', '어떻게', '어떻해', '어이', '어째서', '어쨋든', '어쩔수 없다', '어찌', '어찌됏든', '어찌됏어', '어찌하든지', '어찌하여', '언제', '언젠가', '얼마', '얼마 안 되는 것', '얼마간', '얼마나', '얼마든지', '얼마만큼', '얼마큼', '엉엉', '에', '에 가서', '에 달려 있다', '에 대해', '에 있다', '에 한하다', '에게', '에서', '여', '여기', '여덟', '여러분', '여보시오', '여부', '여섯', '여전히', '여차', '연관되다', '연이서', '영', '영차', '옆사람', '예', '예를 들면', '예를 들자면', '예컨대', '예하면', '오', '오로지', '오르다', '오자마자', '오직', '오호', '오히려', '와', '와 같은 사람들', '와르르', '와아', '왜', '왜냐하면', '외에도', '요만큼', '요만한 것', '요만한걸', '요컨대', '우르르', '우리', '우리들', '우선', '우에 종합한것과같이', '운운', '월', '위에서 서술한바와같이', '위하여', '위해서', '윙윙', '육', '으로', '으로 인하여', '으로서', '으로써', '을', '응', '응당', '의', '의거하여', '의지하여', '의해', '의해되다', '의해서', '이', '이 되다', '이 때문에', '이 밖에', '이 외에', '이 정도의', '이것', '이곳', '이때', '이라면', '이래', '이러이러하다', '이러한', '이런', '이럴정도로', '이렇게 많은 것', '이렇게되면', '이렇게말하자면', '이렇구나', '이로 인하여', '이르기까지', '이리하여', '이만큼', '이번', '이봐', '이상', '이어서', '이었다', '이와 같다', '이와 같은', '이와 반대로', '이와같다면', '이외에도', '이용하여', '이유만으로', '이젠', '이지만', '이쪽', '이천구', '이천육', '이천칠', '이천팔', '인 듯하다', '인젠', '일', '일것이다', '일곱', '일단', '일때', '일반적으로', '일지라도', '임에 틀림없다', '입각하여', '입장에서', '잇따라', '있다', '자', '자기', '자기집', '자마자', '자신', '잠깐', '잠시', '저', '저것', '저것만큼', '저기', '저쪽', '저희', '전부', '전자', '전후', '점에서 보아', '정도에 이르다', '제', '제각기', '제외하고', '조금', '조차', '조차도', '졸졸', '좀', '좋아', '좍좍', '주룩주룩', '주저하지 않고', '줄은 몰랏다', '줄은모른다', '중에서', '중의하나', '즈음하여', '즉', '즉시', '지든지', '지만', '지말고', '진짜로', '쪽으로', '차라리', '참', '참나', '첫번째로', '쳇', '총적으로', '총적으로 말하면', '총적으로 보면', '칠', '콸콸', '쾅쾅', '쿵', '타다', '타인', '탕탕', '토하다', '통하여', '툭', '퉤', '틈타', '팍', '팔', '퍽', '펄렁', '하', '하게될것이다', '하게하다', '하겠는가', '하고 있다', '하고있었다', '하곤하였다', '하구나', '하기 때문에', '하기 위하여', '하기는한데', '하기만 하면', '하기보다는', '하기에', '하나', '하느니', '하는 김에', '하는 편이 낫다', '하는것도', '하는것만 못하다', '하는것이 낫다', '하는바', '하더라도', '하도다', '하도록시키다', '하도록하다', '하든지', '하려고하다', '하마터면', '하면 할수록', '하면된다', '하면서', '하물며', '하여금', '하여야', '하자마자', '하지 않는다면', '하지 않도록', '하지마', '하지마라', '하지만', '하하', '한 까닭에', '한 이유는', '한 후', '한다면', '한다면 몰라도', '한데', '한마디', '한적이있다', '한켠으로는', '한항목', '할 따름이다', '할 생각이다', '할 줄 안다', '할 지경이다', '할 힘이 있다', '할때', '할만하다', '할망정', '할뿐', '할수있다', '할수있어', '할줄알다', '할지라도', '할지언정', '함께', '해도된다', '해도좋다', '해봐요', '해서는 안된다', '해야한다', '해요', '했어요', '향하다', '향하여', '향해서', '허', '허걱', '허허', '헉', '헉헉', '헐떡헐떡', '형식으로 쓰여', '혹시', '혹은', '혼자', '훨씬', '휘익', '휴', '흐흐', '흥', '힘입어', '︿', '～', '￥']

// tell the world about the noise words.
exports.words = words

},{}],117:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'ab', 'ac', 'ad', 'at', 'atque', 'aut', 'autem', 'cum', 'de', 'dum', 'e', 'erant', 'erat', 'est', 'et', 'etiam', 'ex', 'haec', 'hic', 'hoc', 'in', 'ita', 'me', 'nec', 'neque', 'non', 'per', 'qua', 'quae', 'quam', 'qui', 'quibus', 'quidem', 'quo', 'quod', 're', 'rebus', 'rem', 'res', 'sed', 'si', 'sic', 'sunt', 'tamen', 'tandem', 'te', 'ut', 'vel']

// tell the world about the noise words.
exports.words = words

},{}],118:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'ma', 'ni', 'ri', 'eri', 'di', 'yi', 'si', 'ba', 'nga', 'i', 'ra', 'ku', 'be', 'yo', 'da', 'azini',
  'dria', 'ru', 'azi', 'mu', 'te', 'ndra', 'diyi', 'ima', 'mi', 'alu', 'nde', 'alia', 'le', 'vile',
  'dri', 'pati', 'aria', 'bo', 'e\'yo', 'tu', 'kini', 'dii', 'ama', 'eyi', 'dika', 'pi', 'e', 'angu', 
  'e\'do', 'pie', 'ka', 'ti', 'o\'du', 'du'
]


// Tell the world about the noise words.
exports.words = words

},{}],119:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  '́', '̀', 'nɨ', 'mà', 'rɨ', 'dɨ', 'ɨ', '́nɨ', 'èrɨ', '́á\'', 'sɨ', 'àzɨ', 'yɨ', 'rá', 'vɨ',
  'nga', 'be', 'mɨ', 'à', 'dà', 'kʉ', 'bá', ' ́lé', 'má', 'e', 'yo', '̀yɨ', 'ma', 'kɨ', 'àlʉ',
  '́mà', 'rʉ́', 'drɨ', 'patí', 'a', 'è', 'yó', 'te', '̀á', 'mà', 'mâ', 'dálé', 'yí', '̌', 'pɨ',
  'e\'yó', 'ndráa', 'bo', 'di', 'drìá'
]


// Tell the world about the noise words.
exports.words = words

},{}],120:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['aiz', 'ap', 'apakš', 'apakšpus', 'ar', 'arī', 'augšpus', 'bet', 'bez', 'bija', 'biji', 'biju', 'bijām', 'bijāt', 'būs', 'būsi', 'būsiet', 'būsim', 'būt', 'būšu', 'caur', 'diemžēl', 'diezin', 'droši', 'dēļ', 'esam', 'esat', 'esi', 'esmu', 'gan', 'gar', 'iekam', 'iekams', 'iekām', 'iekāms', 'iekš', 'iekšpus', 'ik', 'ir', 'it', 'itin', 'iz', 'ja', 'jau', 'jeb', 'jebšu', 'jel', 'jo', 'jā', 'ka', 'kamēr', 'kaut', 'kolīdz', 'kopš', 'kā', 'kļuva', 'kļuvi', 'kļuvu', 'kļuvām', 'kļuvāt', 'kļūs', 'kļūsi', 'kļūsiet', 'kļūsim', 'kļūst', 'kļūstam', 'kļūstat', 'kļūsti', 'kļūstu', 'kļūt', 'kļūšu', 'labad', 'lai', 'lejpus', 'līdz', 'līdzko', 'ne', 'nebūt', 'nedz', 'nekā', 'nevis', 'nezin', 'no', 'nu', 'nē', 'otrpus', 'pa', 'par', 'pat', 'pie', 'pirms', 'pret', 'priekš', 'pār', 'pēc', 'starp', 'tad', 'tak', 'tapi', 'taps', 'tapsi', 'tapsiet', 'tapsim', 'tapt', 'tapāt', 'tapšu', 'taču', 'te', 'tiec', 'tiek', 'tiekam', 'tiekat', 'tieku', 'tik', 'tika', 'tikai', 'tiki', 'tikko', 'tiklab', 'tiklīdz', 'tiks', 'tiksiet', 'tiksim', 'tikt', 'tiku', 'tikvien', 'tikām', 'tikāt', 'tikšu', 'tomēr', 'topat', 'turpretim', 'turpretī', 'tā', 'tādēļ', 'tālab', 'tāpēc', 'un', 'uz', 'vai', 'var', 'varat', 'varēja', 'varēji', 'varēju', 'varējām', 'varējāt', 'varēs', 'varēsi', 'varēsiet', 'varēsim', 'varēt', 'varēšu', 'vien', 'virs', 'virspus', 'vis', 'viņpus', 'zem', 'ārpus', 'šaipus']

// tell the world about the noise words.
exports.words = words

},{}],121:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['अधिक', 'अनेक', 'अशी', 'असलयाचे', 'असलेल्या', 'असा', 'असून', 'असे', 'आज', 'आणि', 'आता', 'आपल्या', 'आला', 'आली', 'आले', 'आहे', 'आहेत', 'एक', 'एका', 'कमी', 'करणयात', 'करून', 'का', 'काम', 'काय', 'काही', 'किवा', 'की', 'केला', 'केली', 'केले', 'कोटी', 'गेल्या', 'घेऊन', 'जात', 'झाला', 'झाली', 'झाले', 'झालेल्या', 'टा', 'डॉ', 'तर', 'तरी', 'तसेच', 'ता', 'ती', 'तीन', 'ते', 'तो', 'त्या', 'त्याचा', 'त्याची', 'त्याच्या', 'त्याना', 'त्यानी', 'त्यामुळे', 'त्री', 'दिली', 'दोन', 'न', 'नाही', 'निर्ण्य', 'पण', 'पम', 'परयतन', 'पाटील', 'म', 'मात्र', 'माहिती', 'मी', 'मुबी', 'म्हणजे', 'म्हणाले', 'म्हणून', 'या', 'याचा', 'याची', 'याच्या', 'याना', 'यानी', 'येणार', 'येत', 'येथील', 'येथे', 'लाख', 'व', 'व्यकत', 'सर्व', 'सागित्ले', 'सुरू', 'हजार', 'हा', 'ही', 'हे', 'होणार', 'होत', 'होता', 'होती', 'होते']

// tell the world about the noise words.
exports.words = words

},{}],122:[function(require,module,exports){
// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'အပေါ်', 'အနက်', 'အမြဲတမ်း', 'အတွင်းတွင်', 'မကြာမီ', 'မတိုင်မီ', 'ဒါ့အပြင်', 'အောက်မှာ', 'အထဲမှာ', 'ဘယ်တော့မျှ', 'မကြာခဏ',
  'တော်တော်လေး', 'စဉ်တွင်', 'နှင့်အတူ', 'နှင့်', 'နှင့်တကွ', 'ကျွန်တော်', 'ကျွန်မ', 'ငါ', 'ကျုပ်', 'ကျွနု်ပ်', 'ကျနော်', 'ကျမ', 'သူ',
  'သူမ', 'ထိုဟာ', 'ထိုအရာ', 'ဤအရာ', 'ထို', '၄င်း', 'ကျွန်တော်တို့', 'ကျွန်မတို့', 'ငါတို့', 'ကျုပ်တို့', 'ကျွနု်ပ်တို့', 'ကျနော်တို့',
  'ကျမတို့', 'သင်', 'သင်တို့', 'နင်တို့', 'မင်း', 'မင်းတို့', 'သူတို့', 'ကျွန်တော်အား', 'ကျွန်တော်ကို', 'ကျွန်မကို', 'ငါကို', 'ကျုပ်ကို',
  'ကျွနု်ပ်ကို', 'သူ့ကို', 'သူမကို', 'ထိုအရာကို', 'သင့်ကို', 'သင်တို့ကို', 'နင်တို့ကို', 'မင်းကို', 'မင်းတို့ကို', 'ငါတို့ကို', 'ကျုပ်တို့ကို',
  'ကျွနု်ပ်တို့ကို', 'မိမိကိုယ်တိုင်', 'မိမိဘာသာ', 'မင်းကိုယ်တိုင်', 'မင်းဘာသာ', 'မင်းတို့ကိုယ်တိုင်', 'မင်းတို့ဘာသာ', 'သူကိုယ်တိုင်',
  'ကိုယ်တိုင်', 'သူမကိုယ်တိုင်', 'သူ့ဘာသာ', 'သူ့ကိုယ်ကို', 'ကိုယ့်ကိုယ်ကို', 'မိမိကိုယ်ကို', '၄င်းပင်', 'ထိုအရာပင်', 'သည့်', 'မည့်',
  'တဲ့', 'ကျွနု်ပ်၏', 'ကျွန်တော်၏', 'ကျွန်မ၏', 'ကျနော်၏', 'ကျမ၏', 'သူ၏', 'သူမ၏', 'ထိုအရာ၏', 'ထိုဟာ၏', 'ကျွနု်ပ်တို့၏',
  'ငါတို့၏', 'ကျွန်တော်တို့၏', 'ကျွန်မတို့၏', 'ကျနော်တို့၏', 'ကျမတို့၏', 'သင်၏', 'သင်တို့၏', 'မင်း၏', 'မင်းတို့၏', 'သူတို့၏',
  'ကျွန်တော့်ဟာ', 'ကျွန်မဟာ', 'ကျနော်၏ဟာ', 'ကျမ၏ဟာ', 'ကျမဟာ', 'ကျနော်ဟာ', 'သူဟာ', 'သူမဟာ', 'သူ့ဟာ', 'ကျွနု်ပ်တို့ဟာ',
  'ကျွန်တော်တို့ဟာ', 'ကျွန်မတို့ဟာ', 'သင်တို့ဟာ', 'မင်းတို့ဟာ', 'သူတို့ဟာ', 'သူမတို့ဟာ', 'ဤအရာ', 'ဟောဒါ', 'ဟောဒီ', 'ဟောဒီဟာ',
  'ဒီဟာ', 'ဒါ', 'ထိုအရာ', '၄င်းအရာ', 'ယင်းအရာ', 'အဲဒါ', 'ဟိုဟာ', 'အချို့', 'တစ်ခုခု', 'အဘယ်မဆို', 'ဘယ်အရာမဆို',
  'အဘယ်မည်သော', 'အကြင်', 'အရာရာတိုင်း', 'စိုးစဉ်မျှ', 'စိုးစဉ်းမျှ', 'ဘယ်လောက်မဆို', 'တစ်စုံတစ်ရာ', 'တစုံတရာ', 'အလျဉ်းမဟုတ်',
  'မည်သည့်နည်းနှင့်မျှမဟုတ်', 'အလျဉ်းမရှိသော', 'အခြားဖြစ်သော', 'အခြားသော', 'အခြားတစ်ခု', 'အခြားတစ်ယောက်', 'အားလုံး',
  'အရာရာတိုင်း', 'အကုန်လုံး', 'အလုံးစုံ', 'အရာခပ်သိမ်း', 'တစ်ခုစီ', 'အသီးသီး', 'တစ်ဦးဦး', 'တစ်ခုခု', 'ကိုယ်စီကိုယ်ငှ', 'ကိုယ်စီ',
  'တစ်ဦးစီ', 'တစ်ယောက်စီ', 'တစ်ခုစီ', 'အကုန်', 'အပြည့်အစုံ', 'လုံးလုံး', 'နှစ်ခုလုံး', 'နှစ်ယောက်လုံး', 'နှစ်ဘက်လုံး', 'တစ်စုံတစ်ရာ',
  'တစ်စုံတစ်ခု', 'တစုံတခု', 'တစ်စုံတစ်ယောက်', 'တစုံတယောက်', 'တစ်ယောက်ယောက်', 'မည်သူမဆို', 'ဘာမျှမရှိ', 'ဘာမှမရှိ',
  'အဘယ်အရာမျှမရှိ', 'လူတိုင်း', 'လူတကာ', 'နှင့်', 'ပြီးလျှင်', '၄င်းနောက်', 'သို့မဟုတ်', 'သို့တည်းမဟုတ်', 'သို့မဟုတ်လျှင်',
  'ဒါမှမဟုတ်', 'ဖြစ်စေ', 'သို့စေကာမူ', 'ဒါပေမယ့်', 'ဒါပေမဲ့', 'မှတစ်ပါး', 'မှလွဲလျှင်', 'အဘယ်ကြောင့်ဆိုသော်', 'သောကြောင့်', 'သဖြင့်',
  '၍', 'သည့်အတွက်ကြောင့်', 'လျှင်', 'ပါက', 'အကယ်၍', 'သော်ငြားလည်း', 'စေကာမူ', 'နည်းတူ', 'ပေမယ့်', 'ပေမဲ့', 'ထိုနည်းတူစွာ',
  'ထိုနည်းတူ', 'ကဲ့သို့', 'သကဲ့သို့', 'ယင်းကဲ့သို့', 'ထိုကဲ့သို့', 'နှင့်စပ်လျဉ်း၍', 'ဤမျှ', 'ဤမျှလောက်', 'ဤကဲ့သို့', 'အခုလောက်ထိ',
  'ဒါကတော့', 'အဘယ်ကဲ့သလို့', 'မည်ကဲ့သို့', 'မည်သည့်နည်းနှင့်', 'မည်သည့်နည်းဖြင့်', 'မည်သည့်နည့်နှင့်မဆို', 'မည်သည့်နည်းဖြင့်မဆို',
  'မည်သို့', 'ဘယ်လိုလဲ', 'သို့ပေတည့်', 'သို့ပေမည့်', 'ဘယ်နည်းနှင့်', 'မည်ရွေ့မည်မျှ', 'အဘယ်မျှလောက်', 'ဘယ်လောက်', 'မည်သူ',
  'ဘယ်သူ', 'မည်သည့်အကြောင်းကြောင့်', 'ဘာအတွက်ကြောင့်', 'အဘယ်ကြောင့်', 'မည်သည့်အတွက်ကြောင့်', 'ဘာကြောင့်',
  'ဘာအတွက်နဲ့လဲ', 'မည်သည်', 'ဘာလဲ', 'အဘယ်အရာနည်း', 'မည်သည့်အရပ်မှာ', 'ဘယ်နေရာတွင်', 'မည်သည့်နေရာတွင်',
  'မည်သည့်နေရာသို့', 'ဘယ်နေရာသို့', 'ဘယ်နေရာမှာ', 'ဘယ်သူ၏', 'မည်သည့်အရာ၏', 'မည်သည့်အခါ', 'ဘယ်အချိန်', 'ဘယ်အခါ',
  'မည်သည့်အချိန်', 'ဘယ်တော့', 'မည်သူကို', 'မည်သူက', 'ဘယ်သူ့ကို', 'မည်သူမည်ဝါ', 'မည်သည့်အရာ', 'ဘယ်အရာ',
  'မည်သို့ပင်ဖြစ်စေ', 'ဘယ်လိုပဲဖြစ်ဖြစ်', 'မည်ရွေ့မည်မျှဖြစ်စေ', 'မည်သည့်နည်းနှင့်မဆို', 'ဘယ်နည်းနဲ့ဖြစ်ဖြစ်', 'မည်သူမဆို',
  'ဘယ်သူမဆို', 'အဘယ်သူမဆို', 'မည်သည့်အရာမဆို', 'ဘာဖြစ်ဖြစ်', 'မည်သည့်အရာဖြစ်ဖြစ်', 'မည်သည့်အရပ်၌မဆို',
  'မည်သည့်နေရာမဆို', 'ဘယ်အခါမဆို', 'ဘယ်အချိန်မဆို', 'ဘယ်အခါဖြစ်ဖြစ်', 'အချိန်အခါမရွေး'
]
// tell the world about the noise words.
exports.words = words
},{}],123:[function(require,module,exports){
/*
Copyright (c) 2011, Chris Umbel, Martijn de Boer, Damien van Holten

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
// This dutch wordlist has been parsed from a list created by Damien van Holten
// source: http://www.damienvanholten.com/blog/dutch-stop-words/
var words = [
  'aan', 'af', 'al', 'alles', 'als', 'altijd', 'andere', 'ben', 'bij', 'daar',
  'dan', 'dat', 'de', 'der', 'deze', 'die', 'dit', 'doch', 'doen', 'door', 'dus',
  'een', 'eens', 'en', 'er', 'ge', 'geen', 'geweest', 'haar', 'had', 'heb',
  'hebben', 'heeft', 'hem', 'het', 'hier', 'hij', 'hoe', 'hun', 'iemand', 'iets',
  'ik', 'in', 'is', 'ja', 'je ', 'kan', 'kon', 'kunnen', 'maar', 'me', 'meer',
  'men', 'met', 'mij', 'mijn', 'moet', 'na', 'naar', 'niet', 'niets', 'nog', 'nu',
  'of', 'om', 'omdat', 'ons', 'ook', 'op', 'over', 'reeds', 'te', 'tegen', 'toch',
  'toen', 'tot', 'u', 'uit', 'uw', 'van', 'veel', 'voor', 'want', 'waren', 'was',
  'wat', 'we', 'wel', 'werd', 'wezen', 'wie', 'wij', 'wil', 'worden', 'zal', 'ze',
  'zei', 'zelf', 'zich', 'zij', 'zijn', 'zo', 'zonder', 'zou',
  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
  'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '$', '1',
  '2', '3', '4', '5', '6', '7', '8', '9', '0', '_', '-']

// tell the world about the noise words.
exports.words = words

},{}],124:[function(require,module,exports){
/*
Copyright (c) 2014, Kristoffer Brabrand

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'og', 'i', 'jeg', 'det', 'at', 'en', 'et', 'den', 'til', 'er', 'som',
  'på', 'de', 'med', 'han', 'av', 'ikke', 'der', 'så', 'var', 'meg',
  'seg', 'men', 'ett', 'har', 'om', 'vi', 'min', 'mitt', 'ha', 'hadde',
  'hun', 'nå', 'over', 'da', 'ved', 'fra', 'du', 'ut', 'sin', 'dem',
  'oss', 'opp', 'man', 'kan', 'hans', 'hvor', 'eller', 'hva', 'skal',
  'selv', 'sjøl', 'her', 'alle', 'vil', 'bli', 'ble', 'blitt', 'kunne',
  'inn', 'når', 'kom', 'noen', 'noe', 'ville', 'dere', 'som',
  'deres', 'kun', 'ja', 'etter', 'ned', 'skulle', 'denne', 'for', 'deg',
  'si', 'sine', 'sitt', 'mot', 'å', 'meget', 'hvorfor', 'dette', 'disse',
  'uten', 'hvordan', 'ingen', 'din', 'ditt', 'blir', 'samme', 'hvilken',
  'hvilke', 'sånn', 'inni', 'mellom', 'vår', 'hver', 'hvem', 'vors',
  'hvis', 'både', 'bare', 'enn', 'fordi', 'før', 'mange', 'også', 'slik',
  'vært', 'være', 'begge', 'siden', 'henne', 'hennar', 'hennes',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_']

// tell the world about the noise words.
exports.words = words

},{}],125:[function(require,module,exports){
/* The MIT License (MIT)
Copyright (c) 2018 Espen Klem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  "ਦੇ", "0", "ਵਿੱਚ", "ਦਾ", "ਅਤੇ", "ਦੀ", "ਇੱਕ", "ਨੂੰ", "ਹੈ", "ਤੋਂ", "ਇਸ", "ਇਹ",
  "ਨੇ", "ਤੇ", "ਨਾਲ", "1", "ਲਈ", "ਵੀ", "ਸੀ", "ਵਿਚ", "ਕਿ", "ਜੋ", "ਉਹ", "ਉਸ",
  "ਹਨ", "ਜਾਂਦਾ", "ਕੀਤਾ", "2", "ਗਿਆ", "ਹੀ", "ਕੇ", "ਜਾਂ", "ਦੀਆਂ", "ਜਿਸ", "ਕਰਨ",
  "ਹੋ", "ਕਰ", "ਆਪਣੇ", "ਕੀਤੀ", "ਤੌਰ", "ਬਾਅਦ", "ਨਹੀਂ", "ਭਾਰਤੀ", "ਪਿੰਡ", "3",
  "ਸਿੰਘ", "ਉੱਤੇ", "ਸਾਲ", "।", "ਪੰਜਾਬ", "ਸਭ", "ਭਾਰਤ", "ਉਨ੍ਹਾਂ", "ਹੁੰਦਾ", "ਤੱਕ",
  "ਇਕ", "ਹੋਇਆ", "ਜਨਮ", "ਬਹੁਤ", "ਪਰ", "ਦੁਆਰਾ", "ਰੂਪ", "4", "ਹੋਰ", "ਕੰਮ", "ਆਪਣੀ",
  "ਤਾਂ", "ਸਮੇਂ", "ਪੰਜਾਬੀ", "ਗਈ", "ਦਿੱਤਾ", "ਦੋ", "ਕਿਸੇ", "ਕਈ", "ਜਾ", "ਵਾਲੇ",
  "ਸ਼ੁਰੂ", "5", "ਉਸਨੇ", "ਕਿਹਾ", "ਹੋਣ", "ਲੋਕ", "ਜਾਂਦੀ", "ਵਿੱਚੋਂ", "ਨਾਮ", "ਜਦੋਂ",
  "ਪਹਿਲਾਂ", "ਕਰਦਾ", "ਹੁੰਦੀ", "ਹੋਏ", "ਸਨ", "ਵਜੋਂ", "ਰਾਜ", "ਮੁੱਖ", "ਕਰਦੇ", "ਕੁਝ",
  "ਸਾਰੇ", "ਹੁੰਦੇ", "ਸ਼ਹਿਰ", "ਭਾਸ਼ਾ", "6", "ਹੋਈ", "ਅਨੁਸਾਰ", "ਸਕਦਾ", "ਆਮ", "ਵੱਖ",
  "ਕੋਈ", "ਵਾਰ", "ਗਏ", "ਖੇਤਰ", "ਜੀ", "ਕਾਰਨ", "ਕਰਕੇ", "ਜਿਵੇਂ", "ਜ਼ਿਲ੍ਹੇ",
  "ਲੋਕਾਂ", "ਚ", "ਸਾਹਿਤ", "ਸਦੀ", "ਬਾਰੇ", "ਜਾਂਦੇ", "ਵਾਲਾ", "ਜਾਣ", "ਪਹਿਲੀ",
  "ਪ੍ਰਾਪਤ", "ਰਿਹਾ", "ਵਾਲੀ", "ਨਾਂ", "ਦੌਰਾਨ", "ਤਰ੍ਹਾਂ", "7", "ਯੂਨੀਵਰਸਿਟੀ", "ਨਾ",
  "ਏ", "ਤਿੰਨ", "ਇਨ੍ਹਾਂ", "ਗੁਰੂ", "ਇਸਨੂੰ", "ਇਹਨਾਂ", "ਪਿਤਾ", "ਲਿਆ", "ਸ਼ਾਮਲ",
  "ਸ਼ਬਦ", "ਅੰਗਰੇਜ਼ੀ", "ਉਸਨੂੰ", "ਉਹਨਾਂ", "8", "ਸਥਿਤ", "ਫਿਰ", "ਜੀਵਨ", "ਸਕੂਲ",
  "ਹੁਣ", "ਦਿਨ", "ਕੀਤੇ", "ਆਦਿ", "ਵੱਧ", "ਲੈ", "ਘਰ", "ਵੱਲ", "ਦੇਸ਼", "ਵਲੋਂ", "ਬਣ",
  "ਵੀਂ", "ਫਿਲਮ", "ਉਮਰ", "ਬਲਾਕ", "ਰਹੇ", "10", "ਸਾਹਿਬ", "ਕਰਦੀ", "ਹਰ", "ਪੈਦਾ",
  "ਘੱਟ", "9", "ਲੇਖਕ", "ਹਿੱਸਾ", "ਫ਼ਿਲਮ", "ਮੌਤ", "ਜਿੱਥੇ", "ਵੱਡਾ", "ਵਿਖੇ", "ਆਪਣਾ",
  "ਪਹਿਲਾ", "ਵਰਤੋਂ", "ਆਪ", "ਕਰਨਾ", "ਵਿਆਹ", "ਰਹੀ", "ਰਾਹੀਂ", "ਦਿੱਤੀ", "ਉਸਦੇ",
  "ਪਰਿਵਾਰ", "ਆ", "ਦੂਜੇ", "ਅਮਰੀਕਾ", "ਮੰਨਿਆ", "ਇਸਦੇ", "ਈ", "ਕਾਲਜ", "ਸਰਕਾਰ",
  "ਇੱਥੇ", "ਪਾਕਿਸਤਾਨ", "ਸ਼ਾਮਿਲ", "ਵਿਗਿਆਨ", "ਉਸਦੀ", "ਪੇਸ਼", "ਕਿਉਂਕਿ", "ਪਹਿਲੇ",
  "ਧਰਮ", "ਮਸ਼ਹੂਰ", "ਅੰਦਰ", "ਵਿਚੋਂ", "ਜਿਨ੍ਹਾਂ", "ਜਾਣਿਆ", "ਪਾਣੀ", "ਇਲਾਵਾ", "ਅਰਥ",
  "ਚਾਰ", "ਪ੍ਰਸਿੱਧ", "ਨਾਵਲ", "ਵੱਡੇ", "ਵੱਲੋਂ", "ਕਹਾਣੀ", "ਵਿਸ਼ਵ", "ਮੂਲ", "ਅਮਰੀਕੀ",
  "ਸਥਾਨ", "ਇਤਿਹਾਸ", "ਕੁੱਝ", "ਵਿਕਾਸ", "ਉੱਤਰ", "ਸਿੱਖਿਆ", "ਹਿੰਦੀ", "ਪ੍ਰਮੁੱਖ",
  "ਰਚਨਾ", "ਬਣਾਇਆ", "ਵਿਸ਼ੇਸ਼", "ਡਾ", "ਉੱਪਰ", "ਪੱਛਮੀ", "ਦੇਣ", "ਇਸਦਾ", "ਸਕਦੇ",
  "ਰੱਖਿਆ", "ਕਵੀ", "ਦਿੱਲੀ", "ਵੱਡੀ", "ਭੂਮਿਕਾ", "ਸਮਾਜ", "ਕਾਵਿ", "ਕੀ", "ਕੋਲ", "ਦ",
  "ਗੱਲ", "ਸੰਸਾਰ", "ਭਾਗ", "ਆਈ", "ਦੱਖਣ", "ਅੱਜ", "ਸਿੱਖ", "ਕਹਿੰਦੇ", "ਸੰਗੀਤ",
  "ਕਿਲੋਮੀਟਰ", "ਜਿਹਨਾਂ", "ਸਭਾ", "ਜਿਸਦਾ", "ਜਨਵਰੀ", "ਕਵਿਤਾ", "ਮੈਂਬਰ", "ਲਿਖਿਆ",
  "ਮਾਂ", "ਕਲਾ", "ਪੰਜ", "ਥਾਂ", "ਹੇਠ", "ਜਿਆਦਾ", "ਵਰਤਿਆ", "ਮਾਰਚ", "ਡੀ", "ਅਕਤੂਬਰ",
  "ਤਕ", "ਨਾਟਕ", "ਬੀ", "ਖਾਸ", "ਇਸੇ", "ਆਧੁਨਿਕ", "ਅਗਸਤ", "ਤਿਆਰ", "ਮਾਤਾ", "ਬਣਾਉਣ",
  "ਨਵੰਬਰ", "ਵਿਅਕਤੀ", "ਦੱਖਣੀ", "ਦਸੰਬਰ", "ਆਫ", "ਗੀਤ", "ਗਿਣਤੀ", "ਕਾਲ", "ਖੋਜ",
  "ਸਾਲਾਂ", "ਪੂਰੀ", "ਸਮਾਂ", "ਜ਼ਿਆਦਾ", "ਇਸਦੀ", "ਸਕਦੀ", "ਵਿਚਕਾਰ", "ਰਾਜਧਾਨੀ",
  "ਉਸਦਾ", "ਜੁਲਾਈ", "ਜੂਨ", "ਅਧੀਨ", "ਸਥਾਪਨਾ", "ਸੇਵਾ", "ਭਾਵ", "ਵਰਗ", "ਛੋਟੇ",
  "ਦਿੰਦਾ", "ਸਮਾਜਿਕ", "ਹੁੰਦੀਆਂ", "ਟੀਮ", "ਔਰਤਾਂ", "ਅਕਸਰ", "ਪ੍ਰਕਾਸ਼ਿਤ", "ਉਰਦੂ",
  "ਰੰਗ", "ਪਾਰਟੀ", "ਬਣਾ", "ਪ੍ਰਭਾਵ", "ਸ਼ੁਰੂਆਤ", "ਲਗਭਗ", "ਮਈ", "ਸਿਰਫ", "ਨੇੜੇ",
  "ਜਿਸਨੂੰ", "ਹਾਲਾਂਕਿ", "ਦੂਰ", "ਸਤੰਬਰ", "ਕਿਤਾਬ", "ਕਦੇ", "ਉੱਤਰੀ", "ਪ੍ਰਕਾਰ",
  "ਇਸਨੇ", "ਪ੍ਰਦੇਸ਼", "ਅੱਗੇ", "ਸੰਯੁਕਤ", "ਪੜ੍ਹਾਈ", "ਵਧੇਰੇ", "ਨਾਲ਼", "ਮਨੁੱਖ",
  "ਬਾਕੀ", "ਪ੍ਰਧਾਨ", "ਦੂਜੀ", "ਕੁੱਲ", "ਆਫ਼", "ਅਧਿਐਨ", "ਰਾਸ਼ਟਰੀ", "ਪੁੱਤਰ",
  "ਅੰਤਰਰਾਸ਼ਟਰੀ", "ਧਰਤੀ", "ਕੇਂਦਰ", "ਦੇਸ਼ਾਂ", "ਮੱਧ", "ਜ਼ਿਲ੍ਹਾ", "ਸਾਰੀਆਂ", "ਪੱਧਰ",
  "ਹੋਵੇ", "ਜੇ", "ਭਾਈ", "ਰਹਿਣ", "ਪੁਰਸਕਾਰ", "ਸਭਿਆਚਾਰ", "ਪਤਾ", "ਪਾਸੇ", "ਨਵੇਂ",
  "ਕੰਪਨੀ", "ਬਾਹਰ", "ਵੇਲੇ", "ਸੰਨ", "ਪੂਰਬੀ", "ਵਿਚਾਰ", "ਕਾਰਜ", "ਪੀ", "ਮਹੱਤਵਪੂਰਨ",
  "ਦੁਨੀਆਂ", "ਧਾਰਮਿਕ", "ਮਨੁੱਖੀ", "ਸਮੂਹ", "ਅਜਿਹੇ", "ਲਾਲ", "ਦੂਜਾ", "ਭਰਾ", "ਸ੍ਰੀ",
  "ਅੰਤ", "ਜਾਂਦੀਆਂ", "ਸ਼ਾਹ", "ਰਹਿੰਦੇ", "ਮਹਾਨ", "ਚੀਨ", "ਮੀਟਰ", "ਵਰਗੇ", "ਨਾਲੋਂ",
  "ਹਾਸਲ", "ਕਿਸਮ", "ਅਜਿਹਾ", "ਬਣਿਆ", "ਭਰ", "ਛੱਡ", "ਲੈਣ", "ਹਿੱਸੇ", "ਟੀ", "ਲਿਖੇ",
  "ਮਿਲ", "ਮੌਜੂਦ", "ਦਿੱਤੇ", "ਵਾਸਤੇ", "ਵਾਲੀਆਂ", "ਵਧੀਆ", "ਰੂਸੀ", "ਜਾਰੀ", "ਸਰਕਾਰੀ",
  "ਡਿਗਰੀ", "ਪੱਛਮ", "ਲੜਾਈ", "ਭਾਸ਼ਾਵਾਂ", "ਰਾਜਾ", "ਜਲੰਧਰ", "ਹਿੰਦੂ", "ਔਰਤ", "ਜੰਗ",
  "ਬਾਬਾ", "ਬੱਚਿਆਂ", "ਮੰਤਰੀ", "ਪਟਿਆਲਾ", "ਵਾਂਗ", "ਆਉਣ", "ਭਾਵੇਂ", "ਕੇਵਲ", "ਐਸ",
  "ਪ੍ਰਾਚੀਨ", "ਰਹਿੰਦਾ", "ਬੋਲੀ", "ਅਵਾਰਡ", "ਨਗਰ", "ਖੇਡਾਂ", "ਫਿਲਮਾਂ", "ਬੱਚੇ",
  "ਕੌਰ", "ਤੋ", "ਪ੍ਰਤੀ", "ਕੁਆਂਟਮ", "ਅਬਾਦੀ", "ਪੁਸਤਕ", "ਐਮ", "ਰਾਮ", "ਖੇਤਰਾਂ",
  "ਫਰਵਰੀ", "ਕ੍ਰਿਕਟ", "ਪੈਂਦਾ", "ਇਤਿਹਾਸਕ", "ਲੱਗ", "ਬ੍ਰਿਟਿਸ਼", "ਆਇਆ", "ਮਿਲਦਾ"
]

// Tell the world about the noise words.
exports.words = words

},{}],126:[function(require,module,exports){
/*
Copyright (c) 2013, Paweł Łaskarzewski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
// list based on: http://pl.wikipedia.org/wiki/Wikipedia:Stopwords
var words = [
  'a', 'aby', 'ach', 'acz', 'aczkolwiek', 'aj', 'albo', 'ale', 'ależ', 'ani',
  'aż', 'bardziej', 'bardzo', 'bo', 'bowiem', 'by', 'byli', 'bynajmniej',
  'być', 'był', 'była', 'było', 'były', 'będzie', 'będą', 'cali', 'cała',
  'cały', 'ci', 'cię', 'ciebie', 'co', 'cokolwiek', 'coś', 'czasami',
  'czasem', 'czemu', 'czy', 'czyli', 'daleko', 'dla', 'dlaczego', 'dlatego',
  'do', 'dobrze', 'dokąd', 'dość', 'dużo', 'dwa', 'dwaj', 'dwie', 'dwoje',
  'dziś', 'dzisiaj', 'gdy', 'gdyby', 'gdyż', 'gdzie', 'gdziekolwiek',
  'gdzieś', 'i', 'ich', 'ile', 'im', 'inna', 'inne', 'inny', 'innych', 'iż',
  'ja', 'ją', 'jak', 'jakaś', 'jakby', 'jaki', 'jakichś', 'jakie', 'jakiś',
  'jakiż', 'jakkolwiek', 'jako', 'jakoś', 'je', 'jeden', 'jedna', 'jedno',
  'jednak', 'jednakże', 'jego', 'jej', 'jemu', 'jest', 'jestem', 'jeszcze',
  'jeśli', 'jeżeli', 'już', 'ją', 'każdy', 'kiedy', 'kilka', 'kimś', 'kto',
  'ktokolwiek', 'ktoś', 'która', 'które', 'którego', 'której', 'który',
  'których', 'którym', 'którzy', 'ku', 'lat', 'lecz', 'lub', 'ma', 'mają',
  'mało', 'mam', 'mi', 'mimo', 'między', 'mną', 'mnie', 'mogą', 'moi', 'moim',
  'moja', 'moje', 'może', 'możliwe', 'można', 'mój', 'mu', 'musi', 'my', 'na',
  'nad', 'nam', 'nami', 'nas', 'nasi', 'nasz', 'nasza', 'nasze', 'naszego',
  'naszych', 'natomiast', 'natychmiast', 'nawet', 'nią', 'nic', 'nich', 'nie',
  'niech', 'niego', 'niej', 'niemu', 'nigdy', 'nim', 'nimi', 'niż', 'no', 'o',
  'obok', 'od', 'około', 'on', 'ona', 'one', 'oni', 'ono', 'oraz', 'oto',
  'owszem', 'pan', 'pana', 'pani', 'po', 'pod', 'podczas', 'pomimo', 'ponad',
  'ponieważ', 'powinien', 'powinna', 'powinni', 'powinno', 'poza', 'prawie',
  'przecież', 'przed', 'przede', 'przedtem', 'przez', 'przy', 'roku',
  'również', 'sam', 'sama', 'są', 'się', 'skąd', 'sobie', 'sobą', 'sposób',
  'swoje', 'ta', 'tak', 'taka', 'taki', 'takie', 'także', 'tam', 'te', 'tego',
  'tej', 'temu', 'ten', 'teraz', 'też', 'to', 'tobą', 'tobie', 'toteż',
  'trzeba', 'tu', 'tutaj', 'twoi', 'twoim', 'twoja', 'twoje', 'twym', 'twój',
  'ty', 'tych', 'tylko', 'tym', 'u', 'w', 'wam', 'wami', 'was', 'wasz', 'zaś',
  'wasza', 'wasze', 'we', 'według', 'wiele', 'wielu', 'więc', 'więcej', 'tę',
  'wszyscy', 'wszystkich', 'wszystkie', 'wszystkim', 'wszystko', 'wtedy',
  'wy', 'właśnie', 'z', 'za', 'zapewne', 'zawsze', 'ze', 'zł', 'znowu',
  'znów', 'został', 'żaden', 'żadna', 'żadne', 'żadnych', 'że', 'żeby',
  '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_']

// tell the world about the noise words.
exports.words = words

},{}],127:[function(require,module,exports){
/*
Copyright (c) 2011, Luís Rodrigues

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'a',
  'à',
  'ao',
  'aos',
  'aquela',
  'aquelas',
  'aquele',
  'aqueles',
  'aquilo',
  'as',
  'às',
  'até',
  'com',
  'como',
  'da',
  'das',
  'de',
  'dela',
  'delas',
  'dele',
  'deles',
  'depois',
  'do',
  'dos',
  'e',
  'ela',
  'elas',
  'ele',
  'eles',
  'em',
  'entre',
  'essa',
  'essas',
  'esse',
  'esses',
  'esta',
  'estas',
  'este',
  'estes',
  'eu',
  'isso',
  'isto',
  'já',
  'lhe',
  'lhes',
  'mais',
  'mas',
  'me',
  'mesmo',
  'meu',
  'meus',
  'minha',
  'minhas',
  'muito',
  'muitos',
  'na',
  'não',
  'nas',
  'nem',
  'no',
  'nos',
  'nós',
  'nossa',
  'nossas',
  'nosso',
  'nossos',
  'num',
  'nuns',
  'numa',
  'numas',
  'o',
  'os',
  'ou',
  'para',
  'pela',
  'pelas',
  'pelo',
  'pelos',
  'por',
  'quais',
  'qual',
  'quando',
  'que',
  'quem',
  'se',
  'sem',
  'seu',
  'seus',
  'só',
  'sua',
  'suas',
  'também',
  'te',
  'teu',
  'teus',
  'tu',
  'tua',
  'tuas',
  'um',
  'uma',
  'umas',
  'você',
  'vocês',
  'vos',
  'vosso',
  'vossos',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'
]

// tell the world about the noise words.
exports.words = words

},{}],128:[function(require,module,exports){
// Original copyright:
/*
Copyright (c) 2017, Micael Levi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// This version:
/*
The MIT License (MIT)

Copyright (c) 2017 Fabrício Rodrigues

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// a list of commonly used words (pt-BR) that have little meaning and can be excluded
// from analysis.
var words = [
  'a',
  'à',
  'adeus',
  'agora',
  'aí',
  'ainda',
  'além',
  'algo',
  'alguém',
  'algum',
  'alguma',
  'algumas',
  'alguns',
  'ali',
  'ampla',
  'amplas',
  'amplo',
  'amplos',
  'ano',
  'anos',
  'ante',
  'antes',
  'ao',
  'aos',
  'apenas',
  'apoio',
  'após',
  'aquela',
  'aquelas',
  'aquele',
  'aqueles',
  'aqui',
  'aquilo',
  'área',
  'as',
  'às',
  'assim',
  'até',
  'atrás',
  'através',
  'baixo',
  'bastante',
  'bem',
  'boa',
  'boas',
  'bom',
  'bons',
  'breve',
  'cá',
  'cada',
  'catorze',
  'cedo',
  'cento',
  'certamente',
  'certeza',
  'cima',
  'cinco',
  'coisa',
  'coisas',
  'com',
  'como',
  'conselho',
  'contra',
  'contudo',
  'custa',
  'da',
  'dá',
  'dão',
  'daquela',
  'daquelas',
  'daquele',
  'daqueles',
  'dar',
  'das',
  'de',
  'debaixo',
  'dela',
  'delas',
  'dele',
  'deles',
  'demais',
  'dentro',
  'depois',
  'desde',
  'dessa',
  'dessas',
  'desse',
  'desses',
  'desta',
  'destas',
  'deste',
  'destes',
  'deve',
  'devem',
  'devendo',
  'dever',
  'deverá',
  'deverão',
  'deveria',
  'deveriam',
  'devia',
  'deviam',
  'dez',
  'dezanove',
  'dezasseis',
  'dezassete',
  'dezoito',
  'dia',
  'diante',
  'disse',
  'disso',
  'disto',
  'dito',
  'diz',
  'dizem',
  'dizer',
  'do',
  'dois',
  'dos',
  'doze',
  'duas',
  'dúvida',
  'e',
  'é',
  'ela',
  'elas',
  'ele',
  'eles',
  'em',
  'embora',
  'enquanto',
  'entre',
  'era',
  'eram',
  'éramos',
  'és',
  'essa',
  'essas',
  'esse',
  'esses',
  'esta',
  'está',
  'estamos',
  'estão',
  'estar',
  'estas',
  'estás',
  'estava',
  'estavam',
  'estávamos',
  'este',
  'esteja',
  'estejam',
  'estejamos',
  'estes',
  'esteve',
  'estive',
  'estivemos',
  'estiver',
  'estivera',
  'estiveram',
  'estivéramos',
  'estiverem',
  'estivermos',
  'estivesse',
  'estivessem',
  'estivéssemos',
  'estiveste',
  'estivestes',
  'estou',
  'etc',
  'eu',
  'exemplo',
  'faço',
  'falta',
  'favor',
  'faz',
  'fazeis',
  'fazem',
  'fazemos',
  'fazendo',
  'fazer',
  'fazes',
  'feita',
  'feitas',
  'feito',
  'feitos',
  'fez',
  'fim',
  'final',
  'foi',
  'fomos',
  'for',
  'fora',
  'foram',
  'fôramos',
  'forem',
  'forma',
  'formos',
  'fosse',
  'fossem',
  'fôssemos',
  'foste',
  'fostes',
  'fui',
  'geral',
  'grande',
  'grandes',
  'grupo',
  'há',
  'haja',
  'hajam',
  'hajamos',
  'hão',
  'havemos',
  'havia',
  'hei',
  'hoje',
  'hora',
  'horas',
  'houve',
  'houvemos',
  'houver',
  'houvera',
  'houverá',
  'houveram',
  'houvéramos',
  'houverão',
  'houverei',
  'houverem',
  'houveremos',
  'houveria',
  'houveriam',
  'houveríamos',
  'houvermos',
  'houvesse',
  'houvessem',
  'houvéssemos',
  'isso',
  'isto',
  'já',
  'la',
  'lá',
  'lado',
  'lhe',
  'lhes',
  'lo',
  'local',
  'logo',
  'longe',
  'lugar',
  'maior',
  'maioria',
  'mais',
  'mal',
  'mas',
  'máximo',
  'me',
  'meio',
  'menor',
  'menos',
  'mês',
  'meses',
  'mesma',
  'mesmas',
  'mesmo',
  'mesmos',
  'meu',
  'meus',
  'mil',
  'minha',
  'minhas',
  'momento',
  'muita',
  'muitas',
  'muito',
  'muitos',
  'na',
  'nada',
  'não',
  'naquela',
  'naquelas',
  'naquele',
  'naqueles',
  'nas',
  'nem',
  'nenhum',
  'nenhuma',
  'nessa',
  'nessas',
  'nesse',
  'nesses',
  'nesta',
  'nestas',
  'neste',
  'nestes',
  'ninguém',
  'nível',
  'no',
  'noite',
  'nome',
  'nos',
  'nós',
  'nossa',
  'nossas',
  'nosso',
  'nossos',
  'nova',
  'novas',
  'nove',
  'novo',
  'novos',
  'num',
  'numa',
  'número',
  'nunca',
  'o',
  'obra',
  'obrigada',
  'obrigado',
  'oitava',
  'oitavo',
  'oito',
  'onde',
  'ontem',
  'onze',
  'os',
  'ou',
  'outra',
  'outras',
  'outro',
  'outros',
  'para',
  'parece',
  'parte',
  'partir',
  'paucas',
  'pela',
  'pelas',
  'pelo',
  'pelos',
  'pequena',
  'pequenas',
  'pequeno',
  'pequenos',
  'per',
  'perante',
  'perto',
  'pode',
  'pude',
  'pôde',
  'podem',
  'podendo',
  'poder',
  'poderia',
  'poderiam',
  'podia',
  'podiam',
  'põe',
  'põem',
  'pois',
  'ponto',
  'pontos',
  'por',
  'porém',
  'porque',
  'porquê',
  'posição',
  'possível',
  'possivelmente',
  'posso',
  'pouca',
  'poucas',
  'pouco',
  'poucos',
  'primeira',
  'primeiras',
  'primeiro',
  'primeiros',
  'própria',
  'próprias',
  'próprio',
  'próprios',
  'próxima',
  'próximas',
  'próximo',
  'próximos',
  'pude',
  'puderam',
  'quais',
  'quáis',
  'qual',
  'quando',
  'quanto',
  'quantos',
  'quarta',
  'quarto',
  'quatro',
  'que',
  'quê',
  'quem',
  'quer',
  'quereis',
  'querem',
  'queremas',
  'queres',
  'quero',
  'questão',
  'quinta',
  'quinto',
  'quinze',
  'relação',
  'sabe',
  'sabem',
  'são',
  'se',
  'segunda',
  'segundo',
  'sei',
  'seis',
  'seja',
  'sejam',
  'sejamos',
  'sem',
  'sempre',
  'sendo',
  'ser',
  'será',
  'serão',
  'serei',
  'seremos',
  'seria',
  'seriam',
  'seríamos',
  'sete',
  'sétima',
  'sétimo',
  'seu',
  'seus',
  'sexta',
  'sexto',
  'si',
  'sido',
  'sim',
  'sistema',
  'só',
  'sob',
  'sobre',
  'sois',
  'somos',
  'sou',
  'sua',
  'suas',
  'tal',
  'talvez',
  'também',
  'tampouco',
  'tanta',
  'tantas',
  'tanto',
  'tão',
  'tarde',
  'te',
  'tem',
  'tém',
  'têm',
  'temos',
  'tendes',
  'tendo',
  'tenha',
  'tenham',
  'tenhamos',
  'tenho',
  'tens',
  'ter',
  'terá',
  'terão',
  'terceira',
  'terceiro',
  'terei',
  'teremos',
  'teria',
  'teriam',
  'teríamos',
  'teu',
  'teus',
  'teve',
  'ti',
  'tido',
  'tinha',
  'tinham',
  'tínhamos',
  'tive',
  'tivemos',
  'tiver',
  'tivera',
  'tiveram',
  'tivéramos',
  'tiverem',
  'tivermos',
  'tivesse',
  'tivessem',
  'tivéssemos',
  'tiveste',
  'tivestes',
  'toda',
  'todas',
  'todavia',
  'todo',
  'todos',
  'trabalho',
  'três',
  'treze',
  'tu',
  'tua',
  'tuas',
  'tudo',
  'última',
  'últimas',
  'último',
  'últimos',
  'um',
  'uma',
  'umas',
  'uns',
  'vai',
  'vais',
  'vão',
  'vários',
  'vem',
  'vêm',
  'vendo',
  'vens',
  'ver',
  'vez',
  'vezes',
  'viagem',
  'vindo',
  'vinte',
  'vir',
  'você',
  'vocês',
  'vos',
  'vós',
  'vossa',
  'vossas',
  'vosso',
  'vossos',
  'zero',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'
]

// tell the world about the noise words.
exports.words = words

},{}],129:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['acea', 'aceasta', 'această', 'aceea', 'acei', 'aceia', 'acel', 'acela', 'acele', 'acelea', 'acest', 'acesta', 'aceste', 'acestea', 'aceşti', 'aceştia', 'acolo', 'acord', 'acum', 'ai', 'aia', 'aibă', 'aici', 'al', 'ale', 'alea', 'altceva', 'altcineva', 'am', 'ar', 'are', 'asemenea', 'asta', 'astea', 'astăzi', 'asupra', 'au', 'avea', 'avem', 'aveţi', 'azi', 'aş', 'aşadar', 'aţi', 'bine', 'bucur', 'bună', 'ca', 'care', 'caut', 'ce', 'cel', 'ceva', 'chiar', 'cinci', 'cine', 'cineva', 'contra', 'cu', 'cum', 'cumva', 'curând', 'curînd', 'când', 'cât', 'câte', 'câtva', 'câţi', 'cînd', 'cît', 'cîte', 'cîtva', 'cîţi', 'că', 'căci', 'cărei', 'căror', 'cărui', 'către', 'da', 'dacă', 'dar', 'datorită', 'dată', 'dau', 'de', 'deci', 'deja', 'deoarece', 'departe', 'deşi', 'din', 'dinaintea', 'dintr-', 'dintre', 'doi', 'doilea', 'două', 'drept', 'după', 'dă', 'ea', 'ei', 'el', 'ele', 'eram', 'este', 'eu', 'eşti', 'face', 'fata', 'fi', 'fie', 'fiecare', 'fii', 'fim', 'fiu', 'fiţi', 'frumos', 'fără', 'graţie', 'halbă', 'iar', 'ieri', 'la', 'le', 'li', 'lor', 'lui', 'lângă', 'lîngă', 'mai', 'mea', 'mei', 'mele', 'mereu', 'meu', 'mi', 'mie', 'mine', 'mult', 'multă', 'mulţi', 'mulţumesc', 'mâine', 'mîine', 'mă', 'ne', 'nevoie', 'nici', 'nicăieri', 'nimeni', 'nimeri', 'nimic', 'nişte', 'noastre', 'noastră', 'noi', 'noroc', 'nostru', 'nouă', 'noştri', 'nu', 'opt', 'ori', 'oricare', 'orice', 'oricine', 'oricum', 'oricând', 'oricât', 'oricînd', 'oricît', 'oriunde', 'patra', 'patru', 'patrulea', 'pe', 'pentru', 'peste', 'pic', 'poate', 'pot', 'prea', 'prima', 'primul', 'prin', 'printr-', 'puţin', 'puţina', 'puţină', 'până', 'pînă', 'rog', 'sa', 'sale', 'sau', 'se', 'spate', 'spre', 'sub', 'sunt', 'suntem', 'sunteţi', 'sută', 'sînt', 'sîntem', 'sînteţi', 'să', 'săi', 'său', 'ta', 'tale', 'te', 'timp', 'tine', 'toate', 'toată', 'tot', 'totuşi', 'toţi', 'trei', 'treia', 'treilea', 'tu', 'tăi', 'tău', 'un', 'una', 'unde', 'undeva', 'unei', 'uneia', 'unele', 'uneori', 'unii', 'unor', 'unora', 'unu', 'unui', 'unuia', 'unul', 'vi', 'voastre', 'voastră', 'voi', 'vostru', 'vouă', 'voştri', 'vreme', 'vreo', 'vreun', 'vă', 'zece', 'zero', 'zi', 'zice', 'îi', 'îl', 'îmi', 'împotriva', 'în', 'înainte', 'înaintea', 'încotro', 'încât', 'încît', 'între', 'întrucât', 'întrucît', 'îţi', 'ăla', 'ălea', 'ăsta', 'ăstea', 'ăştia', 'şapte', 'şase', 'şi', 'ştiu', 'ţi', 'ţie']

// tell the world about the noise words.
exports.words = words

},{}],130:[function(require,module,exports){
/*
Copyright (c) 2011, Polyakov Vladimir, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = ['и', 'в', 'во', 'не', 'что', 'он', 'на', 'я', 'с', 'со', 'как',
'а', 'то', 'все', 'она', 'так', 'его', 'но', 'да', 'ты', 'к', 'у', 'же', 'вы',
 'за', 'бы', 'по', 'только', 'ее', 'мне', 'было', 'вот', 'от', 'меня', 'еще',
 'нет', 'о', 'из', 'ему', 'теперь', 'когда', 'даже', 'ну', 'ли', 'если', 'уже',
 'или', 'ни', 'быть', 'был', 'него', 'до', 'вас', 'нибудь', 'уж', 'вам',
 'сказал', 'ведь', 'там', 'потом', 'себя', 'ничего', 'ей', 'может', 'они',
 'тут', 'где', 'есть', 'надо', 'ней', 'для', 'мы', 'тебя', 'их', 'чем', 'была',
 'сам', 'чтоб', 'без', 'будто', 'чего', 'раз', 'тоже', 'себе', 'под', 'будет',
 'ж', 'тогда', 'кто', 'этот', 'того', 'потому', 'этого', 'какой', 'совсем',
 'ним', 'этом', 'почти', 'мой', 'тем', 'чтобы', 'нее', 'были', 'куда', 'всех',
 'никогда', 'сегодня', 'можно', 'при', 'об', 'другой', 'хоть', 'после', 'над',
 'больше', 'тот', 'через', 'эти', 'нас', 'про', 'всего', 'них', 'какая',
 'много', 'разве', 'эту', 'моя', 'свою', 'этой', 'перед', 'иногда', 'лучше',
 'чуть', 'том', 'нельзя', 'такой', 'им', 'более', 'всегда', 'конечно', 'всю',
 'между', 'это', 'лишь']

// tell the world about the noise words.
exports.words = words

},{}],131:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'aby', 'aj', 'ako', 'aký', 'ale', 'alebo', 'ani', 'avšak', 'ba', 'bez', 'buï', 'cez', 'do', 'ho', 'hoci', 'i', 'ich', 'im', 'ja', 'jeho', 'jej', 'jemu', 'ju', 'k', 'kam', 'kde', 'kedže', 'keï', 'kto', 'ktorý', 'ku', 'lebo', 'ma', 'mi', 'mne', 'mnou', 'mu', 'my', 'mòa', 'môj', 'na', 'nad', 'nami', 'neho', 'nej', 'nemu', 'nich', 'nielen', 'nim', 'no', 'nám', 'nás', 'náš', 'ním', 'o', 'od', 'on', 'ona', 'oni', 'ono', 'ony', 'po', 'pod', 'pre', 'pred', 'pri', 's', 'sa', 'seba', 'sem', 'so', 'svoj', 'taký', 'tam', 'teba', 'tebe', 'tebou', 'tej', 'ten', 'ti', 'tie', 'to', 'toho', 'tomu', 'tou', 'tvoj', 'ty', 'tá', 'tým', 'v', 'vami', 'veï', 'vo', 'vy', 'vám', 'vás', 'váš', 'však', 'z', 'za', 'zo', 'a', 'èi', 'èo', 'èí', 'òom', 'òou', 'òu', 'že']

// tell the world about the noise words.
exports.words = words

},{}],132:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['a', 'ali', 'april', 'avgust', 'b', 'bi', 'bil', 'bila', 'bile', 'bili', 'bilo', 'biti', 'blizu', 'bo', 'bodo', 'bojo', 'bolj', 'bom', 'bomo', 'boste', 'bova', 'boš', 'brez', 'c', 'cel', 'cela', 'celi', 'celo', 'd', 'da', 'daleč', 'dan', 'danes', 'datum', 'december', 'deset', 'deseta', 'deseti', 'deseto', 'devet', 'deveta', 'deveti', 'deveto', 'do', 'dober', 'dobra', 'dobri', 'dobro', 'dokler', 'dol', 'dolg', 'dolga', 'dolgi', 'dovolj', 'drug', 'druga', 'drugi', 'drugo', 'dva', 'dve', 'e', 'eden', 'en', 'ena', 'ene', 'eni', 'enkrat', 'eno', 'etc.', 'f', 'februar', 'g', 'g.', 'ga', 'ga.', 'gor', 'gospa', 'gospod', 'h', 'halo', 'i', 'idr.', 'ii', 'iii', 'in', 'iv', 'ix', 'iz', 'j', 'januar', 'jaz', 'je', 'ji', 'jih', 'jim', 'jo', 'julij', 'junij', 'jutri', 'k', 'kadarkoli', 'kaj', 'kajti', 'kako', 'kakor', 'kamor', 'kamorkoli', 'kar', 'karkoli', 'katerikoli', 'kdaj', 'kdo', 'kdorkoli', 'ker', 'ki', 'kje', 'kjer', 'kjerkoli', 'ko', 'koder', 'koderkoli', 'koga', 'komu', 'kot', 'kratek', 'kratka', 'kratke', 'kratki', 'l', 'lahka', 'lahke', 'lahki', 'lahko', 'le', 'lep', 'lepa', 'lepe', 'lepi', 'lepo', 'leto', 'm', 'maj', 'majhen', 'majhna', 'majhni', 'malce', 'malo', 'manj', 'marec', 'me', 'med', 'medtem', 'mene', 'mesec', 'mi', 'midva', 'midve', 'mnogo', 'moj', 'moja', 'moje', 'mora', 'morajo', 'moram', 'moramo', 'morate', 'moraš', 'morem', 'mu', 'n', 'na', 'nad', 'naj', 'najina', 'najino', 'najmanj', 'naju', 'največ', 'nam', 'narobe', 'nas', 'nato', 'nazaj', 'naš', 'naša', 'naše', 'ne', 'nedavno', 'nedelja', 'nek', 'neka', 'nekaj', 'nekatere', 'nekateri', 'nekatero', 'nekdo', 'neke', 'nekega', 'neki', 'nekje', 'neko', 'nekoga', 'nekoč', 'ni', 'nikamor', 'nikdar', 'nikjer', 'nikoli', 'nič', 'nje', 'njega', 'njegov', 'njegova', 'njegovo', 'njej', 'njemu', 'njen', 'njena', 'njeno', 'nji', 'njih', 'njihov', 'njihova', 'njihovo', 'njiju', 'njim', 'njo', 'njun', 'njuna', 'njuno', 'no', 'nocoj', 'november', 'npr.', 'o', 'ob', 'oba', 'obe', 'oboje', 'od', 'odprt', 'odprta', 'odprti', 'okoli', 'oktober', 'on', 'onadva', 'one', 'oni', 'onidve', 'osem', 'osma', 'osmi', 'osmo', 'oz.', 'p', 'pa', 'pet', 'peta', 'petek', 'peti', 'peto', 'po', 'pod', 'pogosto', 'poleg', 'poln', 'polna', 'polni', 'polno', 'ponavadi', 'ponedeljek', 'ponovno', 'potem', 'povsod', 'pozdravljen', 'pozdravljeni', 'prav', 'prava', 'prave', 'pravi', 'pravo', 'prazen', 'prazna', 'prazno', 'prbl.', 'precej', 'pred', 'prej', 'preko', 'pri', 'pribl.', 'približno', 'primer', 'pripravljen', 'pripravljena', 'pripravljeni', 'proti', 'prva', 'prvi', 'prvo', 'r', 'ravno', 'redko', 'res', 'reč', 's', 'saj', 'sam', 'sama', 'same', 'sami', 'samo', 'se', 'sebe', 'sebi', 'sedaj', 'sedem', 'sedma', 'sedmi', 'sedmo', 'sem', 'september', 'seveda', 'si', 'sicer', 'skoraj', 'skozi', 'slab', 'smo', 'so', 'sobota', 'spet', 'sreda', 'srednja', 'srednji', 'sta', 'ste', 'stran', 'stvar', 'sva', 't', 'ta', 'tak', 'taka', 'take', 'taki', 'tako', 'takoj', 'tam', 'te', 'tebe', 'tebi', 'tega', 'težak', 'težka', 'težki', 'težko', 'ti', 'tista', 'tiste', 'tisti', 'tisto', 'tj.', 'tja', 'to', 'toda', 'torek', 'tretja', 'tretje', 'tretji', 'tri', 'tu', 'tudi', 'tukaj', 'tvoj', 'tvoja', 'tvoje', 'u', 'v', 'vaju', 'vam', 'vas', 'vaš', 'vaša', 'vaše', 've', 'vedno', 'velik', 'velika', 'veliki', 'veliko', 'vendar', 'ves', 'več', 'vi', 'vidva', 'vii', 'viii', 'visok', 'visoka', 'visoke', 'visoki', 'vsa', 'vsaj', 'vsak', 'vsaka', 'vsakdo', 'vsake', 'vsaki', 'vsakomur', 'vse', 'vsega', 'vsi', 'vso', 'včasih', 'včeraj', 'x', 'z', 'za', 'zadaj', 'zadnji', 'zakaj', 'zaprta', 'zaprti', 'zaprto', 'zdaj', 'zelo', 'zunaj', 'č', 'če', 'često', 'četrta', 'četrtek', 'četrti', 'četrto', 'čez', 'čigav', 'š', 'šest', 'šesta', 'šesti', 'šesto', 'štiri', 'ž', 'že']

// tell the world about the noise words.
exports.words = words

},{}],133:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'oo', 'atabo', 'ay', 'ku', 'waxeey', 'uu', 'lakin', 'si', 'ayuu', 'soo',
  'waa', 'ka', 'kasoo', 'kale', 'waxuu', 'ayee', 'ayaa', 'kuu', 'isku', 'ugu',
  'jiray', 'dhan', 'dambeestii', 'inuu', 'in', 'jirtay', 'uheestay', 'aad',
  'uga', 'hadana', 'timaado', 'timaaday'
]


// Tell the world about the noise words.
exports.words = words

},{}],134:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'a', 'le', 'o', 'ba', 'ho', 'oa', 'ea', 'ka', 'hae', 'tselane', 'eaba', 'ke',
  'hore', 'ha', 'e', 'ne', 're', 'bona', 'me', 'limo', 'tsa', 'haholo', 'la',
  'empa', 'ngoanake', 'se', 'moo', 'm\'e', 'bane', 'mo', 'tse', 'sa', 'li',
  'ena', 'bina', 'pina', 'hape'
]


// Tell the world about the noise words.
exports.words = words

},{}],135:[function(require,module,exports){
/*
Creative Commons – Attribution / ShareAlike 3.0 license
http://creativecommons.org/licenses/by-sa/3.0/

List based on frequently used words in subtitles in 2012.

Thanks to
opensubtitles.org
https://invokeit.wordpress.com/frequency-word-lists/#comment-9707
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'jag', 'det', 'är', 'du', 'inte', 'att', 'en', 'och', 'har', 'vi',
  'på', 'i', 'för', 'han', 'vad', 'med', 'mig', 'som', 'här', 'om',
  'dig', 'var', 'den', 'så', 'till', 'kan', 'de', 'ni', 'ska', 'ett',
  'men', 'av', 'vill', 'nu', 'ja', 'nej', 'bara', 'hon', 'hur', 'min',
  'där', 'honom', 'kom', 'din', 'då', 'när', 'ha', 'er', 'ta', 'ut',
  'får', 'man', 'vara', 'oss', 'dem', 'eller', 'varför', 'alla', 'från', 'upp',
  'igen', 'sa', 'hade', 'allt', 'in', 'sig', 'ingen', 'henne', 'vem', 'mitt',
  'nåt', 'blir', 'än', 'bli', 'ju', 'två', 'tar', 'hans', 'ditt', 'mina',
  'åt', 'väl', 'också', 'nån', 'låt', 'detta', 'va', 'dina', 'dom', 'blev',
  'inga', 'sin', 'just', 'många', 'vart', 'vilken', 'ur', 'ens', 'sitt', 'e',
  'jo', 'era', 'deras', 'fem', 'sex', 'denna', 'vilket', 'fyra', 'vårt', 'emot',
  'tio', 'ert', 'sju', 'åtta', 'nånting', 'ned', 'ers', 'nio', 'mej',
  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_']

// tell the world about the noise words.
exports.words = words

},{}],136:[function(require,module,exports){
/*
The MIT License (MIT)


Frequency sorted
*/

// Swahili - Stop words list. A list of commonly used words that have little
// meaning and can be excluded from analysis.

// This list is frequency sorted. That means it can be sliced from the bottom
// and be less agressive in excluding stopwords */

var words = ["na","ya","wa","kwa","ni","za","katika","la","kuwa","kama",
  "kwamba","cha","hiyo","lakini","yake","hata","wakati","hivyo","sasa","wake",
  "au","watu","hii","zaidi","vya","huo","tu","kwenye","si","pia","ili","moja",
  "kila","baada","ambao","ambayo","yao","wao","kuna","hilo","kutoka","kubwa",
  "pamoja","bila","huu","hayo","sana","ndani","mkuu","hizo","kufanya","wengi",
  "hadi","mmoja","hili","juu","kwanza","wetu","kuhusu","baadhi","wote","yetu",
  "hivi","kweli","mara","wengine","nini","ndiyo","zao","kati","hao","hapa",
  "kutokana","muda","habari","ambaye","wenye","nyingine","hakuna","tena",
  "hatua","bado","nafasi","basi","kabisa","hicho","nje","huyo","vile","yote",
  "mkubwa","alikuwa","zote","leo","haya","huko","kutoa","mwa","kiasi","hasa",
  "nyingi","kabla","wale","chini","gani","hapo","lazima","mwingine","bali",
  "huku","zake","ilikuwa","tofauti","kupata","mbalimbali","pale","kusema",
  "badala","wazi","yeye","alisema","hawa","ndio","hizi","tayari","wala",
  "muhimu","ile","mpya","ambazo","dhidi","kwenda","sisi","kwani","jinsi",
  "binafsi","kutumia","mbili","mbali","kuu","mengine","mbele","namna","mengi",
  "upande"]

exports.words = words


},{}],137:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['กล่าว', 'กว่า', 'กัน', 'กับ', 'การ', 'ก็', 'ก่อน', 'ขณะ', 'ขอ', 'ของ', 'ขึ้น', 'คง', 'ครั้ง', 'ความ', 'คือ', 'จะ', 'จัด', 'จาก', 'จึง', 'ช่วง', 'ซึ่ง', 'ดัง', 'ด้วย', 'ด้าน', 'ตั้ง', 'ตั้งแต่', 'ตาม', 'ต่อ', 'ต่าง', 'ต่างๆ', 'ต้อง', 'ถึง', 'ถูก', 'ถ้า', 'ทั้ง', 'ทั้งนี้', 'ทาง', 'ที่', 'ที่สุด', 'ทุก', 'ทํา', 'ทําให้', 'นอกจาก', 'นัก', 'นั้น', 'นี้', 'น่า', 'นํา', 'บาง', 'ผล', 'ผ่าน', 'พบ', 'พร้อม', 'มา', 'มาก', 'มี', 'ยัง', 'รวม', 'ระหว่าง', 'รับ', 'ราย', 'ร่วม', 'ลง', 'วัน', 'ว่า', 'สุด', 'ส่ง', 'ส่วน', 'สําหรับ', 'หนึ่ง', 'หรือ', 'หลัง', 'หลังจาก', 'หลาย', 'หาก', 'อยาก', 'อยู่', 'อย่าง', 'ออก', 'อะไร', 'อาจ', 'อีก', 'เขา', 'เข้า', 'เคย', 'เฉพาะ', 'เช่น', 'เดียว', 'เดียวกัน', 'เนื่องจาก', 'เปิด', 'เปิดเผย', 'เป็น', 'เป็นการ', 'เพราะ', 'เพื่อ', 'เมื่อ', 'เรา', 'เริ่ม', 'เลย', 'เห็น', 'เอง', 'แต่', 'แบบ', 'แรก', 'และ', 'แล้ว', 'แห่ง', 'โดย', 'ใน', 'ให้', 'ได้', 'ไป', 'ไม่', 'ไว้']

// tell the world about the noise words.
exports.words = words

},{}],138:[function(require,module,exports){
// Copyright (c) 2017 Peter Graham, contributors. Released under the Apache-2.0 license.

var words = ['acaba', 'acep', 'adeta', 'altmış', 'altmış', 'altı', 'altı', 'ama', 'ancak', 'arada', 'artık', 'aslında', 'aynen', 'ayrıca', 'az', 'bana', 'bari', 'bazen', 'bazı', 'bazı', 'başka', 'belki', 'ben', 'benden', 'beni', 'benim', 'beri', 'beş', 'beş', 'beş', 'bile', 'bin', 'bir', 'biraz', 'biri', 'birkaç', 'birkez', 'birçok', 'birşey', 'birşeyi', 'birşey', 'birşeyi', 'birşey', 'biz', 'bizden', 'bize', 'bizi', 'bizim', 'bu', 'buna', 'bunda', 'bundan', 'bunlar', 'bunları', 'bunların', 'bunu', 'bunun', 'burada', 'böyle', 'böylece', 'bütün', 'da', 'daha', 'dahi', 'dahil', 'daima', 'dair', 'dayanarak', 'de', 'defa', 'deđil', 'değil', 'diye', 'diđer', 'diğer', 'doksan', 'dokuz', 'dolayı', 'dolayısıyla', 'dört', 'edecek', 'eden', 'ederek', 'edilecek', 'ediliyor', 'edilmesi', 'ediyor', 'elli', 'en', 'etmesi', 'etti', 'ettiği', 'ettiğini', 'eđer', 'eğer', 'fakat', 'gibi', 'göre', 'halbuki', 'halen', 'hangi', 'hani', 'hariç', 'hatta', 'hele', 'hem', 'henüz', 'hep', 'hepsi', 'her', 'herhangi', 'herkes', 'herkesin', 'hiç', 'hiçbir', 'iken', 'iki', 'ila', 'ile', 'ilgili', 'ilk', 'illa', 'ise', 'itibaren', 'itibariyle', 'iyi', 'iyice', 'için', 'işte', 'işte', 'kadar', 'kanımca', 'karşın', 'katrilyon', 'kendi', 'kendilerine', 'kendini', 'kendisi', 'kendisine', 'kendisini', 'kere', 'kez', 'keşke', 'ki', 'kim', 'kimden', 'kime', 'kimi', 'kimse', 'kırk', 'kısaca', 'kırk', 'lakin', 'madem', 'međer', 'milyar', 'milyon', 'mu', 'mü', 'mı', 'mı', 'nasıl', 'nasıl', 'ne', 'neden', 'nedenle', 'nerde', 'nere', 'nerede', 'nereye', 'nitekim', 'niye', 'niçin', 'o', 'olan', 'olarak', 'oldu', 'olduklarını', 'olduğu', 'olduğunu', 'olmadı', 'olmadığı', 'olmak', 'olması', 'olmayan', 'olmaz', 'olsa', 'olsun', 'olup', 'olur', 'olursa', 'oluyor', 'on', 'ona', 'ondan', 'onlar', 'onlardan', 'onlari', 'onların', 'onları', 'onların', 'onu', 'onun', 'otuz', 'oysa', 'pek', 'rağmen', 'sadece', 'sanki', 'sekiz', 'seksen', 'sen', 'senden', 'seni', 'senin', 'siz', 'sizden', 'sizi', 'sizin', 'sonra', 'tarafından', 'trilyon', 'tüm', 'var', 'vardı', 've', 'veya', 'veyahut', 'ya', 'yahut', 'yani', 'yapacak', 'yapmak', 'yaptı', 'yaptıkları', 'yaptığı', 'yaptığını', 'yapılan', 'yapılması', 'yapıyor', 'yedi', 'yerine', 'yetmiş', 'yetmiş', 'yetmiş', 'yine', 'yirmi', 'yoksa', 'yüz', 'zaten', 'çok', 'çünkü', 'öyle', 'üzere', 'üç', 'şey', 'şeyden', 'şeyi', 'şeyler', 'şu', 'şuna', 'şunda', 'şundan', 'şunu', 'şey', 'şeyden', 'şeyi', 'şeyler', 'şu', 'şuna', 'şunda', 'şundan', 'şunları', 'şunu', 'şöyle', 'şayet', 'şimdi', 'şu', 'şöyle']
// tell the world about the noise words.
exports.words = words

},{}],139:[function(require,module,exports){
/*
Copyright (c) 2011, David Przybilla, Chris Umbel
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  'bị', 'bởi', 'cả', 'các', 'cái', 'cần', 'càng', 'chỉ',
  'chiếc', 'cho', 'chứ', 'chưa', 'chuyện', 'có', 'có thể',
  'cứ', 'của', 'cùng', 'cũng', 'đã', 'đang', 'để', 'đến nỗi',
  'đều', 'điều', 'do', 'đó', 'được', 'dưới', 'gì', 'khi',
  'không', 'là', 'lại', 'lên', 'lúc', 'mà', 'mỗi', 'một cách',
  'này', 'nên', 'nếu', 'ngay', 'nhiều', 'như', 'nhưng', 'những',
  'nơi', 'nữa', 'phải', 'qua', 'ra', 'rằng', 'rất', 'rồi',
  'sau', 'sẽ', 'so', 'sự', 'tại', 'theo', 'thì', 'trên', 'trước', 'từ', 'từng', 'và',
  'vẫn', 'vào', 'vậy', 'vì', 'việc', 'với', 'vừa', 'vâng', 'à', 'ừ', 'từ'
]

// tell the world about the noise words.
exports.words = words
},{}],140:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'ó', 'ní', 'ìjàpá', 'ṣe', 'rẹ̀', 'tí', 'àwọn', 'sí', 'ni', 'náà', 'anansi',
  'láti', 'kan', 'ti', 'ń', 'lọ', 'o', 'bí', 'padà', 'sì', 'wá', 'wangari',
  'lè', 'wà', 'kí', 'púpọ̀', 'odò', 'mi', 'wọ́n', 'pẹ̀lú', 'a', 'ṣùgbọ́n',
  'fún', 'jẹ́', 'fẹ́', 'oúnjẹ', 'rí', 'igi', 'kò', 'ilé', 'jù', 'olóńgbò',
  'pé', 'é', 'gbogbo', 'iṣu', 'inú', 'bẹ̀rẹ̀', 'jẹ', 'fi', 'dúró', 'alẹ́',
  'ọjọ́', 'nítorí', 'nǹkan', 'ọ̀rẹ́', 'àkókò', 'sínú', 'ṣ', 'yìí'
]


// Tell the world about the noise words.
exports.words = words

},{}],141:[function(require,module,exports){
/*
Copyright (c) 2011, David Przybilla, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// a list of commonly used words that have little meaning and can be excluded
// from analysis.
var words = [
  '的', '地', '得', '和', '跟',
  '与', '及', '向', '并', '等',
  '更', '已', '含', '做', '我',
  '你', '他', '她', '们', '某',
  '该', '各', '每', '这', '那',
  '哪', '什', '么', '谁', '年',
  '月', '日', '时', '分', '秒',
  '几', '多', '来', '在', '就',
  '又', '很', '呢', '吧', '吗',
  '了', '嘛', '哇', '儿', '哼',
  '啊', '嗯', '是', '着', '都',
  '不', '说', '也', '看', '把',
  '还', '个', '有', '小', '到',
  '一', '为', '中', '于', '对',
  '会', '之', '第', '此', '或',
  '共', '按', '请'
]

// tell the world about the noise words.
exports.words = words

},{}],142:[function(require,module,exports){
/* Copyright 2016 Liam Doherty

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A list of commonly used words that have little meaning and can be excluded
from analysis.
This list is frequency sorted. That means it can be sliced from the bottom
and be less agressive in excluding stopwords */

var words = [
  'ukuthi', 'kodwa', 'futhi', 'kakhulu', 'wakhe', 'kusho', 'uma', 'wathi',
  'umama', 'kanye', 'phansi', 'ngesikhathi', 'lapho', 'u', 'zakhe', 'khona',
  'ukuba', 'nje', 'phezulu', 'yakhe', 'kungani', 'wase', 'la', 'mina', 'wami',
  'ukuze', 'unonkungu', 'wabona', 'wahamba', 'lakhe', 'yami', 'kanjani',
  'kwakukhona', 'ngelinye'
]


// Tell the world about the noise words.
exports.words = words

},{}],143:[function(require,module,exports){
var _651="nonconformist",_650="dissident",_649="vibrate",_648="savoury",_647="splinter",_646="unreliable",_645="disentangle",_644="uneasiness",_643="terrestrial",_642="thinness",_641="unmanly",_640="plaster",_639="unbalance",_638="recreant",_637="biyearly",_636="unregenerate",_635="untouched",_634="sideways",_633="sidelong",_632="extroverted",_631="incitement",_630="retardation",_629="severeness",_628="severity",_627="sloppiness",_626="underestimate",_625="humdrum",_624="slaughter",_623="pointless",_622="senseless",_621="unthinking",_620="splutter",_619="underhand",_618="incompetent",_617="gangrene",_616="discredit",_615="questioning",_614="vertical",_613="stalwart",_612="unlimited",_611="heaviness",_610="synthetic",_609="southwest",_608="smartness",_607="snuffle",_606="southeast",_605="romanticist",_604="romantic",_603="scratchy",_602="realism",_601="ascetic",_600="pragmatic",_599="sitting",_598="positive",_597="persian",_596="peaceable",_595="resistance",_594="opponent",_593="offensive",_592="singing",_591="northwest",_590="indifferent",_589="neutral",_588="northeast",_587="murmuring",_586="grumbling",_585="grumble",_584="skyrocket",_583="confection",_582="monitor",_581="softness",_580="wandering",_579="plodding",_578="negative",_577="furthest",_576="farthest",_575="medicine",_574="madness",_573="diminished",_572="forgetful",_571="lightness",_570="whipping",_569="closeness",_568="legitimate",_567="secular",_566="persistent",_565="language",_564="discriminatory",_563="underground",_562="disturbance",_561="intellectual",_560="detachment",_559="blazing",_558="strident",_557="stirring",_556="interior",_555="individual",_554="resistant",_553="humanitarian",_552="humanistic",_551="humanist",_550="richness",_549="sublime",_548="epicurean",_547="genetic",_546="farther",_545="starter",_544="independent",_543="immaterial",_542="pliable",_541="flexible",_540="foremost",_539="overrun",_538="favourite",_537="favorite",_536="favorable",_535="intimate",_534="tangible",_533="promenade",_532="censure",_531="olympian",_530="numerical",_529="suffering",_528="passion",_527="underline",_526="potential",_525="refined",_524="retrograde",_523="economical",_522="dissolution",_521="illumination",_520="swimming",_519="invigorate",_518="gallant",_517="inebriate",_516="planetary",_515="daydream",_514="impulsive",_513="animate",_512="wretched",_511="threshold",_510="roughness",_509="variance",_508="distressed",_507="displacement",_506="discourse",_505="restorative",_504="vaporize",_503="subdued",_502="unmanageable",_501="discord",_500="miserable",_499="profoundness",_498="profundity",_497="pendant",_496="pendent",_495="subordinate",_494="shaping",_493="suspect",_492="scourge",_491="impairment",_490="incorrect",_489="precious",_488="interlock",_487="therapeutic",_486="essential",_485="torture",_484="torment",_483="screech",_482="crossing",_481="incompatible",_480="disdain",_479="cooperative",_478="rebirth",_477="honorable",_476="constant",_475="uniform",_474="consistent",_473="straightaway",_472="conservative",_471="straight",_470="consecutive",_469="opposition",_468="disarray",_467="disconnected",_466="reprobate",_465="silence",_464="inactive",_463="relative",_462="repellent",_461="counterfeit",_460="coloured",_459="colored",_458="upright",_457="powerful",_456="swagger",_455="nebulous",_454="overcast",_453="settlement",_452="unsympathetic",_451="cleansing",_450="cunning",_449="shudder",_448="crimson",_447="inspire",_446="sympathetic",_445="toughness",_444="portrayal",_443="premier",_442="delicacy",_441="extract",_440="comfort",_439="comforter",_438="instill",_437="delight",_436="commonplace",_435="superior",_434="regular",_433="heedful",_432="summary",_431="chopper",_430="measured",_429="limited",_428="excision",_427="reconstruct",_426="grandness",_425="disordered",_424="shining",_423="mistake",_422="relaxation",_421="wickedness",_420="reprint",_419="disintegration",_418="opening",_417="mastermind",_416="package",_415="exhibit",_414="sweetness",_413="inconvenience",_412="flourish",_411="involution",_410="shackle",_409="counteract",_408="reversion",_407="overthrow",_406="opposite",_405="reversal",_404="bluster",_403="efflorescence",_402="blossom",_401="register",_400="substantive",_399="substantial",_398="material",_397="twinkle",_396="squelch",_395="bucolic",_394="vicious",_393="barbarian",_392="bastard",_391="prickle",_390="goldbrick",_389="sharpness",_388="particular",_387="manoeuvre",_386="maneuver",_385="spotlight",_384="blemish",_383="section",_382="summons",_381="instruction",_380="diagonal",_379="profligate",_378="cluster",_377="disorder",_376="disquiet",_375="romance",_374="monotone",_373="wrinkle",_372="impulse",_371="predominate",_370="novelty",_369="sparkle",_368="radiate",_367="imprint",_366="dispute",_365="sputter",_364="conflict",_363="bombard",_362="flutter",_361="clobber",_360="revolutionary",_359="evidence",_358="voiceless",_357="knockout",_356="uncertain",_355="strangle",_354="surround",_353="hardened",_352="closing",_351="balance",_350="induction",_349="introduction",_348="struggle",_347="sponsor",_346="reinforcement",_345="instant",_344="indorse",_343="endorse",_342="grievous",_341="fearful",_340="terrible",_339="deflect",_338="average",_337="headlong",_336="certification",_335="reliable",_334="palaver",_333="penetrate",_332="eccentric",_331="shortened",_330="prophylactic",_329="infinite",_328="designate",_327="portion",_326="manufacture",_325="assemblage",_324="violation",_323="outrage",_322="articulate",_321="closure",_320="terminal",_319="blockade",_318="radical",_317="shooter",_316="throttle",_315="background",_314="preventative",_313="preventive",_312="handicap",_311="vagabond",_310="pasture",_309="position",_308="scramble",_307="assault",_306="irregular",_305="overturn",_304="reverse",_303="unresolved",_302="country",_301="discount",_300="disregard",_299="burning",_298="renounce",_297="relieve",_296="innocent",_295="fortify",_294="sanction",_293="question",_292="plunder",_291="discernment",_290="demonstrate",_289="crumple",_288="forfeit",_287="eliminate",_286="contrivance",_285="preparation",_284="formula",_283="reflexion",_282="reflection",_281="flavour",_280="congratulate",_279="outside",_278="isolated",_277="nervous",_276="antique",_275="resolution",_274="response",_273="irritation",_272="teasing",_271="pestiferous",_270="extension",_269="huckster",_268="leaning",_267="inclination",_266="antediluvian",_265="parallel",_264="lineage",_263="surrender",_262="arrange",_261="standard",_260="refinement",_259="counterbalance",_258="decline",_257="redress",_256="rectify",_255="natural",_254="sensitive",_253="cutting",_252="quality",_251="nurture",_250="surrogate",_249="substitute",_248="compound",_247="replacement",_246="patronage",_245="alternate",_244="castrate",_243="solitary",_242="countenance",_241="confederate",_240="unknown",_239="foreign",_238="splatter",_237="liberal",_236="conclusion",_235="pressure",_234="grapple",_233="contend",_232="supporter",_231="forward",_230="combine",_229="establish",_228="outpouring",_227="discharge",_226="incline",_225="associate",_224="dependent",_223="content",_222="impress",_221="programme",_220="program",_219="project",_218="advocate",_217="interpret",_216="surface",_215="heighten",_214="compass",_213="passing",_212="mention",_211="inauspicious",_210="contrary",_209="adventure",_208="venture",_207="elaboration",_206="further",_205="upgrade",_204="progress",_203="embellish",_202="sprinkle",_201="stumble",_200="scatter",_199="diffuse",_198="broadcast",_197="judicature",_196="distribute",_195="surfeit",_194="variety",_193="interchange",_192="transplant",_191="transpose",_190="traverse",_189="overlay",_188="substance",_187="aggregate",_186="compensate",_185="reference",_184="address",_183="duplicate",_182="special",_181="involvement",_180="belligerent",_179="upheaval",_178="excitement",_177="canvass",_176="obscure",_175="scuffle",_174="advance",_173="realise",_172="realize",_171="organise",_170="organize",_169="construct",_168="contact",_167="harvest",_166="retreat",_165="respite",_164="trespass",_163="violate",_162="neglect",_161="founder",_160="collapse",_159="encounter",_158="service",_157="overhaul",_156="weakened",_155="elaborate",_154="subject",_153="condition",_152="militant",_151="engagement",_150="operate",_149="function",_148="exercise",_147="exploit",_146="ferment",_145="telling",_144="quarter",_143="initiate",_142="prepare",_141="example",_140="posture",_139="process",_138="pretend",_137="observe",_136="comment",_135="receive",_134="blessed",_133="striking",_132="interest",_131="concern",_130="trouble",_129="recognise",_128="recognize",_127="organisation",_126="organization",_125="establishment",_124="blistering",_123="inscribe",_122="scratch",_121="distinguish",_120="observance",_119="exchange",_118="champion",_117="composition",_116="circular",_115="coordinate",_114="understanding",_113="correspondence",_112="direction",_111="commission",_110="constitute",_109="practice",_108="disturb",_107="agitate",_106="stretch",_105="version",_104="capture",_103="measure",_102="account",_101="correct",_100="complete",_99="established",_98="company",_97="fitting",_96="adjustment",_95="counter",_94="replication",_93="regress",_92="descend",_91="deposit",_90="supplement",_89="auxiliary",_88="picture",_87="suppose",_86="respect",_85="prospect",_84="routine",_83="transport",_82="channel",_81="transmit",_80="inventory",_79="dribble",_78="station",_77="disruption",_76="separate",_75="develop",_74="turnout",_73="deliver",_72="present",_71="consecrate",_70="resolve",_69="forecast",_68="estimate",_67="calculate",_66="compact",_65="squeeze",_64="introduce",_63="consort",_62="restrained",_61="preserve",_60="maintain",_59="feature",_58="experience",_57="confine",_56="continue",_55="reconcile",_54="triumph",_53="reserve",_52="represent",_51="accommodate",_50="command",_49="moderate",_48="control",_47="concord",_46="endeavor",_45="examine",_44="movement",_43="strength",_42="approach",_41="deliberate",_40="consider",_39="require",_38="postulate",_37="transfer",_36="withdraw",_35="acquire",_34="discover",_33="propose",_32="purpose",_31="contract",_30="concentrate",_29="stomach",_28="conduct",_27="sustain",_26="support",_25="contain",_24="attempt",_23="crooked",_22="swallow",_21="release",_20="expression",_19="quicken",_18="profane",_17="corrupt",_16="distort",_15="pattern",_14="determine",_13="specify",_12="describe",_11="deviate",_10="pervert",_9="delineate",_8="outline",_7="abstract",_6="tightness",_5="immersion",_4="overseas",_3="aboriginal",_2="derelict",_1="abandon",_ ={a:{n:["a"],a:["a","a"]},ampere:{n:["ampere","amp","a"]},adenine:{n:["adenine","a"]},angstrom:{n:["angstrom","a"]},abdominal:{n:["abdominal","ab"]},ab:{n:["ab","av"]},wildness:{n:["wildness","abandon"]},abandon:{n:[_1,"wantonness","unconstraint"],v:[_1,"forsake","desolate","desert"]},ferocity:{n:["ferocity","fierceness","furiousness","fury","vehemence","violence","wildness"]},abandoned:{s:["abandoned",_2,"deserted"]},rudiments:{n:["rudiments","alphabet","abc","abc's","abcs"]},basics:{n:["basics","rudiments"]},fundamentals:{n:["fundamentals","basics","bedrock"]},ability:{n:["ability","power"]},able:{s:["able","able-bodied","capable"]},aboriginal:{s:[_3,"primal","primeval","primaeval","primordial"],a:[_3,"a"],n:[_3,"n"]},native:{a:["native","aboriginal"],n:["native","indigen","indigene","aborigine","aboriginal"]},miscarriage:{n:["miscarriage","abortion"]},about:{r:["about","almost","most","nearly","near","nigh","virtually","well-nigh","around"]},approximately:{r:["approximately","about","some","roughly","around"]},"about,":{s:["about,","astir,"]},above:{r:["above","supra"]},abraham:{n:["abraham","ibrahim"]},overseas:{r:[_4,"abroad"],s:[_4,"s"]},afield:{r:["afield","abroad"]},abroad:{s:["abroad","overseas"],r:["abroad","r"]},oversea:{r:["oversea","overseas"],s:["oversea","overseas"]},"acrylonitrile-butadiene-styrene":{n:["acrylonitrile-butadiene-styrene","abs"]},absent:{s:["absent","absentminded","abstracted","scatty"],v:["absent","remove"]},lacking:{s:["lacking","absent","missing","wanting"]},deficient:{s:["deficient","lacking,","wanting,","inferior","substandard"],a:["deficient","a"]},absolute:{s:["absolute","infrangible","inviolable","downright","out-and-out,","rank,","right-down","sheer,"]},insufficient:{a:["insufficient","deficient"]},absolutely:{r:["absolutely","perfectly","utterly","dead"]},absorb:{v:["absorb","engross","engage","occupy","suck","imbibe","draw","assimilate","ingest"]},steep:{v:["steep","immerse","engulf","plunge","engross","absorb","infuse"],s:["steep","s"]},exorbitant:{s:["exorbitant","extortionate","outrageous","steep","unconscionable","usurious"]},preoccupation:{n:["preoccupation","preoccupancy","absorption","engrossment"]},concentration:{n:["concentration","engrossment","absorption",_5,"density","denseness",_6,"compactness"]},assimilation:{n:["assimilation","absorption"]},abstract:{s:[_7,"abstractionist","nonfigurative","nonobjective"],v:[_7,"v"],n:[_7,"n"]},pilfer:{v:["pilfer","cabbage","purloin","pinch",_7,"snarf","swipe","hook","sneak","filch","nobble","lift"]},outline:{n:[_8,"synopsis",_7,"precis","schema","scheme","lineation"],v:[_8,"v"]},abstraction:{n:["abstraction",_7,"generalization","generalisation"]},acculturation:{n:["acculturation","assimilation","culture"]},assiduity:{n:["assiduity","assiduousness","concentration"]},preoccupancy:{n:["preoccupancy","preoccupation"]},delineate:{v:[_9,"limn","outline"],a:[_9,"a"]},draft:{v:["draft","outline"],n:["draft","draught","drawing","potation","tipple"]},sketch:{v:["sketch",_8,"adumbrate"],n:["sketch","survey","resume","vignette","study"]},abstractedness:{n:["abstractedness","abstraction"]},socialization:{n:["socialization","socialisation","acculturation","enculturation","socializing","socialising"]},abuse:{v:["abuse","clapperclaw","blackguard","shout"],n:["abuse","insult","revilement","contumely","vilification"]},pervert:{v:[_10,"misuse","abuse"],n:[_10,"deviant",_11,"degenerate"]},mistreat:{v:["mistreat","maltreat","abuse","ill-use","step","ill-treat"]},misuse:{n:["misuse","abuse"],v:["misuse","v"]},maltreatment:{n:["maltreatment","ill-treatment","ill-usage","abuse"]},actinium:{n:["actinium","ac"]},cartoon:{n:["cartoon","sketch","toon"]},delineated:{a:["delineated","represented","delineate"]},trace:{v:["trace","draw","line",_12,_9,"retrace","follow"],n:["trace","hint","tint","suggestion","vestige","tincture","shadow"]},specify:{v:[_13,"define",_9,"delimit","delimitate","set",_14,"fix","limit","particularize","particularise","specialize","specialise"]},define:{v:["define","delineate"]},academic:{s:["academic","donnish","pedantic"],n:["academic","n"]},academician:{n:["academician","academic","schoolman"]},blueprint:{v:["blueprint","draft","draught"],n:["blueprint","design","pattern"]},enlist:{v:["enlist","draft"]},gulp:{n:["gulp","draft","draught","swig","gulping"],v:["gulp","quaff","swig"]},conscription:{n:["conscription","muster","draft"]},misapply:{v:["misapply","misuse"]},twist:{v:["twist",_10,"convolute","sophisticate","sprain","wrench","turn","wrick","rick","twine","distort"],n:["twist","turn","wrench"]},corrupt:{v:[_17,_10,"subvert","demoralize","demoralise","debauch","debase",_18,"vitiate","deprave","misdirect","spoil"],s:[_17,"tainted","corrupted"],a:[_17,"a"]},accelerate:{v:["accelerate","speed","quicken"]},stress:{v:["stress","accent","accentuate","emphasize","emphasise","punctuate"],n:["stress","emphasis","accent","strain","focus"]},dialect:{n:["dialect","idiom","accent"]},emphasis:{n:["emphasis","accent"]},wrench:{v:["wrench","twist"],n:["wrench","twist","pull","spanner"]},wind:{v:["wind","twist","curve","wrap","roll","twine"],n:["wind","winding","twist","malarkey","malarky","jazz","nothingness"]},flex:{v:["flex","bend","deform","twist","turn"]},writhe:{v:["writhe","wrestle","wriggle","worm","squirm","twist"]},braid:{n:["braid","plait","tress","twist","braiding"],v:["braid","lace","plait","pleach"]},eddy:{n:["eddy","twist"],v:["eddy","purl","whirlpool","swirl","whirl"]},bend:{n:["bend","crook","twist","turn","curve"],v:["bend","flex"]},kink:{n:["kink","twist","twirl"],v:["kink","v"]},spin:{n:["spin","twirl","twist","twisting","whirl"],v:["spin","whirl","reel","gyrate"]},device:{n:["device","gimmick","twist"]},construction:{n:["construction","twist",_20,"building"]},turn:{n:["turn","twist","bout","round","play","turning"],v:["turn","grow","release"]},take:{v:["take","accept","have","make","submit","read","occupy"],n:["take","n"]},accept:{v:["accept","take",_22,"admit","consent","have"]},bear:{v:["bear","accept","assume","hold"]},crooked:{a:[_23,"corrupt"],s:[_23,"s"]},defile:{v:["defile","sully",_17,"taint","cloud"],n:["defile","gorge"]},bribe:{v:["bribe",_17,"buy"],n:["bribe","payoff"]},satisfactory:{s:["satisfactory","acceptable","decent"]},toleration:{n:["toleration","acceptance","sufferance"]},adoption:{n:["adoption","acceptance","acceptation","espousal"]},credence:{n:["credence","acceptance"]},try:{v:["try","strain","stress","render","seek",_24,"essay","assay"],n:["try","n"]},tension:{n:["tension","tenseness","stress","tensity","tautness"]},accepted:{s:["accepted","recognized","recognised"]},hold:{v:["hold","carry","bear",_25,_26,_27,"throw","have","make","give"],n:["hold","keep"]},behave:{v:["behave","acquit","bear","deport",_28,"comport","carry"]},wear:{v:["wear","bear","don","assume","endure"],n:["wear","wearing"]},yield:{v:["yield","pay","bear","succumb","relent","soften","give","afford"],n:["yield","fruit"]},digest:{v:["digest","endure",_29,"bear","stand","tolerate",_26,"brook","abide","suffer","condense","concentrate"],n:["digest","n"]},vehemence:{n:["vehemence","emphasis"]},contract:{v:[_31,"take","get","undertake"],n:[_31,"declaration"]},drive:{v:["drive","take","ride","get","aim","motor"],n:["drive","parkway","ride","driving","thrust"]},contain:{v:[_25,"take","hold"]},claim:{v:["claim","take","exact","arrogate"],n:["claim","title"]},subscribe:{v:["subscribe","take","support"]},lease:{v:["lease","rent","hire","charter","engage","take","let"],n:["lease","rental","letting"]},carry:{v:["carry","pack","take","hold","persuade","sway","run","extend","convey","express"]},aim:{v:["aim","take","train","direct",_32,"purport","propose"],n:["aim","object","objective","target"]},learn:{v:["learn","study","read","take","hear",_34,"see","larn","acquire"]},assume:{v:["assume","take","strike",_35,"adopt","usurp","seize","arrogate","presume"]},consume:{v:["consume","ingest","take","have","eat","deplete","exhaust","squander","waste","ware"]},remove:{v:["remove","take",_36,"transfer"]},film:{v:["film","shoot","take"],n:["film","cinema","celluloid"]},necessitate:{v:["necessitate","ask",_38,"need",_39,"take","involve","demand"]},consider:{v:[_40,"take","deal","debate","moot",_41,"count","weigh"]},fill:{v:["fill","take","occupy"],n:["fill","n"]},choose:{v:["choose","take","select","prefer","opt"]},bring:{v:["bring","convey","take","land","get","fetch","work","play","wreak"]},lead:{v:["lead","take","direct",_28,"guide","top","head"],n:["lead","leading","lead-in","lede","track","trail","pb"]},return:{n:["return","issue","take","takings","proceeds","yield","payoff","homecoming"],v:["return","v"]},credenza:{n:["credenza","credence"]},borrowing:{n:["borrowing","adoption"]},access:{n:["access","approach"]},entree:{n:["entree","access","accession","admission","admittance"]},tug:{v:["tug","labor","labour","push","drive"],n:["tug","jerk"]},repel:{v:["repel","drive","repulse","rebuff"]},force:{v:["force","drive","ram","thrust"],n:["force","personnel","forcefulness","strength"]},driveway:{n:["driveway","drive"]},campaign:{n:["campaign","cause","crusade","drive",_44,"effort","safari"],v:["campaign","run"]},hear:{v:["hear","try"]},sample:{v:["sample","try","taste"]},judge:{v:["judge","adjudicate","try"],n:["judge","justice","jurist"]},test:{v:["test","prove","try",_45,"essay"],n:["test","trial","run"]},attempt:{n:[_24,"effort",_46,"endeavour","try"],v:[_24,"v"]},agree:{v:["agree","hold","concur","concord"]},declare:{v:["declare","adjudge","hold"]},halt:{v:["halt","hold","arrest"],n:["halt","n"],s:["halt","s"]},control:{v:[_48,"hold",_25,"check","curb",_49,"verify","command"],n:[_48,"controller"]},apply:{v:["apply","hold"]},defy:{v:["defy","withstand","hold","dare","resist","refuse"]},oblige:{v:["oblige","bind","hold","obligate","accommodate"]},defend:{v:["defend","guard","hold",_26,"represent"]},reserve:{v:[_53,"hold","book"],n:[_53,"reticence","taciturnity","backlog","stockpile"]},prevail:{v:["prevail","hold","obtain","persist","run","endure","triumph"]},accommodate:{v:[_51,"hold","admit",_55,"conciliate"]},retain:{v:["retain","hold",_56,"keep"]},restrain:{v:["restrain",_57,"hold","constrain","keep","encumber","cumber"]},harbor:{v:["harbor","harbour","hold","entertain","nurse","shield"],n:["harbor","harbour"]},deem:{v:["deem","hold"]},have:{v:["have","hold","get","make",_58,"feature"]},keep:{v:["keep",_60,"hold","preserve"],n:["keep","donjon","dungeon"]},handle:{n:["handle","grip","handgrip","hold"],v:["handle","palm"]},detention:{n:["detention","detainment","hold","custody"]},delay:{n:["delay","hold","postponement","wait","holdup"],v:["delay","detain"]},appreciation:{n:["appreciation","grasp","hold"]},clasp:{n:["clasp","clench","clutch","clutches","grasp","grip","hold"],v:["clasp","v"]},approachability:{n:["approachability","accessibility"]},handiness:{n:["handiness","accessibility","availability","availableness"]},rent:{v:["rent","hire","charter","lease"],n:["rent","rip","split"]},moderate:{v:[_49,"chair","lead"],s:[_49,_62,"temperate"],n:[_49,"n"]},run:{v:["run","lead","go","pass","extend",_63,"unravel","bleed","execute","flow","feed","course"],n:["run","ladder","ravel","running","tally"]},precede:{v:["precede","lead","preface","premise",_64,"predate"]},go:{v:["go","lead","proceed","move","depart"],n:["go","spell","tour","turn"]},conduct:{v:[_28,"lead","direct","deal"],n:[_28,"n"]},contribute:{v:["contribute","lead","conduce","give"]},head:{v:["head","lead"],n:["head","chief","caput"]},leave:{v:["leave","result","lead","allow","provide","depart"],n:["leave","n"]},leash:{n:["leash","tether","lead"],v:["leash","v"]},tip:{n:["tip","lead","steer","wind","hint"],v:["tip","fee","bung"]},star:{n:["star","principal","lead"],v:["star","asterisk"]},compilation:{n:["compilation","digest","compiling"]},call:{n:["call","claim"],v:["call","telephone","phone","ring"]},title:{n:["title","claim","rubric"],v:["title","v"]},determine:{v:[_14,"check","see","ascertain","watch","learn","set","shape","mold","influence","regulate","find"]},teach:{v:["teach","learn","instruct"],n:["teach","thatch","blackbeard"]},memorize:{v:["memorize","memorise","con","learn"]},abridge:{v:["abridge","foreshorten","abbreviate","shorten","cut",_31,"reduce"]},narrow:{v:["narrow","contract"],s:["narrow","s"],a:["narrow","a"]},condense:{v:["condense",_30,_31,"distill","distil"]},shrink:{v:["shrink",_31,"reduce","shrivel"],n:["shrink","n"]},compress:{v:["compress","constrict",_65,_66,_31,"press"]},sign:{v:["sign",_31,"subscribe","signal","signalize","signalise","ratify"],n:["sign","mark"]},accessible:{s:["accessible","approachable"]},target:{v:["target","aim","place","direct","point"],n:["target","mark","butt"]},calculate:{v:[_67,"aim","direct",_68,"reckon","figure",_69,"cipher","cypher","compute"]},bearing:{n:["bearing","heading","aim","comportment","presence","mien"]},purpose:{n:[_32,"intent","intention","aim","design"],v:[_32,"resolve"]},give:{v:["give","yield","dedicate",_71,"commit","devote","render","apply","pay","gift",_72,"throw"],n:["give","spring","springiness"]},succumb:{v:["succumb","yield"]},concede:{v:["concede","yield","grant","cede","profess","confess"]},render:{v:["render","yield","return","give","generate",_73,"submit"]},output:{n:["output","yield","production","outturn","turnout"]},tire:{v:["tire","wear","weary","jade","outwear","fag","fatigue","pall"],n:["tire","tyre"]},break:{v:["break","wear","bust","recrudesce",_75,"discontinue","stop","burst","erupt","separate"],n:["break","breakout","jailbreak","gaolbreak","prisonbreak","prison-breaking","interruption",_77,"gap"]},clothing:{n:["clothing","vesture","wear","wearable","habiliment"]},post:{v:["post","carry","brand"],n:["post","stake","station"]},dribble:{v:[_79,"carry","drip","drop"],n:[_79,"dribbling"]},stock:{v:["stock","carry","stockpile"],n:["stock","gillyflower","caudex","gunstock","inventory"],s:["stock","s"]},impart:{v:["impart",_28,_81,"convey","carry",_82,"leave","give"]},transport:{v:[_83,"carry","send","ship"],n:[_83,"n"]},act:{v:["act","behave","do","play","roleplay","playact",_52,"move"],n:["act",_84,"number","turn","bit","deed","enactment"]},pledge:{v:["pledge","subscribe","plight"],n:["pledge","toast"]},view:{v:["view","consider"],n:["view","aspect",_85,"scene","vista","panorama","eyeshot","survey","sight"]},regard:{v:["regard","consider"],n:["regard","wish","compliments","respect"]},think:{v:["think","believe",_40,"conceive","opine",_87,"imagine","reckon","guess","cogitate","cerebrate"]},study:{v:["study",_40,"meditate","contemplate"],n:["study","work"]},see:{v:["see",_40,"reckon","view","regard","check","insure","ensure",_48,"ascertain","assure","escort"]},movie:{n:["movie","film",_88,"pic","flick"]},simulate:{v:["simulate","assume","sham","feign"]},check:{v:["check","arrest","stop",_25,"mark","tick","chink","checker","chequer","retard","delay"],n:["check","chip","checkout","chit","tab","cheque"]},incorporate:{v:["incorporate",_25,"comprise"],s:["incorporate","incorporated","integrated","merged","unified"]},fetch:{v:["fetch","bring"]},lend:{v:["lend","impart","bestow","contribute","add","bring","loan"]},institute:{v:["institute","bring"]},satiate:{v:["satiate","sate","replete","fill"],a:["satiate","satiated"]},fit:{v:["fit","meet","satisfy","fill","fulfill","fulfil","go"],n:["fit","tantrum","scene","conniption"]},occupy:{v:["occupy","fill","reside"]},filling:{n:["filling","fill"]},devour:{v:["devour","demolish","down","consume","guttle","raven","pig"]},murder:{v:["murder","slay","hit","dispatch","off","remove"],n:["murder","slaying","execution"]},accessory:{s:["accessory","adjunct","ancillary","adjuvant","appurtenant","auxiliary"],n:["accessory","accessary","appurtenance",_90,"add-on","accoutrement","accouterment"]},accessary:{s:["accessary","accessory"],n:["accessary","n"]},accident:{n:["accident","stroke","fortuity"]},lodge:{v:["lodge",_51,"wedge","stick","deposit"],n:["lodge","n"]},adapt:{v:["adapt","accommodate"]},suit:{v:["suit",_51,"fit"],n:["suit","n"]},fall:{v:["fall","return","pass","devolve","come",_92,"settle","light","shine","strike"],n:["fall","pin","downfall","autumn"]},reelect:{v:["reelect","return"]},refund:{v:["refund","return","repay"],n:["refund","repayment"]},retort:{v:["retort","repay","return","riposte","rejoin"],n:["retort","n"]},revert:{v:["revert","return","retrovert","regress"]},reappearance:{n:["reappearance","return"]},rejoinder:{n:["rejoinder","retort","return","riposte",_94,"comeback","counter"]},recurrence:{n:["recurrence","return"]},restitution:{n:["restitution","return","restoration","regaining"]},adjustment:{n:[_96,"accommodation",_97,"registration","readjustment"]},entrance:{n:["entrance","entranceway","entryway","entry","entree","entering","ingress","incoming"],v:["entrance","spellbind"]},company:{v:[_98,"companion","accompany"],n:[_98,"troupe","companionship","fellowship","society"]},attendant:{s:["attendant","consequent","accompanying","concomitant","incidental","ensuant","resultant","sequent","collateral"],n:["attendant","attender","attendee","meeter","tender"]},achieve:{v:["achieve","accomplish","attain","reach"]},accompanied:{a:["accompanied","attended"]},accomplished:{s:["accomplished","effected",_99,"completed","realized","realised","complete"]},skill:{n:["skill","accomplishment","acquirement","acquisition","attainment","science"]},accomplishment:{n:["accomplishment","achievement"]},accord:{n:["accord","conformity","accordance"],v:["accord","allot","grant"]},become:{v:["become","suit","turn","go","get"]},befit:{v:["befit","suit","beseem"]},courtship:{n:["courtship","wooing","courting","suit"]},lawsuit:{n:["lawsuit","suit","case","cause","causa"]},charge:{v:["charge","lodge","file","saddle","burden","level","point","bill","accuse"],n:["charge","burster","bearing","billing","complaint"]},hostel:{n:["hostel","hostelry","inn","lodge","auberge"]},club:{n:["club","society","guild","gild","lodge","order"],v:["club","bludgeon"]},adjust:{v:["adjust","conform","adapt","set","correct"]},report:{v:["report",_12,_102,"cover"],n:["report",_102,"story","study"]},account:{v:[_102,"calculate"],n:[_102,"accounting"]},bill:{n:["bill",_102,"invoice","peak","eyeshade","visor","vizor","billhook","note","banknote","greenback","measure"],v:["bill","v"]},score:{n:["score",_102,"scotch"],v:["score","mark","nock","hit","tally"]},explanation:{n:["explanation","account"]},history:{n:["history",_102,"chronicle","story"]},consequently:{r:["consequently","accordingly","therefore"]},compel:{v:["compel","oblige","obligate"]},accountability:{n:["accountability","answerability","answerableness"]},accompaniment:{n:["accompaniment","concomitant","attendant","co-occurrence","backup","support"]},accountancy:{n:["accountancy","accounting"]},party:{n:["party","company"]},caller:{n:["caller",_98,"caller-up","phoner","telephoner","caller-out"]},capture:{v:[_104,"enamour","trance","catch","becharm","enamor","captivate","beguile","charm","fascinate","bewitch","entrance","enchant"],n:[_104,"seizure"]},allowance:{n:["allowance",_96,"leeway","margin","tolerance"]},adaptation:{n:["adaptation","adaption",_96,"version"]},alteration:{n:["alteration","modification","adjustment"]},accredited:{s:["accredited","commissioned","licensed","licenced"]},cabaret:{n:["cabaret","nightclub","club","nightspot","floorshow"]},clubhouse:{n:["clubhouse","club"]},blame:{v:["blame","charge","pick","fault"],n:["blame","rap"],s:["blame","s"]},load:{v:["load","charge","adulterate",_106,"dilute","debase","lade","laden"],n:["load","loading","burden"]},agitate:{v:[_107,"rouse","charge","commove","excite","vex",_108,"foment"]},consign:{v:["consign","charge"]},commit:{v:["commit","institutionalize","institutionalise","send","charge","practice"]},appoint:{v:["appoint","charge","name","nominate","constitute"]},tear:{v:["tear","shoot","charge","buck","rupture","snap","bust"],n:["tear","teardrop"]},accusation:{n:["accusation","charge","accusal"]},commission:{n:[_111,"charge",_112,"commissioning"]},bang:{n:["bang","boot","charge","rush","flush","thrill","kick","fringe","clap","eruption","blast","bam"],r:["bang","slap","slapdash","smack","bolt"],v:["bang","v"]},cathexis:{n:["cathexis","charge"]},mission:{n:["mission","charge","commission"]},care:{n:["care","charge","tutelage","guardianship","maintenance","upkeep","attention","aid","tending"],v:["care","v"]},harmonize:{v:["harmonize","harmonise",_63,"accord",_47,"agree","chord","reconcile"]},treaty:{n:["treaty","pact","accord"]},agreement:{n:["agreement","accord",_47,"arrangement",_113,"understanding"]},grade:{v:["grade","score","mark"],n:["grade","gradation","level","tier"]},seduce:{v:["seduce","score","make"]},grudge:{n:["grudge","score","grievance"],v:["grudge","v"]},mark:{n:["mark","grade","score","deutschmark","stigma","brand","stain","print"],v:["mark","v"]},accuracy:{n:["accuracy","truth"]},align:{v:["align","aline","adjust","ordinate",_115,"array"]},accurate:{s:["accurate","exact","precise"]},placard:{v:["placard","bill"],n:["placard","n"]},beak:{n:["beak","bill","neb","nib","pecker","honker","hooter","nozzle","snoot","snout","schnozzle","schnoz"],v:["beak","v"]},poster:{n:["poster","posting","placard","notice","bill","card"]},circular:{n:[_116,"handbill","bill","broadside","broadsheet","flier","flyer","throwaway"],s:[_116,"rotary","orbitual"],a:[_116,"a"]},reputation:{n:["reputation","report"]},composition:{n:[_117,"paper","report","theme","composing"]},accuse:{v:["accuse","impeach","incriminate","criminate"]},ace:{s:["ace","a-one","crack","first-rate","super","tiptop","topnotch","top-notch","tops,"],n:["ace","adept",_118,"sensation","maven","mavin","virtuoso","genius","hotshot","star","superstar","whiz","whizz","wizard","wiz"]},one:{n:["one","1","i","ace","single","unity"],s:["one","1","i","ane"]},revision:{n:["revision","alteration","revisal","revise","rescript"]},change:{n:["change","alteration","modification"],v:["change",_119,"commute","convert","alter","vary","modify"]},escort:{n:["escort","accompaniment"],v:["escort","v"]},complement:{n:["complement","accompaniment"]},punctuate:{v:["punctuate","mark"]},set:{v:["set","mark","localize","localise","place","countersink"],n:["set","circle","band","lot","readiness","seth"],s:["set","s"]},scar:{v:["scar","mark","pock","pit"],n:["scar","cicatrix","cicatrice"]},notice:{v:["notice","mark","note","acknowledge"],n:["notice","observation","observance"]},stigmatize:{v:["stigmatize","stigmatise","brand","denounce","mark"]},commemorate:{v:["commemorate","mark","remember","memorialize","memorialise","immortalize","immortalise"]},distinguish:{v:[_121,"mark","differentiate",_76,"secern","secernate","severalize","severalise","tell"]},tag:{v:["tag","label","mark"],n:["tag","ticket"]},crisscross:{n:["crisscross","cross","mark"],s:["crisscross","crisscrossed"]},scratch:{n:[_122,"scrape","scar","mark"],v:[_122,"engrave","grave",_123,"scrape"]},chump:{n:["chump","fool","gull","mark","patsy","sucker","mug"]},marker:{n:["marker","marking","mark"]},stew:{v:["stew","grudge"],n:["stew","n"]},rate:{v:["rate","rank","range","order","grade","place","value"],n:["rate","n"]},degree:{n:["degree","grade","level","stage","point","arcdegree"]},grad:{n:["grad","grade"]},class:{n:["class","form","grade","course","year","division","stratum","category","family"],v:["class","v"]},acidic:{s:["acidic","acid","acidulent","acidulous"]},acerb:{s:["acerb","acerbic","acid","acrid","bitter",_124,"caustic","sulfurous","sulphurous","virulent","vitriolic","astringent"]},acid:{n:["acid","battery-acid","dose","dot","elvis","pane","superman","zen"],s:["acid","s"]},peck:{v:["peck","pick","beak"],n:["peck","n"]},round:{a:["round","circular"],r:["round","around"],v:["round","labialize","labialise"],n:["round","troll"],s:["round","s"]},typography:{n:["typography","composition"]},writing:{n:["writing","authorship",_117,"penning"]},composing:{n:["composing","composition"]},constitution:{n:["constitution",_117,"makeup","make-up",_125,"formation",_126,"organisation"]},acknowledge:{v:["acknowledge",_128,_129,"know","receipt"]},admit:{v:["admit","acknowledge","allow","include","intromit"]},worry:{v:["worry","care","vex"],n:["worry","trouble"]},manage:{v:["manage","deal","care","handle"]},wish:{v:["wish","care","like","bid"],n:["wish","wishing","want"]},concern:{n:[_131,"care","fear","worry","headache","vexation"],v:[_131,_132,"occupy","worry"]},caution:{n:["caution","precaution","care","forethought","caveat","cautiousness","carefulness"],v:["caution","admonish","monish"]},pluck:{v:["pluck","pull","tear","deplume","deplumate","displume","plunk","pick","tweak"],n:["pluck","n"]},bust:{n:["bust","tear","binge","bout"],v:["bust","v"],s:["bust","s"]},rip:{n:["rip","rent","snag","split","tear","riptide","crosscurrent","countercurrent"],v:["rip","v"]},spang:{v:["spang","bang"]},slam:{v:["slam","bang"],n:["slam","sweep"]},hit:{n:["hit","smash","smasher","strike","bang","hitting","striking"],v:["hit","strike"]},knock:{n:["knock","bash","bang","smash","belt","roast","rap","whack","whang","knocking"],v:["knock","criticize","criticise"]},perpetration:{n:["perpetration",_111,"committal"]},deputation:{n:["deputation",_111,"delegation","delegacy","mission"]},committee:{n:["committee","commission"]},blasted:{s:["blasted","blame","blamed",_134,"damn","damned","darned","deuced","goddam","goddamn","goddamned","infernal"]},incrimination:{n:["incrimination","inculpation","blame"]},shake:{v:["shake",_107,"didder"],n:["shake","n"]},stir:{v:["stir","shift","budge","agitate"],n:["stir","splash"]},crusade:{v:["crusade","fight","press","campaign","push","agitate"],n:["crusade","n"]},repute:{n:["repute","reputation"]},invest:{v:["invest","put","commit","place","vest","enthrone","clothe","adorn"]},entrust:{v:["entrust","intrust","trust","confide","commit","leave"]},perpetrate:{v:["perpetrate","commit","pull"]},warhead:{n:["warhead","payload","load"]},lode:{n:["lode","load"]},burden:{n:["burden","load","encumbrance","incumbrance","onus"],v:["burden","burthen","weight"]},cargo:{n:["cargo","lading","freight","load","loading","payload","shipment","consignment"]},matchless:{s:["matchless","nonpareil","one,","peerless","unmatched","unmatchable","unrivaled","unrivalled"]},"one,":{s:["one,","right,","unitary"]},acoustic:{a:["acoustic","acoustical"]},develop:{v:[_75,_35,"evolve","grow"]},acquire:{v:[_35,"win","gain"]},grow:{v:["grow",_75,"produce","get",_35,"raise","farm"]},get:{v:["get",_35,_135,"catch",_104,"let","have"]},learning:{n:["learning","acquisition"]},acre:{n:["acre","akko","akka","accho"]},estate:{n:["estate","land","acres","demesne"]},comment:{v:[_136,"notice","remark"],n:[_136,"commentary"]},detect:{v:["detect",_137,"find",_34,"notice"]},notification:{n:["notification","notice"]},dissemble:{v:["dissemble",_138,"act","cloak","mask"]},work:{v:["work","act","process"],n:["work","n"]},across:{r:["across","crosswise","crossways"]},acting:{n:["acting","playing","playacting","performing"]},model:{v:["model","simulate","pose","sit",_140,"mold","mould","pattern"],n:["model","modelling","modeling",_141,"simulation","poser","framework"]},imitate:{v:["imitate","copy","simulate"]},modernize:{v:["modernize","modernise","develop"]},train:{v:["train",_75,_142,"educate","rail"],n:["train","n"]},explicate:{v:["explicate","formulate","develop"]},originate:{v:["originate","arise","rise",_75,"uprise","grow",_143,"start"]},evolve:{v:["evolve","germinate","develop"]},beget:{v:["beget","get","engender","father","mother","sire","generate"]},suffer:{v:["suffer",_27,"have","get","lose","meet","hurt","endure"]},perplex:{v:["perplex","vex","stick","get","puzzle","mystify","baffle","beat","pose","bewilder","flummox","stupefy","nonplus","gravel","amaze","dumbfound"]},draw:{v:["draw","get",_144,"cast","pull","make"],n:["draw","haul","haulage","lot","standoff","tie"]},catch:{v:["catch","get","arrest","overhear","grab"],n:["catch","grab","snatch","snap","stop","match","haul","gimmick"]},scram:{v:["scram","get"]},make:{v:["make","get","work","urinate","piddle","puddle","micturate","piss","pee","pee-pee","wee","wee-wee",_138,"create","do"],n:["make","n"]},induce:{v:["induce","stimulate","cause","have","get","make","induct","rush","hasten"]},experience:{v:[_58,_135,"have","get","see"]},arrive:{v:["arrive","get","come"]},receive:{v:[_135,"get","find","obtain","incur","have","invite"]},settle:{v:["settle",_14,"root","locate"],n:["settle","settee"]},decide:{v:["decide",_14,"settle",_70,"adjudicate"]},mature:{v:["mature","maturate","grow"],s:["mature","matured"],a:["mature","a"]},action:{v:["action","sue","litigate","process"],n:["action","activity","activeness"]},eruditeness:{n:["eruditeness","erudition","learnedness","learning","scholarship","encyclopedism","encyclopaedism"]},activated:{s:["activated","excited"]},gloss:{v:["gloss",_136,"annotate"],n:["gloss","rubric"]},gossip:{n:["gossip",_136,"scuttlebutt","gossiper","gossipmonger","rumormonger","rumourmonger","newsmonger"]},remark:{n:["remark",_136,"input"],v:["remark","v"]},telling:{n:[_145,"apprisal","notification"],s:[_145,"s"]},presentment:{n:["presentment","notification"]},energizing:{n:["energizing","activating","activation"],s:["energizing","energising","kinetic"]},active:{a:["active","dynamic"],s:["active","alive,","participating","combat-ready","fighting,"]},sour:{v:["sour","turn",_146,"work","acidify","acidulate","acetify"],s:["sour","rancid"],n:["sour","sourness","tartness"]},ferment:{v:[_146,"work"],n:[_146,"n"]},solve:{v:["solve","lick","work"]},exploit:{v:[_147,"work","tap"],n:[_147,"n"]},knead:{v:["knead","work"]},shape:{v:["shape","form","work","mold","mould","forge"],n:["shape","embodiment","form","configuration","contour","conformation"]},influence:{v:["influence","work"]},cultivate:{v:["cultivate","crop","work"]},exercise:{v:[_148,"work"],n:[_148,_141,_109,"drill","recitation","exercising","workout"]},function:{v:[_149,"work",_150,"go","run"],n:[_149,"office","part","role",_32,"use","map","mapping"]},oeuvre:{n:["oeuvre","work"]},workplace:{n:["workplace","work"]},employment:{n:["employment","work",_151,"employ"]},feign:{v:["feign","sham",_138,"affect","dissemble"]},activist:{s:["activist","activistic"],n:["activist","n"]},militant:{n:[_152,"activist"],s:[_152,"hawkish","warlike"]},trail:{v:["trail","train","shack"],n:["trail","n"]},coach:{v:["coach","train"],n:["coach","four-in-hand","coach-and-four","tutor","manager","handler"]},educate:{v:["educate","school","train","cultivate","civilize","civilise"]},prepare:{v:[_142,"groom","train"]},discipline:{v:["discipline","train","check",_153,"correct"],n:["discipline",_154,"field","study","bailiwick","correction"]},gearing:{n:["gearing","gear","geartrain","train"]},caravan:{n:["caravan","train"]},string:{n:["string","train","twine"],v:["string","thread","draw"]},complicate:{v:["complicate","perplex","refine","rarify","elaborate"]},watch:{v:["watch","view","see","catch",_137,"follow"],n:["watch","vigil","ticker"]},overtake:{v:["overtake","catch"]},hitch:{v:["hitch","catch"],n:["hitch","hobble","limp"]},apprehension:{n:["apprehension","arrest","catch","collar","pinch","misgiving","apprehensiveness","dread"]},hurt:{v:["hurt","ache","suffer","wound","injure","bruise","offend","spite"],s:["hurt",_156,"wounded"],n:["hurt","n"]},feel:{v:["feel",_58,"finger","sense"],n:["feel","n"]},know:{v:["know",_58,"live","cognize","cognise"]},explain:{v:["explain","explicate"]},own:{v:["own","have","possess"]},overhaul:{v:[_157,"modernize","modernise"],n:[_157,"service"]},plow:{v:["plow","plough","turn"],n:["plow","plough"]},turning:{n:["turning","turn"]},activeness:{n:["activeness","activity"]},fledged:{a:["fledged","mature"],s:["fledged","vaned"]},ripe:{a:["ripe","mature"],s:["ripe","s"]},suppurate:{v:["suppurate","mature"]},senesce:{v:["senesce","age","mature","maturate"]},ripen:{v:["ripen","mature"]},meet:{v:["meet",_159,_135,"see","gather","assemble","forgather","foregather","play"],s:["meet","s"]},welcome:{v:["welcome","receive"]},actor:{n:["actor","doer","worker","histrion","player","thespian"]},fracture:{v:["fracture","break"],n:["fracture","break","crack","cracking"]},crack:{v:["crack","check","break"],n:["crack","fling","go","pass","whirl","offer","tornado","cracking","snap","cleft","crevice","fissure","scissure"],s:["crack","s"]},pause:{v:["pause","intermit","break"],n:["pause","intermission","break","interruption","suspension"]},collapse:{v:[_160,"give","break",_161,"burst"],n:[_160,"prostration"]},bankrupt:{v:["bankrupt","ruin","break","smash"],s:["bankrupt","belly-up,"],n:["bankrupt","insolvent"]},demote:{v:["demote","bump","relegate","break"]},separate:{v:[_76,"part","split","break","disunite","divide"],s:[_76,"s"],n:[_76,"n"]},dampen:{v:["dampen","damp","soften","weaken","break","deaden"]},fail:{v:["fail","die","go","break","flunk","bomb","betray","miscarry","neglect"]},unwrap:{v:["unwrap","disclose","reveal",_34,"expose","divulge","break","uncover","undo"]},better:{v:["better","break","improve","amend","ameliorate","meliorate"],r:["better","best"],n:["better","n"]},violate:{v:[_163,"break"]},transgress:{v:["transgress","offend","infract",_163,"breach","break",_164,"overstep"]},interrupt:{v:["interrupt","break",_108,"disrupt"]},breakage:{n:["breakage","break","breaking"]},respite:{n:[_165,"recess","break","rest","relief"],v:[_165,"v"]},rupture:{n:["rupture","breach","break","severance","rift"],v:["rupture","v"]},fault:{n:["fault","faulting","shift","fracture","break"],v:["fault","v"]},interruption:{n:["interruption","break"]},disembowel:{v:["disembowel","eviscerate","draw"]},tie:{v:["tie","draw","bind"],n:["tie","crosstie","sleeper"]},guide:{v:["guide","run","draw","pass","steer"],n:["guide","n"]},attract:{v:["attract","pull","draw","appeal"]},pull:{v:["pull","draw","overstretch"],n:["pull","clout","pulling"]},withdraw:{v:[_36,"draw",_166,"recede","retire"]},puff:{v:["puff","drag","draw","huff","chuff","whiff"],s:["puff","puffed"],n:["puff","drag","pull","whiff"]},describe:{v:[_12,"depict","draw"]},reap:{v:["reap","draw",_167,"glean"]},hook:{n:["hook","draw","hooking","claw","crotchet"],v:["hook","solicit","accost","snare","snitch","thieve","cop","glom"]},cook:{v:["cook","fix","ready","make","prepare"]},stool:{v:["stool","defecate","shit","ca-ca","crap","make","tiller"],n:["stool","n"]},reach:{v:["reach","make","attain","hit","gain","touch","contact"],n:["reach","reaching","stretch"]},name:{v:["name","nominate","make","call","identify"],n:["name","epithet","figure","gens"]},construct:{v:[_169,"build","make"],n:[_169,"n"]},form:{v:["form",_110,"make","spring",_170,"organise"],n:["form","shape",_15,"cast","variant","strain","var.","signifier","descriptor"]},do:{v:["do","make","manage","fare","come","perform"],n:["do","doh","ut"]},gain:{v:["gain","clear","make","earn",_172,_173,_174,"win","gather"],n:["gain","n"]},create:{v:["create","make"]},produce:{v:["produce","make","create"]},cause:{v:["cause","do","make"],n:["cause","reason","grounds"]},shuffle:{n:["shuffle","shuffling","make"],v:["shuffle","ruffle","mix",_175,"shamble"]},brand:{n:["brand","make","firebrand"],v:["brand","trademark","brandmark"]},acuate:{s:["acuate","acute","sharp","needlelike"]},acute:{s:["acute","discriminating","incisive","keen","knifelike","penetrating","penetrative","piercing","sharp","intense"]},condition:{n:[_153,"shape","status","strings","term","precondition","stipulation"],v:[_153,"v"]},ad:{r:["ad","a.d."],n:["ad","advertisement","advertizement","advertising","advertizing","advert"]},actually:{r:["actually","really"]},actual:{s:["actual","factual","genuine","literal","real"],a:["actual","existent"]},dark:{s:["dark","dour","glowering","glum","moody","morose","saturnine","sour","sullen","obscure"],n:["dark","darkness"]},false:{s:["false","off-key","sour","untrue","mistaken"],r:["false","r"]},off:{s:["off","sour","turned"],r:["off","away"],a:["off","cancelled"],v:["off","v"]},sourness:{n:["sourness","sour","acidity"]},adam:{n:["adam","ecstasy","xtc","go","cristal","x"]},clear:{v:["clear","solve","top","crystallize","crystallise","crystalize","crystalise","enlighten","illuminate","elucidate"],s:["clear","percipient","decipherable","readable","clean-cut","clear-cut","unmortgaged","open"],n:["clear","n"],r:["clear","r"],a:["clear","a"]},resolve:{v:[_70,"solve"],n:[_70,"n"]},domesticate:{v:["domesticate","cultivate","naturalize","naturalise","tame","domesticize","domesticise","reclaim"]},analyze:{v:["analyze","analyse","study",_45,_177,"psychoanalyze","psychoanalyse","dissect"]},cogitation:{n:["cogitation","study"]},survey:{n:["survey","study"],v:["survey","appraise"]},charm:{v:["charm","influence","tempt","becharm"],n:["charm","n"]},massage:{v:["massage","knead"]},drill:{v:["drill",_148,_109,"practise"],n:["drill","n"]},practice:{v:[_109,"practise",_148,"do","apply","use"],n:[_109,"praxis","pattern"]},exert:{v:["exert","exercise"]},use:{n:["use","usage","utilization","utilisation","employment",_148,"enjoyment"],v:["use","utilize","utilise","apply","employ","expend","habituate"]},zymosis:{n:["zymosis","zymolysis","fermentation","fermenting","ferment"]},agitation:{n:["agitation",_146,"fermentation","tempestuousness","unrest",_178,"turmoil",_179,"hullabaloo"]},belligerent:{s:[_180,_152,"war-ridden","warring"],n:[_180,"n"]},competitive:{s:["competitive",_152,"free-enterprise,","private-enterprise,"],a:["competitive","competitory"]},officiate:{v:["officiate","function"]},serve:{v:["serve",_149,"attend","assist",_158,_139,"do","dish","help"],n:["serve","service"]},routine:{n:[_84,"subroutine","subprogram","procedure","function"],s:[_84,"s"]},affair:{n:["affair","occasion",_149,"affaire","intimacy","liaison",_181,"amour"]},overwork:{v:["overwork","exploit"],n:["overwork","overworking"]},feat:{n:["feat","effort","exploit"]},adapter:{n:["adapter","adaptor"]},arranger:{n:["arranger","adapter","transcriber"]},adapted:{s:["adapted","altered"]},adaptive:{a:["adaptive","adaptative"]},total:{v:["total","tot","sum","summate","add","tally","number","come","amount"],s:["total","s"],n:["total","n"]},add:{v:["add","append","supply"]},addiction:{n:["addiction","dependence","dependance","dependency","habituation"]},summation:{n:["summation","addition","plus","rundown"]},accession:{n:["accession","addition","assenting"]},addition:{n:["addition","increase","gain","add-on","improver"]},extra:{s:["extra","additional","special"],n:["extra","duplicate"]},address:{v:[_184,"accost","call","direct","speak"],n:[_184,"destination","speech","reference"]},cover:{v:["cover","treat","handle","plow","deal",_184,_186,"overcompensate","insure","underwrite",_56,"extend"],n:["cover","covering","screening","masking"]},"savoir-faire":{n:["savoir-faire","address"]},aggressive:{s:["aggressive",_180,"fast-growing,","strong-growing"]},combatant:{n:["combatant","battler",_180,"fighter","scrapper"]},full:{s:["full","total","good","replete,"],r:["full","r"],v:["full","v"]},entire:{s:["entire","full","total","intact"],n:["entire","n"]},sum:{n:["sum","amount","total","totality",_187,"summation"],v:["sum","v"]},organizer:{n:["organizer","organiser","arranger"]},excess:{s:["excess","extra","redundant","spare","supererogatory","superfluous","supernumerary","surplus"],n:["excess","excessiveness","inordinateness","surplus","surplusage","nimiety"]},supernumerary:{n:["supernumerary","extra"],s:["supernumerary","s"]},summarize:{v:["summarize","summarise","sum"]},union:{n:["union","sum","join","unification","uniting","conjugation","jointure","conglutination","north","brotherhood"],s:["union","federal"]},kernel:{n:["kernel",_188,"core","center","centre","essence","gist","heart","inwardness","marrow","meat","nub","pith","sum","nitty-gritty"]},brood:{v:["brood","hatch","cover","incubate","hover","loom","dwell"]},overlay:{v:[_189,"cover"],n:[_189,"n"]},breed:{v:["breed","cover","multiply"],n:["breed","strain","stock"]},shroud:{v:["shroud","enshroud","hide","cover"],n:["shroud","n"]},traverse:{v:[_190,"track","cover","cross","deny"],n:[_190,"n"]},embrace:{v:["embrace","encompass","comprehend","cover","hug","bosom","squeeze"],n:["embrace","bosom","embracing","embracement"]},top:{n:["top","cover","whirligig","teetotum","upside"],v:["top","pinch"]},covering:{n:["covering","cover"]},binding:{n:["binding","cover","back"]},blanket:{n:["blanket","cover","mantle"]},screen:{n:["screen","cover","covert","concealment"],v:["screen","sieve","sort","test"]},fully:{r:["fully","full"]},wide:{s:["wide","wide-cut","full"],a:["wide","broad"],r:["wide","widely","astray"]},"broad,":{s:["broad,","full,"]},wax:{v:["wax","full","mount","climb","rise"]},adequate:{s:["adequate","passable","tolerable","enough"],a:["adequate","equal"]},integral:{s:["integral","entire","intact"]},stallion:{n:["stallion","entire"]},adjacent:{s:["adjacent","conterminous","contiguous","neighboring,","next"]},deepen:{v:["deepen","change"]},transfer:{v:[_37,"change",_191,_192,"shift","reassign"],n:[_37,"transference","carry-over","transferee"]},exchange:{v:[_119,"change","interchange"],n:[_119,"interchange"]},switch:{v:["switch","shift","change"],n:["switch","switching","shift"]},variety:{n:[_194,"change"]},shield:{v:["shield","screen"],n:["shield","buckler"]},riddle:{v:["riddle","screen"],n:["riddle","conundrum","enigma","brain-teaser"]},sieve:{n:["sieve","screen"],v:["sieve","sift"]},filmdom:{n:["filmdom","screenland","screen"]},blind:{n:["blind","screen"],s:["blind","unreasoning"],a:["blind","unsighted"],v:["blind","dim"]},adjusted:{s:["adjusted","familiarized","familiarised"]},overlie:{v:["overlie","overlay"]},sheathing:{n:["sheathing",_189,"overlayer"]},crown:{v:["crown","top","coronate"],n:["crown","crownwork","jacket","cap","crest","treetop","diadem"]},exceed:{v:["exceed","transcend","overstep","pass","top","surpass"]},acme:{n:["acme","height","elevation","peak","pinnacle","summit","superlative","meridian","tiptop","top"]},peak:{n:["peak","crown","crest","top","tip","summit"]},dressing:{n:["dressing","bandaging","binding","grooming"]},pall:{n:["pall","shroud","cerement","winding-sheet","winding-clothes"],v:["pall","dull"]},sheet:{n:["sheet","tack","mainsheet","shroud"]},cross:{v:["cross",_190,"span","sweep"],n:["cross","n"],s:["cross","s"]},traversal:{n:["traversal","traverse"]},transom:{n:["transom",_190,"fanlight"]},trave:{n:["trave",_190,"crossbeam","crosspiece"]},grizzle:{v:["grizzle","brood","stew"]},sulk:{v:["sulk","pout","brood"],n:["sulk","sulkiness"]},"across-the-board":{s:["across-the-board","all-embracing","all-encompassing","all-inclusive","blanket,","broad","encompassing","extensive","panoptic","wide"]},overindulgence:{n:["overindulgence","excess"]},surfeit:{n:[_195,"excess","overabundance"],v:[_195,"cloy"]},application:{n:["application","coating","covering","diligence"]},espouse:{v:["espouse","embrace","adopt"]},rewrite:{n:["rewrite","revision","rescript"]},engender:{v:["engender","breed","spawn"]},administer:{v:["administer","dispense","administrate"]},distribute:{v:[_196,"administer","deal","lot","dispense","allot"]},administration:{n:["administration",_197,"governance",_125,"brass",_126,_127,"disposal"]},government:{n:["government","governing","governance","administration","authorities","regime"]},presidency:{n:["presidency","administration","presidentship"]},administrator:{n:["administrator","executive"]},stagger:{v:["stagger",_196,"flounder","reel","keel","lurch","swag","careen"],n:["stagger","n"]},circulate:{v:["circulate","circularize","circularise",_196,"disseminate","propagate",_198,"spread",_199,"disperse"]},spread:{v:["spread",_196,_200,"overspread","propagate"],n:["spread","spreading","spreadhead","paste"],s:["spread","s"]},politics:{n:["politics","government"]},lurch:{n:["lurch",_201,"stagger","pitch","pitching","lunge"],v:["lurch","pitch","shift","skunk"]},outspread:{s:["outspread","spread"]},dispersed:{s:["dispersed","spread"]},diffuse:{v:[_199,"spread"],a:[_199,"a"]},unfold:{v:["unfold","spread","open",_106,"extend"]},bedspread:{n:["bedspread","bedcover","counterpane","spread"]},banquet:{n:["banquet","feast","spread"],v:["banquet","v"]},scatter:{n:[_200,"spread","scattering","strewing"],v:[_200,_202,"dot","dust","disperse"]},ranch:{n:["ranch","spread"]},gap:{n:["gap","spread","crack"],v:["gap","breach"]},admission:{n:["admission","admittance"]},adolescent:{s:["adolescent","jejune","juvenile","puerile","teen","teenage","teenaged"],n:["adolescent","stripling","teenager","teen"]},dramatize:{v:["dramatize","dramatise","adopt"]},adopt:{v:["adopt","borrow","follow","espouse"]},marry:{v:["marry","wed","conjoin","espouse","tie","splice"]},adopted:{a:["adopted","adoptive"]},embroider:{v:["embroider","pad","lard",_203,"aggrandize","aggrandise","dramatize","dramatise","broider"]},hadrian:{n:["hadrian","adrian"]},pornographic:{s:["pornographic","adult"]},adult:{s:["adult","big","full-grown","grown","grownup"],n:["adult","grownup"]},"advance,":{s:["advance,","advanced,","beforehand,"]},advance:{v:[_174,"gain","progress"],n:[_174,"rise"]},promote:{v:["promote",_205,_174,"raise","elevate","boost",_206,"encourage"]},progress:{v:[_204,"advance"],n:[_204,"progression","procession",_174,"advancement"]},boost:{v:["boost",_174,"supercharge"],n:["boost","encouragement"]},overture:{n:["overture",_174,_42,"feeler"]},improvement:{n:["improvement","betterment",_174,"melioration"]},profit:{v:["profit","gain","benefit"],n:["profit","gain"]},derive:{v:["derive","gain","come",_92,"educe"]},amplification:{n:["amplification","gain","elaboration"]},preliminary:{n:["preliminary","overture","prelude","prelim"]},hike:{v:["hike","boost"],n:["hike","hiking","tramp"]},rise:{n:["rise","boost","hike","rising","ascent","ascension","ascending"],v:["rise","uprise","ascend","prove","jump","lift","rear","climb","arise"]},advertise:{v:["advertise","advertize","promote","push","publicize","publicise"]},advanced:{s:["advanced","ripe","sophisticated","forward-looking","innovative","modern"]},advancement:{n:["advancement","progress"]},promotion:{n:["promotion","furtherance","advancement","promo","publicity","packaging"]},advantage:{n:["advantage","reward","vantage"]},venture:{v:[_208,"hazard",_209,"stake","jeopardize","embark"],n:[_208,"n"]},gamble:{v:["gamble","chance","risk","hazard","adventure"]},adventure:{n:[_209,"escapade"],v:[_209,"v"]},adverse:{s:["adverse",_210,_211,"untoward"]},mention:{v:[_212,"advert","cite","name","refer"],n:[_212,"reference"]},allude:{v:["allude","touch","advert"]},attend:{v:["attend","hang","advert","look","see"]},deduce:{v:["deduce","infer","deduct","derive"]},strive:{v:["strive","reach","strain"]},pass:{v:["pass","hand","reach","give","clear","overtake","overhaul"],n:["pass","toss","flip","head","straits","strait","passport","notch","passing"]},compass:{n:[_214,"range","reach","grasp"],v:[_214,"v"]},scope:{n:["scope","range","reach","orbit",_214,"ambit"]},range:{n:["range","reach","chain"],v:["range","run","array","straddle"]},raise:{n:["raise","rise","hike"],v:["raise","conjure","invoke","evoke","stir","arouse","lift","leaven","prove","erect","rear","elevate"]},advertiser:{n:["advertiser","advertizer","adman"]},resurrect:{v:["resurrect","rise","uprise","raise","upraise"]},rebel:{v:["rebel","arise","rise","renegade"],n:["rebel","reb","johnny","greyback"]},heighten:{v:[_215,"rise"]},ascend:{v:["ascend","rise"]},surface:{v:[_216,"rise"],n:[_216,"n"]},arise:{v:["arise","rise","uprise"]},emanation:{n:["emanation","rise","procession"]},lift:{n:["lift","rise","raise","heave"],v:["lift","raise","elevate"]},upgrade:{n:[_205,"rise"],v:[_205,"v"]},ascent:{n:["ascent","acclivity","rise","raise","climb","upgrade"]},forwarding:{n:["forwarding","furtherance","promotion"]},advertising:{n:["advertising","publicizing"]},speculation:{n:["speculation",_208,"conjecture"]},propose:{v:[_33,"suggest","advise","offer"]},advise:{v:["advise","notify","apprise","apprize"]},rede:{v:["rede","advise","counsel","interpret"]},"well-advised":{a:["well-advised","advised"]},adviser:{n:["adviser","advisor","consultant"]},note:{v:["note",_137,_212,"remark"],n:["note","annotation","notation","tone","line","billet"]},citation:{n:["citation","cite","acknowledgment","credit",_185,_212,"quotation","commendation"]},advisory:{s:["advisory","consultative","consultatory","consultive"]},preach:{v:["preach",_218,"prophesy"]},recommend:{v:["recommend","urge","advocate"]},advocate:{n:[_218,"counsel","counselor","counsellor","counselor-at-law","pleader","advocator","proponent","exponent"],v:[_218,"v"]},advocacy:{n:["advocacy","protagonism"]},meditation:{n:["meditation","speculation"]},guess:{n:["guess","conjecture","supposition","surmise","surmisal","speculation","hypothesis","guesswork","guessing","shot"],v:["guess","infer",_208,_138,"hazard"]},nominate:{v:["nominate","propose"]},project:{v:[_219,_33,"externalize","externalise","cast","contrive","throw"],n:[_219,"projection"]},suffice:{v:["suffice","do","answer","serve"]},service:{v:[_158,"serve"],n:[_158,"serving"]},quotation:{n:["quotation","quote","citation"]},eminence:{n:["eminence","distinction","preeminence","note"]},aeriform:{s:["aeriform","aerial","airy","aery","ethereal","airlike"]},antenna:{n:["antenna","aerial","feeler"]},commend:{v:["commend","recommend","remember"]},aesthetic:{s:["aesthetic","esthetic","artistic"],a:["aesthetic","esthetic","aesthetical","esthetical"],n:["aesthetic","esthetic"]},visualize:{v:["visualize","visualise","envision",_219,"fancy","see","figure",_88,"image"]},plan:{v:["plan",_219,"contrive","design"],n:["plan",_220,"programme"]},undertaking:{n:["undertaking",_219,"task","labor"]},matter:{n:["matter","affair","thing"],v:["matter","v"]},affect:{v:["affect",_222,"move","strike","impact","touch"]},involve:{v:["involve","affect","regard"]},count:{v:["count","matter","weigh","bet","depend","swear","rely","bank","look",_67,"reckon","number","enumerate","numerate"],n:["count","counting","numeration","enumeration","reckoning","tally"]},topic:{n:["topic",_154,"issue","matter"]},"moved,":{a:["moved,","affected","stirred","touched"]},affected:{a:["affected","unnatural"]},imply:{v:["imply","involve","connote"]},reckon:{v:["reckon","count"]},affecting:{s:["affecting","poignant","touching"]},subject:{n:[_154,"topic","theme","case","content"],s:[_154,"dependent"],v:[_154,"v"]},incriminate:{v:["incriminate","imply","inculpate"]},entail:{v:["entail","imply","mean","implicate"]},consort:{v:[_63,_225,"affiliate","assort"],n:[_63,"n"]},affiliated:{s:["affiliated","attached","connected"]},choir:{n:["choir","consort"],v:["choir","chorus"]},ladder:{v:["ladder","run"],n:["ladder","n"]},melt:{v:["melt","run","disappear","evaporate","meld"],n:["melt","n"]},move:{v:["move","go","run","displace"],n:["move","relocation"]},race:{v:["race","run","rush"],n:["race","n"]},hunt:{v:["hunt","run"],n:["hunt","hunting"]},ply:{v:["ply","run"]},tend:{v:["tend","lean",_226,"run"]},play:{v:["play","run","toy","recreate","spiel"],n:["play","frolic","romp","gambol","caper","swordplay","drama"]},operate:{v:[_150,"run","control"]},scat:{v:["scat","run","scarper","lam","bunk","escape"]},discharge:{n:[_227,_228,"run","spark","arc","firing","emission","expelling","venting"],v:[_227,"v"]},rivulet:{n:["rivulet","rill","run","runnel","streamlet"]},streak:{n:["streak","run"],v:["streak","v"]},footrace:{n:["footrace","run"]},affiliation:{n:["affiliation","association","tie","tie-up"]},afford:{v:["afford","open","give"]},feed:{v:["feed","give","feast","eat"],n:["feed","provender"]},grant:{v:["grant","give"],n:["grant","assignment","subsidization","subsidisation"]},sacrifice:{v:["sacrifice","give"],n:["sacrifice","n"]},establish:{v:[_229,"give","base","ground","found","plant",_110,"institute","launch"]},translate:{v:["translate",_217,"render","transform"]},picture:{v:[_88,"depict","render","show"],n:[_88,"image","icon","ikon","scene"]},interpret:{v:[_217,"render","construe","see"]},supply:{v:["supply","provide","render","furnish"],n:["supply","n"]},"low-cost":{s:["low-cost","low-priced","affordable"]},"african-american":{s:["african-american","afro-american"],n:["african-american","n"]},black:{n:["black","african-american","negro","negroid","blackness","inkiness"],s:["black","smutty","disgraceful","ignominious","inglorious","opprobrious","shameful","grim","mordant","pitch-black","pitch-dark","blackened","calamitous","disastrous","fatal","fateful","dark","sinister","bleak","dim"],v:["black","v"]},bootleg:{s:["bootleg","black","black-market","contraband","smuggled"],n:["bootleg","n"]},blacken:{v:["blacken","melanize","melanise","black"]},subsequently:{r:["subsequently","later","afterwards","afterward","after"]},moonshine:{n:["moonshine","bootleg"]},char:{v:["char","blacken","sear","scorch","coal"],n:["char","charr"]},silver:{n:["silver","ag"],s:["silver","silvern","silvery"]},eloquent:{s:["eloquent","facile","fluent","silver","silver-tongued","smooth-spoken"]},argent:{s:["argent","silver","silvery","silverish"]},flatware:{n:["flatware","silver"]},age:{n:["age","eld"],v:["age","v"]},aged:{s:["aged","cured","ripened","elderly","older","senior"],n:["aged","elderly"]},means:{n:["means","agency","way","substance"]},representation:{n:["representation","delegacy","agency"]},agency:{n:["agency","bureau","office","authority"]},agenda:{n:["agenda","agendum","docket","schedule"]},agent:{n:["agent","factor","broker"]},aggregate:{s:[_187,"aggregated","aggregative","mass"],v:[_187,"combine"],n:[_187,"congeries","conglomeration"]},marriage:{n:["marriage","matrimony","union","wedlock","wedding"]},coupling:{n:["coupling","mating","pairing","conjugation","union","coupler"]},aggression:{n:["aggression","hostility","aggressiveness"]},aging:{s:["aging","ageing","senescent"],n:["aging","ageing","senescence"]},ripening:{n:["ripening","aging","ageing"]},maturation:{n:["maturation","ripening","maturement"]},ago:{s:["ago","agone"]},match:{v:["match","fit","correspond","check","jibe","gibe","tally","agree","mate","couple","pair","twin"],n:["match","mate","lucifer"]},festering:{n:["festering","suppuration","maturation"]},growth:{n:["growth","growing","maturation","development","ontogeny","ontogenesis"]},equal:{v:["equal","match","equalize","equalise","equate","touch","rival","be"],a:["equal","a"],n:["equal","n"]},pit:{v:["pit","oppose","match","stone"],n:["pit","quarry","pitfall","fossa","cavity"]},couple:{n:["couple","mates","match","pair","twosome","twain","brace","span","yoke","couplet","distich","duo","duet","dyad","duad"],v:["couple","v"]},peer:{n:["peer","equal","match","compeer"]},copulate:{v:["copulate","mate","pair","couple"]},pair:{v:["pair","couple","geminate"],n:["pair","brace"]},colliery:{n:["colliery","pit"]},hell:{n:["hell","perdition","inferno","pit","blaze","hades","netherworld","scheol","underworld","hellhole"]},stone:{n:["stone","pit","endocarp"],v:["stone","lapidate"]},agrarian:{s:["agrarian","agricultural","farming,"]},farming:{n:["farming","agriculture","husbandry","land"]},agribusiness:{n:["agribusiness","agriculture"]},ahead:{r:["ahead","beforehand","onward","onwards",_231,"forwards","forrader","before"]},"ahead,":{s:["ahead,","leading"]},help:{v:["help","aid","assist","facilitate"],n:["help","n"]},aid:{n:["aid","assistance","assist","help"],v:["aid","v"]},circumspection:{n:["circumspection","caution"]},refer:{v:["refer","pertain","relate",_131,"touch"]},business:{n:["business",_131,"byplay"]},avail:{v:["avail","help"],n:["avail","help","service"]},assistant:{n:["assistant","helper","help","supporter"],s:["assistant","s"]},wield:{v:["wield","handle","manage","exert","maintain"]},wangle:{v:["wangle","finagle","manage"],n:["wangle","wangling"]},oversee:{v:["oversee","supervise","superintend","manage"]},cope:{v:["cope",_233,_234,"deal","manage"],n:["cope","n"]},aide:{n:["aide","auxiliary"]},adjutant:{n:["adjutant","aide","aide-de-camp"]},prey:{n:["prey","quarry","target"],v:["prey","feed"]},lug:{v:["lug","tote","tug"],n:["lug","lugh"]},tugboat:{n:["tugboat","tug","towboat","tower"]},forecast:{v:[_69,"calculate"],n:[_69,"n"]},carriage:{n:["carriage","bearing",_140,"equipage","rig"]},storm:{v:["storm","force","surprise"],n:["storm","tempest"]},wedge:{v:["wedge",_65,"force"],n:["wedge","cuneus"]},push:{v:["push","force","crowd"],n:["push","thrust","pushing"]},impel:{v:["impel","force"]},coerce:{v:["coerce","hale",_65,_235,"force"]},effect:{n:["effect","force","essence","burden","core","gist"],v:["effect","effectuate"]},power:{n:["power","force","powerfulness"]},violence:{n:["violence","force"]},determination:{n:["determination",_32,"finding"]},adjunct:{s:["adjunct","assistant"]},disgust:{v:["disgust","revolt","repel","nauseate","sicken"]},rebuff:{v:["rebuff","snub","repel"],n:["rebuff","snub","repulse","slight"]},vent:{v:["vent","ventilate","air"],n:["vent","volcano","venthole","vent-hole","blowhole"]},publicize:{v:["publicize","publicise","air","bare"]},air:{v:["air","send",_198,"beam","transmit"],n:["air","airwave","aura","atmosphere"]},tune:{n:["tune","melody","air","strain","line"]},atmosphere:{n:["atmosphere","air","ambiance","ambience"]},breeze:{n:["breeze","zephyr","air"]},airline:{n:["airline","airway"]},airplane:{n:["airplane","aeroplane","plane"]},bode:{v:["bode","portend","auspicate","prognosticate","omen","presage","betoken","foreshadow","augur","foretell","prefigure",_69,"predict"]},prognosis:{n:["prognosis",_69,"prospect"]},raven:{v:["raven","prey","predate"]},airport:{n:["airport","airdrome","aerodrome","drome"]},release:{n:[_21,"outlet","vent","waiver",_227,"button"],v:[_21,"free","liberate","relinquish","resign"]},aisle:{n:["aisle","gangway"]},decision:{n:["decision","determination","conclusion"]},cinch:{n:["cinch","breeze","picnic","snap","pushover","walkover","girth"],v:["cinch","girth"]},alaska:{n:["alaska","ak"]},alabama:{n:["alabama","al","ala."]},aluminum:{n:["aluminum","aluminium","al"]},unblock:{v:["unblock","unfreeze","free","release"]},free:{v:["free",_21,"liberate","unloose","unloosen","loose",_227,"disengage"],s:["free","loose","liberal"],r:["free","r"]},secrete:{v:["secrete","release"]},exhaust:{v:["exhaust",_227,"expel","eject",_21,"beat","tucker"],n:["exhaust","fumes"]},publish:{v:["publish","issue","release"]},spill:{n:["spill","spillage",_21,"tumble","fall"],v:["spill","talk","shed","disgorge","slop","splatter"]},acquittance:{n:["acquittance","release"]},passing:{n:[_213,"loss","departure","exit","expiration","going",_21,"pass","qualifying","overtaking","passage"],r:[_213,"r"],s:[_213,"s"]},dismissal:{n:["dismissal","dismission",_227,"firing","liberation",_21,"sack","sacking"]},handout:{n:["handout","release"]},liberation:{n:["liberation",_21,"freeing"]},alarm:{v:["alarm","alert"],n:["alarm","alert","alarum","dismay","consternation"]},dismay:{v:["dismay","alarm","appal","appall","horrify"],n:["dismay","n"]},depress:{v:["depress","deject","dismay","dispirit","demoralize","demoralise"]},discouragement:{n:["discouragement","disheartenment","dismay"]},lower:{v:["lower","depress","lour"]},alcohol:{n:["alcohol","intoxicant","inebriant"]},alert:{s:["alert","alive,","awake,","brisk","lively","merry","rattling","snappy","spanking","zippy"],a:["alert","watchful"],n:["alert","alerting"],v:["alert","v"]},alexander:{n:["alexander","alexanders"]},algeria:{n:["algeria","algerie"]},alias:{r:["alias","a.k.a."]},alien:{s:["alien","exotic","foreign"],v:["alien","alienate"],n:["alien","n"]},stranger:{n:["stranger","alien","unknown"]},foreigner:{n:["foreigner","alien","noncitizen","outlander","outsider"]},conjunction:{n:["conjunction","alignment","conjunctive","connective","continuative"]},alliance:{n:["alliance","coalition","alignment","alinement","bond","confederation"]},alike:{r:["alike","likewise"]},"alike,":{a:["alike,","similar","like"]},junction:{n:["junction","conjunction","conjugation","colligation","adjunction"]},concurrence:{n:["concurrence","coincidence","conjunction","co-occurrence","concurrency"]},confederation:{n:["confederation","alliance","confederacy","federation"]},alive:{s:["alive","live"],a:["alive","a"]},animated:{a:["animated","alive"]},"alive,":{a:["alive,","live"],s:["alive,","s"]},articulation:{n:["articulation","join","joint","juncture","junction","voice"]},wholly:{r:["wholly","entirely","completely","totally","all","altogether","whole","right"]},allegation:{n:["allegation","allegement"]},"alleged,":{s:["alleged,","so-called","supposed"]},allen:{n:["allen","gracie"]},alley:{n:["alley","alleyway"]},allied:{s:["allied",_241,"confederative"]},allotment:{n:["allotment","apportionment","apportioning","allocation","parceling","parcelling","assignation"]},allow:{v:["allow","permit","tolerate","appropriate","earmark",_53,"grant"]},permit:{v:["permit","allow","let","countenance"],n:["permit","n"]},let:{v:["let","allow","permit"],n:["let","n"]},forget:{v:["forget","leave","block","bury"]},bequeath:{v:["bequeath","will","leave"]},exit:{v:["exit","leave"],n:["exit","issue","outlet"]},farewell:{n:["farewell","leave","leave-taking","parting"]},license:{n:["license","permission","permit","licence"],v:["license","licence","certify"]},"lashkar-e-taiba":{n:["lashkar-e-taiba","lashkar-e-toiba","lashkar-e-tayyiba","let"]},die:{v:["die","decease","perish","go","exit","expire","pass","conk","choke","croak","pall"],n:["die","dice"]},debase:{v:["debase","alloy"]},admixture:{n:["admixture","alloy","intermixture"]},alloy:{n:["alloy","metal"],v:["alloy","v"]},ally:{n:["ally","friend"]},alone:{r:["alone","solo","unaccompanied"]},entirely:{r:["entirely","exclusively","solely","alone","only"]},"alone,":{s:["alone,","unique","unequaled","unequalled","unparalleled","only","lone,","lonely,","solitary"]},mix:{n:["mix","commixture","admixture","mixture","intermixture","mixing","premix"],v:["mix","mingle","commix","unify","amalgamate"]},along:{r:["along","on"]},desegregate:{v:["desegregate","integrate","mix"]},blend:{v:["blend","flux","mix","conflate","commingle","immix","fuse","coalesce","meld",_230,"merge","go","intermix","immingle","intermingle"],n:["blend","blending","portmanteau"]},aboard:{r:["aboard","alongside"]},alphabetic:{a:["alphabetic","alphabetical"]},besides:{r:["besides","too","also","likewise"]},elevation:{n:["elevation","el","altitude","alt","lift","raising"]},aggrandizement:{n:["aggrandizement","aggrandisement","elevation"]},alter:{v:["alter","neuter","spay","castrate"]},interpolate:{v:["interpolate","alter","falsify","extrapolate"]},vertex:{n:["vertex","peak","apex","acme"]},transmit:{v:[_81,_37,_83,_82,"channelize","channelise"]},transplant:{v:[_192,_37,"graft"],n:[_192,"transplantation","transplanting"]},transportation:{n:["transportation",_83,_37,"transferral","conveyance","shipping"]},interchange:{v:[_193,"tack","switch",_245,"flip","flip-flop"],n:[_193,"reciprocation","give-and-take"]},throw:{v:["throw","flip","switch","thrust"],n:["throw","stroke"]},trade:{v:["trade","swap","swop","switch","merchandise"],n:["trade",_246,"craft"]},substitution:{n:["substitution","permutation","transposition",_247,"switch",_119,"commutation"]},intensify:{v:["intensify","deepen",_248,"heighten"]},altered:{s:["altered","neutered"]},kind:{n:["kind","sort","form","variety"],s:["kind","tolerant","genial"]},diverseness:{n:["diverseness","diversity","multifariousness","variety"]},assortment:{n:["assortment","mixture","miscellany","miscellanea",_194,"salmagundi","smorgasbord","potpourri","motley"]},commute:{v:["commute","convert",_119,"transpose"]},substitute:{v:[_249,"replace",_193,_119,"deputize","deputise","sub"],n:[_249,_53,"second-stringer","replacement"],s:[_249,"s"]},rally:{n:["rally",_119,"rallying"],v:["rally","rebound"]},central:{n:["central","exchange"],s:["central","s"]},"alternate,":{s:["alternate,","alternating,"]},alternate:{s:[_245,"alternative","substitute"],v:[_245,"jump"],n:[_245,"n"]},understudy:{v:["understudy","alternate"],n:["understudy","standby"]},surrogate:{n:[_250,_245,"replacement"],s:[_250,"s"]},option:{n:["option","alternative","choice"]},alternatively:{r:["alternatively","instead"]},counterchange:{v:["counterchange",_191,"interchange"]},foster:{s:["foster","surrogate"],v:["foster",_251,"further"]},deputy:{n:["deputy",_250,"lieutenant"]},choice:{n:["choice","selection","option","pick"],s:["choice","prime,","prize",_252,"select"]},countertenor:{s:["countertenor","alto"],n:["countertenor","alto"]},alto:{s:["alto","contralto"],n:["alto","n"]},contralto:{n:["contralto","alto"],s:["contralto","s"]},raw:{n:["raw","altogether"],s:["raw","new"]},ersatz:{s:["ersatz","substitute"]},"utility,":{s:["utility,","substitute,","utility-grade"]},"stand-in":{n:["stand-in",_249,"relief","reliever","backup","fill-in"]},constantly:{r:["constantly","always","forever","perpetually","incessantly","invariably"]},always:{r:["always","ever","e'er"]},"bare-assed":{s:["bare-assed","bare-ass","raw","peeled"]},"raw,":{s:["raw,","unsanded"]},bleak:{s:["bleak",_253,"raw"]},sensitive:{s:[_254,"sore","raw","tender"],a:[_254,"a"],n:[_254,"n"]},crude:{s:["crude","raw","primitive","rude","earthy","gross","vulgar","rough"],a:["crude","a"],n:["crude","n"]},naked:{s:["naked","raw","defenseless"]},natural:{s:[_255,"raw,","rude,","born,","innate,","instinctive"],n:[_255,"cancel"],a:[_255,"a"]},americium:{n:["americium","am"]},bare:{s:["bare","barren","bleak","desolate","stark","naked","nude","stripped","unfinished"],v:["bare","v"],a:["bare","a"]},sensible:{a:["sensible","sensitive"]},medium:{n:["medium","spiritualist","sensitive"],s:["medium","s"]},lifelike:{s:["lifelike","natural"]},biological:{a:["biological",_255,"biologic"]},amateurish:{s:["amateurish","amateur","inexpert","unskilled"]},amateur:{s:["amateur","recreational","unpaid"]},blunt:{s:["blunt","crude,","stark,","candid","forthright","frank","free-spoken","outspoken","plainspoken","point-blank","straight-from-the-shoulder"],v:["blunt","v"]},unrefined:{a:["unrefined","unprocessed","crude"]},petroleum:{n:["petroleum","crude","oil"]},amazing:{s:["amazing","awe-inspiring","awesome","awful","awing","astonishing"]},amazon:{n:["amazon","virago"]},ambassador:{n:["ambassador","embassador"]},amber:{s:["amber","brownish-yellow","yellow-brown"],n:["amber","gold"]},ambition:{n:["ambition","ambitiousness","aspiration","dream"]},ambitious:{s:["ambitious","challenging"]},rectify:{v:[_256,"remediate","remedy","repair","amend"]},correct:{v:[_101,_256,"right"],s:[_101,"right"],a:[_101,"right"]},reform:{v:["reform","reclaim","regenerate","rectify"]},refine:{v:["refine","rectify"]},"better,":{s:["better,","best,"]},bettor:{n:["bettor","better","wagerer","punter"]},right:{a:["right","correct"],v:["right",_186,_257,"correct"],r:["right","flop"],n:["right","rightfulness"],s:["right","s"]},decline:{v:[_258,"slump",_101,"wane"],n:[_258,"declination","diminution"]},compensate:{v:[_186,_259,_101,"recompense","remunerate","repair","indemnify"]},chastise:{v:["chastise","castigate","objurgate","chasten","correct"]},polish:{v:["polish","refine","fine-tune","down","round","smooth","smoothen","shine"],n:["polish",_260,"culture","cultivation","finish","gloss","glossiness","burnish"]},comforts:{n:["comforts","amenities","conveniences"]},amino:{a:["amino","aminic"]},come:{v:["come","amount","follow"],n:["come","n"]},measure:{n:[_103,"quantity","amount","bar","step"],v:[_103,"evaluate","valuate","assess","appraise","value","mensurate"]},occur:{v:["occur","come"]},hail:{v:["hail","come","herald"]},semen:{n:["semen","seed","ejaculate","cum","come"]},quantify:{v:["quantify","measure"]},meter:{n:["meter","metre",_103,"beat","cadence","time","m"]},standard:{n:[_261,"criterion",_103,"touchstone","banner"],s:[_261,"stock"],a:[_261,"received"]},measurement:{n:["measurement","measuring",_103,"mensuration"]},dress:{v:["dress",_262,"set","do","coif","coiffe","coiffure","clothe","enclothe","garb","raiment","tog","garment","habilitate","apparel","groom","curry","decorate"],s:["dress","full-dress"],n:["dress","frock"]},perform:{v:["perform","execute","do"]},bash:{n:["bash","do","brawl"],v:["bash","v"]},acclaim:{v:["acclaim","hail","herald"],n:["acclaim","acclamation","plaudits","plaudit","eclat"]},hang:{v:["hang","fall","flow"],n:["hang","n"]},accrue:{v:["accrue","fall"]},decrease:{v:["decrease","diminish","lessen","fall","minify"],n:["decrease","diminution","reduction","step-down","decrement","lessening","drop-off"]},precipitate:{v:["precipitate","fall"],s:["precipitate","s"]},descend:{v:[_92,"fall"]},drop:{n:["drop","dip","fall","drib","driblet","bead","pearl"],v:["drop","unload","discharge"]},twilight:{n:["twilight","dusk","gloaming","gloam","nightfall","evenfall","fall","crepuscule","crepuscle"]},capitulation:{n:["capitulation","fall","surrender"]},descent:{n:["descent","declivity","fall",_258,"declination","declension","downslope",_264,"filiation"]},happen:{v:["happen","hap","occur","pass","materialize","materialise","befall","bechance"]},criterion:{n:["criterion","standard"]},analogue:{a:["analogue","analog","linear"],n:["analogue","analog","parallel"]},psychoanalysis:{n:["psychoanalysis","analysis"]},analyst:{n:["analyst","psychoanalyst"]},analytic:{a:["analytic","analytical","uninflected"]},ancestor:{n:["ancestor","ascendant","ascendent","antecedent","root"]},anchor:{v:["anchor","ground"],n:["anchor","anchorman","anchorperson","mainstay","keystone","backbone","linchpin","lynchpin"]},ancient:{n:["ancient","antediluvian"]},angel:{n:["angel","backer"]},saint:{n:["saint","angel"],v:["saint","v"]},canonize:{v:["canonize","canonise","saint"]},enshrine:{v:["enshrine","saint","shrine"]},ideal:{n:["ideal","paragon","nonpareil","saint","apotheosis","nonesuch","nonsuch"],a:["ideal","idealistic"]},wrath:{n:["wrath","anger","ire","ira"]},anger:{n:["anger","angriness","choler","ire"]},slant:{v:["slant","angle","weight"],n:["slant","angle"]},fish:{v:["fish","angle"],n:["fish","n"]},lean:{v:["lean","tilt","tip","slant","angle"],s:["lean","skimpy"],a:["lean","a"],n:["lean","n"]},thin:{a:["thin","lean"],r:["thin","r"],s:["thin","s"],v:["thin","v"]},list:{v:["list","lean","heel","name"],n:["list","listing"]},tilt:{n:["tilt","list",_267,"lean","leaning"],v:["tilt","v"]},cant:{v:["cant","tilt","slant","pitch"],n:["cant","n"]},pitch:{n:["pitch","rake","slant","tar","delivery"],v:["pitch","v"]},pisces:{n:["pisces","fish"]},careen:{v:["careen","wobble","shift","tilt"],n:["careen","n"]},rock:{n:["rock","careen","sway","tilt","stone"],v:["rock","sway","shake"]},controversy:{n:["controversy","contention","contestation","disputation","disceptation","tilt","argument","arguing"]},joust:{n:["joust","tilt"]},thinly:{r:["thinly","thin","lightly"]},flimsy:{s:["flimsy","fragile","slight","tenuous","thin","insubstantial"],a:["flimsy","a"],n:["flimsy","n"]},sparse:{s:["sparse","thin"]},slender:{s:["slender","thin","slim","slight","svelte"]},reduce:{v:["reduce","slim","slenderize","thin","trim","cut",_30,"tighten"]},dilute:{v:["dilute","thin","reduce","cut"],a:["dilute","a"]},number:{v:["number","list"],n:["number","figure"]},bevel:{n:["bevel","cant","chamfer"],v:["bevel","chamfer"]},slang:{n:["slang","cant","jargon","lingo","argot","patois","vernacular"],v:["slang","v"]},bank:{n:["bank","cant","camber"],v:["bank","v"]},buzzword:{n:["buzzword","cant"]},gear:{v:["gear","pitch"],n:["gear","paraphernalia","appurtenance","cogwheel"]},deliver:{v:[_73,"pitch",_72,"redeem","save"]},slope:{v:["slope",_226,"pitch"],n:["slope",_226,"side"]},peddle:{v:["peddle","monger",_269,"hawk","vend","pitch"]},flip:{v:["flip","toss","sky","pitch","flick","twitch"],n:["flip","toss"],s:["flip","s"]},angry:{s:["angry","furious","raging","tempestuous","wild"]},"animal,":{s:["animal,","carnal","fleshly","sensual"]},animal:{n:["animal","beast","brute","creature","fauna"]},liveliness:{n:["liveliness","animation","life","spirit","sprightliness"]},vivification:{n:["vivification","invigoration","animation"]},animation:{n:["animation","spiritedness","invigoration","brio","vivification","vitality","life","living","aliveness"]},annex:{n:["annex","annexe",_270,"wing"]},annotation:{n:["annotation","annotating"]},tuberosity:{n:["tuberosity","tubercle","eminence"]},announce:{v:["announce","annunciate","harbinger","foretell","herald","declare","denote"]},announced:{s:["announced","proclaimed"]},announcement:{n:["announcement","promulgation","proclamation","annunciation","declaration"]},annoying:{s:["annoying","bothersome","galling","irritating","nettlesome","pesky","pestering",_271,"plaguy","plaguey",_272,"vexatious","vexing"],n:["annoying","n"]},annoyance:{n:["annoyance","annoying",_273,"vexation","bother","botheration","pain","infliction","chafe"]},aggravator:{n:["aggravator","annoyance"]},irritation:{n:[_273,"annoyance","vexation","botheration"]},aggravation:{n:["aggravation",_273,"provocation","exacerbation","exasperation"]},discomfort:{n:["discomfort","soreness",_273,"uncomfortableness"]},excitation:{n:["excitation","innervation",_273,"excitement"]},pique:{n:["pique","temper","irritation"],v:["pique","offend"]},annual:{s:["annual","yearly"],a:["annual","one-year"],n:["annual","yearly","yearbook"]},annually:{r:["annually","yearly"]},anonymous:{a:["anonymous","anon."]},answer:{v:["answer",_70,"reply","respond"],n:["answer","reply","response"]},solution:{n:["solution","answer","result",_275,"solvent","root"]},answering:{s:["answering","respondent"]},ant:{n:["ant","emmet","pismire"]},antony:{n:["antony","anthony","antonius"]},predict:{v:["predict","foretell","prognosticate","call","forebode","anticipate","promise"]},anticipate:{v:["anticipate","previse","foreknow","foresee","forestall","counter"]},expect:{v:["expect","anticipate","look","await","wait"]},ask:{v:["ask",_39,"expect","inquire","enquire"]},anticipated:{s:["anticipated","awaited,","hoped-for"]},"age-old":{s:["age-old","antique"]},antique:{s:[_276,"demode","ex","old-fashioned","old-hat,","outmoded","passe","passee"],v:[_276,"antiquate"],n:[_276,"n"]},"old-timer":{n:["old-timer","oldtimer","gaffer","antique"]},veteran:{n:["veteran","old-timer","oldtimer","warhorse","stager","vet","ex-serviceman"]},seasoned:{s:["seasoned","veteran,"]},anxiety:{n:["anxiety","anxiousness"]},anxious:{s:["anxious",_277,"queasy","uneasy","unquiet"]},"anxious,":{s:["anxious,","dying,"]},"any,":{s:["any,","whatever","whatsoever"]},anyhow:{r:["anyhow","anyway","anyways"]},anywhere:{r:["anywhere","anyplace"]},apart:{r:["apart","asunder","aside"]},aside:{r:["aside","apart","by","away"],n:["aside","n"]},"apart,":{s:["apart,",_278,"obscure"]},away:{r:["away","aside","out","off","forth"],s:["away","outside"]},digression:{n:["digression","aside","excursus","divagation","parenthesis","excursion"]},diversion:{n:["diversion","deviation","digression","deflection","deflexion","divagation","recreation"]},apartment:{n:["apartment","flat"]},apollo:{n:["apollo","phoebus"]},apologize:{v:["apologize","apologise","excuse","rationalize","rationalise"]},apology:{n:["apology","excuse","apologia"]},apparatus:{n:["apparatus","setup"]},apparel:{n:["apparel","dress","clothes"],v:["apparel","v"]},"full-dress":{s:["full-dress","dress"]},snip:{v:["snip","clip","crop","trim","lop","dress","prune"],n:["snip","snippet","snipping"]},trim:{v:["trim","garnish","dress"],n:["trim","trimming","clipping","trimness"],s:["trim","s"]},preen:{v:["preen","primp","plume","dress","congratulate"]},attire:{n:["attire","garb","dress"],v:["attire","v"]},nip:{v:["nip","clip","snip"],n:["nip","shot","pinch","piquance","piquancy","piquantness","tang","tanginess","zest"]},clip:{n:["clip","clipping","snip"],v:["clip","curtail"]},tailored:{s:["tailored","trim"]},"clean-cut":{s:["clean-cut","trig","trim"]},shipshape:{s:["shipshape","trim","well-kept"]},spare:{s:["spare","trim","free"],v:["spare","save"]},shave:{v:["shave","trim"],n:["shave","shaving"]},pare:{v:["pare","trim"]},trimming:{n:["trimming","trim","passementerie"]},overdress:{v:["overdress","prink","attire","overclothe"]},"apparent,":{s:["apparent,","ostensible","seeming,"]},apparent:{s:["apparent","evident","manifest","palpable","patent","plain","unmistakable"]},obviously:{r:["obviously","evidently","manifestly","patently","apparently","plainly","plain"]},apparently:{r:["apparently","seemingly","ostensibly"]},invoke:{v:["invoke","appeal"]},appeal:{v:["appeal","invoke"],n:["appeal","appealingness","charm"]},solicitation:{n:["solicitation","appeal","collection","ingathering","allurement"]},entreaty:{n:["entreaty","prayer","appeal"]},recruit:{v:["recruit","levy","raise"],n:["recruit","enlistee"]},enhance:{v:["enhance",_215,"raise"]},arouse:{v:["arouse","elicit","enkindle","kindle","evoke","fire","raise","provoke","sex","excite","stir"]},rear:{v:["rear","raise",_251,"parent","erect"],n:["rear","back","backside"]},appear:{v:["appear","seem"]},look:{v:["look","appear","seem"],n:["look","looking"]},front:{v:["front","look","face","breast"],n:["front","forepart"]},search:{v:["search","look","seek"],n:["search","lookup","hunt","hunting"]},spirit:{n:["spirit","tone","feel","feeling","flavor",_281,"look","smell"],v:["spirit","inspirit"]},expression:{n:[_20,"look","aspect","face","verbalism","manifestation",_282,"reflexion"]},research:{v:["research","search","explore"],n:["research","n"]},heart:{n:["heart","spirit","mettle","nerve","spunk","pump","ticker","bosom"]},intent:{n:["intent","purport","spirit"],s:["intent","s"]},movement:{n:[_44,"front","motion"]},presence:{n:["presence","front"]},battlefront:{n:["battlefront","front"]},formula:{n:[_284,"expression"]},formulation:{n:["formulation",_20,"preparation"]},saying:{n:["saying",_20,"locution"]},appearance:{n:["appearance","show","appearing"]},appliance:{n:["appliance","contraption",_286,"convenience","gadget","gizmo","gismo","widget"]},applicant:{n:["applicant","applier"]},lotion:{n:["lotion","application"]},enforce:{v:["enforce","implement","apply","impose","constrain"]},"passing,":{a:["passing,","pass,"],s:["passing,","s"]},excrete:{v:["excrete","egest",_287,"pass"]},authorize:{v:["authorize","authorise","pass","clear"]},sink:{v:["sink","pass","lapse","drop","settle","subside"],n:["sink","n"]},evanesce:{v:["evanesce","fade","fleet","pass"]},communicate:{v:["communicate","pass","intercommunicate"]},spend:{v:["spend","pass","expend","drop"]},elapse:{v:["elapse","lapse","pass"]},legislate:{v:["legislate","pass"]},bye:{n:["bye","pass"]},forfeit:{n:[_288,"forfeiture","sacrifice"],v:[_288,"waive","forgo","forego"],s:[_288,"s"]},award:{v:["award","grant","present"],n:["award","accolade","honor","honour","laurels","awarding"]},concession:{n:["concession","grant","conceding","yielding"]},manipulation:{n:["manipulation","use"]},habit:{n:["habit","use","wont"]},consumption:{n:["consumption","usance","use","expenditure","ingestion","intake","uptake"]},crumble:{v:["crumble",_289,"tumble","collapse"]},crash:{n:["crash",_160,"smash","wreck"],v:["crash","dash","ram"]},flop:{n:["flop",_160,"bust","fizzle","dud","washout"],r:["flop","r"]},fertilize:{v:["fertilize","fertilise","feed","fecundate"]},rehearse:{v:["rehearse","practise","practice"]},build:{v:["build","establish"],n:["build","n"]},install:{v:["install","instal","establish"]},prove:{v:["prove",_290,_229,"show","shew"]},appointed:{s:["appointed","decreed","ordained","prescribed"],a:["appointed","a"]},appointive:{a:["appointive","appointed"]},appointee:{n:["appointee","appointment"]},appointment:{n:["appointment",_97,"assignment","designation","naming"]},date:{n:["date","appointment",_151,"escort"]},handling:{n:["handling","manipulation"]},bore:{v:["bore","drill","tire"],n:["bore","bore-hole","gauge","caliber","calibre","dullard"]},appraisal:{n:["appraisal",_68,"estimation","assessment"]},appreciate:{v:["appreciate","apprize","apprise","revalue"]},prize:{v:["prize","value","treasure","appreciate"],n:["prize","award"],s:["prize","s"]},appreciated:{s:["appreciated","apprehended","comprehended"]},admiration:{n:["admiration","appreciation","esteem"]},taste:{n:["taste","appreciation",_291,"perceptiveness","tasting","gustation","mouthful"],v:["taste","savor","savour"]},approach:{v:[_42,"near"],n:[_42,"approaching","coming","attack"]},respect:{v:[_86,"esteem","value","prize","prise","honor","honour","observe"],n:[_86,"esteem","regard"]},pry:{v:["pry","prise","prize","lever","jimmy"],n:["pry","n"]},trophy:{n:["trophy","prize"]},loot:{n:["loot","booty","pillage",_292,"prize","swag"],v:["loot","plunder"]},smack:{v:["smack","taste","peck","reek","smell","thwack"],n:["smack","smacking","slap","smooch"],r:["smack","r"]},preference:{n:["preference","penchant","predilection","taste","druthers"]},wonder:{n:["wonder","wonderment","admiration","marvel"],v:["wonder","marvel",_293,"inquire","enquire"]},appropriate:{v:["appropriate",_104,"seize","conquer"]},intrude:{v:["intrude","pry","nose","poke","obtrude","irrupt"]},crowbar:{n:["crowbar","pry"]},plunder:{v:[_292,"despoil","loot","reave","strip","rifle","ransack","pillage","foray"],n:[_292,"n"]},boodle:{n:["boodle","bread","cabbage","clams","dinero","dough","gelt","kale","lettuce","lolly","lucre","loot","moolah","pelf",_122,"shekels","simoleons","sugar","wampum"]},relish:{n:["relish","flavor",_281,"sapidity","savor","savour","smack","nip","tang"],v:["relish","v"]},slap:{n:["slap","smack"],r:["slap","r"]},deference:{n:["deference",_86,"respectfulness"]},obedience:{n:["obedience",_86,"obeisance"]},esteem:{n:["esteem","regard","respect"],v:["esteem","v"]},curiosity:{n:["curiosity","wonder"]},predilection:{n:["predilection","preference","orientation"]},approval:{n:["approval","commendation"]},blessing:{n:["blessing","approval","approving","benediction","boon"]},approve:{v:["approve","o.k.","okay","sanction"]},approved:{s:["approved","sanctioned"]},benediction:{n:["benediction","blessing"]},grace:{n:["grace","blessing","thanksgiving","goodwill","gracility"],v:["grace","v"]},deck:{v:["deck","adorn","decorate","grace",_203,"beautify","coldcock","dump","floor","bedight","bedeck"]},decorate:{v:["decorate","adorn","grace","ornament",_203,"beautify"]},seemliness:{n:["seemliness","grace"]},approximate:{s:["approximate","near","approximative","rough"],v:["approximate","v"]},estimate:{v:[_68,"gauge","approximate","guess","judge"],n:[_68,"estimation","approximation","idea"]},april:{n:["april","apr"]},apposite:{s:["apposite","apt","pertinent"]},apt:{s:["apt","clever"]},"apt,":{s:["apt,","liable,","disposed,","given,","minded,","tending,"]},arkansas:{n:["arkansas","ar","ark."]},are:{n:["are","ar"]},argon:{n:["argon","ar"]},arabian:{n:["arabian","arab"]},arab:{n:["arab","arabian"]},arbitration:{n:["arbitration","arbitrament","arbitrement"]},arbor:{n:["arbor","arbour","bower","pergola"]},spindle:{n:["spindle","mandrel","mandril","arbor"]},spike:{n:["spike","spindle"],v:["spike","lace","fortify"]},arch:{v:["arch","curve","arc"],s:["arch","impish","implike","mischievous","pixilated","prankish","puckish","wicked","condescending","patronizing","patronising"],n:["arch","archway"]},bow:{n:["bow","arc","bowing","obeisance","fore","prow","stem","bowknot"],v:["bow","v"]},transfix:{v:["transfix","impale","empale","spike"]},ear:{n:["ear","spike","capitulum"]},crouch:{v:["crouch","stoop","bend","bow"]},submit:{v:["submit","bow","defer","accede","state","posit"]},empty:{v:["empty","discharge"],s:["empty","empty-bellied","hollow","vacuous"]},fire:{v:["fire",_227,"light","ignite"],n:["fire","attack","flak","flack","blast","flame","flaming","firing"]},acquit:{v:["acquit","assoil","clear",_227,"exonerate","exculpate"]},dispatch:{v:["dispatch",_227,_100,"despatch"],n:["dispatch","despatch","expedition","expeditiousness","shipment","communique"]},arcade:{n:["arcade","colonnade"]},squat:{v:["squat","crouch","scrunch","hunker"],s:["squat","underslung"],n:["squat","squatting"]},resign:{v:["resign",_55,"submit"]},relegate:{v:["relegate","submit","classify"]},present:{v:[_72,"submit","pose","represent"],n:[_72,"nowadays"]},loose:{r:["loose","free"],s:["loose","open","slack"],v:["loose","v"],a:["loose","a"]},barren:{s:["barren","destitute","devoid","free","innocent"],n:["barren","waste","wasteland"]},detached:{s:["detached","free","unaffectionate","uncaring","separated",_278,"set-apart"]},complimentary:{s:["complimentary","costless","free","gratis,","gratuitous"]},absolve:{v:["absolve","free"]},exempt:{v:["exempt",_297,"free"],a:["exempt","a"]},dislodge:{v:["dislodge","free","bump"]},rid:{v:["rid","free","disembarrass"]},evacuate:{v:["evacuate","void","empty"]},vacate:{v:["vacate","empty",_1,"resign","renounce"]},fuel:{v:["fuel","fire"]},burn:{v:["burn","fire","incinerate","combust","glow"],n:["burn","burning"]},displace:{v:["displace","fire","can","dismiss","sack","terminate"]},ardor:{n:["ardor","ardour","fervor","fervour","fervency","fire","fervidness","elan","zeal"]},devolve:{v:["devolve","deteriorate","drop","degenerate"]},neglect:{v:[_162,"pretermit","omit","drop","miss","overlook","overleap","ignore","disregard"],n:[_162,"disuse"]},shed:{v:["shed","cast","throw","drop","molt","exuviate","moult","slough"],a:["shed","a"]},dismiss:{v:["dismiss","drop",_300,_301,"ignore"]},dangle:{v:["dangle","swing","drop"]},flatten:{v:["flatten","drop"]},fell:{v:["fell","drop"],s:["fell","s"],n:["fell","n"]},cliff:{n:["cliff","drop","drop-off"]},architect:{n:["architect","designer"]},arctic:{s:["arctic","frigid","gelid","glacial","icy","polar"],n:["arctic","galosh","golosh","rubber","gumshoe"]},"north-polar":{s:["north-polar","arctic"]},area:{n:["area","expanse","region","country"]},sphere:{n:["sphere","domain","area","orbit","field","arena"]},sector:{n:["sector","sphere"]},stadium:{n:["stadium","bowl","arena"]},argue:{v:["argue","indicate",_233,"debate","fence","reason"]},argumentation:{n:["argumentation","argument","line"]},argument:{n:["argument","parameter","argumentation","debate","statement"]},coat:{v:["coat",_216,"cake"],n:["coat","pelage"]},airfoil:{n:["airfoil","aerofoil","surface"]},open:{n:["open",_216,"clear"],s:["open","opened","undecided","undetermined","unresolved"],a:["open","opened","unfastened"],v:["open","v"]},maverick:{n:["maverick","rebel"],s:["maverick","s"]},insurgent:{n:["insurgent","insurrectionist","rebel"],s:["insurgent","seditious","subversive"]},emission:{n:["emission","emanation"]},sharpen:{v:["sharpen",_215,"taper","point"]},"face-lift":{v:["face-lift","lift"]},airlift:{v:["airlift","lift"],n:["airlift","lift"]},rustle:{v:["rustle","lift"],n:["rustle","rustling","whisper","whispering"]},plagiarize:{v:["plagiarize","plagiarise","lift"]},hoist:{v:["hoist","lift","wind"]},revoke:{v:["revoke","annul","lift","countermand",_304,"repeal",_305,"rescind","vacate"],n:["revoke","renege"]},elevator:{n:["elevator","lift"]},revive:{v:["revive","resurrect"]},arizona:{n:["arizona","az"]},irregular:{s:[_306,"maverick","unorthodox","temporary","unpredictable"],n:[_306,"second"]},guerrilla:{n:["guerrilla","guerilla",_306,"insurgent"]},arm:{v:["arm",_295,"gird"],n:["arm","branch","limb"]},sleeve:{n:["sleeve","arm"]},branch:{n:["branch","subdivision","arm","leg","ramification"],v:["branch","ramify","fork","furcate","separate"]},weapon:{n:["weapon","arm","artillery"]},ramify:{v:["ramify","branch"]},outgrowth:{n:["outgrowth","branch","offshoot","offset"]},armenia:{n:["armenia","hayastan"]},process:{n:[_139,"outgrowth","appendage","operation"],v:[_139,"treat"]},emergence:{n:["emergence","outgrowth","growth","emersion","egress","issue"]},armor:{v:["armor","armour"],n:["armor","armour"]},complexify:{v:["complexify","ramify"]},weaponry:{n:["weaponry","arms","munition"]},armstrong:{n:["armstrong","satchmo"]},orotund:{s:["orotund","rotund","round","pear-shaped"]},attack:{v:["attack","round","assail","snipe",_307,"aggress"],n:["attack","tone-beginning",_24,"onslaught","onset","onrush"]},circle:{n:["circle","round"],v:["circle","v"]},rung:{n:["rung","round","stave"]},beat:{n:["beat","round"],v:["beat","flap","bunk",_308,"pound","thump","crush","shell","trounce","vanquish"]},cycle:{n:["cycle","rhythm","round","oscillation"],v:["cycle","v"]},arrange:{v:[_262,"put","order","set"]},format:{v:["format",_262,"initialize","initialise"],n:["format","formatting"]},stage:{v:["stage",_262,_72,"represent"],n:["stage","leg"]},outwit:{v:["outwit","overreach","outsmart","outfox","beat","circumvent"]},pulsate:{v:["pulsate","beat","quiver","throb","pulse"]},tick:{v:["tick","ticktock","ticktack","beat","retick"],n:["tick","ticking"]},drum:{v:["drum","beat","thrum"],n:["drum","drumfish","membranophone","tympan"]},beatnik:{n:["beatnik","beat"]},rhythm:{n:["rhythm","beat"]},pulse:{n:["pulse","pulsation","heartbeat","beat"],v:["pulse","pulsate"]},rundle:{n:["rundle","spoke","rung"]},bombastic:{s:["bombastic","declamatory","large","orotund","tumid","turgid"]},encircle:{v:["encircle","circle"]},"r-2":{n:["r-2","rophy","rope","roofy","roach","circle"]},lap:{n:["lap","circle","circuit","overlap"],v:["lap","lick","swish","swosh","swoosh"]},assail:{v:["assail",_307,"attack"]},bicycle:{v:["bicycle","cycle","bike","pedal","wheel"],n:["bicycle","bike","wheel","cycle"]},motorbike:{v:["motorbike","motorcycle","cycle"],n:["motorbike","n"]},hertz:{n:["hertz","hz","cycles/second","cps","cycle"]},arranged:{s:["arranged","staged"],a:["arranged","ordered"]},stagecoach:{n:["stagecoach","stage"]},phase:{n:["phase","stage","form"]},arrangement:{n:["arrangement","arranging","transcription",_126,_127,"system"]},placement:{n:["placement","arrangement","location","locating",_309,"positioning","emplacement"]},array:{n:["array","raiment","regalia"],v:["array","v"]},collar:{v:["collar","nail","apprehend","arrest","nab","cop"],n:["collar","leash","neckband"]},arrest:{n:["arrest","check","halt","hitch","stay","stop","stoppage"],v:["arrest","v"]},crop:{v:["crop","browse","graze","range","pasture"],n:["crop","harvest"]},roll:{v:["roll","wander","swan","stray","tramp","roam","cast","ramble","rove","range","drift",_311,"revolve","undulate","flap","wave"],n:["roll","bowl","roster"]},stove:{n:["stove","range"]},image:{n:["image","range"],v:["image","v"]},bridle:{n:["bridle","check","curb"]},hindrance:{n:["hindrance","hinderance","deterrent","impediment","balk","baulk","check",_312,"hitch",_313,_314,"encumbrance","incumbrance","interference"]},confirmation:{n:["confirmation","verification","check","substantiation"]},assay:{n:["assay","check"],v:["assay","v"]},arrival:{n:["arrival","arriver","comer","reaching"]},hitchhike:{v:["hitchhike","hitch","thumb"]},buck:{v:["buck","jerk","hitch"],n:["buck","n"]},limp:{v:["limp","gimp","hobble","hitch"],n:["limp","n"],s:["limp","s"]},"hang-up":{n:["hang-up","hitch","rub","snag"]},enlistment:{n:["enlistment","hitch","tour"]},overwhelm:{v:["overwhelm","overpower","whelm","overcome","overtake","deluge"]},choker:{n:["choker","collar","neckband","ruff","ruffle"]},crippled:{s:["crippled","halt","halting","lame","gimpy","game"]},stem:{v:["stem","stanch","staunch","halt"],n:["stem","n"]},stop:{v:["stop","halt","block","kibosh"],n:["stop","halt","stopover","layover","stoppage"]},freeze:{n:["freeze","halt","frost","freezing"],v:["freeze","block","immobilize","immobilise","suspend"]},vigil:{n:["vigil","watch"]},lookout:{n:["lookout","sentinel","sentry","watch","spotter","scout","picket","outlook","observatory"]},understanding:{n:[_114,"apprehension",_291,"savvy"]},grok:{v:["grok","comprehend","savvy","dig","grasp",_214,"apprehend"]},circumnavigate:{v:["circumnavigate","compass"]},craw:{n:["craw","crop"]},effigy:{n:["effigy","image","simulacrum"]},double:{n:["double","image","look-alike","two-bagger","two-baser"],v:["double","duplicate"],s:["double","forked","doubled","twofold","two-fold","dual","duple","treble","threefold","three-fold"],r:["double","r"],a:["double","a"]},trope:{n:["trope","figure","image"]},prototype:{n:["prototype","paradigm","epitome","image"]},persona:{n:["persona","image"]},pace:{n:["pace","rate","stride","tread","gait"],v:["pace","step"]},oscilloscope:{n:["oscilloscope","scope","cro"]},telescope:{n:["telescope","scope"]},setting:{n:["setting",_315,"scope","scene"]},master:{v:["master","control"],n:["master","captain","skipper","professional","original"]},restrict:{v:["restrict",_48,"trammel","limit","bound",_57,_316,"curtail","curb"]},manipulate:{v:["manipulate","control"]},command:{n:[_50,_48,"mastery","bid","bidding","dictation"],v:[_50,"require"]},restraint:{n:["restraint",_48,"constraint"]},dominance:{n:["dominance","ascendance","ascendence","ascendancy","ascendency","control"]},snap:{v:["snap","crack","click","flick","snarl"],n:["snap","n"]},wisecrack:{n:["wisecrack","crack","sally","quip"]},shot:{n:["shot","crack","shaft","slam","dig","barb","jibe","gibe","stab",_317,"pellet"],s:["shot","s"]},crevice:{n:["crevice","cranny","crack","fissure","chap"]},examine:{v:[_45,"see"]},visit:{v:["visit","see","inspect","call"],n:["visit","n"]},witness:{v:["witness","find","see"],n:["witness","attestant","attestor","attestator","witnesser","informant"]},understand:{v:["understand",_172,_173,"see","read",_217,"translate","infer"]},seethe:{v:["seethe","roll","boil"]},hustle:{v:["hustle","pluck","roll"],n:["hustle","n"]},wheel:{v:["wheel","roll"],n:["wheel","n"]},cast:{n:["cast","roll","mold","mould","stamp","casting"],v:["cast","mold","mould"]},scroll:{n:["scroll","roll"]},paradiddle:{n:["paradiddle","roll"]},peal:{n:["peal","pealing","roll","rolling"],v:["peal","v"]},bun:{n:["bun","roll"]},bankroll:{n:["bankroll","roll"]},coil:{n:["coil","whorl","roll","curl","curlicue","ringlet","gyre","scroll","spiral","volute","helix"],v:["coil","loop","curl"]},roller:{n:["roller","roll","tumbler"]},ratification:{n:["ratification","confirmation"]},arrow:{n:["arrow","pointer"]},garroter:{n:["garroter","garrotter","strangler","throttler","choker"]},artwork:{n:["artwork","art","graphics"]},art:{n:["art","artistry","prowess"]},shank:{n:["shank","stem","waist"]},stalk:{n:["stalk","stem","stalking"],v:["stalk","v"]},root:{n:["root","base","stem","theme","radical"],v:["root","v"]},barricade:{v:["barricade","block",_319,"stop","bar","barricado"],n:["barricade","n"]},end:{v:["end","stop","finish","terminate","cease"],n:["end","remainder","remnant","oddment","destruction","death","last","ending","terminal"]},intercept:{v:["intercept","stop"]},discontinue:{v:["discontinue","stop","cease","quit"]},blockage:{n:["blockage","block",_321,"occlusion","stop","stoppage"]},diaphragm:{n:["diaphragm","stop","pessary","midriff"]},period:{n:["period","point","stop"]},reason:{n:["reason",_114,"intellect","ground"],v:["reason","conclude"]},sympathy:{n:["sympathy","understanding"]},article:{n:["article","clause"]},articulated:{a:["articulated","articulate"]},articulate:{v:[_322,"enunciate","vocalize","vocalise"],a:[_322,"a"]},pronounce:{v:["pronounce",_322,"enounce","enunciate","say","label","judge"]},joint:{v:["joint","articulate"],n:["joint","reefer","stick","spliff","articulation","articulatio"]},artifact:{n:["artifact","artefact"]},artificial:{s:["artificial","contrived","hokey","stilted"],a:["artificial","unreal"]},roast:{n:["roast","joint"],s:["roast","roasted"],v:["roast","v"]},ridicule:{v:["ridicule","roast","guy","blackguard","rib"],n:["ridicule","n"]},equally:{r:["equally","as"]},arsenic:{n:["arsenic","as","ratsbane"]},evenly:{r:["evenly","equally"]},asian:{a:["asian","asiatic"],n:["asian","asiatic"]},asin:{n:["asin","asvina"]},request:{n:["request","asking","petition","postulation"],v:["request","bespeak","quest"]},"asleep,":{s:["asleep,","deceased","departed","gone","benumbed","numb"]},aspect:{n:["aspect","facet"]},conceptualization:{n:["conceptualization","conceptualisation","formulation","conceptuality"]},horizon:{n:["horizon","view","purview","skyline"]},scene:{n:["scene","view","shot"]},opinion:{n:["opinion","view","sentiment","persuasion","thought","ruling","judgment","judgement"]},position:{n:[_309,"view","perspective","stance",_140,"post","berth","office","spot","billet","place","situation","attitude"],v:[_309,"v"]},rule:{n:["rule",_284,"ruler","prescript","regulation"],v:["rule","find","harness","rein","decree"]},convention:{n:["convention","normal",_15,"rule",_284,"convening"]},recipe:{n:["recipe","formula"]},structure:{n:["structure","construction"]},fuck:{n:["fuck","fucking","screw","screwing","ass","nooky","nookie","shag","shtup"]},buttocks:{n:["buttocks","nates","arse","butt","backside","bum","buns","can","fundament","hindquarters","keister","posterior","prat","rear","rump","stern","seat","tail","tooshie","tush","bottom","behind","derriere","fanny","ass"]},scenery:{n:["scenery","scene"]},impression:{n:["impression","feeling","belief","notion","opinion","printing","effect"]},put:{v:["put","set","place","pose",_309,"lay","assign"]},stead:{n:["stead",_309,"place","lieu"]},place:{n:["place",_309,_78,"shoes","property"],v:["place","put","set","localize","localise"]},side:{n:["side",_309,"face"]},situation:{n:["situation","position"]},status:{n:["status","position"]},rape:{v:["rape","ravish",_163,_307,"dishonor","dishonour",_323,"spoil","despoil","plunder"],n:["rape",_324,_307,"ravishment","rapine","colza"]},assemble:{v:["assemble","gather","piece","tack"]},fitting:{s:[_97,"meet","decent"],n:[_97,"try-on"]},touch:{v:["touch","adjoin","meet",_168,_108,"stir"],n:["touch","feeling","spot","hint","tinge","mite","pinch","jot","speck","soupcon","touching","signature","trace","ghost"]},converge:{v:["converge","meet"]},assembly:{n:["assembly",_325,"gathering"]},forum:{n:["forum","assembly"]},fabrication:{n:["fabrication","assembly",_326,"manufacturing","fictionalization","fictionalisation","fiction","fable"]},tint:{v:["tint","tinct","tinge","touch"],n:["tint","n"]},partake:{v:["partake","touch","share"]},contact:{n:[_168,"touch","tangency","middleman","impinging","striking"],v:[_168,"v"]},insist:{v:["insist","assert"]},affirm:{v:["affirm","verify","assert","avow","aver","swan","swear"]},assert:{v:["assert","asseverate","maintain"]},"fit,":{s:["fit,","primed,","set,"]},equip:{v:["equip","fit","outfit"]},burst:{n:["burst","fit"],v:["burst","bust","split"]},paroxysm:{n:["paroxysm","fit","convulsion"]},lying:{n:["lying","prevarication","fabrication"]},tax:{v:["tax","assess","task"],n:["tax","taxation"]},importune:{v:["importune","insist"]},confirm:{v:["confirm","corroborate",_27,"substantiate",_26,"affirm","reassert"]},judgment:{n:["judgment","judgement","assessment","perspicacity","judging","mind"]},sagacity:{n:["sagacity","sagaciousness","judgment","judgement","discernment"]},judiciousness:{n:["judiciousness","sagacity","sagaciousness"]},asset:{n:["asset","plus"]},assign:{v:["assign","attribute",_13,"allot","portion"]},arrogate:{v:["arrogate","assign"]},impute:{v:["impute","ascribe","assign","attribute"]},delegate:{v:["delegate",_328,"depute","assign"]},frame:{v:["frame","redact","cast","put","couch","compose","border"],n:["frame","framing"]},assignment:{n:["assignment","assigning"]},induct:{v:["induct","invest","seat"]},endow:{v:["endow","indue","gift","empower","invest","endue","dower"]},ensnare:{v:["ensnare","entrap","frame"]},framework:{n:["framework","frame","fabric"]},skeleton:{n:["skeleton","frame","underframe"]},inning:{n:["inning","frame"]},station:{v:[_78,"post","send","place"],n:[_78,"n"]},identify:{v:["identify","place",_34,"key",_121,_12,"name"]},locate:{v:["locate","place","site"]},space:{n:["space","place","blank","infinite"]},plaza:{n:["plaza","place","piazza","mall","center"]},seat:{n:["seat","place"],v:["seat","sit"]},home:{n:["home","place"]},servicing:{n:["servicing","service"]},assisted:{a:["assisted","aided"]},consociate:{v:["consociate","associate"]},associate:{v:[_225,"relate","link","colligate","connect"],n:[_225,"n"]},companion:{n:["companion","comrade","fellow","familiar","associate"],v:["companion","v"]},association:{n:["association","connection","connexion"]},exemplary:{s:["exemplary","model,"]},mannequin:{n:["mannequin","manikin","mannikin","manakin","model","form"]},exemplar:{n:["exemplar",_141,"model"]},assumed:{s:["assumed","false","fictitious","fictive","pretended","sham"]},assumptive:{s:["assumptive","assuming","presumptuous"]},presumption:{n:["presumption","presumptuousness","effrontery","assumption"]},assumption:{n:["assumption","supposition","supposal"]},premise:{n:["premise","premiss","assumption"],v:["premise","premiss"]},given:{n:["given","presumption","precondition"],s:["given","granted"]},predate:{v:["predate","precede","forego","forgo","antecede","antedate","foredate"]},assurance:{n:["assurance","pledge","self-assurance","confidence","self-confidence","authority","sureness"]},promise:{v:["promise","assure"],n:["promise","hope"]},reassure:{v:["reassure","assure"]},assure:{v:["assure","tell"]},guarantee:{v:["guarantee","ensure","insure","assure","secure","warrant","vouch"],n:["guarantee","guaranty","warrant","warrantee","warranty"]},represent:{v:[_52,_217,"correspond"]},undertake:{v:["undertake","guarantee","tackle","attempt"]},inflict:{v:["inflict","visit","impose"]},sojourn:{n:["sojourn","visit"]},spectator:{n:["spectator","witness","viewer","watcher","looker"]},sympathize:{v:["sympathize","sympathise","empathize","empathise","understand"]},probe:{v:["probe","examine"],n:["probe","investigation"]},astronomer:{n:["astronomer","uranologist","stargazer"]},astronomy:{n:["astronomy","uranology"]},refuge:{n:["refuge","sanctuary","asylum"]},recourse:{n:["recourse","resort","refuge"]},safety:{n:["safety","refuge"]},astatine:{n:["astatine","at"]},condom:{n:["condom","rubber","safety","safe","prophylactic"]},guard:{n:["guard","safety"],v:["guard","ward"]},athens:{n:["athens","athinai"]},athlete:{n:["athlete","jock"]},acrobatic:{s:["acrobatic","athletic","gymnastic"]},sport:{n:["sport","athletics","sportsman","sportswoman","summercater"],v:["sport",_59,"boast"]},frolic:{v:["frolic","lark","rollick","skylark","disport","sport","cavort","gambol","frisk","romp"],n:["frolic","n"]},fun:{n:["fun","play","sport","merriment","playfulness"]},mutant:{n:["mutant","mutation","variation","sport"]},playfulness:{n:["playfulness","fun"]},atlas:{n:["atlas","telamon"]},atmospheric:{a:["atmospheric","atmospherical"]},atom:{n:["atom","molecule","particle","corpuscle","mote","speck"]},nuclear:{a:["nuclear","atomic"]},impound:{v:["impound","attach","sequester","confiscate","seize","pound"]},bind:{v:["bind","tie","attach","bond","bandage"]},constipate:{v:["constipate","bind"]},adhere:{v:["adhere","bond","bind","stick"]},attached:{a:["attached","committed"],s:["attached","s"]},connect:{v:["connect","link","tie","join","unite"]},link:{n:["link","linkup","tie","tie-in","nexus"],v:["link","v"]},necktie:{n:["necktie","tie"]},cling:{v:["cling","cleave","adhere","stick","cohere","hang"],n:["cling","clingstone"]},clog:{v:["clog","constipate","overload","clot","congest","choke","foul"],n:["clog","geta","patten","sabot"]},fastening:{n:["fastening","attachment"]},attachment:{n:["attachment","affixation","adherence","adhesion","bond"]},fastener:{n:["fastener","fastening","holdfast","fixing"]},cut:{v:["cut","burn","prune","rationalize","rationalise","skip","tailor"],n:["cut","gash","slash","slice",_253,"undercut","track"],s:["cut","thinned",_156,"slashed","emasculated","gelded","shortened"],a:["cut","a"]},sunburn:{v:["sunburn","burn"],n:["sunburn","n"]},cauterize:{v:["cauterize","cauterise","burn"]},bite:{v:["bite","sting","burn"],n:["bite","chomp","collation","snack"]},tan:{n:["tan","suntan","sunburn","burn","topaz"],v:["tan","bronze"]},preempt:{v:["preempt","displace"]},awaken:{v:["awaken","wake","waken","rouse","arouse"]},stimulate:{v:["stimulate","arouse","brace","energize","energise","shake","excite","stir"]},quiz:{v:["quiz","test"]},examination:{n:["examination","exam","test","testing","scrutiny"]},trial:{n:["trial","test","tryout","tribulation","visitation"]},evaluate:{v:["evaluate","judge"]},evaluator:{n:["evaluator","judge"]},listen:{v:["listen","hear"]},attendance:{n:["attendance","attending"]},attention:{n:["attention","attending"]},english:{n:["english","side"]},site:{n:["site","situation"],v:["site","v"]},lawyer:{n:["lawyer","attorney"]},attraction:{n:["attraction","attractor","attracter","magnet","attractiveness"]},property:{n:["property","attribute","dimension","prop","belongings","holding"]},gold:{n:["gold","au"],s:["gold","golden","gilded"]},aureate:{s:["aureate","gilded","gilt","gold","golden","florid","flamboyant"]},auction:{v:["auction","auctioneer"],n:["auction","vendue"]},consultation:{n:["consultation","audience","interview"]},hearing:{n:["hearing","audience","audition"]},reference:{n:[_185,"consultation","source","denotation","extension"],v:[_185,"cite"]},listening:{n:["listening","hearing"]},earshot:{n:["earshot","earreach","hearing"]},character:{n:["character",_185,"role","part","persona",_332,"type","case","graph","grapheme","fiber","fibre"]},audio:{n:["audio","sound"]},audit:{v:["audit","scrutinize","scrutinise","inspect"]},hearer:{n:["hearer","listener","auditor","attender"]},august:{n:["august","aug"],s:["august","revered","venerable","grand","lordly"]},aunt:{n:["aunt","auntie","aunty"]},dawn:{n:["dawn","dawning","morning","aurora","daybreak","dayspring","sunrise","sunup","cockcrow"],v:["dawn","v"]},click:{v:["click","dawn",_333,"tick"],n:["click","n"]},cluck:{v:["cluck","click","clack"],n:["cluck","clucking"]},chatter:{v:["chatter","click","piffle",_334,"prate","tittle-tattle","twaddle","clack","maunder","prattle","blab","gibber","tattle","blabber","gabble"],n:["chatter","chattering"]},pawl:{n:["pawl","detent","click","dog"]},chink:{n:["chink","click","clink","chinaman"],v:["chink","v"]},australian:{n:["australian","aussie"]},austria:{n:["austria","oesterreich"]},authentic:{s:["authentic","unquestionable","veritable","reliable"]},authentication:{n:["authentication",_336,"hallmark","assay-mark"]},generator:{n:["generator","source","author"]},writer:{n:["writer","author"]},authority:{n:["authority","authorization","authorisation",_294,"potency","dominance","say-so"]},authorization:{n:["authorization","authorisation","empowerment"]},mandate:{n:["mandate","authorization","authorisation","mandatory"]},empower:{v:["empower","authorise","authorize"]},authoritative:{s:["authoritative","authorized","authorised","definitive","important"]},authorized:{a:["authorized","authorised"],s:["authorized","s"]},car:{n:["car","auto","automobile","machine","motorcar","gondola","railcar"]},automated:{s:["automated","machine-controlled","machine-driven"]},automatic:{s:["automatic","reflex,","reflexive","automatonlike","machinelike","robotlike","robotic"]},mechanically:{r:["mechanically","automatically"]},automation:{n:["automation","mechanization","mechanisation"]},automotive:{s:["automotive","self-propelled","self-propelling"]},autonomy:{n:["autonomy","self-direction","self-reliance","self-sufficiency","liberty"]},dusky:{s:["dusky","twilight,","twilit"]},spillway:{n:["spillway","spill","wasteweir"]},bent:{n:["bent","knack","hang","set","bent-grass"],s:["bent","crumpled","dented"]},condescend:{v:["condescend","deign",_92,"stoop"]},lineage:{n:[_264,"line","descent","bloodline","blood","pedigree","ancestry","origin","parentage","stemma","stock"]},origin:{n:["origin","descent","extraction","origination","inception"]},hasty:{s:["hasty","overhasty","precipitate","precipitant","precipitous","headlong"]},available:{s:["available","usable","useable","uncommitted"]},embodiment:{n:["embodiment","incarnation","avatar"]},avenue:{n:["avenue","boulevard"]},"median,":{s:["median,","average"]},"modal,":{s:["modal,","average"]},average:{s:[_338,"intermediate","medium","fair","mediocre","middling","ordinary","mean,"],n:[_338,"norm"]},aviation:{n:["aviation","airmanship"]},invalidate:{v:["invalidate","annul","quash","void","avoid","nullify","vitiate"]},debar:{v:["debar","forefend","forfend","obviate",_339,"avert","avoid"]},cancel:{v:["cancel","invalidate","offset",_122,"scrub"],n:["cancel","n"]},bar:{v:["bar","debar","exclude"],n:["bar","n"]},suspend:{v:["suspend","debar"]},delete:{v:["delete","cancel"]},banish:{v:["banish","relegate","bar","ban","ostracize","ostracise","shun","blackball"]},cake:{n:["cake","bar"],v:["cake","v"]},stripe:{n:["stripe","streak","bar"]},prevention:{n:["prevention","bar"]},barroom:{n:["barroom","bar","saloon","ginmill","taproom"]},mindful:{a:["mindful","aware"]},"aware,":{a:["aware,","cognizant","cognisant"]},awareness:{n:["awareness","sentience","consciousness","cognizance","cognisance","knowingness"]},mangle:{v:["mangle","mutilate","murder"]},frightful:{s:["frightful",_340,"awful","tremendous"]},awed:{s:["awed","awful"],a:["awed","awestruck","awestricken"]},nasty:{a:["nasty","awful"],s:["nasty","tight"]},awful:{s:["awful","dire","direful","dread,","dreaded","dreadful",_341,"fearsome","frightening","horrendous","horrific","terrible"],a:["awful","a"],r:["awful","r"]},atrocious:{s:["atrocious","abominable","awful","dreadful","painful",_340,"unspeakable","frightful","horrifying","horrible","ugly","flagitious",_342,"monstrous"]},fearful:{s:[_341,"frightful","timorous","trepid"],a:[_341,"a"]},filthy:{s:["filthy","foul","nasty"]},cruddy:{s:["cruddy","filthy","foul","nasty","smutty"]},bloc:{n:["bloc","axis"]},dirty:{s:["dirty","filthy","lousy","foul","marked-up","sordid","shoddy","ill-gotten","dingy","muddied","muddy","pestiferous"],a:["dirty","contaminating","soiled","unclean"],v:["dirty","soil","begrime","grime","colly","bemire"]},cowardly:{a:["cowardly","fearful"]},azimuth:{n:["azimuth","az"]},azerbaijan:{n:["azerbaijan","azerbajdzhan"]},b:{n:["b"]},barn:{n:["barn","b"]},bel:{n:["bel","b"]},boron:{n:["boron","b"]},bacillus:{n:["bacillus","b"]},barium:{n:["barium","ba"]},baby:{n:["baby","babe","infant"],v:["baby","v"]},pamper:{v:["pamper","featherbed","cosset","cocker","baby","coddle","mollycoddle","spoil","indulge"]},child:{n:["child","baby","kid","youngster","minor","shaver","nipper","tiddler","tike","tyke","fry","nestling"]},back:{r:["back","backward","backwards","rearward","rearwards"],v:["back",_343,_344,"support"],n:["back","backrest","rear","dorsum"]},"back,":{s:["back,","hind,","hinder,"]},second:{v:["second","back",_343,"indorse"],r:["second","secondly"],s:["second","2nd","2d"],n:["second","secondment","endorsement","indorsement","arcsecond","sec","s"]},"rear,":{s:["rear,","rearward,"]},moment:{n:["moment","minute","second",_345,"mo","bit"]},fertilization:{n:["fertilization","fertilisation","fecundation","dressing","impregnation"]},stuffing:{n:["stuffing","dressing"]},atypical:{s:["atypical","irregular"],a:["atypical","untypical","atypic"]},background:{v:[_315,"downplay"],n:[_315,"desktop","ground"]},backdrop:{n:["backdrop",_315,"backcloth"]},consequence:{n:["consequence","import","moment","aftermath","effect","outcome","result","event","issue","upshot"]},mount:{n:["mount","setting"],v:["mount","v"]},context:{n:["context","circumstance","setting"]},support:{n:[_26,"funding","backing","supporting","keep","livelihood","living","sustenance",_346,"reenforcement"],v:[_26,"v"]},backing:{n:["backing","mount","backup","championship","patronage"]},ride:{v:["ride","mount","sit"],n:["ride","n"]},climb:{v:["climb","mount"],n:["climb","mount","climbing","mounting"]},mountain:{n:["mountain","mount"]},patronize:{v:["patronize","patronise",_246,_26,"condescend","shop","frequent","sponsor"]},corroborate:{v:["corroborate","underpin","support"]},documentation:{n:["documentation",_26,_336,"corroboration"]},validate:{v:["validate","corroborate","formalize","formalise"]},maintain:{v:[_60,"defend"]},champion:{v:[_118,"defend"],s:[_118,"prizewinning"],n:[_118,"fighter","hero","paladin","champ","title-holder"]},fight:{v:["fight","oppose","defend","struggle"],n:["fight","fighting","combat","scrap"]},sponsor:{v:[_347,"patronize","patronise"],n:[_347,"n"]},bodyguard:{n:["bodyguard","escort"]},bacteria:{n:["bacteria","bacterium"]},badly:{r:["badly","bad","disadvantageously","mischievously","naughtily","severely","gravely","seriously"]},bad:{s:["bad","defective","forged","unfit","unsound","risky","high-risk","speculative","uncollectible","spoiled","spoilt","tough","big"],n:["bad","badness"],r:["bad","r"],a:["bad","a"]},regretful:{a:["regretful","sorry","bad"]},ill:{r:["ill","badly","poorly"],s:["ill",_211,"ominous"],a:["ill","sick"],n:["ill","n"]},ailment:{n:["ailment","complaint","ill"]},pocket:{v:["pocket","bag"],n:["pocket","n"]},bulge:{v:["bulge","bag","bulk","pouch","protrude"],n:["bulge","bump","hump","swelling","gibbosity","gibbousness","jut","prominence","protuberance","protrusion","extrusion","excrescence"]},udder:{n:["udder","bag"]},bag:{n:["bag","grip","suitcase","bagful","handbag","pocketbook","purse"],v:["bag","v"]},base:{n:["base","bag","home","radix","alkali","pedestal","stand"],s:["base","baseborn","mean","meanspirited","immoral","humble","lowly"],v:["base","v"]},start:{v:["start","protrude","pop","bulge","go","commence"],n:["start",_122,"starting"]},basal:{s:["basal","base"],a:["basal","a"]},"free-base":{v:["free-base","base"]},infrastructure:{n:["infrastructure","base","substructure"]},"al-qaeda":{n:["al-qaeda","qaeda","al-qa'ida","al-qaida","base"]},basis:{n:["basis","base","foundation","fundament","groundwork","cornerstone"]},nucleotide:{n:["nucleotide","base"]},floor:{n:["floor","base","level","storey","story","flooring"],v:["floor","v"]},foundation:{n:["foundation","base","fundament","foot","groundwork","substructure","understructure","grounding"]},pouch:{n:["pouch","pocket","sac","sack"],v:["pouch","v"]},scoop:{n:["scoop","pocket","scoopful"],v:["scoop","v"]},baghdad:{n:["baghdad","bagdad"]},begin:{v:["begin","start","commence"]},startle:{v:["startle","jump","start","galvanize","galvanise"],n:["startle","jump","start"]},depart:{v:["depart","part","start","quit"]},beginning:{n:["beginning","start","commencement","first","outset","get-go","kickoff","showtime","offset","origin","root","rootage","source"]},footing:{n:["footing","basis","ground","terms"]},shock:{v:["shock","floor","offend","scandalize","scandalise","appal","appall","outrage"],n:["shock","blow","impact"]},initiation:{n:["initiation","founding","foundation","institution","origination","creation","innovation",_349,"instauration",_350,"installation"]},outdo:{v:["outdo","outflank","trump","best","scoop"]},soap:{n:["soap","scoop","max","goop"],v:["soap","lather"]},exclusive:{n:["exclusive","scoop"],s:["exclusive","sole,"]},elementary:{s:["elementary","elemental","primary","basal","simple","uncomplicated","unproblematic"]},radical:{a:[_318,"basal"],n:[_318,"n"],s:[_318,"s"]},rout:{v:["rout","root","rootle","gouge","expel"],n:["rout","n"]},etymon:{n:["etymon","root"]},bahrain:{n:["bahrain","bahrein"]},bake:{v:["bake","broil"]},broil:{v:["broil","bake"],n:["broil","broiling","grilling"]},poise:{v:["poise","balance"],n:["poise","n"]},balance:{v:[_351,"equilibrate","equilibrize","equilibrise"],n:[_351,"equilibrium","equipoise","counterbalance"]},counterweight:{n:["counterweight",_259,"counterpoise",_351,"equalizer","equaliser"],v:["counterweight","counterpoise","counterpose"]},symmetry:{n:["symmetry","symmetricalness",_113,_351,"proportion"]},libra:{n:["libra","balance"]},remainder:{n:["remainder",_351,"residual","residue","residuum","rest","difference"]},proportion:{n:["proportion","proportionality",_351,"ratio","dimension"]},brace:{v:["brace","poise","steady","stabilize","stabilise"],n:["brace","bracing","bitstock","braces","suspender","gallus"]},aplomb:{n:["aplomb","assuredness","cool","poise","sang-froid"]},isotropy:{n:["isotropy","symmetry"]},bald:{s:["bald","denuded","denudate","bald-headed","bald-pated","barefaced"]},conclusion:{n:[_236,"end","close",_352,"ending","ratiocination"]},goal:{n:["goal","end"]},baseball:{n:["baseball","ball"]},ball:{n:["ball","formal","clod","glob","lump","clump","chunk","globe","orb"]},testis:{n:["testis","testicle","orchis","ball","ballock","bollock","nut","egg"]},balloon:{v:["balloon","inflate","billow"]},vote:{n:["vote","ballot","voting","balloting"]},ban:{v:["ban","censor"],n:["ban","banning","forbiddance","forbidding"]},prohibition:{n:["prohibition","ban","proscription","inhibition","forbiddance"]},ring:{v:["ring","band","knell","peal"],n:["ring","band","ringing","tintinnabulation","halo","annulus","doughnut"]},band:{n:["band","ring","banding","stripe","stria","striation"],v:["band","v"]},isthmus:{n:["isthmus","band"]},hardened:{s:[_353,"set"],a:[_353,"a"]},determined:{s:["determined","dictated","set"]},laid:{s:["laid","set"]},located:{s:["located","placed","set","situated"]},fixed:{s:["fixed","set","rigid","frozen"]},fructify:{v:["fructify","set"]},rig:{v:["rig","set","manipulate"],n:["rig","rigging"]},sic:{v:["sic","set"]},typeset:{v:["typeset","set"]},jell:{v:["jell","set","congeal"]},plant:{v:["plant","set","implant"],n:["plant","flora","works"]},fix:{v:["fix",_142,"ready","set"],n:["fix","hole","jam","mess","muddle","pickle"]},hardening:{n:["hardening","solidifying","solidification","set","curing"]},surround:{v:[_354,"environ","ring","skirt","border"],n:[_354,"n"]},resound:{v:["resound","echo","ring","reverberate"]},gang:{n:["gang","pack","ring","mob","crew"]},hoop:{n:["hoop","ring"]},bid:{v:["bid","call","beseech","entreat","adjure","press","conjure"],n:["bid","bidding","tender","play"]},shout:{v:["shout","cry","call","yell","scream","holler","hollo","squall"],n:["shout","n"]},birdcall:{n:["birdcall","call","birdsong","song"]},cry:{n:["cry","outcry","call","yell","shout","vociferation"],v:["cry","weep"]},compulsive:{s:["compulsive","determined","driven"]},intend:{v:["intend","destine",_328,_13,"mean","think"]},stipulate:{v:["stipulate","qualify",_153,"specify"]},bended:{s:["bended","bent"]},crowd:{n:["crowd","crew","gang","bunch"],v:["crowd","v"]},implant:{v:["implant","engraft","embed","imbed","plant"]},situate:{v:["situate","fix","posit",_91,"locate"]},sterilize:{v:["sterilize","sterilise","desex","unsex","desexualize","desexualise","fix"]},fixate:{v:["fixate","fix"]},fasten:{v:["fasten","fix","secure"]},repair:{v:["repair","mend","fix","bushel","doctor","restore","resort"],n:["repair","fix","fixing","fixture","mend","mending","reparation"]},localization:{n:["localization","localisation","location","locating","fix"]},wall:{v:["wall","palisade","fence","surround"],n:["wall","paries"]},besiege:{v:["besiege","beleaguer",_354,"circumvent"]},smother:{v:["smother",_354,"stifle",_355,"muffle","repress","asphyxiate","suffocate"],n:["smother","n"]},environment:{n:["environment","environs","surroundings","surround"]},basket:{n:["basket","hoop","basketful","handbasket"]},wicket:{n:["wicket","hoop","lattice","grille"]},swindle:{n:["swindle","cheat","rig"],v:["swindle","v"]},outfit:{n:["outfit","getup","rig","turnout"],v:["outfit","v"]},enured:{s:["enured","inured","hardened"]},tempered:{a:["tempered","treated",_353,"toughened"]},"case-hardened":{s:["case-hardened",_353,"hard-boiled"]},pink:{v:["pink","ping","knock"],s:["pink","pinkish"],n:["pink","n"]},tap:{v:["tap","rap","knock","pink","tip"],n:["tap","pat","dab","spigot"]},bump:{v:["bump","knock"],n:["bump","n"]},strike:{v:["strike","hit",_122,"expunge","excise"],n:["strike","ten-strike"]},stumble:{v:[_201,"hit","trip","falter","bumble"],n:[_201,"n"]},shoot:{v:["shoot","hit","pip","spud","germinate","pullulate","bourgeon","sprout"]},collision:{n:["collision","hit"]},find:{v:["find","happen","chance","bump",_159,"feel","regain"],n:["find","n"]},blow:{n:["blow","bump","puff"],v:["blow","v"]},solicit:{v:["solicit","beg","tap"]},tapdance:{v:["tapdance","tap"]},wiretap:{v:["wiretap","tap","intercept","bug"],n:["wiretap","tap"]},rap:{n:["rap","strike","tap","hip-hop"],v:["rap","knap"]},pat:{n:["pat","rap","tap"],v:["pat","v"],s:["pat","s"]},pinko:{n:["pinko","pink"]},changeable:{s:["changeable","chatoyant","iridescent","shot",_356,"unsettled"],a:["changeable","changeful"]},blastoff:{n:["blastoff","shot"]},snapshot:{n:["snapshot","snap","shot"]},injection:{n:["injection","shot","injectant"]},stroke:{n:["stroke","shot","stroking","apoplexy","cva"]},shooting:{n:["shooting","shot"]},trip:{n:["trip","trip-up",_201,"misstep"],v:["trip","actuate","trigger","activate","spark"]},deposit:{v:[_91,"bank"],n:[_91,"deposition","sedimentation","alluviation"]},inject:{v:["inject","shoot"]},fritter:{v:["fritter","dissipate","shoot","fool"]},photograph:{v:["photograph","snap","shoot"],n:["photograph","photo","exposure",_88,"pic"]},dart:{v:["dart","dash","scoot","scud","flash","shoot"],n:["dart","n"]},blast:{v:["blast","shoot","shell","blare"],n:["blast","n"]},strickle:{v:["strickle","strike"]},mint:{v:["mint","coin","strike"],n:["mint","n"]},depository:{n:["depository",_91,"depositary","repository"]},deposition:{n:["deposition",_91,"dethronement"]},sediment:{n:["sediment","deposit"]},bankruptcy:{n:["bankruptcy","failure"]},banned:{s:["banned","prohibited"]},streamer:{n:["streamer","banner"]},banner:{n:["banner","streamer"]},pennant:{n:["pennant","pennon","streamer","waft","crown"]},chevron:{n:["chevron","stripe","stripes"]},roadblock:{n:["roadblock","barricade"]},patty:{n:["patty","cake"]},coating:{n:["coating","coat","finish","finishing"]},barrier:{n:["barrier","roadblock"]},plain:{s:["plain","bare","spare","unembellished","unornamented","unvarnished","sheer","unmingled","unmixed"],a:["plain","unpatterned"],n:["plain","field","champaign"],r:["plain","r"],v:["plain","v"]},"bare,":{s:["bare,","mere,","simple,","marginal","scanty","spare"]},unsheathed:{a:["unsheathed","bare"]},denude:{v:["denude","bare","denudate","strip"]},homely:{s:["homely","plain"]},complain:{v:["complain","kick","plain","quetch","kvetch"]},knit:{n:["knit","plain","knitting","knitwork"],v:["knit","entwine"]},barely:{r:["barely","just","hardly","scarcely","scarce"]},hardly:{r:["hardly","scarcely","barely","scarce"]},dicker:{v:["dicker","bargain"]},bargain:{n:["bargain","buy","steal","deal"],v:["bargain","v"]},pucker:{v:["pucker","rumple","cockle",_289,"knit","ruck"],n:["pucker","ruck"]},homelike:{s:["homelike","homely","homey","homy"]},hard:{r:["hard","hardly","severely","firmly"],s:["hard","tough","strong",_357,"severe"],a:["hard","concentrated"]},heavily:{r:["heavily","intemperately","hard"]},intemperate:{s:["intemperate","hard","heavy"]},unvoiced:{a:["unvoiced",_358,"surd","hard"],s:["unvoiced","s"]},arduous:{s:["arduous","backbreaking","grueling","gruelling","hard","heavy","laborious","operose","punishing","toilsome","straining","strenuous"]},difficult:{a:["difficult","hard"]},barrel:{n:["barrel","bbl","barrelful","drum","cask"]},physique:{n:["physique","build","body-build","habitus"]},traumatize:{v:["traumatize","traumatise","shock"]},jolt:{n:["jolt","jar","jounce","shock"],v:["jolt","jar"]},daze:{n:["daze","shock","stupor","fog","haze"],v:["daze","v"]},trigger:{n:["trigger",_350,"initiation"],v:["trigger","v"]},knowledgeability:{n:["knowledgeability","knowledgeableness","initiation"]},finalize:{v:["finalize","finalise","settle"]},ensconce:{v:["ensconce","settle"]},subside:{v:["subside","settle","lessen"]},reconcile:{v:[_55,"conciliate","settle"]},foothold:{n:["foothold","footing"]},testify:{v:["testify","prove",_359,"show","attest"]},"spread-eagle":{v:["spread-eagle","spreadeagle","rout"]},mob:{n:["mob","rabble","rout"],v:["mob","v"]},revolutionary:{s:[_360,"radical"],a:[_360,"a"],n:[_360,"n"]},extremist:{s:["extremist",_318,"ultra"]},group:{n:["group",_318,"grouping"],v:["group","aggroup"]},"beginning,":{s:["beginning,","first"]},basement:{n:["basement","cellar"]},basic:{s:["basic","introductory","canonic","canonical"],n:["basic","staple"]},basically:{r:["basically","fundamentally","essentially"]},washbasin:{n:["washbasin","basin","washbowl","washstand","lavatory","handbasin","lavabo"]},basin:{n:["basin","basinful"]},beachhead:{n:["beachhead","foothold"]},bridgehead:{n:["bridgehead","foothold"]},basketball:{n:["basketball","hoops"]},bass:{s:["bass","deep"],n:["bass","basso"]},cream:{v:["cream","bat",_361,"drub","thrash","lick"],n:["cream","ointment","emollient","pick"]},bat:{v:["bat","flutter"],n:["bat","at-bat","chiropteran"]},skim:{v:["skim","cream","skip","skitter"],s:["skim","skimmed"],n:["skim","skimming"]},scan:{v:["scan","skim","rake"]},plane:{v:["plane","skim","shave"],n:["plane","sheet","planer"],s:["plane","s"]},batch:{n:["batch","clutch","deal","flock","hatful","heap","lot","mass","mess","mickle","mint","mountain","muckle","passel","peck","pile","plenty","pot","raft","sight","slew","spate","stack","wad"]},toilet:{n:["toilet","lavatory","lav","can","john","privy","bathroom","toilette","commode","crapper","pot","potty","stool","throne"]},gutter:{n:["gutter","sewer","toilet","trough"]},barrage:{n:["barrage","battery","bombardment","shelling",_228,"onslaught"],v:["barrage","v"]},bombard:{v:[_363,"barrage","bomb"],n:[_363,"n"]},pelt:{v:["pelt","bombard"],n:["pelt","n"]},bombardon:{n:["bombardon","bombard"]},battle:{v:["battle","combat"],n:["battle",_364,"fight","engagement"]},conflict:{n:[_364,_348,"battle"],v:[_364,"infringe","contravene"]},struggle:{n:[_348,"battle"],v:[_348,"v"]},contend:{v:[_233,"fight",_348,"postulate"]},clamber:{v:["clamber",_308,"shin","shinny","skin",_348,"sputter"]},dispute:{n:[_366,"difference",_364,"contravention"],v:[_366,"v"]},compete:{v:["compete","vie","contend"]},contest:{v:["contest",_233,"repugn"],n:["contest","competition"]},quarrel:{v:["quarrel",_366,"scrap","argufy","altercate"],n:["quarrel","wrangle","row","words","run-in","dustup"]},challenge:{v:["challenge",_366,"gainsay"]},competitiveness:{n:["competitiveness","fight"]},battlefield:{n:["battlefield","battleground","field"]},bay:{v:["bay","quest"],n:["bay","embayment"]},alcove:{n:["alcove","bay"]},bc:{r:["bc","b.c."]},cost:{v:["cost","be"],n:["cost","n"]},be:{v:["be","live","follow"],n:["be","n"]},embody:{v:["embody","be","personify"]},constitute:{v:[_110,_52,"comprise","be"]},exist:{v:["exist","be","survive","live","subsist"]},beryllium:{n:["beryllium","be","glucinium"]},price:{n:["price","cost","toll","terms","damage"]},incarnate:{v:["incarnate","embody","substantiate"],s:["incarnate","s"]},bodied:{s:["bodied","corporal","corporate","embodied","incarnate"]},imprint:{v:[_367,"form"],n:[_367,"embossment"]},glow:{v:["glow","beam",_368,"shine"],n:["glow","n"]},shine:{v:["shine","beam"],n:["shine","n"]},beam:{n:["beam","ray","shaft","irradiation"],v:["beam","v"]},glitter:{v:["glitter","glisten","glint","gleam","shine"],n:["glitter",_369,"coruscation","glister","glisten","scintillation"]},reflect:{v:["reflect","shine","reverberate"]},radiance:{n:["radiance","radiancy","shine","effulgence","refulgence","refulgency","glow","glowing"]},gleam:{n:["gleam","gleaming","glow","lambency","glimmer"],v:["gleam","glimmer"]},incandescence:{n:["incandescence","glow"]},luminescence:{n:["luminescence","glow"]},freshness:{n:["freshness","glow","novelty"]},attic:{n:["attic","bean","bonce","noodle","noggin","dome","ionic"]},crust:{n:["crust","gall","impertinence","impudence","insolence","cheekiness","freshness","incrustation","encrustation"]},novelty:{n:[_370,"freshness"]},loft:{n:["loft","attic","garret"]},preserve:{v:[_61,"keep"],n:[_61,"n"]},observe:{v:[_137,"celebrate","keep","maintain"]},sustain:{v:[_27,"keep","maintain"]},prevent:{v:["prevent","keep","forestall","foreclose","preclude","forbid"]},continue:{v:[_56,"proceed","keep","uphold","preserve"]},stay:{v:["stay","detain","delay","stick","remain","rest","continue"],n:["stay","n"]},buckle:{v:["buckle","clasp","crumple"],n:["buckle","n"]},brooch:{v:["brooch","clasp"],n:["brooch","broach","breastpin"]},treat:{v:["treat","handle"],n:["treat","n"]},predominate:{v:[_371,"dominate","rule","reign","prevail"],s:[_371,"s"]},reservation:{n:["reservation",_53,"qualification"]},modesty:{n:["modesty",_53,"modestness"]},seaport:{n:["seaport","haven","harbor","harbour"]},byssus:{n:["byssus","beard"]},beard:{n:["beard","whiskers"]},beast:{n:["beast","wolf","savage","brute","wildcat"]},cram:{v:["cram","drum","swot","bone"]},pulsation:{n:["pulsation","pulsing","pulse","impulse"]},beautifully:{r:["beautifully","attractively"]},jam:{v:["jam","jampack","ram","cram","wad","crush","block"],n:["jam","n"]},beauty:{n:["beauty","beaut"]},smasher:{n:["smasher","stunner",_357,"beauty","ravisher","sweetheart","peach","lulu","looker","mantrap","dish"]},beaver:{n:["beaver","castor"]},oregonian:{n:["oregonian","beaver"]},becoming:{s:["becoming","comely","decorous","seemly"]},layer:{n:["layer","bed"]},seam:{n:["seam","bed"]},bed:{n:["bed","bottom"]},level:{n:["level","layer","stratum"],s:["level","unwavering"],v:["level","raze","rase","dismantle"]},wrinkle:{n:[_373,"furrow","crease","crinkle","seam","line"],v:[_373,"ruckle","crease","crinkle","scrunch","crisp"]},"tied,":{s:["tied,","even","level,"]},flat:{s:["flat","level","plane","mat","matt","matte","matted",_374,"monotonic","monotonous","prostrate"],n:["flat","n"],r:["flat","r"]},flush:{v:["flush","level","even","scour","purge"],n:["flush","gush","outpouring"],s:["flush","s"]},rumple:{v:["rumple",_289,_373,"crease","crinkle"]},furrow:{v:["furrow",_373,"crease","chamfer","chase","rut","groove"],n:["furrow","n"]},purse:{v:["purse","wrinkle"],n:["purse","n"]},bedclothes:{n:["bedclothes","bedding"]},bedroom:{n:["bedroom","chamber","bedchamber"]},gripe:{v:["gripe","bitch","grouse","crab","beef","squawk","bellyache","holler"],n:["gripe","kick","beef","bitch","squawk"]},beef:{n:["beef","boeuf"],v:["beef","v"]},earlier:{r:["earlier","before"],s:["earlier","earliest"]},sooner:{r:["sooner","earlier"],n:["sooner","n"]},preferably:{r:["preferably","sooner","rather"]},oklahoman:{n:["oklahoman","sooner"]},beg:{v:["beg","implore","pray"]},woo:{v:["woo","court",_375,"solicit"]},addict:{v:["addict","hook"],n:["addict","nut","freak","junkie","junky"]},crochet:{v:["crochet","hook"],n:["crochet","crocheting"]},overcharge:{v:["overcharge","soak","surcharge","gazump","fleece","plume","pluck","rob","hook"]},bait:{n:["bait","come-on","hook","lure","sweetener","decoy"],v:["bait","v"]},founder:{n:[_161,"beginner","father"],v:[_161,"v"]},novice:{n:["novice","beginner","tyro","tiro","initiate"]},laminitis:{n:["laminitis","founder"]},novitiate:{n:["novitiate","novice","noviciate"]},behavior:{n:["behavior","behaviour",_28,"doings"]},demeanor:{n:["demeanor","demeanour","behavior","behaviour",_28,"deportment"]},behavioral:{a:["behavioral","behavioural"]},behind:{r:["behind","behindhand","slow"],n:["behind","n"]},beijing:{n:["beijing","peking","peiping"]},organism:{n:["organism","being"]},being:{n:["being","beingness","existence"]},belarus:{n:["belarus","byelarus","byelorussia","belorussia"]},belgium:{n:["belgium","belgique"]},stamp:{n:["stamp","impression","pestle"],v:["stamp","v"]},depression:{n:["depression","impression",_367,"slump"]},emboss:{v:["emboss","boss","stamp"]},pigeonhole:{v:["pigeonhole","stereotype","stamp"],n:["pigeonhole","n"]},stomp:{v:["stomp","stamp","stump"]},seal:{n:["seal","stamp","sealskin"],v:["seal","v"]},tender:{n:["tender","stamp","pinnace","cutter"],a:["tender","untoughened"],v:["tender","tenderize","tenderise"],s:["tender","s"]},postage:{n:["postage","stamp"]},low:{n:["low","depression"],a:["low","low-pitched"],s:["low","low-toned"],v:["low","v"]},believe:{v:["believe","trust"]},remember:{v:["remember","retrieve","recall","recollect","think"]},mean:{v:["mean","intend","signify"],s:["mean","mingy","miserly","tight"]},chime:{n:["chime","bell","gong"]},bell:{n:["bell","campana","toll"]},doorbell:{n:["doorbell","bell","buzzer"]},belly:{n:["belly","paunch"]},abdomen:{n:["abdomen","venter",_29,"belly"]},belong:{v:["belong","go"]},under:{r:["under","below"],s:["under","s"]},downstairs:{r:["downstairs","below"],a:["downstairs","downstair"]},below:{r:["below","infra","beneath"]},nether:{s:["nether","under"]},chthonian:{s:["chthonian","chthonic","nether"]},swath:{n:["swath","belt"]},workbench:{n:["workbench","bench"]},judiciary:{n:["judiciary","bench",_197,"judicatory"]},terrace:{n:["terrace","bench"],v:["terrace","terrasse"]},patio:{n:["patio","terrace"]},deflect:{v:[_339,"bend"]},fold:{n:["fold","crease","plication","flexure","crimp","bend","folding","sheepfold","sheepcote","plica"]},bending:{n:["bending","bend"]},chunky:{s:["chunky","dumpy","low-set","squat","squatty","stumpy"]},jack:{n:["jack","doodly-squat","diddly-squat","diddlysquat","diddly-shit","diddlyshit","diddly","diddley","squat","shit","jackass","knave","jackstones"],v:["jack","v"]},parry:{v:["parry","block","deflect"],n:["parry","n"]},distract:{v:["distract","deflect"]},flock:{n:["flock","fold"],v:["flock","v"]},congregation:{n:["congregation","fold","faithful","congregating"]},deflection:{n:["deflection","deflexion","bending","refraction","warp"]},perturb:{v:["perturb","unhinge",_376,_130,"cark","distract",_377,"derange"]},hedge:{v:["hedge","fudge","evade","circumvent","parry","elude","skirt","dodge","duck","sidestep"],n:["hedge","hedging","hedgerow"]},counterpunch:{n:["counterpunch","parry","counter"]},cluster:{v:[_378,"constellate","flock","clump"],n:[_378,"n"]},troop:{n:["troop","flock"],v:["troop","v"]},beneficial:{s:["beneficial","good"]},benefit:{n:["benefit","welfare"],v:["benefit","v"]},benzoin:{n:["benzoin","benjamin"]},bermuda:{n:["bermuda","bermudas"]},best:{n:["best","topper"],r:["best","r"],v:["best","v"]},surpass:{v:["surpass","outstrip","outmatch","outgo","exceed","outdo","surmount","outperform"]},excel:{v:["excel","surpass"]},bestiality:{n:["bestiality","zooerastia","zooerasty","sodomy"]},bet:{v:["bet","wager","play"],n:["bet","wager"]},stake:{n:["stake","stakes","bet","wager"],v:["stake","post"]},impale:{v:["impale","stake"]},interest:{n:[_132,"stake","interestingness","involvement"],v:[_132,"v"]},pastime:{n:["pastime",_132,"pursuit"]},sake:{n:["sake",_132,"saki"]},mail:{v:["mail","post","send"],n:["mail","post"]},dissipated:{s:["dissipated","betting","card-playing","sporting"]},debauched:{s:["debauched","degenerate","degraded","dissipated","dissolute","libertine",_379,"riotous","fast"]},between:{r:["between","'tween","betwixt"]},beverage:{n:["beverage","drink","drinkable","potable"]},bismuth:{n:["bismuth","bi"]},bias:{v:["bias","predetermine"],n:["bias","prejudice","preconception"]},diagonal:{n:[_380,"bias"],s:[_380,"s"]},aslant:{s:["aslant","aslope",_380,"slanted","slanting","sloped","sloping"],r:["aslant","r"]},solidus:{n:["solidus","slash","virgule",_380,"stroke","separatrix"]},obliquely:{r:["obliquely","aslant","athwart"]},bezant:{n:["bezant","bezzant","byzant","solidus"]},bible:{n:["bible","book","scripture","word"]},biblical:{a:["biblical","scriptural"]},bibliographic:{a:["bibliographic","bibliographical"]},invite:{v:["invite","bid"]},offer:{v:["offer","bid","tender","extend","proffer"],n:["offer","offering"]},dominate:{v:["dominate",_50,"overlook","overtop","master"]},instruction:{n:[_381,_50,"statement"]},gaze:{n:["gaze","regard"],v:["gaze","stare"]},attentiveness:{n:["attentiveness","heed","regard"]},tempt:{v:["tempt","invite","allure"]},extend:{v:["extend","offer",_106,"expand"]},volunteer:{v:["volunteer","offer"],n:["volunteer","voluntary"]},teaching:{n:["teaching",_381,"pedagogy","precept","commandment"]},education:{n:["education",_381,"teaching","pedagogy","didactics","training","breeding"]},direction:{n:[_112,_381,"way"]},overshadow:{v:["overshadow","dominate","eclipse"]},entice:{v:["entice","lure","tempt"]},unpaid:{s:["unpaid","volunteer,"]},tennessean:{n:["tennessean","volunteer"]},strain:{v:["strain","extend","tense"],n:["strain","straining"]},gallop:{v:["gallop","extend"]},prolong:{v:["prolong","protract","extend","sustain"]},stretch:{v:[_106,"extend"],n:[_106,"stretchiness","stretchability","stint","stretching"]},exsert:{v:["exsert","extend"]},widen:{v:["widen","broaden","extend"]},bidding:{n:["bidding","summons"]},boastfully:{r:["boastfully","vauntingly","big","large"]},"big,":{s:["big,","enceinte","expectant","gravid","great,","large,","heavy,"]},big:{s:["big","bighearted","bounteous","bountiful","freehanded","handsome","giving",_237,"openhanded","large","magnanimous","swelled","vainglorious","prominent"],r:["big","r"],a:["big","a"]},boastful:{s:["boastful","braggart,","bragging,","braggy","big","cock-a-hoop","crowing","self-aggrandizing","self-aggrandising"]},large:{a:["large","big"],s:["large","s"],r:["large","r"]},bigger:{s:["bigger","larger"]},motorcycle:{n:["motorcycle","bike"],v:["motorcycle","v"]},minibike:{n:["minibike","motorbike"]},bikini:{n:["bikini","two-piece"]},nag:{v:["nag","peck","hen-peck"],n:["nag","n"]},billion:{n:["billion","1000000000","1000000000000"]},million:{n:["million","billion","trillion","zillion","jillion","gazillion","bazillion","1000000","meg"]},billy:{n:["billy","he-goat"]},truncheon:{n:["truncheon","nightstick","baton","billy","billystick"]},bin:{n:["bin","binful"]},yoke:{v:["yoke","link"],n:["yoke","coupling"]},liaison:{n:["liaison","link","contact"]},connection:{n:["connection","connexion","link","connectedness","connector","connecter","connective"]},lotto:{n:["lotto","bingo","beano","keno"]},biography:{n:["biography","life"]},biota:{n:["biota","biology"]},biotechnology:{n:["biotechnology","bioengineering","ergonomics","biotech"]},bird:{v:["bird","birdwatch"],n:["bird","fowl"]},shuttlecock:{n:["shuttlecock","bird","birdie","shuttle"]},boo:{n:["boo","hoot","hiss","raspberry","razzing","razz","snort","bird"],v:["boo","hiss"]},dame:{n:["dame","doll","wench","skirt","chick","bird","madam","ma'am","lady","gentlewoman"]},birmingham:{n:["birmingham","brummagem"]},parentage:{n:["parentage","birth"]},parturition:{n:["parturition","birth","birthing"]},birth:{n:["birth","nativity","nascency","nascence"]},parenthood:{n:["parenthood","parentage"]},ancestry:{n:["ancestry",_264,"derivation","filiation"]},linage:{n:["linage","lineage"]},snatch:{n:["snatch","bit"],v:["snatch","snap"]},morsel:{n:["morsel","bit","bite"]},piece:{n:["piece","bit","slice","part"],v:["piece","patch"]},bit:{n:["bit","chip","flake","fleck","scrap"]},spot:{n:["spot","bit","pip","speckle","dapple","patch","fleck","maculation"],v:["spot","fleck","blob","blot",_128,_129,_121,"discern"]},kidnap:{v:["kidnap","nobble","abduct","snatch"]},kidnapping:{n:["kidnapping","snatch"]},cunt:{n:["cunt","puss","pussy","slit","snatch","twat","bitch"]},nibble:{v:["nibble","pick","piece"],n:["nibble","n"]},patch:{v:["patch","piece"],n:["patch","n"]},man:{n:["man","piece"]},slice:{n:["slice","piece","fade","slicing"],v:["slice","v"]},while:{n:["while","piece","spell","patch"]},firearm:{n:["firearm","piece","small-arm"]},part:{n:["part","piece","voice","parting",_383,"division",_327,"component","constituent"],v:["part","v"],r:["part","r"]},blemish:{v:[_384,"spot"],n:[_384,"defect","mar"]},descry:{v:["descry","spot","espy","spy"]},blot:{n:["blot","smear","smirch","spot","stain"],v:["blot","v"]},spotlight:{n:[_385,"spot"],v:[_385,"v"]},smudge:{n:["smudge","spot","blot","daub","smear","smirch","slur"],v:["smudge","v"]},point:{n:["point","spot","gunpoint","pointedness","head","dot","tip","peak"],v:["point","repoint"]},partially:{r:["partially","partly","part"]},contribution:{n:["contribution","part","share","donation"]},share:{n:["share",_327,"part","percentage"],v:["share","apportion","deal"]},region:{n:["region","part","realm","neighborhood"]},slit:{v:["slit","slice"],n:["slit","n"]},smear:{v:["smear","blur","smudge","smutch"],n:["smear","cytosmear","vilification","malignment"]},bandage:{n:["bandage","patch"],v:["bandage","v"]},eyepatch:{n:["eyepatch","patch"]},mend:{n:["mend","patch","darn"],v:["mend","heal"]},plot:{n:["plot","patch","game"],v:["plot","v"]},foreground:{v:["foreground","highlight","spotlight"]},limelight:{n:["limelight",_385,"glare"]},world:{n:["world","humanity","humankind","humans","mankind","man","domain","reality"]},valet:{n:["valet","gentleman","man"]},homo:{n:["homo","man","human"]},serviceman:{n:["serviceman","man"]},nybble:{n:["nybble","nibble"]},luff:{v:["luff","point"]},bespeak:{v:["bespeak","betoken","indicate","point","signal"]},steer:{v:["steer",_386,"manoeuver",_387,"direct","point","head","guide","channelize","channelise"],n:["steer","n"]},orient:{v:["orient","point","orientate"],n:["orient","n"]},indicate:{v:["indicate","point",_328,"show"]},item:{n:["item","point"]},detail:{n:["detail","item","point","particular"]},backbite:{v:["backbite","bitch"]},flaw:{v:["flaw","blemish"],n:["flaw","n"]},deface:{v:["deface","disfigure","blemish"]},sting:{v:["sting","bite","prick"],n:["sting","bite","stinging"]},pungency:{n:["pungency","bite",_389,"raciness"]},prick:{v:["prick","sting","twinge"],n:["prick","pricking"]},stick:{v:["stick","sting"],n:["stick","joystick"]},bunco:{n:["bunco","bunko","con","hustle","sting","flimflam"],v:["bunco","v"]},pang:{n:["pang","sting","stab","twinge"]},pin:{n:["pin","peg","stick","flag"],v:["pin","v"]},victimize:{v:["victimize","swindle","rook",_390,"nobble","diddle","bunco","defraud","scam","mulct","hornswoggle","short-change","con","victimise"]},prickle:{v:[_391,"prick"],n:[_391,"n"]},goad:{v:["goad","prick"],n:["goad","goading","prod","prodding","urging","spur","spurring"]},cock:{n:["cock","prick","dick","shaft","pecker","tool","putz","rooster"],v:["cock","v"]},incision:{n:["incision",_122,"prick","slit","dent","section"]},asshole:{n:["asshole",_392,"cocksucker","dickhead","shit","motherfucker","prick","whoreson","sob"]},biting:{s:["biting","bitter"]},acrimonious:{s:["acrimonious","bitter"]},bitterness:{n:["bitterness","bitter","acrimony","acerbity","jaundice","tartness","thorniness"]},bitter:{n:["bitter","bitterness"],s:["bitter","s"]},barbed:{s:["barbed","biting","nipping","pungent","mordacious","barbellate","briary","briery","bristled","bristly","burred","burry","prickly","setose","setaceous","spiny","thorny"]},resentment:{n:["resentment","bitterness","gall","rancor","rancour"]},game:{n:["game","biz"],s:["game","gamy","gamey","gritty","mettlesome","spirited","spunky"]},plat:{v:["plat","plot"]},diagram:{v:["diagram","plot"]},bizarre:{s:["bizarre",_332,"freakish","freaky","flaky","flakey","gonzo","off-the-wall","outlandish","outre"]},berkelium:{n:["berkelium","bk"]},moonlight:{n:["moonlight","moonshine","moon"]},charwoman:{n:["charwoman","char","woman"]},blackmail:{v:["blackmail","blackjack","pressure"]},blackjack:{n:["blackjack","twenty-one","vingt-et-un","cosh","sap"],v:["blackjack","v"]},blade:{n:["blade","vane"]},sword:{n:["sword","blade","brand","steel"]},bombast:{n:["bombast","fustian","rant","claptrap","blah"]},blank:{s:["blank","utter","clean","white"],n:["blank","dummy"]},lacuna:{n:["lacuna","blank"]},quad:{n:["quad","space","quadrangle"]},distance:{n:["distance","space","aloofness","length"],v:["distance","v"]},quadriceps:{n:["quadriceps","quad"]},quadruplet:{n:["quadruplet","quad"]},outdistance:{v:["outdistance","outstrip","distance"]},savage:{v:["savage","blast","pillory","crucify"],n:["savage","barbarian"],s:["savage","s"]},smash:{v:["smash","nail","boom","blast","dash"],r:["smash","smashingly"],n:["smash","smash-up"]},gust:{n:["gust","blast","blow"]},ferocious:{s:["ferocious","fierce","furious","savage"]},barbarian:{s:[_393,"barbaric","savage","uncivilized","uncivilised","wild"],n:[_393,"n"]},feral:{s:["feral","ferine","savage"]},barbarous:{s:["barbarous","brutal","cruel","fell","roughshod","savage","vicious"]},crush:{v:["crush","smash"],n:["crush","crunch","compaction","jam","press"]},overhead:{n:["overhead","smash"]},viewgraph:{n:["viewgraph","overhead"]},peasant:{n:["peasant",_393,"boor","churl","goth","tyke","tike","provincial","bucolic"]},doss:{v:["doss","crash"]},clang:{n:["clang","clangor","clangour","clangoring","clank","clash","crash"],v:["clang","clangor"]},bleeding:{n:["bleeding","hemorrhage","haemorrhage"]},squash:{v:["squash","crush",_396,"mash","squeeze"]},oppress:{v:["oppress","suppress","crush"]},consecrate:{v:[_71,"bless","hallow","sanctify"],a:[_71,"a"]},bless:{v:["bless","sign"]},consecrated:{a:["consecrated",_71,"dedicated"],s:["consecrated","sacred","sanctified"]},vow:{v:["vow","consecrate"]},ordain:{v:["ordain",_71,"ordinate","order","enact"]},beatified:{s:["beatified","blessed"]},blessed:{a:[_134,"blest"],s:[_134,"s"]},subterfuge:{n:["subterfuge","blind"]},flash:{v:["flash","blink","wink",_397,"winkle"],n:["flash","photoflash","flashgun","flashbulb","flashing"],s:["flash","s"]},wink:{v:["wink","blink"],n:["wink","n"]},blink:{v:["blink","wink","nictitate","nictate"],n:["blink","blinking","wink","winking","nictitation","nictation"]},brassy:{s:["brassy","cheap","flash","flashy","garish","gaudy","gimcrack","loud","meretricious","tacky","tatty","tawdry","trashy"],a:["brassy","brasslike"]},flaunt:{v:["flaunt","flash","ostentate","swank"]},flare:{n:["flare","flash","flair"],v:["flare","flame"]},ostentation:{n:["ostentation","fanfare","flash","ostentatiousness","pomposity","pompousness","pretentiousness","puffiness","splashiness","inflation"]},flit:{v:["flit",_362,"fleet","dart"],n:["flit","dart"]},audacious:{s:["audacious","barefaced","bodacious","bald-faced","brassy","brazen","brazen-faced","insolent","brave","dauntless","fearless","hardy","intrepid","unfearing","daring","venturesome","venturous"]},erupt:{v:["erupt","irrupt","flare","belch","extravasate","recrudesce","ignite","combust","conflagrate"]},obstruct:{v:["obstruct","obturate","impede","occlude","jam","block",_319,"hinder","stymie","stymy","embarrass"]},stuff:{v:["stuff","lug","block"],n:["stuff","hooey","poppycock","clobber"]},blocking:{n:["blocking","block"]},pulley:{n:["pulley","pulley-block","block"]},block:{n:["block","cube"],v:["block","v"]},throng:{v:["throng","mob","pack","pile","jam"],n:["throng","n"]},jamming:{n:["jamming","jam"]},farce:{v:["farce","stuff"],n:["farce","travesty"]},gorge:{v:["gorge","ingurgitate","overindulge","glut","englut","stuff","engorge","overgorge","overeat","gormandize","gormandise","gourmandize","binge","satiate"],n:["gorge","n"]},thrust:{v:["thrust","stuff","shove","squeeze"],n:["thrust","n"]},material:{n:[_398,"stuff"],a:[_398,"a"]},menstruation:{n:["menstruation","menses","menstruum","catamenia","period","flow"]},obstruction:{n:["obstruction","blockage","obstructor","obstructer","impediment","impedimenta"]},blocked:{s:["blocked","plugged"]},esophagus:{n:["esophagus","oesophagus","gorge","gullet"]},multitude:{n:["multitude","throng","concourse","masses","mass","people"]},pierce:{v:["pierce","thrust"]},lunge:{v:["lunge","hurl","hurtle","thrust"],n:["lunge","passado"]},jab:{n:["jab","jabbing","poke","poking","thrust","thrusting"],v:["jab","prod","stab","poke","dig"]},stab:{n:["stab","thrust"],v:["stab","jab"]},forcemeat:{n:["forcemeat","farce"]},substantial:{a:[_399,"real","material"],s:[_399,"substantive"]},corporeal:{a:["corporeal","material"],s:["corporeal","s"]},fabric:{n:["fabric","cloth",_398,"textile"]},obstacle:{n:["obstacle","obstruction"]},blond:{a:["blond","blonde","light-haired"],n:["blond","blonde"]},rake:{n:["rake","rakehell",_379,"rip","blood","roue"],v:["rake","v"]},graze:{v:["graze","crease","rake"],n:["graze","grazing"]},browse:{v:["browse","graze","surf"],n:["browse","browsing"]},read:{v:["read","scan",_401,"show","record","say"]},bloody:{r:["bloody","damn","all-fired","all-firedly"]},"bally,":{s:["bally,","blinking,","bloody,","blooming,","crashing,","flaming,","fucking,"]},bloom:{v:["bloom",_402,"flower"],n:["bloom","blush","flush","rosiness"]},efflorescence:{n:[_403,"bloom"]},flower:{n:["flower","prime","peak","heyday","bloom",_402,_403,"flush"],v:["flower","v"]},blooming:{n:["blooming","bloom"]},blossoming:{n:["blossoming","flowering","florescence","inflorescence","anthesis","efflorescence"]},rash:{n:["rash","roseola",_403,"blizzard"],s:["rash","s"]},foolhardy:{s:["foolhardy","heady","rash","reckless"]},boast:{v:["boast","tout","swash","brag","gas","blow",_404,"vaunt","gasconade"],n:["boast","boasting","self-praise","jactitation"]},fellate:{v:["fellate","suck","blow"]},waste:{v:["waste","blow","squander","rot","emaciate","macerate"],n:["waste","wastefulness","dissipation"],s:["waste","s"]},botch:{v:["botch","bodge","bumble","fumble","muff","blow","flub","spoil","bungle","fluff","bollix","bollocks","bobble","mishandle"],n:["botch","n"]},suck:{v:["suck","blow"],n:["suck","n"]},float:{v:["float","drift","blow","swim"]},coke:{n:["coke","blow","snow","c"]},reverse:{n:[_304,_405,"setback","blow","verso",_210,"opposite"],v:[_304,"v"],s:[_304,"s"]},breastfeed:{v:["breastfeed","suckle","suck","nurse","wet-nurse","lactate"]},sucking:{n:["sucking","suck","suction"]},blunder:{n:["blunder","blooper","bloomer","bungle","pratfall","foul-up","fuckup","flub","botch","boner","boo-boo"],v:["blunder","v"]},jerk:{n:["jerk","jerking","jolt","saccade","dork"],v:["jerk","flick","twitch"]},stun:{v:["stun","bedaze","daze","stupefy"]},dazzle:{v:["dazzle","bedazzle","daze"]},godforsaken:{s:["godforsaken","waste","wild"]},neutralize:{v:["neutralize","neutralise","liquidate","waste","nullify","negate"]},thriftlessness:{n:["thriftlessness","waste","wastefulness"]},inverse:{s:["inverse","reverse"],n:["inverse","opposite"]},rearward:{s:["rearward","reverse"],r:["rearward","r"]},invert:{v:["invert","reverse"]},overrule:{v:["overrule",_305,"override",_407,"reverse"]},reversion:{n:[_408,_304,_405,"turnabout","turnaround"]},fumble:{v:["fumble","blunder"],n:["fumble","muff"]},blue:{s:["blue","dark","dingy","disconsolate","dismal","gloomy","grim","sorry","drab","drear","dreary","gamy","gamey","juicy","naughty","racy","risque","spicy","bluish","blueish"],n:["blue","blueness"]},"blue,":{s:["blue,","puritanic","puritanical"]},aristocratic:{s:["aristocratic","aristocratical","blue","blue-blooded","gentle","patrician"]},blasphemous:{s:["blasphemous","blue",_18,"sacrilegious"]},gloomy:{s:["gloomy","grim","blue","depressed","dispirited","down,","downcast","downhearted","low","low-spirited"]},bluing:{n:["bluing","blueing","blue"]},counteract:{v:[_409,"countervail","neutralize","counterbalance"]},blues:{n:["blues","megrims","vapors","vapours"]},backsliding:{n:["backsliding","lapse","lapsing","relapse","relapsing",_408,"reverting"]},regression:{n:["regression",_93,_408,"retrogression","retroversion"]},atavism:{n:["atavism",_408,"throwback"]},glooming:{s:["glooming","gloomy","gloomful","sulky"]},board:{v:["board","room"],n:["board","gameboard","table","plank"]},boating:{n:["boating","yachting"]},curtsy:{v:["curtsy","bob","curtsey"],n:["curtsy","curtsey"]},dock:{v:["dock","tail","bob"],n:["dock","dockage","sorrel"]},bobsled:{v:["bobsled","bob"],n:["bobsled","bobsleigh","bob"]},bobtail:{n:["bobtail","bob","dock"],s:["bobtail","bobtailed"]},bob:{n:["bob","bobber","cork","bobfloat"],v:["bob","v"]},body:{v:["body","personify"],n:["body","n"]},soundbox:{n:["soundbox","body"]},consistency:{n:["consistency","consistence",_188,"body"]},torso:{n:["torso","trunk","body"]},churn:{v:["churn","boil","moil","roil"]},boil:{n:["boil","furuncle"],v:["boil","v"]},bluff:{s:["bluff","bold","sheer"]},boldface:{n:["boldface","bold"]},pier:{n:["pier","wharf","wharfage","dock"]},rigidly:{r:["rigidly","stiffly","bolt"]},gobble:{v:["gobble","bolt"]},abscond:{v:["abscond","bolt","absquatulate","decamp"]},dash:{n:["dash","bolt","dah","sprint","elan","flair","panache","style"],v:["dash","v"]},bolt:{n:["bolt","deadbolt"],r:["bolt","r"],v:["bolt","v"]},thunderbolt:{n:["thunderbolt","bolt"]},turkey:{n:["turkey","bomb","dud"]},hum:{v:["hum","buzz","seethe","thrum"],n:["hum","humming"]},bombing:{n:["bombing","bombardment"]},adhesiveness:{n:["adhesiveness","adhesion","adherence","bond"]},shackle:{n:[_410,"bond","hamper","trammel"],v:[_410,"v"]},bail:{n:["bail","bond"]},bombshell:{n:["bombshell","thunderbolt","thunderclap"]},daunt:{v:["daunt","dash","pall","scare"]},hyphen:{n:["hyphen","dash"],v:["hyphen","v"]},bondage:{n:["bondage","slavery","thrall","thralldom","thraldom"]},bone:{v:["bone","debone"],n:["bone","ivory","pearl","off-white","os"]},pour:{v:["pour","pelt","stream","swarm","teem","pullulate"]},pepper:{v:["pepper","pelt"],n:["pepper","peppercorn"]},hide:{n:["hide","pelt","skin","fell"],v:["hide","conceal"]},fur:{n:["fur","pelt"]},joker:{n:["joker","turkey","jokester"]},"harkat-ul-mujahidin":{n:["harkat-ul-mujahidin","hum","hua"]},busyness:{n:["busyness","hum"]},helicon:{n:["helicon","bombardon"]},bonus:{n:["bonus","incentive","fillip"]},breast:{n:["breast","bosom","knocker","boob","tit","titty","chest"],v:["breast","v"]},dumbbell:{n:["dumbbell","dummy","dope","boob","booby","pinhead"]},fetter:{v:["fetter","shackle"],n:["fetter","hobble"]},pinion:{v:["pinion","shackle"],n:["pinion","n"]},koran:{n:["koran","quran","al-qur'an","book"]},ledger:{n:["ledger","leger","book"]},script:{n:["script","book","playscript"]},record:{n:["record","book"],v:["record",_401,"tape","enter"]},book:{n:["book","volume"],v:["book","v"]},hyphenate:{v:["hyphenate","hyphen"]},booking:{n:["booking","reservation"]},engagement:{n:[_151,"booking","participation",_181,_411,"mesh","meshing","interlocking"]},bookmark:{n:["bookmark","bookmarker"]},summit:{v:["summit","breast"],n:["summit","n"]},daybook:{n:["daybook","ledger","journal"]},handwriting:{n:["handwriting","hand","script"]},pennon:{n:["pennon","pinion"]},bookshop:{n:["bookshop","bookstore","bookstall"]},betrothal:{n:["betrothal","troth",_151,"espousal"]},boom:{v:["boom","thrive",_412,"expand","din"],n:["boom","bonanza","gravy","godsend","windfall","bunce","roar","roaring","thunder"]},thunder:{v:["thunder","boom","roar"],n:["thunder","n"]},boot:{v:["boot","reboot"],n:["boot","n"]},kick:{n:["kick","boot","kicking"],v:["kick","v"]},booth:{n:["booth","cubicle","stall","kiosk"]},border:{v:["border","adjoin","edge","abut","march","butt"],n:["border","n"]},bound:{v:["bound","border"],s:["bound","destined"],n:["bound","n"]},molding:{n:["molding","moulding","border","casting"]},edge:{n:["edge","border","sharpness"],v:["edge","inch"]},margin:{n:["margin","border","perimeter"]},recoil:{n:["recoil","kick","repercussion","rebound","backlash"],v:["recoil","v"]},blase:{s:["blase","bored","worldly"]},bored:{s:["bored","world-weary"]},boring:{s:["boring","deadening","dull","ho-hum","irksome","slow","tedious","tiresome","wearisome"],n:["boring","drilling"]},drilling:{n:["drilling","boring"]},sack:{v:["sack","plunder"],n:["sack","poke","sacque","sackful"]},michigan:{n:["michigan","chicago","newmarket","boodle","stops","mi","mich."]},clutter:{n:["clutter","jumble","muddle","fuddle","welter","smother"]},boundary:{n:["boundary","edge","bound","bounds"]},apprenticed:{s:["apprenticed","articled","bound","indentured"]},bandaged:{s:["bandaged","bound"]},"bound,":{s:["bound,","destined"]},bounce:{v:["bounce","resile","spring","bound","rebound","recoil","reverberate","ricochet","jounce"],n:["bounce","bouncing","bounciness"]},jump:{v:["jump","leap","bound","spring","skip"],n:["jump","leap","jumping","parachuting"]},leap:{n:["leap","leaping","spring","saltation","bound","bounce","jump"],v:["leap","jump"]},limit:{n:["limit","bound","boundary","limitation","demarcation"],v:["limit","circumscribe"]},modeling:{n:["modeling","modelling","molding","moulding"]},mold:{n:["mold","mould","molding","moulding","modeling","cast"],v:["mold","mildew"]},rampart:{n:["rampart","bulwark","wall"]},trap:{v:["trap","entrap","snare","ensnare","trammel","pin","immobilize","immobilise"],n:["trap","cakehole","hole","maw","yap","gob","snare"]},boss:{s:["boss","brag"],n:["boss","hirer"],v:["boss","v"]},knob:{n:["knob","boss","pommel"]},foreman:{n:["foreman","chief","gaffer","honcho","boss"]},backfire:{v:["backfire","backlash","recoil"],n:["backfire","boomerang"]},flinch:{v:["flinch","squinch","funk","cringe","shrink","wince","recoil","quail"],n:["flinch","n"]},boston:{n:["boston","beantown"]},trouble:{v:[_130,_413,"disoblige","discommode","incommode","bother","ail","pain"],n:[_130,"difficulty","problem"]},annoy:{v:["annoy","rag","bother","irritate","rile","nark","nettle","gravel","vex","chafe","devil"]},fuss:{n:["fuss",_130,"bother","hassle"],v:["fuss","niggle","fret"]},bottle:{n:["bottle","bottleful"]},mildew:{n:["mildew","mold","mould"],v:["mildew","v"]},jumpstart:{v:["jumpstart","jump-start","jump"],n:["jumpstart","jump-start"]},chute:{v:["chute","parachute","jump"],n:["chute","slide","slideway"]},derail:{v:["derail","jump"]},penetrate:{v:[_333,"fathom","bottom","perforate"]},bottom:{n:["bottom","freighter","merchantman","underside","undersurface"],v:["bottom","v"]},bottomland:{n:["bottomland","bottom"]},node:{n:["node","knob","thickening","client","guest"]},boulder:{n:["boulder","bowlder"]},mother:{v:["mother","fuss","overprotect"]},bustle:{n:["bustle","hustle","flurry","ado","fuss","stir"],v:["bustle","hustle"]},bicker:{n:["bicker","bickering","spat","tiff","squabble","pettifoggery","fuss"],v:["bicker","v"]},dither:{n:["dither","pother","fuss","tizzy","flap"],v:["dither","flap","pother"]},disturb:{v:[_108,"upset","trouble"]},bouquet:{n:["bouquet","fragrance","fragrancy","redolence",_414,"corsage","posy","nosegay"]},salute:{v:["salute","present"],n:["salute","salutation"]},confront:{v:["confront","face","present"]},portray:{v:["portray",_72,"depict","limn"]},introduce:{v:[_64,_72,"acquaint","innovate"]},show:{v:["show","demo",_415,_72,"demonstrate"],n:["show","n"]},bowl:{n:["bowl","bowlful","trough"]},box:{v:["box","package"],n:["box","boxwood","boxful","loge"]},corner:{n:["corner","box","quoin","nook"],v:["corner","tree"]},boxed:{s:["boxed","boxed-in,"]},permeate:{v:["permeate","pervade",_333,"interpenetrate",_199,"imbue","riddle"]},infiltrate:{v:["infiltrate","penetrate"]},packing:{n:["packing","boxing","backpacking"]},boxing:{n:["boxing","pugilism","fisticuffs"]},son:{n:["son","boy","word","logos"]},boyfriend:{n:["boyfriend","fellow","beau","swain"]},quibble:{v:["quibble","niggle","pettifog","bicker","squabble","brabble"],n:["quibble","quiddity","cavil"]},parachute:{n:["parachute","chute"],v:["parachute","v"]},bromine:{n:["bromine","br"]},brassiere:{n:["brassiere","bra","bandeau"]},bracelet:{n:["bracelet","bangle"]},watchband:{n:["watchband","watchstrap","wristband","bracelet"]},vomit:{v:["vomit","purge","cast","sick","cat","disgorge","regorge","retch","puke","barf","spew","spue","chuck","upchuck","honk","regurgitate"],n:["vomit","vomiting","emesis","regurgitation","disgorgement","puking","vomitus","puke","barf"]},hurl:{v:["hurl","hurtle","cast","throw"],n:["hurl","cast"]},casting:{n:["casting","cast"]},rack:{n:["rack","wheel","single-foot","stand"],v:["rack","v"]},wreathe:{v:["wreathe","wind"]},scent:{v:["scent","nose","wind"],n:["scent","n"]},weave:{v:["weave","wind","thread","meander","wander","tissue","interweave"]},fart:{n:["fart","farting","flatus","wind"]},handbuild:{v:["handbuild","hand-build","coil"]},gyrate:{v:["gyrate","spiral","coil"]},genius:{n:["genius",_417,"brain","brainiac","einstein","wizardry"]},mind:{n:["mind","head","brain","psyche","nous","intellect","idea"],v:["mind","v"]},brain:{n:["brain","brainpower","mentality","wit","encephalon"]},interpenetrate:{v:["interpenetrate","permeate"]},percolate:{v:["percolate","permeate","filter"]},recess:{n:["recess","recession","niche","corner"],v:["recess","v"]},bracken:{n:["bracken","brake"]},curler:{n:["curler","roller","crimper"]},march:{v:["march","process"],n:["march","mar","marching"]},summons:{n:[_382,"process"],v:[_382,"v"]},procedure:{n:["procedure","process"]},egress:{n:["egress","egression","emergence","emersion"],v:["egress","v"]},brass:{n:["brass","plaque"]},boldness:{n:["boldness","nerve","brass","face","cheek","strikingness","daring","hardiness","hardihood"]},brave:{s:["brave","braw","gay"],a:["brave","courageous"],v:["brave","v"]},weather:{v:["weather","endure","brave"],n:["weather","conditions"]},brazil:{n:["brazil","brasil"]},beware:{v:["beware","mind"]},heed:{v:["heed","mind","listen"],n:["heed","n"]},thinker:{n:["thinker","mind"]},centering:{n:["centering","snap"]},elasticity:{n:["elasticity","snap"]},gingersnap:{n:["gingersnap","snap"]},col:{n:["col","gap"]},opening:{n:[_418,"gap"]},muffle:{v:["muffle","mute","dull","damp","dampen"]},moisten:{v:["moisten","wash","dampen"]},stifle:{v:["stifle","dampen"],n:["stifle","knee"]},hesitate:{v:["hesitate","pause","waver","waffle"]},extremum:{n:["extremum","peak"]},decay:{v:["decay","crumble","dilapidate"],n:["decay","decomposition",_419,"decline"]},disjoined:{s:["disjoined","separate"]},freestanding:{s:["freestanding","separate"]},discriminate:{v:["discriminate","separate"]},classify:{v:["classify","class","sort","assort","separate"]},divide:{v:["divide","split",_76,"dissever","fraction"],n:["divide","n"]},offprint:{n:["offprint",_420,"separate"]},sin:{v:["sin","transgress","trespass"],n:["sin","sinning","sinfulness","wickedness"]},adjourn:{v:["adjourn","recess",_36,"retire"]},inlet:{n:["inlet","recess"]},deferral:{n:["deferral","recess"]},drift:{n:["drift","trend",_44,"heading","gallery","purport","impetus","impulsion"],v:["drift","v"]},motion:{n:["motion",_44,"move","motility","question"],v:["motion","v"]},flair:{n:["flair","genius"]},brilliance:{n:["brilliance","genius"]},desecrate:{v:["desecrate",_18,_323,_163,"unhallow","deconsecrate"]},emit:{v:["emit","breathe"]},rest:{v:["rest","breathe","reside","repose"],n:["rest","sleep","quietus","ease","repose","relaxation"]},breathe:{v:["breathe","respire","suspire"]},breathing:{a:["breathing","eupneic","eupnoeic"],n:["breathing","respiration","ventilation"]},reprieve:{v:["reprieve","respite"],n:["reprieve","respite"]},suspension:{n:["suspension",_165,"reprieve","hiatus","abatement","dangling","hanging"]},hint:{n:["hint","intimation","breath","clue"],v:["hint","suggest"]},breath:{n:["breath","breather"]},breakdown:{n:["breakdown","partitioning","crack-up"]},decomposition:{n:["decomposition","rot","rotting","putrefaction","breakdown","disintegration"]},dislocation:{n:["dislocation","breakdown","disruption"]},demerit:{n:["demerit","fault"]},defect:{n:["defect","fault","flaw","shortcoming"],v:["defect","desert"]},mistake:{n:[_423,"error","fault","misunderstanding","misapprehension"],v:[_423,"misidentify"]},bridge:{n:["bridge","nosepiece","bridgework","span"]},bread:{n:["bread","breadstuff"]},reproduction:{n:["reproduction","procreation","breeding","replication"]},breeding:{n:["breeding","fostering","fosterage",_251,"raising","rearing","upbringing","genteelness","gentility"]},abbreviated:{s:["abbreviated","brief",_331,"truncated"]},concisely:{r:["concisely","briefly","shortly"]},bridal:{a:["bridal","nuptial","spousal"],n:["bridal","espousal"]},bridget:{n:["bridget","brigid","bride"]},brilliantly:{r:["brilliantly","brightly","bright"]},bright:{s:["bright","hopeful","promising","brilliant","burnished","lustrous",_424,"shiny","smart","vivid"],r:["bright","r"],a:["bright","a"]},undimmed:{a:["undimmed","bright"]},upwind:{s:["upwind","weather,"],r:["upwind","r"]},brilliant:{s:["brilliant","glorious","magnificent","splendid","superb"]},brainy:{s:["brainy","brilliant"]},british:{n:["british","brits"]},brown:{s:["brown","browned","brownish","chocolate-brown","dark-brown"],n:["brown","brownness"],v:["brown","v"]},embrown:{v:["embrown","brown"]},broad:{s:["broad","large-minded",_237,"tolerant","spacious","wide","unsubtle","unspecific"],a:["broad","a"]},brother:{n:["brother","comrade"]},buddy:{n:["buddy","brother","chum","crony","pal","sidekick"]},brook:{n:["brook","creek"],v:["brook","v"]},broke:{s:["broke","bust","skint","stone-broke","stony-broke"]},bronze:{s:["bronze","bronzy"],v:["bronze","v"]},broken:{s:["broken","busted","impoverished","confused",_425,"upset","rugged","crushed","humbled","humiliated","low"],a:["broken","unkept"]},broadband:{a:["broadband","wideband"]},broadcast:{n:[_198,_220,"programme"],v:[_198,"v"]},booklet:{n:["booklet","brochure","folder","leaflet","pamphlet"]},delivery:{n:["delivery","bringing","livery"]},suffocate:{v:["suffocate","stifle","asphyxiate","choke"]},brush:{v:["brush","sweep"],n:["brush","brushing","clash",_159,"skirmish","brushwood","coppice","copse","thicket"]},shop:{v:["shop","browse"],n:["shop","store"]},brunet:{a:["brunet","brunette"],n:["brunet","brunette"]},sine:{n:["sine","sin"]},signalize:{v:["signalize","signalise","distinguish"]},braunschweig:{n:["braunschweig","brunswick"]},drizzle:{v:["drizzle","moisten","mizzle"],n:["drizzle","mizzle"]},sawhorse:{n:["sawhorse","horse","sawbuck","buck"]},dollar:{n:["dollar","buck","clam"]},bruxelles:{n:["bruxelles","brussels"]},scrape:{v:["scrape",_122,"kowtow","genuflect","grate"],n:["scrape","scraping",_122,"scratching"]},rub:{v:["rub",_122,"itch","fray","fret","chafe"],n:["rub","wipe"]},scribble:{n:["scribble",_122,"scrawl","cacography","scrabble","doodle"],v:["scribble","scrawl","scrabble"]},abrasion:{n:["abrasion",_122,"scrape","excoriation","attrition","corrasion","detrition"]},beastly:{s:["beastly","bestial","brute,","brutish","brutal","hellish","god-awful"]},brutal:{s:["brutal","unrelenting"]},burp:{v:["burp","bubble","belch","eruct"],n:["burp","n"]},ripple:{v:["ripple","babble","guggle","burble","bubble","gurgle","ruffle","riffle","cockle","undulate"],n:["ripple","rippling","riffle","wavelet"]},watershed:{n:["watershed","divide"]},bucket:{n:["bucket","bucketful","pail"]},abeyance:{n:["abeyance","suspension"]},chase:{v:["chase","trail","tail","tag","dog","track"],n:["chase","n"]},rag:{n:["rag","shred","tag","tatter"],v:["rag","v"]},gestural:{s:["gestural","sign,","signed","sign-language,","nonverbal"]},augury:{n:["augury","sign","foretoken","preindication"]},polarity:{n:["polarity","sign"]},signboard:{n:["signboard","sign"]},signal:{n:["signal","signaling","sign"],v:["signal","v"]},magnificence:{n:["magnificence","brilliance","splendor","splendour","grandeur","grandness"]},glare:{n:["glare","blaze","brilliance","glower"],v:["glare","v"]},err:{v:["err",_423,"slip"]},error:{n:["error",_423,"wrongdoing","misplay"]},pillow:{v:["pillow","rest"]},perch:{v:["perch","roost","rest"],n:["perch","rod","pole"]},lie:{v:["lie","rest"],n:["lie","prevarication"]},utter:{v:["utter","emit"],s:["utter","s"]},cushion:{v:["cushion","buffer","soften"]},buff:{n:["buff","buffer"],v:["buff","burnish","furbish"]},buffer:{n:["buffer","fender","polisher"],v:["buffer","v"]},fender:{n:["fender","buffer","cowcatcher","pilot","wing"]},tease:{v:["tease","badger","pester","bug","beleaguer","fluff","card","loosen","razz","rag","cod","tantalize","tantalise","bait","taunt","twit","rally","ride"],n:["tease",_272,"ribbing","tantalization","teaser","annoyer","vexer"]},microbe:{n:["microbe","bug","germ"]},bug:{n:["bug","glitch"],v:["bug","v"]},builder:{n:["builder","constructor"]},replica:{n:["replica",_94,"reproduction"]},leeward:{r:["leeward","upwind"],n:["leeward","n"]},reconstruct:{v:[_427,_169,"retrace"]},manufacture:{v:[_326,"fabricate","construct"],n:[_326,"n"]},concept:{n:["concept","conception","construct"]},building:{n:["building","edifice"]},hatchway:{n:["hatchway",_418,"scuttle"]},orifice:{n:["orifice",_418,"porta"]},possibility:{n:["possibility",_418,"possibleness"]},tangent:{n:["tangent","tan"]},fastball:{n:["fastball","heater","smoke","hummer","bullet"]},bullet:{n:["bullet","slug"]},taurus:{n:["taurus","bull"]},bull:{n:["bull","cop","copper","fuzz","pig","bruiser","strapper","samson"]},bullshit:{n:["bullshit","bull","horseshit","shit","crap","dogshit"]},built:{s:["built","reinforced"]},bunch:{v:["bunch","bundle",_378,"clump"],n:["bunch","lot","caboodle","clump",_378,"clustering"]},bulk:{n:["bulk","mass","volume"],v:["bulk","v"]},majority:{n:["majority","bulk"]},"wide-eyed":{s:["wide-eyed","wide"]},rescue:{n:["rescue","deliverance","delivery","saving"],v:["rescue","deliver"]},burk:{n:["burk","burke"]},denounce:{v:["denounce","betray","rat","grass","shit","shop","snitch","stag"]},workshop:{n:["workshop","shop"]},pack:{v:["pack","bundle","wad","compact"],n:["pack","n"]},pile:{n:["pile","bundle","megabucks","nap","spile","piling","stilt","heap","mound","agglomerate","cumulation","cumulus"],v:["pile","v"]},bundle:{n:["bundle","sheaf"],v:["bundle","v"]},package:{n:[_416,"bundle","packet","parcel"],v:[_416,"v"]},electrocution:{n:["electrocution","burning"]},combustion:{n:["combustion","burning"]},burning:{n:[_299,"combustion"]},buried:{a:["buried","inhumed","interred"]},abound:{v:["abound","burst","bristle"]},explode:{v:["explode","burst","irrupt","detonate"]},outburst:{n:["outburst","burst","flare-up"]},fusillade:{n:["fusillade","salvo","volley","burst"]},explosion:{n:["explosion","burst","detonation","blowup"]},mown:{a:["mown","cut"]},trimmed:{a:["trimmed","cut"]},geld:{v:["geld","cut"]},ignore:{v:["ignore",_300,"snub","cut"]},hack:{v:["hack","cut","whoop"],n:["hack","jade","nag","plug","drudge","hacker"]},edit:{v:["edit","cut","blue-pencil","delete","redact"]},swerve:{v:["swerve","sheer","curve","trend","veer","slue","slew","cut"],n:["swerve","swerving","veering"]},snub:{n:["snub","cut"],v:["snub","v"]},deletion:{n:["deletion",_428,"cut"]},stinger:{n:["stinger","cut"]},raid:{v:["raid","bust"],n:["raid","n"]},tiptoe:{v:["tiptoe","tip","tippytoe"]},topple:{v:["topple","tumble","tip"]},gratuity:{n:["gratuity","tip","pourboire","baksheesh","bakshish","bakshis","backsheesh"]},callous:{v:["callous","cauterize","cauterise"],s:["callous","indurate","pachydermatous"]},bus:{n:["bus","jalopy","heap","autobus","coach","charabanc","double-decker","jitney","motorbus","motorcoach","omnibus"]},busbar:{n:["busbar","bus"]},decipher:{v:["decipher","trace"]},hound:{v:["hound","hunt","trace"],n:["hound","n"]},tracing:{n:["tracing","trace"]},buffet:{v:["buffet","buff","batter"],n:["buffet",_95,"sideboard"]},fan:{n:["fan","buff","devotee","lover"],v:["fan","v"]},"bush-league":{s:["bush-league","bush"]},bush:{n:["bush","dubyuh","dubya"],s:["bush","s"]},scrub:{n:["scrub","chaparral","bush","scrubbing","scouring"],v:["scrub","scour"]},shrub:{n:["shrub","bush"]},quell:{v:["quell","stay","appease"]},persist:{v:["persist","remain","stay"]},bide:{v:["bide","abide","stay"]},belch:{n:["belch","belching","burp","burping","eructation"],v:["belch","v"]},alight:{v:["alight","light","perch"]},bury:{v:["bury","sink","entomb","inhume","inter"]},immerse:{v:["immerse",_22,"bury","plunge"]},disintegrate:{v:["disintegrate","decay","decompose"]},pick:{v:["pick","pluck","cull"],n:["pick","pickax","pickaxe","plectrum","plectron"]},gutsiness:{n:["gutsiness","pluck","pluckiness"]},clientele:{n:["clientele",_246,"business"]},occupation:{n:["occupation","business","job","line","occupancy"]},butt:{v:["butt","bunt"],n:["butt","stub","goat","laughingstock","stooge"]},cigarette:{n:["cigarette","cigaret","butt","fag"]},dwell:{v:["dwell","consist","lie","inhabit"]},busy:{s:["busy","engaged","fussy"],v:["busy","occupy"]},interfering:{s:["interfering","meddlesome","meddling","officious","busy","busybodied"]},coquette:{n:["coquette","flirt","vamp","vamper","minx","tease","prickteaser"]},steal:{v:["steal","rip","slip"],n:["steal","n"]},rend:{v:["rend","rip","rive","pull"]},clitoris:{n:["clitoris","clit","button"]},merely:{r:["merely","simply","just","only","but"]},buy:{v:["buy","purchase"],n:["buy","n"]},butler:{n:["butler","pantryman"]},"arrant,":{s:["arrant,","complete,","consummate,","double-dyed,","everlasting,","gross,","perfect,","pure,","sodding,","stark,","staring,","thorough,","thoroughgoing,","utter,","unadulterated"]},talk:{v:["talk","speak","utter","mouth","verbalize","verbalise"],n:["talk","talking"]},express:{v:["express","verbalize","verbalise","utter","state","show","evince"],n:["express","expressage","limited"]},buyer:{n:["buyer","purchaser","emptor","vendee"]},fabricate:{v:["fabricate",_326,"invent"]},industry:{n:["industry","manufacture"]},buying:{n:["buying","purchasing"]},herd:{v:["herd","crowd"],n:["herd","n"]},buzz:{v:["buzz","bombinate","bombilate"],n:["buzz","bombilation","bombination"]},by:{r:["by","past"]},adieu:{n:["adieu","adios","arrivederci","bye","bye-bye","cheerio","good-by","goodby","good-bye","goodbye","sayonara"]},sanchez:{n:["sanchez","carlos","salim","taurus"]},cabinet:{n:["cabinet","console","locker"]},california:{n:["california","ca","calif."]},calcium:{n:["calcium","ca"]},hoard:{v:["hoard","stash","cache"],n:["hoard","cache","stash"]},taxi:{v:["taxi","cab"],n:["taxi","n"]},cab:{n:["cab","hack","taxi","taxicab","cabriolet"],v:["cab","v"]},hundred:{s:["hundred","100","c"],n:["hundred","100","c","century"]},c:{n:["c"],s:["c","s"]},coulomb:{n:["coulomb","c","ampere-second"]},carbon:{n:["carbon","c"]},cytosine:{n:["cytosine","c"]},cable:{v:["cable","telegraph","wire"],n:["cable","line","cablegram"]},remodel:{v:["remodel",_427,"redo"]},restore:{v:["restore",_427,"reinstate","reestablish","restitute"]},rebuild:{v:["rebuild","reconstruct"]},software:{n:["software","package"]},effusion:{n:["effusion","gush","outburst","blowup","ebullition"]},stack:{v:["stack","pile","heap"],n:["stack","n"]},down:{n:["down","pile"],r:["down","downwards","downward","downwardly"],s:["down","mastered"],v:["down","land"]},cage:{n:["cage","coop"]},cad:{n:["cad","bounder","blackguard","dog","hound","heel"]},compact:{v:[_66,"pack"],s:[_66,"heavyset","stocky","thick","thickset"],n:[_66,"n"]},backpack:{v:["backpack","pack"],n:["backpack","knapsack","packsack","rucksack","haversack"]},clique:{n:["clique","coterie","ingroup","pack","camp"]},battalion:{n:["battalion","multitude","plurality","pack"]},calloused:{s:["calloused","callous","thickened"]},childlike:{s:["childlike","wide-eyed","round-eyed","dewy-eyed","simple","childly"]},yaw:{n:["yaw","swerve"],v:["yaw","v"]},omission:{n:["omission","deletion","skip"]},cafe:{n:["cafe","coffeehouse"]},diluted:{a:["diluted","dilute"]},deliberate:{s:[_41,"calculated","measured"],v:[_41,"v"]},chop:{v:["chop","hack"],n:["chop","chopper"]},calculation:{n:["calculation","deliberation","computation","figuring","reckoning","computing"]},repress:{v:["repress","quash","subdue","subjugate","reduce"]},deoxidize:{v:["deoxidize","deoxidise","reduce"]},calculator:{n:["calculator","reckoner","figurer","estimator","computer"]},plunge:{v:["plunge","immerse","dump","launch"],n:["plunge","n"]},calm:{s:["calm","unagitated","serene","tranquil"],v:["calm","quiet","tranquilize","tranquillize","tranquillise","quieten","lull","still"],n:["calm","n"]},sedate:{v:["sedate","calm","tranquilize","tranquillize","tranquillise"],s:["sedate","staid"]},steady:{v:["steady","calm","becalm"],r:["steady","r"],s:["steady","s"],n:["steady","n"]},composure:{n:["composure","calm","calmness","equanimity"]},calibration:{n:["calibration","standardization","standardisation"]},plosion:{n:["plosion","explosion"]},detonate:{v:["detonate","explode"]},exclaim:{v:["exclaim","cry","outcry","shout"]},cambodia:{n:["cambodia","kampuchea"]},surpassingly:{r:["surpassingly","passing"]},casual:{s:["casual","cursory","passing,","perfunctory","superficial","effortless","occasional","chance,","everyday","daily","insouciant","nonchalant"]},ephemeral:{s:["ephemeral",_213,"short-lived","transient","transitory","fugacious"],n:["ephemeral","n"]},passage:{n:["passage",_213,"passageway","transit","transition"]},diagnose:{v:["diagnose","name"]},career:{n:["career","calling","vocation"]},winnow:{v:["winnow","fan"],n:["winnow","winnowing","sifting"]},print:{v:["print","publish","impress"],n:["print","n"]},cameroon:{n:["cameroon","cameroun"]},camp:{s:["camp","campy"],v:["camp","encamp","bivouac","tent"],n:["camp","encampment","cantonment","bivouac"]},press:{v:["press","push"],n:["press",_235,"pressing"]},energy:{n:["energy","push","get-up-and-go","vim","vitality","muscularity","vigor","vigour","zip"]},ruck:{n:["ruck","herd"],v:["ruck","v"]},can:{v:["can","tin"],n:["can","canful","tin"]},camping:{n:["camping","encampment","bivouacking","tenting"]},canal:{v:["canal","canalize","canalise"],n:["canal","n"]},duct:{n:["duct","canal","channel"]},erase:{v:["erase","delete","efface"]},candle:{n:["candle","candela","cd","taper"]},smokestack:{n:["smokestack","stack"]},cancer:{n:["cancer","crab"]},candidate:{n:["candidate","prospect"]},campaigner:{n:["campaigner","candidate","nominee"]},carom:{n:["carom","cannon"]},cannon:{n:["cannon","shank"]},compendious:{s:["compendious",_66,"succinct","summary"]},covenant:{n:["covenant",_66,"concordat"]},cap:{v:["cap","crest"],n:["cap","pileus"]},capital:{n:["capital","chapiter","cap","washington","uppercase","majuscule"],s:["capital","great","majuscule"]},ceiling:{n:["ceiling","roof","cap"]},hood:{n:["hood","cap","bonnet","cowl","cowling","hoodlum","goon","punk","thug","tough","toughie","strong-armer"]},detonator:{n:["detonator","cap"]},sugarcoat:{v:["sugarcoat","glaze","candy"]},candy:{n:["candy","confect"],v:["candy","v"]},canyon:{n:["canyon","canon"]},canvas:{n:["canvas","canvass"]},sail:{n:["sail","canvas",_177,"sheet"],v:["sail","v"]},intentional:{s:["intentional","knowing","deliberate"],a:["intentional","a"]},careful:{s:["careful",_41,_430,"thrifty","heedful"]},debate:{v:["debate","deliberate"],n:["debate","disputation"]},capability:{n:["capability","capableness","potentiality","capacity"]},capable:{s:["capable","open","subject"]},depressed:{s:["depressed","down,"]},"down,":{s:["down,","downward,"]},capacitance:{n:["capacitance","capacity"]},capacity:{n:["capacity","content"]},cape:{n:["cape","mantle","ness"]},grave:{s:["grave","sedate","sober","solemn",_342,"heavy","weighty"],n:["grave","tomb"],v:["grave","v"]},captain:{n:["captain","headwaiter","chieftain","skipper"]},steadily:{r:["steadily","steady"]},regular:{s:[_434,"steady"],n:[_434,"habitue","fixture"],a:[_434,"a"]},firm:{s:["firm","steadfast","steady","stiff","unbendable","unfaltering","unshakable","unwavering","unfluctuating","loyal","truehearted","fast,","strong","solid"],n:["firm","house"],r:["firm","firmly","steadfastly","unwaveringly"],v:["firm","v"]},sweetheart:{n:["sweetheart","sweetie","steady","truelove"]},dunk:{v:["dunk","dip","souse","plunge","douse"]},dive:{v:["dive","plunge","plunk"],n:["dive","nosedive","diving"]},dip:{n:["dip","plunge","inclination"],v:["dip","sink","douse","duck"]},carbohydrate:{n:["carbohydrate","saccharide","sugar"]},menu:{n:["menu","card","carte","fare"]},card:{n:["card","scorecard"],v:["card","v"]},wag:{n:["wag","wit","card","waggle","shake"],v:["wag","waggle"]},discretion:{n:["discretion","discreetness","circumspection","prudence","discernment"]},header:{n:["header","coping","cope","lintel"]},fudge:{v:["fudge","manipulate","fake","falsify","cook","wangle","misrepresent"]},proclaim:{v:["proclaim","exclaim","promulgate"]},motivate:{v:["motivate","actuate","propel","move","prompt","incite"]},travel:{v:["travel","go","move","locomote","journey","trip","jaunt"],n:["travel","traveling","travelling"]},denote:{v:["denote","refer"]},consult:{v:["consult","refer"]},cautiously:{r:["cautiously","carefully"]},gull:{v:["gull","dupe","slang","befool","cod","fool"],n:["gull","seagull"]},ricochet:{n:["ricochet","carom"],v:["ricochet","v"]},rug:{n:["rug","carpet","carpeting"]},carnival:{n:["carnival","fair","funfair"]},circus:{n:["circus","carnival"]},carolina:{n:["carolina","carolinas"]},pate:{n:["pate","poll","crown"]},capacitor:{n:["capacitor","capacitance","condenser"]},voyage:{v:["voyage","sail","navigate"]},sweep:{v:["sweep","sail","broom"],n:["sweep","expanse"]},cruise:{n:["cruise","sail"]},caroline:{a:["caroline","carolean"]},designed:{a:["designed","intentional","unintentional"]},dangerous:{s:["dangerous","grave",_342,"serious","severe","life-threatening"],a:["dangerous","unsafe"]},sculpt:{v:["sculpt","sculpture","grave"]},"chief,":{s:["chief,","main,","primary,","principal,","master,"]},overcome:{v:["overcome","subdue","surmount","master"]},passkey:{n:["passkey","passe-partout","master"]},headmaster:{n:["headmaster","schoolmaster","master"]},victor:{n:["victor","master","superior"]},overlord:{n:["overlord","master","lord"]},maestro:{n:["maestro","master"]},haul:{v:["haul","hale","cart","drag"],n:["haul","n"]},handcart:{n:["handcart","pushcart","cart","go-cart"]},banal:{s:["banal",_436,"hackneyed","old-hat","shopworn","stock,","threadbare","timeworn","tired","trite","well-worn"]},sprout:{v:["sprout","stock"]},livestock:{n:["livestock","stock"]},neckcloth:{n:["neckcloth","stock"]},broth:{n:["broth","stock"]},store:{n:["store","stock","fund"]},carrier:{n:["carrier","newsboy","bearer","toter"]},mailman:{n:["mailman","postman","carrier"]},fast:{s:["fast","firm","immobile"],r:["fast","tight"],n:["fast","fasting"]},tauten:{v:["tauten","firm"]},enchant:{v:["enchant","enrapture",_83,"enthrall","ravish","enthral","delight"]},ecstasy:{n:["ecstasy","rapture",_83,"exaltation","raptus"]},conveyance:{n:["conveyance",_83,"conveyancing","conveying","imparting","impartation"]},cartridge:{n:["cartridge","pickup"]},magazine:{n:["magazine","cartridge","mag"]},carroll:{n:["carroll","dodgson"]},even:{s:["even",_434,"fifty-fifty"],r:["even","yet","still"],v:["even","v"],n:["even","n"]},unconstipated:{a:["unconstipated","regular"]},"regular,":{s:["regular,","veritable,"]},drivel:{v:["drivel","drool","slabber","slaver","slobber","dribble"],n:["drivel","garbage"]},trickle:{v:["trickle",_79,"filter"],n:["trickle","n"]},drool:{n:["drool",_79,"drivel","slobber"],v:["drool","v"]},drip:{n:["drip","trickle",_79,"dripping"],v:["drip","v"]},encase:{v:["encase","incase","case"]},case:{n:["case","showcase","vitrine","pillowcase","slip","caseful","instance","example"],v:["case","v"]},casing:{n:["casing","case"]},shell:{n:["shell","case","casing","eggshell"],v:["shell","v"]},sheath:{n:["sheath","case"]},font:{n:["font","fount","typeface","face","case"]},event:{n:["event","case"]},caducous:{a:["caducous","shed"]},casino:{n:["casino","cassino"]},conservatively:{r:["conservatively","cautiously","guardedly"]},caterpillar:{n:["caterpillar","cat"]},"cat-o'-nine-tails":{n:["cat-o'-nine-tails","cat"]},kat:{n:["kat","khat","qat","quat","cat"]},guy:{n:["guy","cat","hombre","bozo","sod"],v:["guy","v"]},impress:{v:[_222,_367,"yarn-dye","ingrain","instill"],n:[_222,"impressment"]},catalogue:{v:["catalogue","catalog"],n:["catalogue","n"]},catalog:{n:["catalog","catalogue"],v:["catalog","v"]},castle:{n:["castle","castling","rook"]},palace:{n:["palace","castle"]},course:{n:["course","class","row","trend","line"],v:["course","v"],r:["course","r"]},pant:{v:["pant","puff","gasp","heave"],n:["pant","n"]},ottoman:{n:["ottoman","pouf","pouffe","puff","hassock","osmanli"]},powderpuff:{n:["powderpuff","puff"]},quilt:{n:["quilt",_439,_440,"puff"]},"free-and-easy":{s:["free-and-easy","casual"]},fooling:{s:["fooling","casual"]},catalyst:{n:["catalyst","accelerator"]},scout:{n:["scout","pathfinder","guide"],v:["scout","reconnoiter","reconnoitre"]},template:{n:["template","templet","guide"]},guidebook:{n:["guidebook","guide"]},usher:{n:["usher","guide","doorkeeper"],v:["usher","show"]},extract:{v:[_441,"pull"],n:[_441,"n"]},chain:{n:["chain","string","strand","concatenation"]},drawstring:{n:["drawstring","string"]},emetic:{n:["emetic","vomit","vomitive","nauseant"]},fool:{v:["fool","gull","befool"],n:["fool","sap","saphead","muggins","tomfool"]},swing:{v:["swing","sweep","sway"],n:["swing","jive","swinging","vacillation"]},embroil:{v:["embroil","tangle","sweep","drag"]},chimneysweeper:{n:["chimneysweeper","chimneysweep","sweep"]},cattle:{n:["cattle","cows","kine","oxen"]},retreat:{v:[_166,"crawfish","withdraw"],n:[_166,"n"]},retire:{v:["retire","withdraw"]},seclude:{v:["seclude","sequester","sequestrate","withdraw"]},swallow:{v:[_22,"unsay","withdraw"],n:[_22,"drink","deglutition","sup"]},recall:{v:["recall","withdraw"],n:["recall","recollection","reminiscence","callback"]},disengage:{v:["disengage","withdraw"]},cathedral:{n:["cathedral","duomo"]},cave:{v:["cave","spelunk","undermine"]},storehouse:{n:["storehouse","depot","entrepot","storage","store"]},memory:{n:["memory","storage","store","retention","retentiveness","retentivity","remembering"]},caiman:{n:["caiman","cayman"]},causing:{n:["causing","causation"]},milliliter:{n:["milliliter","millilitre","mil","ml","cc"]},cadmium:{n:["cadmium","cd"]},exile:{n:["exile","deportation","expatriation","transportation","deportee","expatriate","expat"],v:["exile","v"]},fare:{n:["fare","transportation"],v:["fare","v"]},ce:{r:["ce","c.e."],n:["ce","n"]},cerium:{n:["cerium","ce"]},winner:{n:["winner","victor"]},delicacy:{n:[_442,"discretion","diplomacy","discreetness","finesse","slightness"]},convey:{v:["convey",_81,"communicate"]},cedar:{n:["cedar","cedarwood"]},lionize:{v:["lionize","lionise","celebrate"]},celebrate:{v:["celebrate","fete"]},fame:{n:["fame","celebrity","renown"]},husk:{v:["husk","shell"],n:["husk","n"]},plate:{n:["plate","scale","shell","plateful"]},carapace:{n:["carapace","shell","cuticle","shield"]},cell:{n:["cell","cubicle","cadre"]},celebration:{n:["celebration","solemnization","solemnisation","festivity","jubilation"]},subjugate:{v:["subjugate","subject"]},national:{n:["national","subject"],s:["national","s"]},hex:{v:["hex","bewitch","glamour","witch","enchant","jinx"],n:["hex","jinx","curse","whammy"],a:["hex","a"]},celtic:{a:["celtic","gaelic"]},census:{n:["census","nosecount"]},cementum:{n:["cementum","cement"]},penny:{n:["penny","cent","centime"]},quality:{n:[_252,"character","lineament","caliber","calibre"],s:[_252,"s"]},cemetery:{n:["cemetery","graveyard","necropolis"]},salivate:{v:["salivate","drool"]},baloney:{n:["baloney","boloney","bilgewater","bosh","drool","humbug","taradiddle","tarradiddle","tommyrot","tosh","twaddle"]},"center,":{s:["center,","halfway","middle,","midway"]},center:{v:["center","centre"],n:["center","centre","snapper","midpoint","middle","heart","eye"]},concentrate:{v:[_30,"focus","center","centre","pore","rivet"]},wilted:{s:["wilted","limp"]},cardinal:{s:["cardinal","central","fundamental","key","primal"],n:["cardinal","redbird","carmine"]},overpower:{v:["overpower","overmaster","overwhelm"]},submerge:{v:["submerge","drown","overwhelm","submerse"]},naturally:{r:["naturally","course"]},path:{n:["path","track","course","route","itinerary"]},certain:{s:["certain","sure"],a:["certain","sure"]},sealed:{a:["sealed","certain"],s:["sealed","s"]},"certain,":{a:["certain,","sure"]},ceremony:{n:["ceremony","ceremonial","observance"]},"cf.":{r:["cf.","cf"]},californium:{n:["californium","cf"]},certificate:{n:["certificate",_336,"credential","credentials"]},certification:{n:[_336,"enfranchisement"]},surely:{r:["surely","certainly","sure"]},security:{n:["security","certificate","surety","protection"]},certified:{s:["certified","qualified"]},certifiable:{s:["certifiable","certified"]},design:{v:["design","plan"],n:["design","plan",_15,"figure","designing"]},chad:{n:["chad","chadic","tchad"]},termination:{n:["termination","ending",_236,"expiration","expiry"]},ending:{n:["ending",_236,"finish","termination"]},finish:{n:["finish","destination","goal","finishing"],v:["finish","v"]},chair:{v:["chair","chairman"],n:["chair","n"]},president:{n:["president","chairman","chairwoman","chair","chairperson","prexy"]},denture:{n:["denture","plate"]},professorship:{n:["professorship","chair"]},chaff:{n:["chaff","husk","shuck","stalk","straw","stubble"],v:["chaff","v"]},irons:{n:["irons","chains"]},centralize:{v:["centralize","centralise","concentrate"]},"home,":{s:["home,","interior,","internal","national"]},supporter:{n:[_232,"protagonist",_118,"admirer","booster","friend"]},champagne:{n:["champagne","champagne-ardenne","bubbly"]},prospect:{n:[_85,"chance"]},probability:{n:["probability","chance"]},luck:{n:["luck","fortune","chance","hazard"]},opportunity:{n:["opportunity","chance"]},timbre:{n:["timbre","timber",_252,"tone"]},challenging:{s:["challenging","intriguing","thought-provoking"]},championship:{n:["championship","title"]},chancellor:{n:["chancellor","premier"]},derision:{n:["derision","ridicule"]},chaos:{n:["chaos","pandemonium","bedlam","topsy-turvydom","topsy-turvyness"]},plastered:{s:["plastered","sealed","slicked"]},channel:{n:[_82,"line"],v:[_82,"v"]},groove:{n:["groove",_82,"vallecula"],v:["groove","v"]},portrayal:{n:[_444,"characterization","enactment","personation","portraiture","portrait"]},characterization:{n:["characterization","characterisation"]},feature:{n:[_59,"characteristic","lineament"],v:[_59,"v"]},changing:{s:["changing","ever-changing"]},aerated:{s:["aerated","charged"]},charged:{s:["charged","supercharged"]},delegating:{n:["delegating","delegation","relegating","relegation","deputation"]},charger:{n:["charger","courser"]},characterize:{v:["characterize","characterise"]},qualify:{v:["qualify","characterize","characterise","dispose"]},judder:{v:["judder","shake"]},tremble:{n:["tremble","shiver","shake"]},handshake:{n:["handshake","shake","handshaking","handclasp"]},trill:{n:["trill","shake"],v:["trill","v"]},milkshake:{n:["milkshake","shake"]},shingle:{n:["shingle","shake"]},temper:{v:["temper","season","mollify",_49,"harden"],n:["temper",_445,"biliousness","irritability","peevishness","pettishness","snappishness","surliness","mood","humor","humour"]},mince:{v:["mince","soften","moderate"]},centrist:{n:["centrist",_49,"moderationist"],s:["centrist","middle-of-the-road"]},charitable:{s:["charitable","benevolent","kindly",_446,"good-hearted","openhearted","large-hearted"]},charlemagne:{n:["charlemagne","carolus","charles"]},spell:{n:["spell","charm"],v:["spell","write","import"]},cheap:{s:["cheap","chinchy","chintzy"],a:["cheap","inexpensive"]},bum:{s:["bum","cheap","cheesy","chintzy","crummy","punk","sleazy","tinny"],v:["bum","loaf","loll"],n:["bum","n"]},charming:{s:["charming","magic","magical","sorcerous","witching,","wizard,","wizardly"]},graph:{v:["graph","chart"],n:["graph","n"]},chart:{n:["chart","graph"],v:["chart","v"]},pursuit:{n:["pursuit","chase","pursual","following","pursuance","quest"]},recover:{v:["recover","retrieve","find","regain","recoup","recuperate"]},discover:{v:[_34,"find"]},discovery:{n:["discovery","find","uncovering","breakthrough"]},chat:{n:["chat","confab","confabulation","schmooze","schmoose"]},garter:{n:["garter","supporter"]},patron:{n:["patron",_347,_232,"frequenter"]},fortune:{n:["fortune","destiny","fate","luck","lot","circumstances","portion"]},cheat:{v:["cheat","chisel","chouse","shaft","screw","chicane","jockey"],n:["cheat","cheating"]},deceiver:{n:["deceiver","cheat","cheater","trickster","beguiler","slicker"]},chess:{n:["chess","cheat"]},darnel:{n:["darnel","tare","cheat"]},expectation:{n:["expectation","outlook","prospect"]},checked:{s:["checked","checkered","chequered"]},rut:{n:["rut","groove"],v:["rut","v"]},engage:{v:["engage","mesh","lock",_150,"enlist","wage"]},manoeuver:{v:["manoeuver",_386,_387,"operate"]},cheer:{v:["cheer",_447,"urge","barrack","exhort","hearten","recreate","embolden"],n:["cheer","n"]},cheerfulness:{n:["cheerfulness","cheer","sunniness","sunshine","blitheness"]},red:{s:["red","reddish","ruddy","blood-red","carmine","cerise","cherry","cherry-red",_448,"ruby","ruby-red","scarlet"],n:["red","redness"]},cerise:{n:["cerise","cherry"],s:["cerise","s"]},buttock:{n:["buttock","cheek"]},impudence:{n:["impudence","cheek","impertinence"]},laterality:{n:["laterality","dominance"]},chemical:{a:["chemical","chemic"]},thorax:{n:["thorax","chest","pectus"]},besotted:{s:["besotted","blotto","crocked","cockeyed","fuddled","loaded","pie-eyed","pissed","pixilated","plastered","slopped","sloshed","smashed","soaked","soused","sozzled","squiffy","stiff","tight","wet"]},chasteness:{n:["chasteness","restraint","simplicity","simpleness"]},constraint:{n:["constraint","restraint"]},chew:{v:["chew","masticate","manducate","jaw"],n:["chew","chewing","mastication","manduction","chaw","cud","quid","plug","wad"]},harass:{v:["harass","hassle","harry","chivy","chivvy","chevy","chevvy","beset","plague","molest","provoke"]},chi:{n:["chi","khi"]},qi:{n:["qi","chi","ch'i","ki"]},chemistry:{n:["chemistry","alchemy"]},headman:{n:["headman","chieftain","chief"]},chick:{n:["chick","biddy"]},chicken:{s:["chicken","chickenhearted","lily-livered","white-livered","yellow","yellow-bellied"],n:["chicken","poulet","volaille"]},wimp:{n:["wimp","chicken","crybaby"]},chili:{n:["chili","chilli","chilly","chile"]},childhood:{n:["childhood","puerility"]},depiction:{n:["depiction","delineation","portrayal"]},portrait:{n:["portrait","portrayal"]},depicting:{n:["depicting","depiction","portraying","portrayal"]},chasten:{v:["chasten","temper"]},anneal:{v:["anneal","temper","normalize"]},mooch:{v:["mooch","bum","cadge","grub","sponge"],n:["mooch","n"]},idler:{n:["idler","loafer","do-nothing","layabout","bum"]},tramp:{n:["tramp","hobo","bum"],v:["tramp","v"]},rotter:{n:["rotter","rat","skunk","stinker","stinkpot","bum","puke","crumb","lowlife","so-and-so","git"]},chip:{v:["chip","knap"],n:["chip","chipping","splintering","microchip","crisp"]},nick:{v:["nick","chip","snick"],n:["nick","n"]},modify:{v:["modify","qualify"]},taiwanese:{a:["taiwanese","chinese","formosan"],n:["taiwanese","n"]},enchantment:{n:["enchantment","spell","trance","bewitchment"]},kuki:{n:["kuki","chin","kuki-chin"]},chin:{n:["chin","mentum"]},confuse:{v:["confuse","throw","fox","befuddle","fuddle","bedevil","confound","discombobulate","blur",_176,"obnubilate","flurry","disconcert"]},bewilder:{v:["bewilder","bemuse","discombobulate","throw"]},chocolate:{n:["chocolate","coffee","umber"]},cocoa:{n:["cocoa","chocolate"]},cool:{v:["cool","chill"],s:["cool","coolheaded","nerveless"],n:["cool","n"]},chill:{n:["chill","pall","shivering","iciness","gelidity"],v:["chill","v"]},frisson:{n:["frisson","shiver","chill","quiver",_449,"thrill","tingle"]},chinaware:{n:["chinaware","china"]},taiwan:{n:["taiwan","china","formosa"]},china:{n:["china","prc","cathay"]},govern:{v:["govern","rule"]},principle:{n:["principle","rule","precept"]},dominion:{n:["dominion","rule"]},estrus:{n:["estrus","oestrus","heat","rut"]},deal:{v:["deal","sell","trade"],n:["deal","trade"]},barter:{n:["barter","swap","swop","trade"]},craft:{n:["craft","trade","craftiness",_450,"foxiness","guile","slyness","wiliness","craftsmanship","workmanship"]},escalate:{v:["escalate","intensify"]},graft:{n:["graft",_192,"grafting"],v:["graft","engraft","ingraft"]},cholesterol:{n:["cholesterol","cholesterin"]},reclaim:{v:["reclaim","recover","repossess"]},recuperate:{v:["recuperate","recover","convalesce"]},refrain:{n:["refrain","chorus"],v:["refrain","forbear"]},categorization:{n:["categorization","categorisation","classification","compartmentalization","compartmentalisation","assortment"]},chosen:{n:["chosen","elect"]},permute:{v:["permute","commute","transpose"]},anticipation:{n:["anticipation","expectation","expectancy"]},messiah:{n:["messiah","christ"]},jesus:{n:["jesus","christ","savior","saviour","redeemer","deliverer"]},avocation:{n:["avocation","by-line","hobby","pursuit","sideline"]},crimson:{s:[_448,"red","reddened","red-faced","flushed","violent"],n:[_448,"ruby"],v:[_448,"v"]},loss:{n:["loss","red","deprivation"]},bolshevik:{n:["bolshevik","marxist","red","bolshie","bolshy","bolshevist"],a:["bolshevik","bolshevist","bolshevistic"]},muster:{v:["muster","rally","summon"],n:["muster","n"]},christendom:{n:["christendom","christianity"]},christmas:{n:["christmas","xmas","christmastide","christmastime","yule","yuletide","noel"]},chrome:{v:["chrome","chromium-plate"]},chubby:{s:["chubby","embonpoint","plump"]},chronic:{s:["chronic","inveterate","continuing"]},chuck:{v:["chuck","pat","ditch","toss"],n:["chuck","n"]},chow:{n:["chow","chuck","eats","grub"]},delineation:{n:["delineation","depiction","limning"]},collocate:{v:["collocate","lump","chunk"]},lump:{v:["lump","chunk"],n:["lump","n"]},moocher:{n:["moocher","mooch","cadger","scrounger"]},notch:{n:["notch","nick","snick"]},dent:{n:["dent","ding","gouge","nick"],v:["dent","v"]},slog:{v:["slog","footslog","plod","trudge","pad","tramp"]},hiker:{n:["hiker","tramp","tramper"]},swinger:{n:["swinger","tramp"]},headsman:{n:["headsman","headman"]},curie:{n:["curie","ci"]},plump:{v:["plump","go"],s:["plump","s"]},rifle:{v:["rifle","go"]},survive:{v:["survive","last","live","go","endure"]},sound:{v:["sound","go"],n:["sound","n"],s:["sound","s"]},proceed:{v:["proceed","go","continue"]},drumhead:{n:["drumhead","head"],s:["drumhead","summary"]},heading:{n:["heading","header","head"]},question:{n:[_293,"head","interrogation","interrogative","inquiry","enquiry","query"],v:[_293,"query","oppugn"]},headway:{n:["headway","head"]},forefront:{n:["forefront","head"]},promontory:{n:["promontory","headland","head","foreland"]},principal:{n:["principal","head","dealer","corpus"]},capitulum:{n:["capitulum","head"]},fountainhead:{n:["fountainhead","headspring","head"]},aloha:{n:["aloha","ciao"]},tadalafil:{n:["tadalafil","cialis"]},min:{n:["min","fukien","fukkianese","hokkianese","amoy","taiwanese"]},circumference:{n:["circumference","circuit","perimeter"]},tour:{n:["tour","circuit"]},captivation:{n:["captivation","enchantment","enthrallment","fascination"]},abstain:{v:["abstain","refrain","desist"]},circumstance:{n:["circumstance",_153,"consideration"]},blush:{v:["blush",_448,"flush","redden"],n:["blush","flush"]},summon:{v:["summon",_382,"cite"]},adduce:{v:["adduce","abduce","cite"]},quote:{v:["quote","cite"],n:["quote","n"]},zhou:{n:["zhou","chou","chow"]},indent:{v:["indent","dent"],n:["indent","n"]},hunk:{n:["hunk","lump"]},lout:{n:["lout","clod","stumblebum","goon","oaf","lubber","lummox","lump","gawk"]},swelling:{n:["swelling","puffiness","lump"]},city:{n:["city","metropolis"]},civil:{a:["civil","civic","polite"]},bullock:{n:["bullock","steer"]},interview:{v:["interview","question"],n:["interview","n"]},interrogate:{v:["interrogate","question"]},doubt:{n:["doubt","dubiousness","doubtfulness",_293,"uncertainty","incertitude","dubiety"]},vanguard:{n:["vanguard","forefront","van"]},centiliter:{n:["centiliter","centilitre","cl"]},chlorine:{n:["chlorine","cl"]},headroom:{n:["headroom","headway","clearance"]},lave:{v:["lave","lap","wash"]},lick:{v:["lick","lap"],n:["lick","lap"]},minute:{n:["minute","min","arcminute"],s:["minute","narrow"]},refinement:{n:[_260,"civilization","civilisation","elaboration"]},culture:{n:["culture","civilization","civilisation"]},civilization:{n:["civilization","civilisation"]},well:{n:["well","wellspring","fountainhead"],r:["well","considerably","substantially","comfortably","advantageously","intimately","easily","good"],v:["well","swell"]},kin:{n:["kin","kindred","clan","tribe","kinsperson","family"]},clearness:{n:["clearness","clarity","uncloudedness"]},clarity:{n:["clarity","lucidity","lucidness","pellucidity","clearness","limpidity"]},classical:{s:["classical","greco-roman","graeco-roman","classic"],a:["classical","classic"]},gird:{v:["gird","encircle"]},way:{n:["way","path"]},mobilize:{v:["mobilize","mobilise","marshal","summon"]},fairly:{r:["fairly","fair","clean","evenhandedly"]},clean:{r:["clean","plumb","plum"],s:["clean","neat","sporting","sporty","sportsmanlike","fair","clean-living","fresh","clear","light","unclouded"],a:["clean","unobjectionable","uncontaminating"],v:["clean","strip","pick"]},uninfected:{s:["uninfected","clean"]},scavenge:{v:["scavenge","clean"]},cleanse:{v:["cleanse","clean"]},houseclean:{v:["houseclean","clean"]},intumescence:{n:["intumescence","intumescency","swelling"]},classification:{n:["classification","categorization","categorisation","sorting"]},punch:{n:["punch","clout","poke","lick","biff","slug","puncher"],v:["punch","perforate","plug"]},cadaver:{n:["cadaver","corpse","stiff","clay","remains"]},mud:{n:["mud","clay"],v:["mud","v"]},clearly:{r:["clearly","clear"]},absolved:{s:["absolved","clear","cleared","exculpated","exonerated","vindicated"]},"well-defined":{a:["well-defined","clear"],s:["well-defined","s"]},net:{v:["net","sack","clear","nett"],a:["net","nett"],n:["net","network","mesh","meshing","meshwork"],s:["net","s"]},unclutter:{v:["unclutter","clear"]},classroom:{n:["classroom","schoolroom"]},wash:{v:["wash","lave","launder","rinse"],n:["wash","washing","lavation"]},style:{v:["style","title"],n:["style","n"]},entitle:{v:["entitle","title"]},deed:{n:["deed","title"]},cleaning:{n:["cleaning",_451,"cleanup"]},killing:{n:["killing","cleanup","kill"],s:["killing","sidesplitting"]},"akin,":{s:["akin,","blood-related","cognate","consanguine","consanguineous","consanguineal","kin,","kindred"]},tinkle:{v:["tinkle","tink","clink","chink"],n:["tinkle","n"]},clearing:{n:["clearing","clarification","glade"]},focus:{n:["focus","focusing","focussing",_112,"centering","nidus"],v:["focus","focalize","focalise","sharpen"]},yak:{n:["yak","yack","yakety-yak","chatter","cackle"],v:["yak","gab"]},salesclerk:{n:["salesclerk","clerk"]},distinctly:{r:["distinctly","clearly"]},intelligibly:{r:["intelligibly","clearly","understandably"]},girdle:{v:["girdle","gird","deaden"],n:["girdle","cincture","sash","waistband","waistcloth"]},customer:{n:["customer","client"]},nuance:{n:["nuance","nicety","shade","subtlety","refinement"]},refining:{n:["refining",_260,"purification"]},climate:{n:["climate","mood","clime"]},clock:{v:["clock","time"]},salvage:{v:["salvage","scavenge","salve",_297,"save"]},trot:{v:["trot","jog","clip"],n:["trot","n"]},time:{n:["time","clip"],v:["time","v"]},knockoff:{n:["knockoff","clone"]},clone:{n:["clone","clon"]},ringer:{n:["ringer","clone"]},final:{s:["final","last","net"]},web:{v:["web","net"],n:["web","entanglement"]},internet:{n:["internet","net","cyberspace"]},close:{r:["close","closely","tight"],s:["close","closelipped","closemouthed","secretive","tightlipped","snug","close-fitting","tight","confining","faithful"],v:["close","shut"],n:["close","n"],a:["close","a"]},near:{r:["near","nigh","close"],a:["near","close","nigh"],v:["near","v"],s:["near","s"]},cheeseparing:{s:["cheeseparing","close","near","penny-pinching","skinny"]},airless:{s:["airless","close","stuffy","unaired"]},conclude:{v:["conclude","close","resolve"]},finale:{n:["finale","close","finis","coda"]},stylus:{n:["stylus","style"]},vogue:{n:["vogue","trend","style"]},manner:{n:["manner","mode","style","way","fashion"]},nearer:{r:["nearer","nigher","closer"]},closer:{n:["closer","finisher"],r:["closer","r"]},candid:{s:["candid","open","heart-to-heart"]},overt:{a:["overt","open"]},receptive:{a:["receptive","open"],s:["receptive","s"]},assailable:{s:["assailable","undefendable","undefended","open"]},exposed:{s:["exposed","open","uncovered"]},outdoors:{n:["outdoors","out-of-doors","open"],r:["outdoors","r"]},completion:{n:["completion","culmination",_352,"windup"]},closure:{n:[_321,"closedown",_352,"shutdown","cloture"],v:[_321,"cloture"]},closing:{n:[_352,"closure"]},shutting:{n:["shutting","closing"]},closed:{s:["closed","unsympathetic"],a:["closed","shut"]},shut:{a:["shut","unopen","closed"],v:["shut","v"]},slump:{v:["slump","sink","slouch"],n:["slump","slack","drop-off","falloff"]},cesspool:{n:["cesspool","cesspit","sink","sump"]},sinkhole:{n:["sinkhole","sink"]},wardrobe:{n:["wardrobe","closet","press"]},cupboard:{n:["cupboard","closet"]},settlement:{n:[_453,_275,"closure"]},closely:{r:["closely","intimately","nearly"]},commune:{v:["commune","communicate"]},nearest:{r:["nearest","nighest","closest"]},mottle:{v:["mottle","dapple","cloud","streak","blotch"]},obscure:{v:[_176,"befog","becloud","obnubilate","fog","cloud","mist","obliterate","veil","hide","bedim","overcloud"],s:[_176,"unnoticeable",_240,"unsung","vague"]},overcast:{v:[_454,"cloud"],n:[_454,"overcasting"],s:[_454,"s"]},swarm:{n:["swarm","cloud"],v:["swarm","v"]},reasonably:{r:["reasonably","moderately","pretty","jolly","somewhat","fairly","middling","passably"]},cloudy:{s:["cloudy","muddy","mirky","murky","turbid","nebulose","nebulous"]},clue:{v:["clue","clew"],n:["clue","clew","cue"]},mire:{v:["mire","muck","mud"],n:["mire","quagmire","quag","morass","slack"]},ting:{n:["ting","tinkle"]},chiseled:{s:["chiseled","well-defined"]},ember:{n:["ember","coal"]},curium:{n:["curium","cm"]},centimeter:{n:["centimeter","centimetre","cm"]},ennoble:{v:["ennoble","gentle","entitle","dignify"]},colorado:{n:["colorado","co","colo."]},cobalt:{n:["cobalt","co"]},slide:{n:["slide","glide","coast"],v:["slide","v"]},seashore:{n:["seashore","coast","seacoast","sea-coast"]},coalescence:{n:["coalescence","coalescency","coalition","concretion","conglutination"]},coalition:{n:["coalition","fusion"]},tittup:{v:["tittup",_456,"ruffle","prance","strut","sashay","cock"]},hammer:{n:["hammer","cock","pound","hammering","pounding"],v:["hammer","v"]},stopcock:{n:["stopcock","cock","turncock"]},cocaine:{n:["cocaine","cocain"]},"c.o.d.":{r:["c.o.d.","cod"]},collect:{s:["collect","cod"],v:["collect","v"]},cod:{n:["cod","codfish"],v:["cod","v"],r:["cod","r"],s:["cod","s"]},pod:{n:["pod","cod","seedcase","seedpod"]},code:{v:["code","encipher","cipher","cypher","encrypt","inscribe"],n:["code","codification"]},pinch:{v:["pinch",_65,"twinge","tweet","nip","twitch","vellicate"],n:["pinch","tweak"]},chilliness:{n:["chilliness","coolness","nip"]},jap:{n:["jap","nip"]},cold:{s:["cold","cold-blooded","inhuman","insensate","frigid","stale","dusty","moth-eaten"],n:["cold","coldness"]},coldness:{n:["coldness","cold","frigidity","frigidness","coolness","iciness","chilliness"]},cryptography:{n:["cryptography","coding","steganography"]},coffee:{n:["coffee","java"]},result:{n:["result","resultant","outcome","termination"],v:["result","ensue"]},outside:{r:[_279,"outdoors","alfresco"],n:[_279,"exterior"],s:[_279,"remote"],a:[_279,"a"]},kale:{n:["kale","kail","cole","borecole","colewort"]},decisiveness:{n:["decisiveness","decision"]},collaboration:{n:["collaboration","collaborationism","quislingism","coaction"]},colleague:{n:["colleague","confrere","fellow","co-worker","workfellow"]},hidden:{s:["hidden",_176,"secret"]},pony:{n:["pony","trot","crib"]},trotskyite:{n:["trotskyite","trotskyist","trot"]},jog:{n:["jog","trot","lope"],v:["jog","v"]},gather:{v:["gather","garner","collect","pucker","tuck"],n:["gather","gathering"]},corporate:{s:["corporate","collective","incorporated"]},dear:{s:["dear","good","near","devout","earnest","heartfelt"],r:["dear","r"],n:["dear","n"]},"near,":{s:["near,","nigh,"]},teem:{v:["teem","pullulate","swarm"]},drove:{n:["drove","horde","swarm"]},easy:{s:["easy","light","loose","promiscuous","sluttish","wanton","gentle","soft","easygoing","leisurely"],r:["easy","soft"]},idle:{s:["idle","loose","jobless","light","unused"],v:["idle","laze","slug","stagnate"]},unaffixed:{a:["unaffixed","loose"]},lax:{s:["lax","loose","slack"]},informal:{s:["informal","loose"]},loosen:{v:["loosen","relax","loose"]},unleash:{v:["unleash","loose"]},correctly:{r:["correctly","right","aright"]},justly:{r:["justly","right"]},mighty:{r:["mighty","mightily",_457,"right"]},properly:{r:["properly","decently","decent","right"]},veracious:{s:["veracious","right"]},good:{s:["good","right","ripe","well,","unspoiled","unspoilt","honest","salutary","sound","serious","just","upright"],n:["good","goodness"],r:["good","r"]},"right,":{s:["right,","right-hand,"]},proper:{s:["proper","right"]},concluding:{s:["concluding","final","last","terminal"]},network:{n:["network","web"]},vane:{n:["vane","web"]},exclude:{v:["exclude","shut","except","omit"]},"cloud-covered":{s:["cloud-covered","clouded",_454,"sunless"]},cloudiness:{n:["cloudiness",_454,"murkiness","muddiness"]},blossom:{v:[_402,"unfold"],n:[_402,"n"]},collectible:{s:["collectible","collectable","payable"],n:["collectible","collectable"]},collector:{n:["collector","gatherer","accumulator","aggregator"]},toller:{n:["toller","ringer"]},color:{a:["color","colour"],v:["color","colour","gloss","emblazon","colorize","colorise","colourise","colourize"],n:["color","colour","coloration","colouration","vividness","coloring","colouring"]},discolor:{v:["discolor","discolour","colour","color"]},tinge:{v:["tinge","color","colour","distort"],n:["tinge","n"]},semblance:{n:["semblance","gloss","color","colour"]},foul:{v:["foul","befoul","defile","maculate"],s:["foul","s"]},tarnish:{v:["tarnish","stain","maculate","sully","defile"]},cologne:{n:["cologne","koln"]},colony:{n:["colony","dependency","settlement"]},entangle:{v:["entangle","mire","tangle","mat","snarl"]},slop:{n:["slop","mire","slops","swill","pigswill","pigwash"],v:["slop","swill"]},collected:{s:["collected","equanimous","poised","self-collected","self-contained","self-possessed"],a:["collected","gathered"]},colonial:{s:["colonial","compound"]},collection:{n:["collection","collecting","assembling","aggregation","compendium","accumulation","assemblage"]},colors:{n:["colors","colours"]},colon:{n:["colon","aspinwall"]},colored:{a:[_459,_460,"colorful"],s:[_459,_460,"negro"]},colorful:{a:["colorful","colourful"]},bleached:{s:["bleached",_459,_460,"dyed","faded","washed-out","washy"]},biased:{s:["biased",_459,_460,"one-sided","slanted"]},liquidation:{n:["liquidation","settlement"]},colonization:{n:["colonization","colonisation","settlement"]},village:{n:["village",_453,"hamlet"]},column:{n:["column","pillar","editorial","tower"]},sanely:{r:["sanely","sensibly","reasonably"]},slither:{v:["slither","slide"]},skid:{v:["skid","slip","slue","slew","slide"],n:["skid","slip","sideslip"]},swoop:{n:["swoop","slide"],v:["swoop","v"]},columnist:{n:["columnist","editorialist"]},compound:{v:[_248,"combine"],s:[_248,"s"]},unite:{v:["unite",_230,"unify","merge"]},combining:{n:["combining","combine"]},trust:{n:["trust",_230,"cartel","trustingness","trustfulness"],v:["trust","v"]},combination:{n:["combination","combining","compounding"]},centripetal:{s:["centripetal","receptive","sensory,","unifying,"]},forge:{v:["forge","hammer","spurt","spirt","fake","counterfeit"],n:["forge","smithy"]},mallet:{n:["mallet","hammer","beetle"]},malleus:{n:["malleus","hammer"]},comfort:{v:[_440,"ease","soothe","console","solace"],n:[_440,"comfortableness"]},ease:{n:["ease",_440,"informality","easiness","simplicity","simpleness"],v:["ease","v"]},consolation:{n:["consolation",_440,"solace","solacement"]},drollery:{n:["drollery","clowning","comedy","funniness","waggery"]},jester:{n:["jester","fool"]},approaching:{s:["approaching","coming,","forthcoming","upcoming"],n:["approaching","n"]},orgasm:{n:["orgasm","climax","coming"]},advent:{n:["advent","coming"]},shadow:{v:["shadow","overshadow","dwarf","shade"],n:["shadow","n"]},amusing:{s:["amusing","comic","comical","funny","laughable","mirthful","risible","amusive","diverting"]},comedian:{n:["comedian","comic"]},crimp:{v:["crimp","pinch","crape","frizzle","frizz","kink"],n:["crimp","crimper"]},emergency:{n:["emergency","exigency","pinch"]},comfortable:{s:["comfortable","easy","prosperous","well-fixed","well-heeled","well-off","well-situated","well-to-do"],a:["comfortable","comfy"]},cryptanalysis:{n:["cryptanalysis","cryptanalytics","cryptography","cryptology"]},enjoy:{v:["enjoy","bask","relish","savor","savour"]},gusto:{n:["gusto","relish","zest","zestfulness"]},overriding:{s:["overriding","paramount","predominant",_371,"preponderant","preponderating"]},loom:{v:["loom","tower",_371,"hulk"]},commercial:{s:["commercial","commercial-grade"]},initiate:{v:[_143,"induct","pioneer"],n:[_143,"enlightened","pundit","savant"]},undertone:{n:["undertone","tinge","undercurrent"]},commerce:{n:["commerce","commercialism","mercantilism"]},benighted:{s:["benighted","dark","nighted"]},night:{n:["night","nighttime","dark"]},darkness:{n:["darkness","dark","shadow","duskiness","swarthiness"]},wickedness:{n:[_421,"darkness","dark"]},nudge:{n:["nudge","jog"],v:["nudge","prod"]},commitment:{n:["commitment","committal","consignment","dedication","allegiance","loyalty"]},committedness:{n:["committedness","commitment"]},concealed:{s:["concealed","hidden"]},"afoul(ip)":{s:["afoul(ip)","foul","fouled"]},"cheating,":{s:["cheating,","dirty","foul","unsporting","unsportsmanlike"]},fetid:{s:["fetid","foetid","foul","foul-smelling","funky","noisome","smelly","stinking","ill-scented"]},disgusting:{s:["disgusting","disgustful","distasteful","foul","loathly","loathsome",_462,"repellant","repelling","revolting","skanky","wicked","yucky"]},pollute:{v:["pollute","foul","contaminate"]},rationality:{n:["rationality","reason","reasonableness","rationalness"]},coarse:{s:["coarse","common","rough-cut","uncouth","vulgar"],a:["coarse","harsh"]},common:{s:["common","plebeian","vulgar","unwashed","vernacular","usual","mutual"],n:["common","n"]},park:{n:["park","commons","common","green","parkland"]},commodity:{n:["commodity","good"]},dearly:{r:["dearly","dear","affectionately"]},costly:{s:["costly","dear,","high-priced","pricey","pricy"]},beloved:{s:["beloved","darling","dear"],n:["beloved","dear","dearest","honey","love"]},lamb:{n:["lamb","dear","elia"]},accumulate:{v:["accumulate","cumulate","conglomerate","gather","amass"]},tollkeeper:{n:["tollkeeper","tollman","tollgatherer","toller"]},jumble:{v:["jumble","confuse","mingle"],n:["jumble","jumbal"]},democracy:{n:["democracy","republic","commonwealth"]},state:{n:["state","nation",_302,"land","commonwealth","province"],v:["state","say","tell"]},commonalty:{n:["commonalty","commonality","commons"]},normally:{r:["normally","usually","unremarkably","commonly","ordinarily"]},decant:{v:["decant","pour"]},likeness:{n:["likeness","semblance","alikeness","similitude"]},illusion:{n:["illusion","semblance","fantasy","phantasy","fancy"]},communist:{a:["communist","communistic"],n:["communist","commie"]},relative:{a:[_463,"comparative"],n:[_463,"congener","congenator","congeneric","relation"],s:[_463,"s"]},pounce:{v:["pounce","swoop"]},compare:{v:["compare","liken","equate"],n:["compare","n"]},comparison:{n:["comparison","compare","equivalence","comparability","comparing"]},elimination:{n:["elimination","liquidation","evacuation","excretion","excreting","voiding","riddance"]},extermination:{n:["extermination","liquidation"]},eject:{v:["eject","exclude"]},comparable:{s:["comparable","corresponding","like"]},hope:{v:["hope","trust","desire"],n:["hope","n"]},confidence:{n:["confidence","trust"]},faith:{n:["faith","trust"]},reliance:{n:["reliance","trust"]},communication:{n:["communication","communicating"]},unify:{v:["unify","unite","merge"]},recompense:{n:["recompense","compensation"],v:["recompense","v"]},sock:{v:["sock","bop","whop","whap","bonk","bash"],n:["sock","n"]},rival:{n:["rival","challenger","competitor","competition","contender"],v:["rival","v"]},competition:{n:["competition","contention","rivalry"]},still:{v:["still","allay",_297,"ease"],r:["still","stock-still"],a:["still","noneffervescent"],s:["still","s"],n:["still","n"]},facilitate:{v:["facilitate","ease","alleviate"]},relief:{n:["relief","ease","relievo","rilievo","embossment","succor","succour","ministration","alleviation","assuagement"]},compose:{v:["compose","compile","write"]},fashion:{v:["fashion","forge"],n:["fashion","n"]},invent:{v:["invent","contrive","devise","excogitate","formulate","forge"]},complete:{s:[_100,"concluded","ended","over,","terminated","consummate"],v:[_100,"nail","finish"]},complemental:{s:["complemental","complementary","completing"]},complicated:{s:["complicated","complex"]},chitchat:{n:["chitchat","chit-chat","gab","gabfest","gossip","tittle-tattle","chin-wag","chin-wagging","causerie"]},complex:{n:["complex","composite"],s:["complex","s"]},complexity:{n:["complexity","complexness"]},submission:{n:["submission","compliance","entry"]},complaisance:{n:["complaisance","compliance","compliancy","obligingness","deference"]},conformity:{n:["conformity","conformation","compliance","abidance","conformism","conformance"]},shade:{n:["shade","tint","tincture","tone","shadiness","shadowiness"],v:["shade","v"]},glossary:{n:["glossary","gloss"]},comply:{v:["comply","follow"]},ballpark:{n:["ballpark","park"]},component:{n:["component","constituent","element","factor","ingredient"]},steering:{n:["steering","guidance",_112,"steerage"]},management:{n:["management","direction"]},guidance:{n:["guidance","counsel","counseling","counselling",_112,"steering"]},write:{v:["write","compose","pen","indite","save"]},country:{n:[_302,"state","land"]},delusion:{n:["delusion","illusion","hallucination"]},compressed:{s:["compressed","flat","tight"]},compression:{n:["compression","compressing","condensation","contraction"]},compaction:{n:["compaction","compression","concretion","densification"]},consist:{v:["consist","comprise"]},shrivel:{v:["shrivel","shrink","wither"]},psychiatrist:{n:["psychiatrist","head-shrinker","shrink"]},convict:{n:["convict","con","inmate","yardbird"]},gestate:{v:["gestate","conceive","conceptualize","conceptualise"]},invention:{n:["invention","innovation","excogitation","conception","design"]},creation:{n:["creation","conception"]},however:{r:["however","nevertheless","withal","still","yet","nonetheless","notwithstanding"]},placid:{s:["placid","quiet","still","tranquil","smooth","unruffled"]},silent:{s:["silent","soundless","still","unsounded","tacit","understood"]},inactive:{s:[_464,"motionless","static","still"],a:[_464,"a"]},hush:{v:["hush","quieten",_465,"still"],n:["hush","stillness","still"]},distillery:{n:["distillery","still"]},religion:{n:["religion","faith"]},suppress:{v:["suppress","repress","subdue","conquer"]},proportional:{s:["proportional","relative"]},confer:{v:["confer","confabulate","confab","consult","bestow"]},applaud:{v:["applaud","clap","spat","acclaim"]},implicated:{s:["implicated","concerned"]},concerned:{s:["concerned","interested"]},lexington:{n:["lexington","concord"]},harmony:{n:["harmony",_47,"concordance","harmoniousness"]},meekness:{n:["meekness","submission","subduedness"]},ossification:{n:["ossification","conformity"]},easing:{n:["easing","easement","alleviation","relief","moderation"]},finality:{n:["finality","conclusiveness","decisiveness"]},sentence:{v:["sentence","condemn","doom"],n:["sentence","n"]},condemn:{v:["condemn",_466,"decry","objurgate","excoriate"]},condominium:{n:["condominium","condo"]},nation:{n:["nation","land","country"]},league:{n:["league","conference"]},integrate:{v:["integrate","incorporate"]},confess:{v:["confess","squeal","fink"]},confident:{s:["confident","surefooted","sure-footed"]},"convinced,":{s:["convinced,","positive,","confident,"]},confidential:{s:["confidential","secret"]},universe:{n:["universe","existence","creation","world","cosmos","macrocosm"]},pay:{v:["pay","compensate"],n:["pay","n"]},configuration:{n:["configuration","constellation"]},sidetrack:{v:["sidetrack","depart","digress","straggle"],n:["sidetrack","n"]},deviate:{v:[_11,"vary","diverge","depart","divert"],n:[_11,"n"],s:[_11,"s"]},rope:{v:["rope","leash"],n:["rope","n"]},three:{n:["three","3","iii","trio","threesome","tierce","leash","troika","triad","trine","trinity","ternary","ternion","triplet","tercet","terzetto","trey","deuce-ace"],s:["three","3","iii"]},"leading,":{s:["leading,","prima,","star,","starring,","stellar,","preeminent"]},asterisk:{n:["asterisk","star"],v:["asterisk","v"]},headliner:{n:["headliner","star"]},plowshare:{n:["plowshare","ploughshare","share"]},parcel:{n:["parcel",_327,"share"]},conviction:{n:["conviction","condemnation","sentence"]},confused:{s:["confused","disoriented","lost",_467,"disjointed",_425,"garbled","illogical","scattered","unconnected"]},baffled:{s:["baffled","befuddled","bemused","bewildered","confounded","confused","lost","mazed","mixed-up"]},patchwork:{n:["patchwork","hodgepodge","jumble"]},confusion:{n:["confusion","mix-up","discombobulation","confusedness","muddiness","disarray"]},congou:{n:["congou","congo"]},congo:{n:["congo","zaire"]},confrontation:{n:["confrontation",_469,_159,"showdown","face-off"]},praise:{n:["praise","congratulations","kudos","extolment"]},meeting:{n:["meeting","congress","encounter"]},harp:{v:["harp","dwell"],n:["harp","n"]},populate:{v:["populate","dwell","live","inhabit"]},population:{n:["population","universe"]},"machine-accessible":{s:["machine-accessible","connected"]},connecticut:{n:["connecticut","ct","ct."]},joining:{n:["joining","connection","connexion"]},conscience:{n:["conscience","scruples"]},confluence:{n:["confluence","meeting","conflux","merging"]},merging:{n:["merging","meeting"]},conscious:{s:["conscious","witting"]},consecutive:{r:[_470,"sequentially"],s:[_470,"sequent","sequential","serial","successive"]},straight:{s:[_471,_470,"unbent","unbowed"],a:[_471,"square"],r:[_471,"r"],n:[_471,"n"]},"back-to-back":{s:["back-to-back","consecutive"]},conservation:{n:["conservation","preservation"]},bourgeois:{s:["bourgeois",_472,"materialistic"],n:["bourgeois","burgher"]},"button-down":{s:["button-down","buttoned-down","conservative"]},cautious:{s:["cautious","conservative"],n:["cautious","n"]},conservative:{n:[_472,"conservativist"],s:[_472,"s"]},concourse:{n:["concourse","confluence"]},confluent:{s:["confluent","merging,"],n:["confluent","n"]},directly:{r:["directly","flat",_471,"direct"]},square:{s:["square","straight"],n:["square","lame","foursquare"],a:["square","a"],r:["square","r"],v:["square","v"]},neat:{s:["neat",_471,"full-strength","orderly"]},"square,":{s:["square,","straightforward","straight"]},true:{s:["true","straight"],r:["true","admittedly","avowedly","confessedly"],a:["true","a"]},uncoiled:{a:["uncoiled","straight"]},straightaway:{n:[_473,"straight"],r:[_473,"r"],s:[_473,"s"]},heterosexual:{n:["heterosexual","straight"]},consideration:{n:["consideration","thoughtfulness","considerateness"]},retainer:{n:["retainer","consideration"]},timid:{n:["timid","cautious"],s:["timid","s"],a:["timid","a"]},businessperson:{n:["businessperson","bourgeois"]},harmonica:{n:["harmonica","harp"]},consistent:{s:[_474,"uniform"],a:[_474,"a"]},coherent:{a:["coherent",_474,"logical","ordered"],s:["coherent","tenacious","logical","lucid"]},reproducible:{a:["reproducible","consistent"]},systematically:{r:["systematically","consistently"]},review:{v:["review","survey","refresh","retrospect","critique","reexamine"],n:["review","brushup","critique"]},surveil:{v:["surveil","follow","survey"]},immediately:{r:["immediately","instantly",_473,"directly","now","forthwith"]},immediate:{s:["immediate","prompt","quick","straightaway"]},squarely:{r:["squarely","square","foursquare","straightforwardly","forthrightly","forthright"]},hearty:{s:["hearty","satisfying","solid","square",_399,"full-blooded","lusty","red-blooded"]},feather:{v:["feather","square"],n:["feather","feathering","plume","plumage"]},"on-key":{s:["on-key","true"]},"true,":{s:["true,","lawful","rightful,"]},genuine:{s:["genuine","true,","unfeigned"],a:["genuine","echt"]},dependable:{s:["dependable","honest",_335,"true,","good","safe","secure","rock-steady","steady-going"],a:["dependable","a"]},truthful:{a:["truthful","true"]},"bang-up":{s:["bang-up","bully","corking","cracking","dandy","great","groovy","keen","neat","nifty","peachy","slap-up","swell","smashing","old,"]},facile:{s:["facile","neat","slick"]},amalgamate:{s:["amalgamate","amalgamated","coalesced","consolidated","fused"],v:["amalgamate","v"]},consolidation:{n:["consolidation","integration"]},servant:{n:["servant","retainer"]},faint:{s:["faint","fainthearted","timid","faint-hearted","light","swooning","light-headed","lightheaded","feeble","weak"],v:["faint","conk","swoon"],n:["faint","swoon","syncope","deliquium"]},diffident:{a:["diffident","shy","timid","unsure"]},consortium:{n:["consortium","pool","syndicate"]},conspiracy:{n:["conspiracy","confederacy","cabal"]},ceaseless:{s:["ceaseless",_476,"incessant","never-ending","perpetual","unceasing","unremitting"]},changeless:{s:["changeless",_476,"invariant","unvarying","unalterable"],a:["changeless","a"]},constant:{n:[_476,"invariable"],s:[_476,"s"]},thoroughly:{r:["thoroughly","soundly","good","exhaustively"]},effective:{s:["effective","good","efficient"],a:["effective","effectual","efficacious"]},adept:{s:["adept","expert","good","practiced","proficient","skillful","skilful"],n:["adept","n"]},estimable:{s:["estimable","good",_477,"respectable"]},"constituent,":{s:["constituent,","constitutional","constitutive,","organic"]},"built-in":{s:["built-in","constitutional","inbuilt","inherent","integral"]},handmaid:{n:["handmaid","handmaiden","servant"]},immutable:{a:["immutable","changeless"]},recast:{v:["recast","reforge","remodel","remold","remould"]},diligence:{n:["diligence","industriousness","industry"]},regenerate:{v:["regenerate","restore","rejuvenate","renew","revitalize"]},endeavor:{v:[_46,"endeavour","strive"],n:[_46,"n"]},contamination:{n:["contamination","pollution","taint"]},contaminant:{n:["contaminant","contamination"]},contemporaneous:{s:["contemporaneous","contemporary"]},contemporary:{s:["contemporary","present-day,","modern-day"],n:["contemporary","coeval"]},coetaneous:{s:["coetaneous","coeval","contemporaneous"]},contented:{a:["contented","content"]},contentedness:{n:["contentedness","content"]},message:{n:["message",_223,"substance"]},content:{n:[_223,"contents"],a:[_223,"a"]},celibate:{s:["celibate","continent"]},persevere:{v:["persevere","persist"]},squelch:{v:[_396,"quell","quench","squish","splash","splosh","slosh","slop"],n:[_396,"n"]},continuity:{n:["continuity","persistence"]},continuous:{a:["continuous","uninterrupted"]},endlessly:{r:["endlessly","ceaselessly","incessantly","unceasingly","unendingly","continuously"]},interminably:{r:["interminably","endlessly"]},infinitely:{r:["infinitely","endlessly"]},boundlessly:{r:["boundlessly","immeasurably","infinitely"]},"narrow-minded":{a:["narrow-minded","narrow"]},constrict:{v:["constrict","constringe","narrow"]},specialize:{v:["specialize","specialise","narrow"]},wince:{n:["wince","flinch"],v:["wince","v"]},infinitesimal:{s:["infinitesimal","minute"]},hour:{n:["hour","minute","hr"]},speciate:{v:["speciate","differentiate","specialize","specialise"]},catching:{n:["catching","contracting"],s:["catching","communicable","contagious","contractable","transmissible","transmittable"]},shockable:{a:["shockable","narrow-minded"]},detection:{n:["detection","catching","espial","spying","spotting","detecting","sleuthing","sensing"]},contractor:{n:["contractor","declarer"]},contrary:{s:[_210,"obstinate","perverse","wayward"],n:[_210,"n"]},contrast:{v:["contrast","counterpoint"],n:["contrast","n"]},line:{n:["line","demarcation","contrast"],v:["line","v"]},pipeline:{n:["pipeline","line"]},grapevine:{n:["grapevine","pipeline"]},conducive:{s:["conducive","contributing,","contributive","contributory","tributary"]},subscriber:{n:["subscriber","contributor","reader","endorser","indorser","ratifier"]},handedness:{n:["handedness","laterality"]},lateralization:{n:["lateralization","lateralisation","laterality"]},maneuver:{v:[_386,"manoeuver","manoeuvre"],n:[_386,_387,"play"]},betroth:{v:["betroth","engage","affiance","plight"]},hire:{v:["hire","engage","employ"]},prosecute:{v:["prosecute","engage","pursue"]},restrainer:{n:["restrainer","controller"]},accountant:{n:["accountant","comptroller","controller"]},commodious:{a:["commodious","convenient"]},conventionality:{n:["conventionality","convention","conventionalism"]},ceremonious:{s:["ceremonious","conventional"],a:["ceremonious","a"]},conventional:{s:["conventional","formal","schematic","established"]},pompous:{a:["pompous","ceremonious"],s:["pompous","s"]},grandiloquent:{s:["grandiloquent","overblown","pompous","pontifical","portentous","magniloquent","tall"]},convergence:{n:["convergence","converging","convergency"]},overlap:{n:["overlap","convergence","intersection"]},conversion:{n:["conversion",_478,"transition","changeover"]},convert:{v:["convert","convince"]},converter:{n:["converter","convertor"]},convertible:{s:["convertible","transformable","translatable","transmutable"],a:["convertible","exchangeable"]},cookie:{n:["cookie","cooky","biscuit"]},cooking:{n:["cooking","cookery","preparation"]},cooler:{n:["cooler","tank"]},cooling:{n:["cooling","chilling"]},collaborate:{v:["collaborate","cooperate"]},accommodative:{s:["accommodative",_479,"reconciling"],a:["accommodative","a"]},concerted:{s:["concerted","conjunct","conjunctive","cooperative"]},cooperative:{n:[_479,"co-op"],s:[_479,"s"]},accommodating:{a:["accommodating","accommodative"]},organize:{v:[_170,_171,_115,_142,"devise","machinate"]},coordinate:{n:[_115,"co-ordinate"],v:[_115,"v"]},unionize:{v:["unionize","unionise",_170,"organise"]},mastermind:{v:[_417,"engineer","direct",_170,_171,"orchestrate"],n:[_417,"n"]},originator:{n:["originator","conceiver","mastermind"]},coordinated:{s:["coordinated","co-ordinated","matching","interconnected","unified"]},coordinator:{n:["coordinator","co-ordinator"]},overload:{v:["overload","surcharge","overcharge"],n:["overload","overburden"]},copper:{n:["copper","cu"]},copy:{v:["copy","re-create"],n:["copy","n"]},replicate:{v:["replicate","copy"]},transcript:{n:["transcript","copy"]},duplicate:{v:[_183,"reduplicate","double","repeat","replicate"],s:[_183,"matching","twin,","twinned"],n:[_183,"duplication"]},retroflex:{v:["retroflex","replicate"],s:["retroflex","retroflexed"]},twin:{v:["twin",_183,"parallel"],n:["twin","n"]},cacuminal:{s:["cacuminal","retroflex"]},cord:{n:["cord","corduroy"]},core:{n:["core","nucleus"]},phellem:{n:["phellem","cork"]},corn:{n:["corn","clavus","maize"]},intake:{n:["intake","inlet"]},postponement:{n:["postponement","deferment","deferral"]},corporation:{n:["corporation","corp"]},pot:{n:["pot","potbelly","corporation","tummy","grass","dope","weed","gage","sess","sens","smoke","skunk","locoweed","jackpot","kitty","flowerpot","potful"]},potentiometer:{n:["potentiometer","pot"]},wage:{n:["wage","pay","earnings","remuneration","salary"],v:["wage","v"]},refuse:{v:["refuse",_258,"reject"],n:["refuse","n"]},worsen:{v:["worsen",_258,"aggravate","exacerbate","exasperate"]},rightly:{r:["rightly","justly","justifiedly"]},appropriately:{r:["appropriately","suitably","fittingly","befittingly","fitly","properly","duly"]},precisely:{r:["precisely","exactly","just","properly","incisively"]},correction:{n:["correction","chastening","chastisement","rectification"]},reject:{v:["reject","refuse","spurn","scorn","pooh-pooh","disdain"],n:["reject","n"]},resist:{v:["resist","reject","refuse","balk","baulk","jib","stand","fend","withstand"]},deny:{v:["deny","refuse","abnegate"]},garbage:{n:["garbage","refuse","scraps"]},correlation:{n:["correlation","correlativity"]},parallelism:{n:["parallelism","correspondence"]},commensurateness:{n:["commensurateness",_113,"proportionateness"]},analogous:{s:["analogous","correspondent"]},correspondent:{n:["correspondent","newspaperman","newspaperwoman","newswriter","pressman"],s:["correspondent","s"]},corruption:{n:["corruption","subversion","degeneracy","depravation","depravity","putrefaction"]},putrescence:{n:["putrescence","putridness","rottenness","corruption"]},corruptness:{n:["corruptness","corruption"]},cos:{n:["cos","romaine"]},cosine:{n:["cosine","cos"]},cosmetic:{s:["cosmetic","enhancive","decorative","ornamental"]},rib:{n:["rib","costa"],v:["rib","v"]},"dearly-won":{s:["dearly-won","costly"]},bungalow:{n:["bungalow","cottage"]},sofa:{n:["sofa","couch","lounge"]},counselor:{n:["counselor","counsellor"]},antagonistic:{s:["antagonistic",_95,"antipathetic","antipathetical"],a:["antagonistic","incompatible"]},counter:{n:[_95,"tabulator"],v:[_95,"v"],s:[_95,"s"]},counterpart:{n:["counterpart","similitude","twin","vis-a-vis"]},coupled:{s:["coupled","joined","linked"]},conjugate:{s:["conjugate","conjugated","coupled"]},coupon:{n:["coupon","voucher"]},courage:{n:["courage","courageousness","bravery","braveness"]},messenger:{n:["messenger","courier"]},fade:{v:["fade","melt","wither"],n:["fade","disappearance"]},mellow:{v:["mellow","melt"],s:["mellow","mellowed"],r:["mellow","r"]},dissolve:{v:["dissolve","thaw","unfreeze","unthaw","dethaw","melt","dismiss","resolve"]},thaw:{n:["thaw","melt","thawing","melting","warming"],v:["thaw","v"]},provide:{v:["provide","supply","ply","cater"]},rush:{v:["rush","hotfoot","hasten","hie","speed","race","hurry","festinate"],n:["rush","rushing","spate","surge","upsurge"],s:["rush","s"]},raceway:{n:["raceway","race"]},slipstream:{n:["slipstream","airstream","race","backwash","wash"]},subspecies:{n:["subspecies","race"]},dally:{v:["dally","toy","play","flirt","trifle","dawdle"]},toy:{v:["toy","fiddle","diddle","play"],n:["toy","n"]},gambling:{n:["gambling","gaming","play"]},looseness:{n:["looseness","play"]},shimmer:{n:["shimmer","play"]},court:{n:["court","homage","courtyard","lawcourt","courtroom","tribunal","judicature"],v:["court","v"]},room:{n:["room","way"],v:["room","v"]},cousin:{n:["cousin","cousin-german"]},crabbed:{s:["crabbed","crabby","cross","fussy","grouchy","grumpy","bad-tempered","ill-tempered"]},"cross,":{s:["cross,","transverse","transversal","thwartwise"]},crossbreed:{v:["crossbreed","cross","hybridize","hybridise","interbreed"],n:["crossbreed","n"]},thwart:{v:["thwart","queer","spoil","scotch","foil","cross","frustrate","baffle","bilk"]},intersect:{v:["intersect","cross"]},hybridization:{n:["hybridization","hybridisation","crossbreeding",_482,"cross","interbreeding","hybridizing"]},hybrid:{n:["hybrid","crossbreed","cross"],s:["hybrid","intercrossed"]},cloy:{v:["cloy","pall"]},curtain:{n:["curtain","drape","drapery","mantle","pall"]},whine:{v:["whine","grizzle","yammer","yawp","squeak",_483,"creak","screak","skreak"],n:["whine","n"]},coverage:{n:["coverage","reporting","reportage"]},sift:{v:["sift","sieve","strain"]},tabloid:{n:["tabloid","rag","sheet"]},overawe:{v:["overawe","cow"]},cow:{n:["cow","moo-cow"],v:["cow","v"]},cowboy:{n:["cowboy","cowpuncher","puncher","cowman","cattleman","cowpoke","cowhand","cowherd"]},coxswain:{n:["coxswain","cox"]},cyclooxygenase:{n:["cyclooxygenase","cox"]},chromium:{n:["chromium","cr"]},mutable:{a:["mutable","changeable"]},rocker:{n:["rocker","cradle"]},birthplace:{n:["birthplace","cradle","provenance","provenience"]},crap:{n:["crap","dirt","shit","shite","poop","turd"],v:["crap","v"]},hand:{n:["hand","deal","manus","mitt","paw"],v:["hand","v"]},softwood:{n:["softwood","deal"]},fawn:{v:["fawn","crawl","creep","cringe","cower","grovel","toady","truckle","bootlick","kowtow","kotow"],n:["fawn","n"]},crawl:{v:["crawl","creep"],n:["crawl","crawling","creep","creeping"]},crazy:{s:["crazy","wild","dotty","gaga","half-baked","screwball","softheaded"],n:["crazy","loony","looney","nutcase","weirdo"]},brainsick:{s:["brainsick","crazy","demented","disturbed","mad","sick","unbalanced","unhinged"]},dun:{n:["dun","fawn"],v:["dun","v"]},torment:{v:[_484,"rag","bedevil","crucify","dun","frustrate",_485,"excruciate","rack"],n:[_484,"n"]},shamble:{n:["shamble","shambling","shuffle","shuffling"],v:["shamble","v"]},creative:{a:["creative","originative"]},creativity:{n:["creativity","creativeness"]},godhead:{n:["godhead","lord","creator","maker","divine","almighty","jehovah"]},creature:{n:["creature","tool","puppet","wight"]},credibility:{n:["credibility","credibleness","believability"]},accredit:{v:["accredit","credit",_128,"recognise"]},recognition:{n:["recognition","credit","identification","acknowledgment","acknowledgement"]},realization:{n:["realization","realisation","recognition","fruition","actualization","actualisation"]},crime:{n:["crime","law-breaking"]},criminal:{s:["criminal","felonious"],n:["criminal","felon","crook","outlaw","malefactor"]},condemnable:{s:["condemnable","criminal","deplorable","reprehensible","vicious"]},critical:{s:["critical","decisive","vital"]},criticism:{n:["criticism","critique"]},criticize:{v:["criticize","criticise"]},croatia:{n:["croatia","hrvatska"]},loanblend:{n:["loanblend","loan-blend","hybrid"]},crossing:{n:[_482,"crosswalk","crossover"]},intersection:{n:["intersection","crossroad","crossway",_482,"carrefour","product"]},ford:{n:["ford",_482,"fording"]},"weight-lift":{v:["weight-lift","weightlift","press"]},iron:{v:["iron","press"],n:["iron","fe"],s:["iron","s"]},weigh:{v:["weigh","press","librate"]},urge:{v:["urge","press","exhort"],n:["urge",_372,"itch"]},imperativeness:{n:["imperativeness","insistence","insistency","press",_235,"instancy"]},"all-important,":{s:["all-important,","crucial","essential"]},crucial:{a:["crucial","important"],s:["crucial","s"]},deaden:{v:["deaden","blunt"]},dull:{v:["dull","blunt"],s:["dull","leaden","thudding","slow","sluggish","muffled","muted","softened"]},numb:{v:["numb","benumb","blunt","dull"],s:["numb","s"]},persecute:{v:["persecute","oppress"]},crystal:{n:["crystal","crystallization"]},cesium:{n:["cesium","caesium","cs"]},dense:{s:["dense","dim","dull","dumb","obtuse","slow","thick","heavy","impenetrable"]},"dead,":{s:["dead,","numb,","stagnant"]},cube:{v:["cube","dice"],n:["cube","n"]},prompt:{v:["prompt","remind","cue",_447,"instigate"],n:["prompt","prompting"],s:["prompt","s"]},cubic:{a:["cubic","three-dimensional"]},cult:{n:["cult","cultus"]},fad:{n:["fad","craze","furor","furore","cult","rage"]},cultural:{s:["cultural","ethnic","ethnical"]},laud:{v:["laud","extol","exalt","glorify","proclaim"]},predicate:{v:["predicate","proclaim"]},accumulative:{s:["accumulative","cumulative"]},contiguous:{s:["contiguous","immediate"]},cup:{v:["cup","transfuse"],n:["cup","cupful"]},remedy:{n:["remedy","curative","cure","therapeutic"],v:["remedy","relieve"]},curio:{n:["curio","curiosity","oddity","oddment","peculiarity","rarity"]},redress:{n:[_257,"remedy","remediation"],v:[_257,"v"]},damages:{n:["damages","amends","indemnity","indemnification","restitution","redress"]},curious:{s:["curious","funny","odd","peculiar","queer","rum","rummy","singular"]},currentness:{n:["currentness","currency","up-to-dateness"]},stream:{n:["stream","flow","current","watercourse"],v:["stream","v"]},current:{n:["current","stream"]},flow:{n:["flow","stream","flowing"],v:["flow","flux"]},presently:{r:["presently","currently"]},menstruate:{v:["menstruate","flow"]},soon:{r:["soon","shortly","presently"]},cursor:{n:["cursor","pointer"]},curl:{v:["curl","curve","kink","wave"],n:["curl","n"]},crook:{v:["crook","curve"],n:["crook","n"]},curvature:{n:["curvature","curve"]},curve:{n:["curve","bender"],v:["curve","v"]},lock:{n:["lock","curl","ringlet","whorl"],v:["lock",_488,"interlace"]},hands:{n:["hands","custody"]},"custom-made":{a:["custom-made","custom"],n:["custom-made","custom-built"]},customs:{n:["customs","custom","impost"]},custom:{n:["custom","tradition","usage","usance"],a:["custom","a"]},interlock:{v:[_488,"lock","mesh"],n:[_488,"n"]},gape:{v:["gape","yawn","yaw"]},perfume:{v:["perfume","scent","aromatize","aromatise"],n:["perfume","essence"]},odorize:{v:["odorize","odourise","scent"]},aroma:{n:["aroma","fragrance","perfume","scent"]},waver:{v:["waver","weave"],n:["waver",_362,"flicker"]},customize:{v:["customize","customise"]},"custom-make":{v:["custom-make","customize","customise","tailor-make"]},cute:{s:["cute","precious"]},cunning:{s:[_450,"cute"],n:[_450,"n"]},cutting:{s:[_253,"keen","knifelike","piercing","stabbing","lancinate","lancinating","edged","stinging"],n:[_253,"thinning","slip"]},carving:{n:["carving","cutting"]},clipping:{n:["clipping","cutting"]},czech:{a:["czech","czechoslovakian"],n:["czech","n"]},czechoslovakian:{n:["czechoslovakian","czechoslovak","czech"],a:["czechoslovakian","a"]},d:{n:["d"]},daily:{s:["daily","day-to-day","day-by-day","day-after-day"]},damn:{s:["damn","goddamn"],n:["damn","darn","hoot","shit","shucks"],r:["damn","r"],v:["damn","v"]},curse:{v:["curse","beshrew","damn","bedamn","anathemize","anathemise","imprecate","maledict","cuss","blaspheme","swear"],n:["curse",_484,"expletive","oath","swearing","swearword","cuss"]},decameter:{n:["decameter","dekameter","decametre","dekametre","dam","dkm"]},dam:{n:["dam","dike","dyke"]},dad:{n:["dad","dada","daddy","pa","papa","pappa","pop"]},clever:{s:["clever",_450,"ingenious"]},crafty:{s:["crafty",_450,"dodgy","foxy","guileful","knavish","slick","sly","tricksy","tricky","wily"]},wrong:{n:["wrong","damage","wrongfulness"],s:["wrong","incorrect"],r:["wrong","r"],a:["wrong","a"]},damage:{n:["damage","harm","hurt","scathe","impairment"]},dancing:{n:["dancing","dance","terpsichore","saltation"]},danu:{n:["danu","dana"]},risk:{n:["risk","peril","danger"],v:["risk","v"]},discredited:{s:["discredited","damaged","disgraced","dishonored","shamed"]},dancer:{n:["dancer","terpsichorean"]},dare:{n:["dare","daring"],v:["dare","v"]},sculpture:{n:["sculpture","carving"],v:["sculpture","v"]},nox:{n:["nox","night"]},loathsomeness:{n:["loathsomeness","repulsiveness","sliminess","vileness","lousiness","wickedness"]},nefariousness:{n:["nefariousness",_421,"vileness","ugliness"]},evil:{n:["evil","immorality",_421,"iniquity","evilness"],s:["evil","vicious"]},hyrax:{n:["hyrax","coney","cony","dassie","das"]},data:{n:["data","information"]},daughter:{n:["daughter","girl"]},davys:{n:["davys","davis"]},decibel:{n:["decibel","db"]},dubnium:{n:["dubnium","db","hahnium"]},tract:{n:["tract","parcel","pamphlet"]},delaware:{n:["delaware","de","del."]},abruptly:{r:["abruptly","suddenly","short","dead"]},dead:{s:["dead","drained","idle","deadened"],r:["dead","r"]},day:{n:["day","daytime","daylight"]},days:{n:["days","years"]},trader:{n:["trader","bargainer","dealer","monger"]},negligence:{n:["negligence","carelessness",_162,"nonperformance","neglectfulness"]},disregard:{n:[_300,"neglect"],v:[_300,"v"]},transaction:{n:["transaction","dealing","dealings"]},dean:{n:["dean","doyen"]},introduction:{n:[_349,"debut","launching","unveiling","entry"]},death:{n:["death","last","dying","demise","decease","expiry"]},debris:{n:["debris","dust","junk","rubble","detritus"]},"deaf,":{s:["deaf,","indifferent,"]},deafen:{v:["deafen","deaf"]},incorrectly:{r:["incorrectly","wrongly","wrong"]},faulty:{s:["faulty",_490,"wrong"]},"ill-timed":{s:["ill-timed","unseasonable","untimely","wrong"]},"amiss,":{s:["amiss,","awry,","haywire","wrong,"]},improper:{s:["improper","wrong","unconventional","unlawful"]},incorrect:{a:[_490,"wrong"],s:[_490,"s"]},madly:{r:["madly","insanely","deadly","deucedly","devilishly","frantically"]},deadly:{r:["deadly","lifelessly"],s:["deadly","mortal,","venomous","virulent","lethal","deathly","mortal"]},baneful:{s:["baneful","deadly","pernicious","pestilent"]},excommunicate:{v:["excommunicate","unchurch","curse"]},bane:{n:["bane","curse",_492,"nemesis"]},execration:{n:["execration","condemnation","curse"]},distinct:{s:["distinct","decided","distinguishable"]},decent:{s:["decent","nice"],r:["decent","r"]},decimal:{s:["decimal","denary"]},ten:{n:["ten","10","x","tenner","decade"],s:["ten","10","x"]},decade:{n:["decade","decennary","decennium"]},december:{n:["december","dec"]},cagey:{s:["cagey","cagy","canny","clever","chary"]},declination:{n:["declination","dec","regrets"]},resolution:{n:[_275,"declaration",_70,"resolving","solving"]},deep:{r:["deep","late"],s:["deep","rich"],n:["deep","n"]},deeply:{r:["deeply","deep"]},abstruse:{s:["abstruse","deep","recondite"]},cryptic:{s:["cryptic","cryptical","deep","inscrutable","mysterious","mystifying"]},thick:{s:["thick","deep"],r:["thick","thickly"],n:["thick","n"]},trench:{n:["trench","deep"],v:["trench","ditch"]},decreased:{a:["decreased","reduced"]},declared:{s:["declared","stated"]},kill:{v:["kill","defeat","obliterate"],n:["kill","n"]},frustration:{n:["frustration","defeat","thwarting","foiling"]},defeat:{n:["defeat","licking"],v:["defeat","v"]},profoundly:{r:["profoundly","deeply","intensely"]},disapprove:{v:["disapprove","reject"]},cull:{n:["cull","reject"],v:["cull","v"]},nonpayment:{n:["nonpayment","default","nonremittal"]},default:{n:["default","nonpayment","nonremittal"]},deer:{n:["deer","cervid"]},hazard:{n:["hazard","jeopardy","peril","risk","endangerment"],v:["hazard","v"]},defense:{n:["defense","defence","denial","demurrer","vindication"]},refutation:{n:["refutation","defense","defence"]},protest:{v:["protest","resist","dissent"],n:["protest","objection","dissent","protestation"]},defensive:{s:["defensive","justificative","justificatory"]},defendant:{n:["defendant","suspect"]},malefic:{s:["malefic","malevolent","malign","evil"]},uphold:{v:["uphold","maintain"]},conserve:{v:["conserve",_61,_60,"husband","economize","economise"],n:["conserve",_61,"conserves","preserves"]},defender:{n:["defender","withstander","guardian","protector","shielder"]},shaping:{n:[_494,"defining"],s:[_494,"s"]},deficit:{n:["deficit","shortage","shortfall"]},defined:{s:["defined","outlined"]},decidedly:{r:["decidedly","unquestionably","emphatically","definitely"]},hexadecimal:{a:["hexadecimal","hex"]},insertion:{n:["insertion",_349,"intromission"]},presentation:{n:["presentation",_349,"intro","presentment","demonstration"]},"ten-spot":{n:["ten-spot","ten"]},baleful:{s:["baleful","baneful","forbidding","menacing","minacious","minatory","ominous","sinister","threatening"]},falsely:{r:["falsely","incorrectly"]},delectable:{s:["delectable","delicious","luscious","pleasant-tasting","scrumptious","toothsome","yummy"]},delightful:{s:["delightful","delicious"]},measuredly:{r:["measuredly","deliberately"]},intentionally:{r:["intentionally","deliberately","designedly","purposely","advisedly"]},"clear-cut":{s:["clear-cut","distinct","trenchant"]},discrete:{s:["discrete","distinct"]},surrender:{v:[_263,"cede","deliver"],n:[_263,"n"]},extradite:{v:["extradite",_73,"deport"]},delicate:{s:["delicate","ticklish","touchy","soft","fragile","frail"]},finespun:{s:["finespun","delicate","hairsplitting"]},defective:{s:["defective","faulty"]},delight:{v:[_437,"enjoy","revel"],n:[_437,"delectation"]},please:{v:["please","delight"]},joy:{n:["joy",_437,"pleasure","joyousness","joyfulness"],v:["joy","v"]},insanely:{r:["insanely","crazily","dementedly","madly"]},impinge:{v:["impinge","encroach","entrench","trench"]},deluxe:{s:["deluxe","luxe","gilded","grand","luxurious","opulent","princely","sumptuous","lush"]},demand:{v:["demand","exact"],n:["demand","n"]},need:{n:["need","demand","want"],v:["need","v"]},requirement:{n:["requirement","demand"]},demonstration:{n:["demonstration","demo","monstrance","manifestation"]},thickly:{r:["thickly","thick"]},blockheaded:{s:["blockheaded","boneheaded","duncical","duncish","fatheaded","loggerheaded","thick","thickheaded","thick-skulled","wooden-headed"]},chummy:{s:["chummy","buddy-buddy","thick,","matey","pally","palsy-walsy"]},slurred:{s:["slurred","thick"]},midst:{n:["midst","thick"]},abhorrence:{n:["abhorrence","abomination","detestation","execration","loathing","odium"]},dell:{n:["dell","dingle"]},cabalistic:{s:["cabalistic","kabbalistic","qabalistic","cryptic","cryptical","sibylline"]},hideout:{n:["hideout","hideaway","den"]},lair:{n:["lair","den"]},demonstrate:{v:[_290,"march"]},attest:{v:["attest","certify","manifest",_290,"evidence"]},democratic:{s:["democratic","popular"]},resoluteness:{n:["resoluteness","firmness",_70,"resolution"]},abnegation:{n:["abnegation","self-abnegation","denial","self-denial","self-renunciation"]},denial:{n:["denial","disaffirmation"]},denmark:{n:["denmark","danmark"]},heavy:{s:["heavy","profound","sound","wakeless","leaden","labored","laboured","lumbering","ponderous","sonorous","lowering","sullen","threatening"],r:["heavy","heavily"]},legal:{s:["legal","sound","effectual"]},reasoned:{s:["reasoned","sound","well-grounded"]},healthy:{s:["healthy","intelligent","levelheaded","level-headed","sound","salubrious"]},fathom:{v:["fathom","sound"],n:["fathom","fthm"]},voice:{v:["voice","sound","vocalize","vocalise"],n:["voice","vocalization","vocalisation","vocalism","phonation","vox"]},strait:{n:["strait","sound"]},phone:{n:["phone","sound"],v:["phone","v"]},locomotion:{n:["locomotion","travel","motivity"]},department:{n:["department","section"]},evasion:{n:["evasion","nonpayment","escape","dodging","equivocation"]},falsification:{n:["falsification","falsifying","disproof","refutation","refutal","falsehood","misrepresentation"]},disproof:{n:["disproof","falsification","refutation"]},nourish:{v:["nourish",_251,"sustain"]},density:{n:["density","denseness"]},formative:{s:["formative",_494,"plastic"]},formation:{n:["formation","shaping"]},siding:{n:["siding",_74,"sidetrack"]},fatten:{v:["fatten","fat","plump"]},plank:{v:["plank","flump","plonk","plop","plunk","plump"],n:["plank","n"]},plummet:{v:["plummet","plump"]},dependent:{s:[_224,"dependant","drug-addicted","hooked","strung-out","qualified"],a:[_224,"subordinate"],n:[_224,"n"]},pendent:{s:[_496,_497,"dependent"],n:[_496,"n"]},dependant:{n:["dependant","dependent"],s:["dependant","s"]},outlive:{v:["outlive","outlast","survive"]},dependence:{n:["dependence","dependance","dependency"]},deviation:{n:["deviation","divergence","departure","difference","deviance"]},departure:{n:["departure","going","leaving"]},terminal:{n:[_320,"terminus","depot","pole"],s:[_320,"s"]},interpolation:{n:["interpolation","insertion"]},aberrant:{s:["aberrant","deviant","deviate"]},astuteness:{n:["astuteness",_498,_499,"depth","deepness"]},depth:{n:["depth","deepness"]},gladden:{v:["gladden","joy"]},rejoice:{v:["rejoice","joy"]},display:{n:["display","presentation","show",_415,"showing"],v:["display","v"]},resignation:{n:["resignation","surrender"]},encroach:{v:["encroach","infringe","impinge"]},provision:{n:["provision","supply","supplying","proviso"],v:["provision","purvey"]},diethylstilbesterol:{n:["diethylstilbesterol","des","stilbesterol"]},diethylstilbestrol:{n:["diethylstilbestrol","diethylstilboestrol","stilbestrol","stilboestrol","des"]},video:{n:["video","picture"]},painting:{n:["painting","picture"]},want:{v:["want","need","require"],n:["want","n"]},indigence:{n:["indigence","need","penury","pauperism","pauperization"]},motivation:{n:["motivation","motive","need","motivating"]},prerequisite:{n:["prerequisite","requirement"]},necessity:{n:["necessity",_486,"requirement","requisite","necessary"]},deserve:{v:["deserve","merit"]},densely:{r:["densely","thickly"]},couturier:{n:["couturier","designer"]},designer:{n:["designer","intriguer"]},designation:{n:["designation","identification"]},appellation:{n:["appellation","denomination","designation","appellative"]},designing:{s:["designing","scheming"],n:["designing","n"]},desirable:{s:["desirable","suitable","worthy"]},desire:{v:["desire","want"]},craved:{s:["craved","desired"]},desperate:{s:["desperate","dire","heroic","do-or-die,"]},despairing:{s:["despairing","desperate"]},urgently:{r:["urgently","desperately"]},chandelier:{n:["chandelier",_497,"pendent"]},pendant:{n:[_497,"pendent"],s:[_497,"s"]},dessert:{n:["dessert","sweet","afters"]},contempt:{n:["contempt",_480,"scorn","despite","disrespect"]},destination:{n:["destination","terminus"]},destiny:{n:["destiny","fate"]},destruction:{n:["destruction","demolition","wipeout","devastation"]},detailed:{s:["detailed",_155,"elaborated"]},demolish:{v:["demolish","destroy","pulverize","pulverise"]},destroy:{v:["destroy","ruin","destruct"]},detective:{n:["detective","investigator","tec"]},destroyed:{s:["destroyed","ruined"]},contingent:{n:["contingent","detail"]},detroit:{n:["detroit","motown"]},detector:{n:["detector","demodulator","sensor"]},depleted:{s:["depleted","low"]},humble:{s:["humble","low","lowly","modest","small","menial"],v:["humble","v"]},abject:{s:["abject","low","low-down",_500,"scummy","scurvy","unhopeful"]},moo:{v:["moo","low"]},gradient:{n:["gradient","slope"]},"deciding,":{s:["deciding,","determinant","determinative","determining,"]},shrewdness:{n:["shrewdness","astuteness","perspicacity","perspicaciousness"]},impersonate:{v:["impersonate","portray"]},germany:{n:["germany","deutschland","frg"]},prowl:{v:["prowl","lurch"]},crushing:{s:["crushing","devastating"],n:["crushing","n"]},annihilative:{s:["annihilative","annihilating","devastating","withering"]},annihilating:{s:["annihilating","devastating","withering"]},wallow:{v:["wallow","rejoice",_54,"welter"]},exuberate:{v:["exuberate","exult","rejoice",_54,"jubilate"]},decode:{v:["decode","decrypt","decipher"]},lack:{n:["lack","deficiency","want"],v:["lack","v"]},privation:{n:["privation","want","deprivation","neediness"]},developed:{s:["developed","highly-developed"]},ussher:{n:["ussher","usher"]},impudent:{s:["impudent","insolent","snotty-nosed","flip"]},flick:{v:["flick","flip","thumb","riffle","leaf","riff","ruffle"],n:["flick","n"]},somersault:{n:["somersault","somerset","summersault","summerset","somersaulting","flip"]},developing:{s:["developing","underdeveloped"],n:["developing","n"]},development:{n:["development","developing","evolution"]},expose:{v:["expose",_415,"display"],n:["expose","unmasking"]},devon:{n:["devon","devonshire"]},exploitation:{n:["exploitation","development","victimization","victimisation","using"]},monster:{n:["monster","fiend","devil","demon","ogre","teras"]},hellion:{n:["hellion","heller","devil"]},devil:{n:["devil","deuce","dickens","fiend","demon","daemon","daimon"],v:["devil","v"]},satan:{n:["satan","devil","lucifer","beelzebub"]},decigram:{n:["decigram","dg"]},diagnostic:{s:["diagnostic","symptomatic"]},diagnosis:{n:["diagnosis","diagnosing"]},negotiation:{n:["negotiation","dialogue","talks"]},dialogue:{n:["dialogue","dialog","duologue"]},diameter:{n:["diameter","diam"]},rhombus:{n:["rhombus","rhomb","diamond"]},diamond:{n:["diamond","adamant"]},diary:{n:["diary","journal"]},order:{v:["order","prescribe","dictate","tell","enjoin","say"],n:["order","ordering"]},enactment:{n:["enactment","passage"]},ephemeron:{n:["ephemeron","ephemeral"]},dick:{n:["dick","gumshoe","hawkshaw"]},dictionary:{n:["dictionary","lexicon"]},humiliate:{v:["humiliate","mortify","chagrin","humble","abase"]},television:{n:["television","telecasting","tv","video"]},pose:{v:["pose","impersonate","personate","posture"],n:["pose","n"]},diet:{n:["diet","dieting"]},disagree:{v:["disagree","differ","dissent","disaccord","discord"]},suppression:{n:["suppression","crushing","quelling","stifling","curtailment"]},excavate:{v:["excavate","dig","hollow","unearth"]},labor:{v:["labor","labour","toil","fag","travail","grind","drudge","dig","moil"],n:["labor","labour","toil","proletariat"]},dig:{v:["dig","delve"],n:["dig","jab","excavation"]},excavation:{n:["excavation","digging","dig"]},dietary:{a:["dietary","dietetic","dietetical"]},difficulty:{n:["difficulty","difficultness"]},dignity:{n:["dignity","lordliness","gravitas","self-respect","self-regard","self-worth"]},unmanageable:{a:[_502,"difficult"],s:[_502,"s"]},dilemma:{n:["dilemma","quandary"]},digit:{n:["digit","dactyl","figure"]},finger:{n:["finger","fingerbreadth","digit"],v:["finger","thumb"]},dimmed:{a:["dimmed","dim"]},dim:{s:["dim","faint","shadowy","vague","wispy","subdued"],v:["dim","dip"],a:["dim","a"]},blur:{v:["blur","dim","slur","blear"],n:["blur","fuzz"]},increase:{n:["increase","increment","growth","step-up"]},differently:{r:["differently","otherwise"]},diminish:{v:["diminish","belittle"]},pickpocket:{n:["pickpocket","cutpurse","dip"]},freak:{n:["freak","monster","monstrosity"]},giant:{n:["giant","goliath","behemoth","monster","colossus","hulk","heavyweight","whale"],s:["giant","s"]},direct:{s:["direct","verbatim","unmediated"],v:["direct","v"],r:["direct","r"],a:["direct","a"]},lineal:{a:["lineal","direct"]},send:{v:["send","direct"]},diplomat:{n:["diplomat","diplomatist"]},diploma:{n:["diploma","sheepskin"]},diplomatic:{a:["diplomatic","diplomatical"]},regulate:{v:["regulate","regularize","regularise","order","govern","modulate"]},decree:{n:["decree","edict","fiat","order","rescript"],v:["decree","v"]},orderliness:{n:["orderliness","order","methodicalness"]},ordering:{n:["ordering","order","ordination"]},van:{n:["van","caravan"]},concenter:{v:["concenter","concentre","focalize","focalise","focus"]},directing:{s:["directing","directional","directive","guiding"]},drag:{v:["drag","trail"],n:["drag","n"]},conductor:{n:["conductor","director"]},director:{n:["director","manager"]},dirt:{s:["dirt","ungraded"],n:["dirt","filth","grime","soil","stain","grease","grunge"]},scandal:{n:["scandal","dirt","outrage"]},soil:{n:["soil","dirt"],v:["soil","v"]},parturiency:{n:["parturiency","labor","labour","confinement","lying-in","travail","childbed"]},pluto:{n:["pluto","dis","orcus"]},renovation:{n:["renovation","redevelopment",_157,"restoration","refurbishment"]},disable:{v:["disable","invalid","incapacitate",_312,"disenable"]},disability:{n:["disability","disablement",_312,"impairment"]},disabled:{s:["disabled","handicapped"],n:["disabled","handicapped"]},defeated:{s:["defeated","disappointed","discomfited","foiled","frustrated","thwarted"],n:["defeated","discomfited"]},vanish:{v:["vanish","disappear","fly","vaporize"]},disappear:{v:["disappear","vanish"]},calamity:{n:["calamity","catastrophe","disaster","tragedy","cataclysm"]},catastrophe:{n:["catastrophe","disaster","cataclysm"]},disk:{n:["disk","disc","saucer"],v:["disk","v"]},excuse:{v:["excuse","explain",_297,"exempt","condone","pardon"],n:["excuse","alibi","exculpation","self-justification"]},fly:{v:["fly","fell","vanish","aviate","pilot","wing"],n:["fly","n"]},corrective:{s:["corrective","disciplinary","disciplinal"],n:["corrective","restorative"]},mining:{n:["mining","excavation","minelaying"]},disavowal:{n:["disavowal","disclaimer"]},uncontrollable:{s:["uncontrollable","uncorrectable","unmanageable"]},unwieldy:{a:["unwieldy","unmanageable"],s:["unwieldy","s"]},disappointment:{n:["disappointment","letdown"]},inhibition:{n:["inhibition","suppression"]},elephantine:{s:["elephantine","gargantuan","giant","jumbo"]},colossus:{n:["colossus","behemoth","giant","heavyweight","titan"]},disco:{n:["disco","discotheque"]},disclosure:{n:["disclosure","revelation","revealing"]},disclose:{v:["disclose","expose","uncover"]},deduction:{n:["deduction",_301,"synthesis","entailment","implication"]},rebate:{n:["rebate","discount"]},discount:{n:[_301,"deduction"],v:[_301,"v"]},converse:{v:["converse","discourse"],s:["converse","reversed","transposed"]},discourse:{v:[_506,"discuss"],n:[_506,"n"]},discussion:{n:["discussion","treatment",_506,"give-and-take","word"]},sermon:{n:["sermon",_506,"preaching"]},warn:{v:["warn","discourage","admonish","monish"]},deter:{v:["deter","discourage"]},harrow:{v:["harrow","disk"]},mutilate:{v:["mutilate","mangle","mar"]},maul:{v:["maul","mangle"],n:["maul","sledge","sledgehammer"]},ascertained:{s:["ascertained","discovered","observed"]},discrimination:{n:["discrimination","secernment","favoritism","favouritism"]},disband:{v:["disband","dissolve"]},dish:{n:["dish","saucer","dishful"],v:["dish","v"]},disorder:{v:[_377,"disarray"],n:[_377,"upset"]},disorderliness:{n:["disorderliness","disorder"]},disposal:{n:["disposal","disposition"]},debunk:{v:["debunk","expose"]},queer:{v:["queer","expose","scupper","endanger","peril"],s:["queer","s"],n:["queer","n"]},uncover:{v:["uncover","expose"]},territory:{n:["territory","soil"]},land:{n:["land","ground","soil","earth"],v:["land","shore"]},inclination:{n:[_267,"disposition","tendency","inclining"]},disposition:{n:["disposition","temperament"]},disperse:{v:["disperse","dissipate",_200,"dispel"]},feast:{v:["feast","banquet","junket"],n:["feast","n"]},zone:{v:["zone","district"],n:["zone","zona"]},district:{n:["district","territory","dominion"],v:["district","v"]},mellowly:{r:["mellowly","mellow"]},high:{s:["high","mellow"],n:["high","heights"],r:["high","richly","luxuriously"],a:["high","high-pitched"]},"laid-back":{s:["laid-back","mellow"]},soft:{a:["soft",_199,"diffused"],s:["soft",_503,"flabby","flaccid"],r:["soft","r"]},divine:{s:["divine","elysian","inspired","godlike","godly"],n:["divine","n"]},providential:{s:["providential","divine"]},cleric:{n:["cleric","churchman","divine","ecclesiastic"]},knife:{v:["knife","stab"],n:["knife","n"]},distant:{s:["distant","remote","removed"],a:["distant","remote"]},aloof:{s:["aloof","distant","upstage"]},degage:{s:["degage","detached","uninvolved"]},classifiable:{s:["classifiable","distinctive"]},distinctive:{s:["distinctive","typical"]},distribution:{n:["distribution","dispersion"]},baffle:{v:["baffle","regulate"]},distributor:{n:["distributor","distributer"]},allocator:{n:["allocator","distributor"]},shift:{v:["shift","dislodge","reposition"],n:["shift","shifting","displacement"]},differentiation:{n:["differentiation","distinction"]},honkytonk:{n:["honkytonk","dive"]},distinguished:{s:["distinguished","grand","imposing","magisterial"]},disturbed:{s:["disturbed","maladjusted"]},disquieted:{s:["disquieted",_508,"disturbed","upset","worried"]},diverse:{s:["diverse","various"]},"divers,":{s:["divers,","diverse"]},nontaxable:{a:["nontaxable","exempt"]},defame:{v:["defame","slander","smirch","asperse","denigrate","calumniate","smear","sully","besmirch"]},daub:{v:["daub","smear"],n:["daub","n"]},division:{n:["division","partition","partitioning","segmentation","sectionalization","sectionalisation","variance"]},gawky:{s:["gawky","clumsy","clunky","ungainly","unwieldy"]},distressing:{s:["distressing","distressful","disturbing","perturbing","troubling","worrisome","worrying"]},"disk-jockey":{v:["disk-jockey","disc-jockey","dj"]},languish:{v:["languish","fade"]},irrepressible:{s:["irrepressible","uncontrollable"]},indocile:{s:["indocile","uncontrollable","ungovernable","unruly"]},decimeter:{n:["decimeter","decimetre","dm"]},deciliter:{n:["deciliter","decilitre","dl"]},disassociate:{v:["disassociate","dissociate","divorce","disunite","disjoint"]},divorce:{n:["divorce","divorcement"],v:["divorce","v"]},divided:{s:["divided","shared","dual-lane"]},dissuade:{v:["dissuade","deter"]},sophisticate:{v:["sophisticate","doctor"]},doctor:{n:["doctor","dr.","doc","physician","md","medico"],v:["doctor","v"]},document:{n:["document","papers"]},documentary:{a:["documentary","documental"],n:["documentary","docudrama","infotainment"]},doctrine:{n:["doctrine","philosophy","ism"]},subtraction:{n:["subtraction","deduction","minus"]},airiness:{n:["airiness",_442,"buoyancy"]},fragility:{n:["fragility",_442,"breakability","frangibleness","frangibility"]},dainty:{n:["dainty",_442,"goody","kickshaw","treat"],s:["dainty","nice","overnice","prissy","squeamish","exquisite"]},daintiness:{n:["daintiness",_442,"fineness"]},dodge:{n:["dodge","dodging","scheme"],v:["dodge","v"]},contrivance:{n:[_286,"stratagem","dodge"]},rabbet:{n:["rabbet","rebate"]},attested:{s:["attested","authenticated","documented"]},andiron:{n:["andiron","firedog","dog","dog-iron"]},frank:{n:["frank","frankfurter","hotdog","dog","wiener","wienerwurst","weenie"],s:["frank","s"],v:["frank","v"]},frump:{n:["frump","dog"]},doll:{n:["doll","dolly"]},palpate:{v:["palpate","feel"]},kingdom:{n:["kingdom","land","realm"]},domain:{n:["domain","demesne","land"]},domestic:{s:["domestic","domesticated"]},prevailing:{s:["prevailing","prevalent","predominant","dominant","rife"]},gay:{s:["gay","queer","homophile,","festal","festive","merry","jocund","jolly","jovial","mirthful"],n:["gay","n"]},fagot:{n:["fagot","faggot","fag","fairy","nance","pansy","queen","queer","poof","poove","pouf"],v:["fagot","v"]},disarray:{n:[_468,"disorderliness"],v:[_468,"v"]},rowdiness:{n:["rowdiness","rowdyism",_510,"disorderliness"]},don:{n:["don","father"],v:["don","v"]},preceptor:{n:["preceptor","don"]},dominican:{n:["dominican","blackfriar"]},tendency:{n:["tendency",_267,"trend"]},partition:{v:["partition","zone"],n:["partition","divider"]},doubly:{r:["doubly","double","twice"]},bivalent:{a:["bivalent","double","divalent"]},doubling:{n:["doubling","double"]},done:{s:["done","through"]},dose:{n:["dose","dosage"],v:["dose","v"]},dot:{v:["dot","stud","constellate"],n:["dot","dit"]},destine:{v:["destine","fate","doom","designate"]},doom:{n:["doom","doomsday"],v:["doom","v"]},donor:{n:["donor","giver","presenter","bestower","conferrer"]},drug:{v:["drug","dose"]},doorway:{n:["doorway","door","threshold"]},"heaven-sent":{s:["heaven-sent","providential","miraculous"]},specialization:{n:["specialization","specialisation","differentiation","specialty","speciality","specialism"]},windsock:{n:["windsock","sock","air-sleeve","drogue"]},flee:{v:["flee","fly"]},"tent-fly":{n:["tent-fly","rainfly","fly"]},deplorable:{s:["deplorable","distressing","lamentable","pitiful","sad","sorry","execrable",_500,"woeful","wretched"]},skin:{v:["skin","peel","pare","scrape"],n:["skin","tegument","cutis"]},whittle:{v:["whittle","pare"]},enfeeble:{v:["enfeeble","debilitate","drain"]},drain:{n:["drain","drainpipe","drainage"],v:["drain","v"]},landmark:{n:["landmark","watershed"]},lugworm:{n:["lugworm","lug","lobworm"]},lugsail:{n:["lugsail","lug"]},twelve:{s:["twelve","12","xii","dozen"],n:["twelve","12","xii","dozen"]},animate:{v:[_513,"recreate","reanimate","revive","renovate","repair",_19,"vivify","revivify"],a:[_513,"a"]},haunt:{n:["haunt","hangout","resort","repair"],v:["haunt","obsess","ghost","stalk"]},tons:{n:["tons","dozens","heaps","lots","piles","scores","stacks","loads","rafts","slews","wads","oodles","gobs","scads","lashings"]},dramatic:{s:["dramatic","spectacular","striking"]},postmark:{v:["postmark","frank"]},bespoke:{s:["bespoke","bespoken","made-to-order","tailored","tailor-made"]},devisal:{n:["devisal","contrivance"]},"lash-up":{n:["lash-up","contrivance"]},dredge:{v:["dredge","drag"]},scuff:{v:["scuff","drag"],n:["scuff","n"]},draco:{n:["draco","dragon"]},dragon:{n:["dragon","tartar","firedrake"]},gemini:{n:["gemini","twin","twins"]},tail:{n:["tail","shadow","shadower","empennage"],v:["tail","v"]},apparition:{n:["apparition","phantom","phantasm","phantasma","fantasm","shadow","specter","spectre"]},driving:{s:["driving","impulsive"],n:["driving","n"]},freewheel:{v:["freewheel","drift"]},stray:{v:["stray","err","drift"],s:["stray","s"]},drink:{v:["drink","tope","imbibe"],n:["drink","drinking","boozing","drunkenness","crapulence"]},toast:{v:["toast","drink","pledge","salute","wassail"],n:["toast","n"]},dream:{v:["dream",_515,"woolgather","stargaze"],n:["dream","dreaming"]},driven:{s:["driven","impelled","goaded"]},swim:{v:["swim","drown"],n:["swim","n"]},global:{s:["global",_516,"world,","worldwide","world-wide"]},populace:{n:["populace","public","world"]},earth:{n:["earth","world","globe","ground"]},"dressed,":{s:["dressed,","dressed-up"]},dressed:{s:["dressed","polished"]},appareled:{s:["appareled","attired","dressed","garbed","garmented","habilimented","robed"]},careworn:{s:["careworn","drawn","haggard","raddled","worn"]},intoxicated:{s:["intoxicated","drunk"],a:["intoxicated","drunk","inebriated","ripped","gone"]},drunkard:{n:["drunkard","drunk","rummy","sot",_517,"wino"]},draftsman:{n:["draftsman","drawer","draughtsman","draftsperson"]},dry:{s:["dry","teetotal","juiceless","ironic","ironical","wry"],n:["dry","prohibitionist"]},dried:{s:["dried","dehydrated","desiccated"]},drinking:{n:["drinking","imbibing","imbibition"]},lottery:{n:["lottery","drawing"]},drawing:{n:["drawing","draftsmanship","drafting"]},ascribable:{s:["ascribable","due","imputable","referable"]},dryer:{n:["dryer","drier"]},token:{n:["token","item"]},dump:{v:["dump","underprice","ditch"],n:["dump","wasteyard","waste-yard","dumpsite"]},shit:{n:["shit","dump"],v:["shit","v"]},tailor:{v:["tailor","orient"],n:["tailor","seamster","sartor"]},east:{n:["east","orient","eastward","e"]},leaning:{n:[_268,"propensity","tendency"],s:[_268,"s"]},dandy:{n:["dandy","dude","fop",_518,"sheik","beau","swell","clotheshorse"],s:["dandy","s"]},fellow:{n:["fellow","dude","buster"]},durable:{s:["durable","indestructible","perdurable","undestroyable","long-wearing","lasting","long-lasting","long-lived"]},duet:{n:["duet","duette","duo"]},darmstadtium:{n:["darmstadtium","ds"]},durham:{n:["durham","shorthorn"]},duration:{n:["duration","length","continuance"]},"e-mail":{v:["e-mail","email","netmail"]},videodisk:{n:["videodisk","videodisc","dvd"]},dumb:{s:["dumb","mute","silent"]},speechless:{s:["speechless","dumb"]},duty:{n:["duty","tariff","responsibility","obligation"]},dynamic:{a:["dynamic","dynamical"]},e:{n:["e"]},einsteinium:{n:["einsteinium","es","e"]},dynamics:{n:["dynamics","kinetics"]},each:{r:["each","apiece"]},earn:{v:["earn","garner","win"]},gasp:{n:["gasp","pant"],v:["gasp","v"]},trousers:{n:["trousers","pant"]},ground:{n:["ground","earth"],v:["ground","strand"]},early:{r:["early","betimes"]},"early,":{s:["early,","former,","other,"]},footstool:{n:["footstool","footrest","ottoman","tuffet"]},soonest:{r:["soonest","earliest"]},auricle:{n:["auricle","pinna","ear"]},earthquake:{n:["earthquake","quake","temblor","seism"]},easterly:{s:["easterly","eastern"]},slowly:{r:["slowly","slow","easy","tardily"]},easily:{r:["easily","easy"]},sentient:{a:["sentient","animate"]},enliven:{v:["enliven","liven",_519,"animate"]},animize:{v:["animize","animise","animate"]},inspire:{v:[_447,_513,_519,"enliven","exalt"]},wring:{v:["wring","wrench"],n:["wring","n"]},echo:{v:["echo","recall"],n:["echo","reverberation","replication"]},repeat:{v:["repeat","echo","reiterate","ingeminate","iterate","restate","retell"],n:["repeat","repetition"]},ecological:{a:["ecological","ecologic","bionomical","bionomic"]},corrode:{v:["corrode","eat","rust"]},ramp:{v:["ramp","rage","storm"],n:["ramp","incline"]},ebon:{s:["ebon","ebony"]},propel:{v:["propel","impel"]},mule:{n:["mule","scuff"]},eclipse:{v:["eclipse","occult"],n:["eclipse","occultation"]},swimming:{n:[_520,"swim"],s:[_520,"s"]},excerpt:{v:["excerpt","extract"],n:["excerpt","excerption",_441,"selection"]},distill:{v:["distill",_441,"distil"]},educe:{v:["educe","evoke","elicit","extract"]},infusion:{n:["infusion","extract"]},eating:{n:["eating","feeding"]},miniature:{n:["miniature","toy","illumination"]},plaything:{n:["plaything","toy"]},frequent:{v:["frequent","haunt"]},profligacy:{n:["profligacy","dissipation",_522,"licentiousness","looseness"]},diarrhea:{n:["diarrhea","diarrhoea","looseness"]},economy:{n:["economy","saving","thriftiness"]},ecology:{n:["ecology","bionomics"]},crispen:{v:["crispen","toast","crisp"]},goner:{n:["goner","toast"]},economic:{s:["economic","economical"],a:["economic","economical"]},chock:{n:["chock","wedge"],r:["chock","chock-a-block"]},hacek:{n:["hacek","wedge"]},bomber:{n:["bomber","grinder","hero","hoagie","hoagy","sub","submarine","torpedo","wedge","zep"]},inundate:{v:["inundate","deluge","submerge"]},tactic:{n:["tactic","tactics",_386,"manoeuvre"]},retrograde:{v:[_524,_166,"rehash"],s:[_524,"retrogressive"]},retirement:{n:["retirement","retreat"]},hideaway:{n:["hideaway","retreat"]},eden:{n:["eden","paradise","nirvana","heaven","shangri-la"]},"ball-shaped":{s:["ball-shaped","global","globose","globular","orbicular","spheric","spherical"]},yawl:{n:["yawl","dandy"],v:["yawl","v"]},isolated:{s:[_278,"stray","quarantined","marooned","stranded"]},digress:{v:["digress","stray","divagate","wander"]},editing:{n:["editing","redaction"]},version:{n:[_105,"variant","variation","edition"]},baron:{n:["baron","king","magnate","mogul","power","tycoon"]},electricity:{n:["electricity","power"]},might:{n:["might","mightiness","power"]},exponent:{n:["exponent","power","index"]},office:{n:["office","power"]},emended:{s:["emended","edited"]},educated:{s:["educated","enlightened"]},educator:{n:["educator","pedagogue","pedagog"]},elder:{s:["elder","older","sr."],n:["elder","senior"]},egg:{n:["egg","eggs"]},potency:{n:["potency","effectiveness",_43,"potence"]},effectiveness:{n:["effectiveness","effectivity","effectualness","effectuality"]},efficiently:{r:["efficiently","expeditiously"]},elect:{s:["elect","elite"],n:["elect","n"]},efficaciously:{r:["efficaciously","effectively"]},self:{n:["self","ego"]},ego:{n:["ego","egotism","self-importance"]},elbow:{n:["elbow","cubitus"]},elaborate:{s:[_155,"luxuriant"],v:[_155,"lucubrate","expatiate","exposit","enlarge","expand","expound","dilate"]},effort:{n:["effort","exertion","travail","sweat"]},lento:{r:["lento","slowly"]},mate:{n:["mate","fellow"],v:["mate","v"]},chap:{n:["chap","fellow","feller","fella","lad","gent","blighter","cuss","bloke"]},electric:{s:["electric","galvanic","galvanizing","galvanising"],a:["electric","electrical"]},eighth:{s:["eighth","8th"],n:["eighth","n"]},"one-eighth":{n:["one-eighth","eighth"]},elective:{a:["elective","elected"],s:["elective","facultative"]},eight:{s:["eight","8","viii"],n:["eight","8","viii","eighter","octad","ogdoad","octonary","octet"]},"eight-spot":{n:["eight-spot","eight"]},prime:{v:["prime","ground","undercoat"],s:["prime","meridian"],n:["prime","n"]},ejaculation:{n:["ejaculation","interjection"]},electron:{n:["electron","negatron"]},naiant:{s:["naiant","swimming"]},liquid:{s:["liquid",_520,"limpid"],n:["liquid","liquidness","liquidity"],a:["liquid","a"]},elegant:{s:["elegant","graceful","refined"]},eliminate:{v:[_287,"annihilate","extinguish","eradicate","decimate"]},obviate:{v:["obviate","eliminate"]},extinguish:{v:["extinguish","eliminate"]},eleven:{s:["eleven","11","xi"],n:["eleven","11","xi"]},jacklight:{v:["jacklight","jack"]},jackfruit:{n:["jackfruit","jak","jack"]},laborer:{n:["laborer","labourer","jack"]},mariner:{n:["mariner","seaman","tar","jack-tar","jack","seafarer","gob"]},deluge:{v:["deluge","flood","inundate","swamp"],n:["deluge","n"]},reprise:{v:["reprise","reprize","repeat","recapitulate"]},recur:{v:["recur","repeat"]},disjunct:{s:["disjunct","isolated"]},em:{n:["em","pica"]},embarrassed:{s:["embarrassed","humiliated","mortified"]},abashed:{s:["abashed","chagrined","embarrassed"]},inseminate:{v:["inseminate","fecundate","fertilize","fertilise","sow"]},howl:{v:["howl","ululate","wail","roar","yawl","yaup","wrawl","yammer","yowl"],n:["howl","howling","ululation"]},arse:{n:["arse","arsehole","asshole","bunghole"]},interpretation:{n:["interpretation","reading",_105,"interpreting","rendition","rendering"]},translation:{n:["translation","rendering",_105,"displacement"]},emergent:{s:["emergent","emerging"]},emerging:{s:["emerging","rising"]},issue:{v:["issue","emerge","egress","supply"],n:["issue","publication","issuing","issuance","number"]},aroused:{s:["aroused","emotional","excited","horny","randy","ruttish","steamy"]},passive:{a:["passive","inactive"],s:["passive","peaceful"]},dormant:{a:["dormant","inactive"],s:["dormant","hibernating,","torpid"]},nonoperational:{a:["nonoperational","inactive"]},potential:{n:[_526,"potentiality","potency"],a:[_526,"possible"],s:[_526,"s"]},utilized:{s:["utilized","utilised","employed"]},quieten:{v:["quieten","hush","quiet","quiesce"]},underscore:{v:["underscore",_527,"emphasize","emphasise"],n:["underscore","underline"]},"premier,":{s:["premier,","prime,"]},checkmate:{v:["checkmate","mate"],n:["checkmate","mate"]},spouse:{n:["spouse","partner","mate"]},teammate:{n:["teammate","mate"]},evening:{n:["evening","eve","even","eventide"]},mum:{s:["mum","silent"],n:["mum","n"]},en:{n:["en","nut"]},conglomerate:{n:["conglomerate","empire"],v:["conglomerate","v"]},empire:{n:["empire","imperium"]},equable:{s:["equable","even-tempered","good-tempered","placid"]},empiric:{a:["empiric","empirical"]},empirical:{a:["empirical","empiric"]},enact:{v:["enact","reenact"]},enclosure:{n:["enclosure","inclosure","enclosing","envelopment"]},encoding:{n:["encoding","encryption"]},rendition:{n:["rendition","rendering","interpretation"]},dateless:{s:["dateless","endless","sempiternal","timeless","undated"]},endless:{s:["endless","eternal","interminable"]},offspring:{n:["offspring","progeny","issue","materialization","materialisation"]},encouraging:{s:["encouraging","supporting"]},endorse:{v:[_343,"indorse"]},certify:{v:["certify",_343,"indorse"]},endorsement:{n:["endorsement","indorsement","blurb"]},sanction:{n:[_294,_242,"endorsement","indorsement","warrant","imprimatur"],v:[_294,"v"]},last:{v:["last","endure"],r:["last","lastly","finally"],s:["last","last-place","lowest","utmost"],n:["last","n"]},foe:{n:["foe","enemy"]},enemy:{n:["enemy","foe","foeman","opposition"]},likely:{s:["likely","potential"],r:["likely","r"],a:["likely","a"]},transformation:{n:["transformation","translation","transmutation","shift"]},ablaze:{s:["ablaze","aflame","aroused"]},stimulated:{s:["stimulated","stirred","aroused"]},underline:{v:[_527,"underscore"],n:[_527,"n"]},engineer:{n:["engineer","technologist"],v:["engineer","v"]},engaged:{s:["engaged","meshed","intermeshed","occupied"]},booked:{s:["booked","engaged","set-aside,"]},engaging:{s:["engaging","piquant"]},locomotive:{n:["locomotive","engine"],a:["locomotive","locomotor"]},engineering:{n:["engineering","technology"]},enhancement:{n:["enhancement","sweetening"]},love:{v:["love","enjoy"],n:["love","passion"]},young:{n:["young","offspring","youth"],a:["young","immature"],s:["young","s"]},enormous:{s:["enormous","tremendous"]},enough:{r:["enough","plenty"],n:["enough","sufficiency"],s:["enough","s"]},enlargement:{n:["enlargement","blowup","magnification"]},expansion:{n:["expansion","enlargement","elaboration"]},enroll:{v:["enroll",_123,"enter","enrol","recruit"]},registration:{n:["registration","enrollment","enrolment"]},inquiry:{n:["inquiry","enquiry","research"]},"ablaze,":{s:["ablaze,","inflamed","reddened","afire,","aflame,","aflare,","alight,"]},embark:{v:["embark","enter","ship"]},insert:{v:["insert","infix","enter",_64,"enclose","inclose"],n:["insert","inset"]},accede:{v:["accede","enter"]},figure:{v:["figure","enter"],n:["figure","fig"]},enter:{v:["enter","participate"]},enterprise:{n:["enterprise","enterprisingness","initiative","go-ahead",_46,"endeavour"]},exuberance:{n:["exuberance","enthusiasm","ebullience"]},entertainment:{n:["entertainment","amusement"]},pain:{v:["pain","anguish","hurt"],n:["pain","nuisance","painfulness","hurting"]},ache:{v:["ache","smart","hurt","yearn","yen","pine","languish"],n:["ache","aching"]},detriment:{n:["detriment","hurt"]},suffering:{n:[_529,"hurt","woe"],s:[_529,"s"]},distress:{n:["distress","hurt",_529,"distraint"],v:["distress","v"]},injury:{n:["injury","hurt","harm","trauma"]},entrepreneur:{n:["entrepreneur","enterpriser"]},envelope:{n:["envelope","gasbag"]},envision:{v:["envision","foresee"]},tuck:{v:["tuck","insert"],n:["tuck","n"]},"cut-in":{n:["cut-in","insert"]},assent:{v:["assent","accede","acquiesce"],n:["assent","acquiescence"]},epic:{a:["epic","epical"],s:["epic","heroic","larger-than-life"]},sequence:{n:["sequence","episode","succession","successiveness"]},episode:{n:["episode","installment","instalment"]},equivalent:{n:["equivalent","eq"],s:["equivalent","tantamount,"]},equality:{n:["equality","equivalence","equation","par"]},equation:{n:["equation","equating"]},equipped:{s:["equipped","weaponed"],a:["equipped","equipt"]},furnished:{a:["furnished","equipped"]},gesticulate:{v:["gesticulate","gesture","motion"]},gesture:{n:["gesture","motion"],v:["gesture","v"]},fairness:{n:["fairness","equity","fair-mindedness","candor","candour"]},rapier:{n:["rapier","tuck"]},era:{n:["era","epoch"]},erbium:{n:["erbium","er"]},numeral:{n:["numeral","number"],a:["numeral",_530,"numeric"]},erotic:{s:["erotic","titillating"]},succession:{n:["succession","sequence"]},pornography:{n:["pornography","porno","porn","erotica","smut"]},erroneousness:{n:["erroneousness","error"]},elude:{v:["elude","escape","evade","bilk"]},miss:{v:["miss","escape","lack","lose"],n:["miss","misfire"]},escape:{n:["escape","leak","leakage","outflow","escapism","flight"],v:["escape","v"]},comeliness:{n:["comeliness","fairness","loveliness","beauteousness"]},paleness:{n:["paleness","blondness","fairness","pallidity"]},specially:{r:["specially","especially"]},particularly:{r:["particularly","peculiarly","especially","specially"]},girl:{n:["girl","miss","missy","fille"]},substantive:{a:[_400,"essential"],s:[_400,"s"]},essential:{s:[_486,"indispensable"],n:[_486,"n"],a:[_486,"a"]},lividness:{n:["lividness","lividity","luridness","paleness","pallidness","pallor","wanness","achromasia"]},peculiarly:{r:["peculiarly","particularly"]},established:{s:[_99,"naturalized"],a:[_99,"constituted"]},examen:{n:["examen","examination"]},interrogation:{n:["interrogation","examination","interrogatory"]},girlfriend:{n:["girlfriend","girl"]},establishment:{n:[_125,"validation","ecesis"]},institution:{n:["institution","establishment"]},meaty:{s:["meaty","substantive"]},inexplicably:{r:["inexplicably","curiously","oddly","peculiarly"]},estonia:{n:["estonia","esthonia"]},affluent:{s:["affluent","flush","loaded","moneyed","wealthy","substantial"],n:["affluent","n"]},solid:{s:["solid","strong",_399,"unanimous","whole","self-colored","self-coloured"],n:["solid","solidness"]},significant:{s:["significant","substantial"],a:["significant","important"]},ageless:{s:["ageless","aeonian","eonian","eternal","everlasting","perpetual","unending","unceasing"]},ethical:{s:["ethical",_477,"honourable"]},ethiopia:{n:["ethiopia","yaltopya","abyssinia"]},heathen:{s:["heathen","heathenish","pagan","ethnic"],n:["heathen","pagan","gentile","infidel"]},europium:{n:["europium","eu"]},evaluation:{n:["evaluation","valuation","rating"]},sluice:{v:["sluice","flush"],n:["sluice","sluiceway","penstock"]},feeder:{n:["feeder","tributary","confluent","affluent"]},finally:{r:["finally","eventually"]},ultimately:{r:["ultimately","finally"]},everyday:{s:["everyday","mundane","quotidian",_84,"unremarkable","workaday"]},everywhere:{r:["everywhere","everyplace"]},tell:{v:["tell",_359,"narrate","recount","recite"]},evidence:{n:[_359,"grounds"],v:[_359,"v"]},discernible:{s:["discernible","evident","observable"],a:["discernible","discernable"]},evolution:{n:["evolution","phylogeny","phylogenesis"]},x:{n:["x","ex"],s:["x","s"]},"ex-wife":{n:["ex-wife","ex"]},"ex-husband":{n:["ex-husband","ex"]},example:{n:[_141,"lesson","illustration","instance","representative"]},admonitory:{s:["admonitory","cautionary","exemplary","monitory","warning,","admonishing","reproachful","reproving"]},emblematic:{s:["emblematic","exemplary","typic","emblematical","symbolic","symbolical"]},excellence:{n:["excellence","excellency"]},excellent:{s:["excellent","first-class","fantabulous","splendid","ripping"]},demur:{v:["demur","except"],n:["demur","demurral","demurrer"]},squirt:{v:["squirt","eject"],n:["squirt","n"]},exception:{n:["exception","exclusion","elision"]},"especial,":{s:["especial,","exceptional","particular,","special"]},exceeding:{s:["exceeding","exceptional",_531,"prodigious","surpassing"]},repletion:{n:["repletion",_195,"satiety","satiation"]},glut:{n:["glut","oversupply","surfeit"],v:["glut","v"]},flood:{v:["flood","oversupply","glut"],n:["flood","flowage","overflow",_228,"floodlight","photoflood","inundation","deluge","torrent","alluvion"]},excessive:{s:["excessive","extravagant","exuberant","overweening","inordinate","undue","unreasonable"]},delirious:{s:["delirious","excited","frantic","mad","unrestrained","hallucinating"]},excitement:{n:[_178,"excitation","inflammation","fervor","fervour"]},exhilaration:{n:["exhilaration","excitement"]},jet:{n:["jet","squirt","spurt","spirt"],v:["jet","gush"],s:["jet","s"]},"pip-squeak":{n:["pip-squeak","squirt"]},ejection:{n:["ejection","exclusion","expulsion","riddance"]},excommunication:{n:["excommunication","exclusion",_532,"excision"]},expulsion:{n:["expulsion","projection","ejection"]},extrusion:{n:["extrusion","expulsion"]},"single,":{s:["single,","undivided","exclusive"]},execution:{n:["execution","implementation","executing"]},performance:{n:["performance","execution"]},operation:{n:["operation","functioning","performance","procedure","surgery"]},exemption:{n:["exemption","immunity","freedom"]},parade:{v:["parade",_415,"march","troop","promenade"]},exhibition:{n:["exhibition","exposition","expo"]},existent:{a:["existent","existing"]},real:{a:["real","existent"],s:["real","tangible"],r:["real","r"]},very:{r:["very","really","real","rattling"]},veridical:{s:["veridical","real"]},inflate:{v:["inflate","expand","amplify"]},deform:{v:["deform",_16,"strain"]},puree:{v:["puree","strain"]},filter:{v:["filter","filtrate","strain"]},tense:{v:["tense","strain"]},song:{n:["song","strain","vocal"]},striving:{n:["striving","nisus","pains","strain"]},tenor:{n:["tenor","strain"]},elongate:{v:["elongate","stretch"],s:["elongate","elongated"]},prediction:{n:["prediction","anticipation","prevision","foretelling","forecasting","prognostication"]},excursion:{n:["excursion","jaunt","outing","junket","expedition","sashay"]},expending:{n:["expending","expenditure"]},outgo:{n:["outgo","spending","expenditure","outlay"],v:["outgo","v"]},expense:{n:["expense","disbursal","disbursement"]},"own,":{s:["own,","ain"]},experienced:{a:["experienced","experient"]},experiment:{n:["experiment","experimentation"]},experimental:{s:["experimental","data-based","observational"]},technical:{s:["technical","expert"],a:["technical","technological","proficient"]},mechanical:{a:["mechanical","technical"]},expertness:{n:["expertness","expertise"]},exhalation:{n:["exhalation","expiration"]},halitus:{n:["halitus","exhalation"]},denotative:{s:["denotative","explicit"],a:["denotative","denotive"]},explicit:{a:["explicit","expressed"],s:["explicit","s"]},explorer:{n:["explorer","adventurer"]},export:{n:["export","exportation"]},cheery:{s:["cheery","gay","sunny"]},homosexual:{n:["homosexual","homophile","homo","gay"]},faggot:{v:["faggot","fagot"],n:["faggot","n"]},vulnerability:{n:["vulnerability","exposure"]},expressed:{s:["expressed","uttered","verbalized","verbalised"],a:["expressed","a"]},sung:{n:["sung","song"]},linear:{s:["linear","elongate","running,"],a:["linear","one-dimensional","additive"]},contort:{v:["contort","deform",_16,"wring"]},extensive:{s:["extensive","extended"]},elongated:{s:["elongated","extended","lengthened","prolonged"]},"drawn-out":{s:["drawn-out","extended","lengthy","prolonged","protracted"]},elongation:{n:["elongation","extension"]},extension:{n:[_270,"lengthiness","prolongation"]},propagation:{n:["propagation","extension"]},generation:{n:["generation","multiplication","propagation"]},genesis:{n:["genesis","generation"]},coevals:{n:["coevals","contemporaries","generation"]},external:{s:["external","international","outside,","extraneous","outside"]},"outdoor,":{a:["outdoor,","out-of-door","outside"]},purify:{v:["purify","sublimate","distill","purge","sanctify"]},extraordinary:{s:["extraordinary","over-the-top","sinful"]},extreme:{s:["extreme","utmost,","uttermost,"]},extremely:{r:["extremely","exceedingly","super","deathly"]},highly:{r:["highly","extremely"]},eye:{v:["eye","eyeball"],n:["eye","oculus","optic"]},eyebrow:{n:["eyebrow","brow","supercilium"]},f:{n:["f"]},farad:{n:["farad","f"]},fluorine:{n:["fluorine","f"]},fabulous:{s:["fabulous","mythic","mythical","mythologic","mythological","fab"]},grimace:{n:["grimace","face"]},facility:{n:["facility","readiness","installation"]},adeptness:{n:["adeptness","adroitness","deftness","facility","quickness"]},lining:{n:["lining","facing","liner"]},facing:{n:["facing","cladding","veneer"]},liner:{n:["liner","lining"]},gene:{n:["gene","cistron","factor"]},divisor:{n:["divisor","factor"]},factory:{n:["factory","mill","manufactory"]},staff:{n:["staff","faculty","stave"]},faculty:{n:["faculty","module"]},failing:{n:["failing","flunk","weakness"]},failure:{n:["failure","loser","nonstarter"]},fair:{s:["fair","fairish","reasonable"],a:["fair","just"],n:["fair","n"],r:["fair","r"]},honest:{s:["honest","fair"],a:["honest","honorable"]},bonny:{s:["bonny","bonnie","comely","fair","sightly"]},bazaar:{n:["bazaar","fair","bazar"]},fairy:{n:["fairy","faery","faerie","fay","sprite"]},fake:{s:["fake","false","faux","imitation","simulated"],n:["fake","sham","postiche"],v:["fake","v"]},bogus:{s:["bogus","fake","phony","phoney","bastard"]},juke:{n:["juke","fake","jook"]},imposter:{n:["imposter","impostor","pretender","fake","faker","fraud","sham","shammer","pseudo","pseud"]},dropping:{s:["dropping","falling"]},familiar:{s:["familiar","intimate"],n:["familiar","n"]},"conversant,":{s:["conversant,","familiar,"]},waterfall:{n:["waterfall","falls"]},fondness:{n:["fondness","fancy","partiality"]},celebrated:{s:["celebrated","famed","far-famed","famous","illustrious","notable","noted","renowned","historied","storied"]},family:{n:["family","fellowship","folk","kinfolk","kinsfolk","sept","phratry","household","house","home","menage"]},syndicate:{n:["syndicate","mob","family"]},fantastic:{s:["fantastic","fantastical","wild","grand","howling,","marvelous","marvellous","rattling,","terrific","tremendous","wonderful","wondrous"]},antic:{s:["antic","fantastic","fantastical","grotesque"],n:["antic","joke","prank","trick","caper","put-on"],v:["antic","v"]},reliable:{a:[_335,"dependable"],s:[_335,"s"]},fantasy:{v:["fantasy","fantasize","fantasise"],n:["fantasy","phantasy"]},farmer:{n:["farmer","husbandman","granger","sodbuster"]},"dark-skinned":{s:["dark-skinned","dusky","swart","swarthy"]},fat:{s:["fat","fertile","productive","rich","juicy"],v:["fat","v"],a:["fat","a"],n:["fat","n"]},fatty:{a:["fatty","fat"],n:["fatty","n"]},fatness:{n:["fatness","fat","blubber","avoirdupois"]},flying:{s:["flying","quick","fast"],n:["flying","n"]},bewitching:{s:["bewitching","captivating","enchanting","enthralling","entrancing","fascinating"]},absorbing:{s:["absorbing","engrossing","fascinating","gripping","riveting"]},father:{n:["father","father-god","fatherhood","padre","begetter"],v:["father","v"]},forefather:{n:["forefather","father","sire"]},quicker:{r:["quicker","faster"]},quickest:{r:["quickest","fastest"]},fatigue:{n:["fatigue","weariness","tiredness"],v:["fatigue","v"]},fatal:{s:["fatal","fateful"]},fateful:{s:["fateful","fatal","foreboding,","portentous"]},fatso:{n:["fatso","fatty","roly-poly","butterball"]},privilege:{v:["privilege","favor","favour"],n:["privilege","n"]},favor:{v:["favor","favour"],n:["favor","favour"]},prefer:{v:["prefer","favor","favour"]},affectionateness:{n:["affectionateness","fondness","lovingness","warmth"]},affection:{n:["affection","affectionateness","fondness","tenderness","heart","warmness","warmheartedness","philia"]},advantageous:{a:["advantageous",_536,"favourable"]},golden:{s:["golden",_536,"favourable","lucky","prosperous","halcyon"]},favorable:{a:[_536,"favourable"],s:[_536,"s"]},favored:{s:["favored","favorite,","favourite,","best-loved","pet","preferred","preferent"]},favorite:{s:[_537,"favourite"],n:[_537,"favourite"]},"front-runner":{n:["front-runner",_537,"favourite"]},darling:{n:["darling",_537,_538,"pet","dearie","deary","ducky"],s:["darling","s"]},fax:{v:["fax","telefax","facsimile"],n:["fax","n"]},facsimile:{n:["facsimile","fax","autotype"],v:["facsimile","v"]},reverence:{v:["reverence","fear","revere","venerate"],n:["reverence","n"]},fear:{v:["fear","dread"],n:["fear","reverence","awe","veneration","fearfulness","fright"]},fledge:{v:["fledge","feather","flight"]},"fast-flying":{s:["fast-flying","flying"]},flight:{n:["flight","flying"],v:["flight","v"]},prerogative:{n:["prerogative","privilege","perquisite"]},federal:{n:["federal","fed"],s:["federal","s"]},february:{n:["february","feb"]},captive:{s:["captive","absorbed","engrossed","enwrapped","intent","wrapped","confined","imprisoned","jailed"],n:["captive","n"]},fortunate:{s:["fortunate","golden","rosy"]},feeding:{n:["feeding","alimentation"]},felt:{v:["felt","matt-up","matte","mat"]},female:{s:["female","distaff"]},feminist:{n:["feminist","libber"]},ferry:{n:["ferry","ferrying","ferryboat"]},"cast-iron":{s:["cast-iron","iron"]},fence:{n:["fence","fencing"],v:["fence","v"]},festival:{n:["festival","fete"]},fetish:{n:["fetish","fetich"]},juju:{n:["juju","voodoo","hoodoo","fetish","fetich"]},fever:{n:["fever","febrility","febricity","pyrexia","feverishness"]},airfield:{n:["airfield","field"]},field:{n:["field","theater","theatre"]},fifth:{s:["fifth","5th"],n:["fifth","n"]},"one-fifth":{n:["one-fifth","fifth"]},fiber:{n:["fiber","fibre"]},roughage:{n:["roughage","fiber"]},fifteen:{s:["fifteen","15","xv"],n:["fifteen","15","xv"]},trajectory:{n:["trajectory","flight"]},boisterous:{s:["boisterous","fierce","rough","knockabout","rambunctious","robustious","rumbustious","unruly"]},cutthroat:{s:["cutthroat","fierce","bowelless"]},fierce:{s:["fierce","tearing","vehement","violent","trigger-happy"]},fifty:{s:["fifty","50","l"],n:["fifty","50","l"]},file:{v:["file","register"]},leach:{v:["leach","percolate","strip"],n:["leach","leaching"]},woof:{n:["woof","weft","filling","pick"]},flipper:{n:["flipper","fin"]},louver:{n:["louver","louvre","fin"]},five:{n:["five","5","v","cinque","quint","quintet","fivesome","quintuplet","pentad","fin","phoebe"],s:["five","5","v"]},funds:{n:["funds","finances"]},financing:{n:["financing","funding"]},finder:{n:["finder","viewfinder","discoverer","spotter"]},rationale:{n:["rationale","principle"]},finely:{r:["finely","fine","delicately","exquisitely"]},ticket:{v:["ticket","fine"],n:["ticket","n"]},fine:{n:["fine","mulct","amercement"],r:["fine","r"],v:["fine","v"]},tumble:{v:["tumble","topple"],n:["tumble","n"]},finland:{n:["finland","suomi"]},finished:{s:["finished","ruined"]},discharged:{s:["discharged","dismissed","fired","laid-off","pink-slipped"]},finnish:{n:["finnish","suomi"]},fireplace:{n:["fireplace","hearth"]},invade:{v:["invade","occupy",_539,"infest"]},foremost:{r:[_540,"first"],s:[_540,"frontmost"]},first:{r:["first","firstly","foremost"],s:["first",_540,"world-class","1st"],n:["first","n"]},inaugural:{s:["inaugural","initiative","initiatory","first","maiden"],n:["inaugural","n"]},fiscal:{a:["fiscal","financial"]},fisher:{n:["fisher","pekan"]},fisherman:{n:["fisherman","fisher"]},"five-spot":{n:["five-spot","five"]},securely:{r:["securely","firmly"]},firmware:{n:["firmware","microcode"]},fishing:{n:["fishing","sportfishing"]},fitness:{n:["fitness","fittingness"]},slate:{n:["slate","ticket","slating"]},sag:{v:["sag","droop","swag","flag"],n:["sag","droop"]},flag:{n:["flag","flagstone"],v:["flag","v"]},iris:{n:["iris","flag","fleur-de-lis"]},masthead:{n:["masthead","flag"]},florida:{n:["florida","fl","fla."]},"two-dimensional":{s:["two-dimensional","2-dimensional","flat"],a:["two-dimensional","a"]},bland:{s:["bland","flat","flavorless","flavourless","insipid","savorless","savourless","vapid"]},categoric:{s:["categoric","categorical","flat","unconditional"],a:["categoric","a"]},flatcar:{n:["flatcar","flatbed","flat"]},season:{v:["season","flavor",_281,"harden"]},flavor:{n:["flavor","flavour"],v:["flavor","v"]},fleece:{v:["fleece","shear"],n:["fleece","n"]},wool:{n:["wool","fleece","woolen","woollen"]},sheepskin:{n:["sheepskin","fleece"]},fleet:{s:["fleet","swift"],v:["fleet","v"]},tractability:{n:["tractability","tractableness","flexibility"]},flexibility:{n:["flexibility","flexibleness"]},pulp:{n:["pulp","flesh","mush"]},compromising:{a:["compromising","conciliatory","flexible"]},flexible:{s:[_541,"whippy"],a:[_541,"flexile"]},elastic:{s:["elastic",_541,_542,"pliant"]},aimless:{s:["aimless","drifting","floating",_311,"vagrant"]},floating:{n:["floating","natation"],s:["floating","s"]},inauguration:{n:["inauguration","inaugural","startup"]},provoke:{v:["provoke","stimulate","evoke"]},diskette:{n:["diskette","floppy"]},floral:{s:["floral","flowered"]},firenze:{n:["firenze","florence"]},fiver:{n:["fiver","five-spot"]},categorical:{a:["categorical","categoric"],s:["categorical","s"]},fluid:{s:["fluid","mobile","liquid","runny","unstable"]},fluent:{s:["fluent","fluid","liquid","smooth"]},influenza:{n:["influenza","flu","grippe"]},liquefy:{v:["liquefy","flux","liquify","liquidize","liquidise"]},flux:{n:["flux","fluxion"],v:["flux","v"]},aviator:{n:["aviator","aeronaut","airman","flier","flyer"]},flier:{n:["flier","flyer"]},planar:{a:["planar","two-dimensional"]},peg:{n:["peg","pin","thole","tholepin","rowlock","oarlock","leg","pegleg","nog"]},pivot:{n:["pivot","pin"],v:["pivot","swivel"]},politic:{s:["politic","smooth","suave","bland"]},"self-feeder":{n:["self-feeder","feeder"]},eater:{n:["eater","feeder"]},parchment:{n:["parchment","sheepskin","lambskin"]},foam:{v:["foam","froth","fizz","effervesce","sparkle"],n:["foam","froth"]},fermium:{n:["fermium","fm"]},downpour:{n:["downpour","cloudburst","deluge","waterspout","torrent","pelter","soaker"]},fog:{n:["fog","fogginess","murk","murkiness"],v:["fog","v"]},tighten:{v:["tighten","fasten"]},"adrift,":{s:["adrift,","afloat,","aimless","directionless","planless","rudderless","undirected"]},foldable:{s:["foldable","foldaway","folding,"]},focalization:{n:["focalization","focalisation","focusing"]},focused:{s:["focused","focussed"],a:["focused","focussed"]},tribe:{n:["tribe","folk"]},folk:{n:["folk","folks"]},food:{n:["food","nutrient"]},flicker:{v:["flicker","flick","waver","flitter",_362,"quiver"],n:["flicker","spark","glint"]},fresh:{s:["fresh","impertinent","impudent","overbold","smart","saucy","sassy","wise","unused","sweet","unfermented","invigorated","refreshed","reinvigorated","new","novel"],a:["fresh","sweet"],r:["fresh","r"]},pursue:{v:["pursue","follow"]},succeed:{v:["succeed","follow","win"]},postdate:{v:["postdate","follow"]},following:{s:["following","next"],n:["following","followers"]},"following,":{s:["following,","undermentioned"]},foot:{v:["foot","hoof","pick"],n:["foot","ft","pes"]},infantry:{n:["infantry","foot"]},afforest:{v:["afforest","forest"]},forest:{n:["forest","woodland","timberland","timber","wood","woods"],v:["forest","v"]},constrained:{s:["constrained","forced","strained"]},brow:{n:["brow","forehead"]},footwear:{n:["footwear","footgear"]},extraneous:{s:["extraneous",_239,_543,"impertinent","orthogonal"]},foreign:{a:[_239,"strange"],s:[_239,"s"]},everlastingly:{r:["everlastingly","eternally","forever","evermore"]},courtly:{s:["courtly","formal","stately"]},pitchfork:{v:["pitchfork","fork"]},crotch:{n:["crotch","fork"]},fork:{n:["fork","crotch"],v:["fork","v"]},branching:{n:["branching","ramification","fork","forking"],s:["branching","s"]},forbid:{v:["forbid","prohibit","interdict","proscribe","veto","disallow","nix"]},forbidden:{s:["forbidden","out,","prohibited","proscribed","taboo","tabu","verboten"]},fortify:{v:[_295,"fort"]},fortress:{n:["fortress","fort"]},garrison:{n:["garrison","fort"]},fore:{r:["fore","forward"],n:["fore","n"]},forth:{r:["forth",_231,"onward"]},forward:{r:[_231,"forwards","frontward","frontwards","forrad","forrard"],s:[_231,"s"]},advancing:{s:["advancing",_231,"forward-moving"]},disregarded:{s:["disregarded","forgotten"]},unexpressed:{s:["unexpressed","unsaid","unstated","unuttered","unverbalized","unverbalised","unvoiced","unspoken"]},dodo:{n:["dodo","fogy","fogey","fossil"]},forty:{s:["forty","40","xl","twoscore"],n:["forty","40","xl"]},once:{r:["once","formerly","erstwhile","erst"]},"former,":{s:["former,","late,","previous,"]},"erstwhile,":{s:["erstwhile,","former,","old","onetime,","one-time,","quondam,","sometime,"]},fortunately:{r:["fortunately","fortuitously","luckily"]},stiffen:{v:["stiffen","tighten","constrain"]},bunker:{n:["bunker","trap","dugout"]},ambush:{n:["ambush","ambuscade","trap"],v:["ambush","scupper","bushwhack","waylay","lurk","ambuscade"]},"flim-flam":{v:["flim-flam","trick","fob","fox"]},dodger:{n:["dodger","fox","slyboots"]},shard:{n:["shard","sherd","fragment"]},francium:{n:["francium","fr"]},fourthly:{r:["fourthly","fourth"]},fourth:{s:["fourth","4th","quaternary"],r:["fourth","r"],n:["fourth","n"]},"one-fourth":{n:["one-fourth","fourth","one-quarter",_144,"quartern"]},four:{s:["four","4","iv"],n:["four","4","iv","tetrad","quatern","quaternion","quaternary","quaternity","quartet","quadruplet","foursome"]},"four-spot":{n:["four-spot","four"]},franchise:{n:["franchise","enfranchisement","dealership"]},twitch:{v:["twitch","jerk"],n:["twitch","twitching","vellication"]},yank:{v:["yank","jerk"],n:["yank","n"]},jerky:{n:["jerky","jerk"],s:["jerky","s"]},fountain:{n:["fountain","fount","jet"]},spring:{n:["spring","fountain","outflow",_228,"springtime"],v:["spring","v"]},honestly:{r:["honestly","candidly","frankly","aboveboard"]},"mercenary,":{s:["mercenary,","free-lance,","freelance,"]},freelance:{a:["freelance","free-lance","self-employed"],n:["freelance","n"]},freelancer:{n:["freelancer","freelance","free-lance","independent"]},fraud:{n:["fraud","fraudulence","dupery","hoax","humbug","put-on"]},hilltop:{n:["hilltop","brow"]},newly:{r:["newly","freshly","fresh","new"]},bracing:{s:["bracing","brisk","fresh","refreshing","refreshful","tonic"],n:["bracing","n"]},shanghai:{v:["shanghai","impress"]},genitalia:{n:["genitalia","genitals","privates","crotch"]},frequency:{n:["frequency","frequence","oftenness"]},branched:{s:["branched","branching","ramose","ramous","ramate"]},french:{a:["french","gallic"]},freight:{n:["freight","freightage"]},freshman:{s:["freshman","first-year"],n:["freshman","fresher"]},newcomer:{n:["newcomer","fledgling","fledgeling",_545,"neophyte","freshman","newbie","entrant"]},friendly:{s:["friendly","well-disposed"]},friend:{n:["friend","quaker"]},acquaintance:{n:["acquaintance","friend","acquaintanceship","familiarity","conversance","conversancy"]},frog:{n:["frog","gaul","toad","anuran","batrachian","salientian"]},strengthen:{v:["strengthen","fortify"]},frequently:{r:["frequently","often","oftentimes","oft","ofttimes"]},friday:{n:["friday","fri"]},frost:{v:["frost","ice"],n:["frost","icing","hoar","hoarfrost","rime"]},frown:{v:["frown","glower","lour","lower"],n:["frown","scowl"]},"flash-frozen":{s:["flash-frozen","quick-frozen","frozen"]},frigid:{s:["frigid","frosty","frozen","glacial","icy","wintry"]},"frozen,":{s:["frozen,","rooted,","stock-still"]},amply:{r:["amply","fully","richly"]},farther:{r:[_546,"further"],s:[_546,"s"]},further:{r:[_206,"farther"],s:[_206,"farther"],v:[_206,"v"]},fuji:{n:["fuji","fujiyama","fujinoyama","fuji-san"]},gaiety:{n:["gaiety","playfulness","merriment"]},fundamental:{s:["fundamental","profound","rudimentary","underlying"]},fishy:{s:["fishy","funny","shady",_493,"suspicious"]},"future,":{s:["future,","next","succeeding,"]},future:{n:["future","hereafter","futurity"]},"running,":{s:["running,","operative","functional","working,"]},functional:{s:["functional","usable","useable","operable","operational"]},sandbag:{v:["sandbag","stun"]},funky:{s:["funky","low-down"]},funeral:{n:["funeral","obsequy"]},furthermore:{r:["furthermore","moreover"]},g:{n:["g","gee","g-force"]},gigabyte:{n:["gigabyte","gibibyte","g","gb","gib"]},thousand:{n:["thousand","1000","m","k","chiliad","g","grand","thou","yard"],s:["thousand","1000","m","k"]},guanine:{n:["guanine","g"]},gram:{n:["gram","gramme","gm","g"]},bleary:{s:["bleary","blurred","blurry","foggy","fuzzy","hazy","muzzy","blear","bleary-eyed","blear-eyed"]},fuzzed:{s:["fuzzed","fuzzy"]},georgia:{n:["georgia","ga","ga.","sakartvelo"]},gallium:{n:["gallium","ga"]},tabun:{n:["tabun","ga"]},gauge:{n:["gauge","gage"],v:["gauge","v"]},fusion:{n:["fusion","merger","unification"]},baseless:{s:["baseless","groundless","idle","unfounded","unwarranted","wild"]},veranda:{n:["veranda","verandah","gallery"]},galax:{n:["galax","galaxy","wandflower","beetleweed","coltsfoot"]},unconvincing:{a:["unconvincing","flimsy"],s:["unconvincing","s"]},onionskin:{n:["onionskin","flimsy"]},chemise:{n:["chemise","sack","shift","shimmy","slip","teddy"]},cozy:{s:["cozy",_535,"informal","cosy","snug"],n:["cozy","n"]},untie:{v:["untie","undo","loosen","unbrace","unlace"]},relax:{v:["relax","loosen","unstrain","unlax","unwind","unbend","decompress"]},gardening:{n:["gardening","horticulture"]},garlic:{n:["garlic","ail"]},accelerator:{n:["accelerator","gas",_316,"gun"]},flatulence:{n:["flatulence","flatulency","gas"]},gasoline:{n:["gasoline","gasolene","gas","petrol"]},bifurcate:{s:["bifurcate","biramous","branched","forked","fork-like","forficate","pronged","prongy"]},torture:{v:[_485,"excruciate","torment"],n:[_485,_484,"torturing"]},badgering:{n:["badgering","worrying",_484,"bedevilment"]},harassment:{n:["harassment",_484,"molestation"]},agony:{n:["agony",_484,_485,_529,"excruciation"]},anguish:{n:["anguish",_484,"torture"],v:["anguish","v"]},gathering:{n:["gathering","assemblage"]},tone:{v:["tone","strengthen","inflect","modulate","chant","intone"],n:["tone","step"]},gigabit:{n:["gigabit","gbit","gb"]},gilbert:{n:["gilbert","gb","gi"]},sarin:{n:["sarin","gb"]},gigahertz:{n:["gigahertz","ghz","gigacycle","gc"]},cosmopolitan:{s:["cosmopolitan","ecumenical","oecumenical","general","universal","worldwide","world-wide"],n:["cosmopolitan","cosmopolite"]},gadolinium:{n:["gadolinium","gd"]},soman:{n:["soman","gd"]},eccentric:{n:[_332,"flake","oddball","geek"],a:[_332,"nonconcentric"],s:[_332,"s"]},mousse:{v:["mousse","gel"]},gelatin:{n:["gelatin","gel","jelly","gelatine"]},gaea:{n:["gaea","gaia","ge"]},germanium:{n:["germanium","ge"]},sex:{n:["sex","gender","sexuality"],v:["sex","v"]},jewel:{n:["jewel","gem"],v:["jewel","v"]},muffin:{n:["muffin","gem"]},gem:{n:["gem","gemstone","stone","treasure"]},broadly:{r:["broadly","loosely","generally"]},docile:{s:["docile","gentle","teachable"]},gentle:{s:["gentle","soft"],v:["gentle","v"]},pacify:{v:["pacify","lenify","conciliate","assuage","appease","mollify","placate","gentle","gruntle"]},geneva:{n:["geneva","hollands","geneve","genf"]},acquiring:{n:["acquiring","getting"]},geographic:{a:["geographic","geographical"]},gastrointestinal:{a:["gastrointestinal","gi"]},"g.i.":{v:["g.i.","gi"]},lightly:{r:["lightly","softly","gently","light"]},gently:{r:["gently","mildly"]},genetic:{a:[_547,"genetical"],s:[_547,"s"]},genic:{a:["genic",_547,"genetical"]},familial:{s:["familial",_547,"hereditary","inherited","transmitted","transmissible"]},gibraltar:{n:["gibraltar","calpe"]},ghost:{v:["ghost","ghostwrite"],n:["ghost","shade","spook","wraith","specter","spectre"]},ghostwriter:{n:["ghostwriter","ghost"]},improbable:{s:["improbable","unbelievable","unconvincing","unlikely","marvelous","marvellous","tall,"],a:["improbable","unlikely"]},geography:{n:["geography","geographics"]},giving:{n:["giving","gift"],s:["giving","s"]},endowment:{n:["endowment","gift","talent"]},distortion:{n:["distortion","overrefinement","straining",_485,"twisting","deformation"]},geological:{a:["geological","geologic"]},presenter:{n:["presenter","sponsor"]},talented:{a:["talented","gifted"]},spear:{n:["spear","gig","fizgig","fishgig","lance","shaft"]},aura:{n:["aura","aureole","halo","nimbus","glory","gloriole"]},glory:{n:["glory","resplendence","resplendency","glorification"]},glance:{n:["glance","glimpse"],v:["glance","peek","glint"]},beaming:{s:["beaming","glad","beamy","effulgent","radiant","refulgent"]},glad:{s:["glad","happy"],n:["glad","n"]},gladiolus:{n:["gladiolus","gladiola","glad"]},turgidity:{n:["turgidity","turgidness","flatulence"]},glaze:{v:["glaze","glass"]},glass:{v:["glass","glaze"],n:["glass","glassful"]},methamphetamine:{n:["methamphetamine","methedrine","meth","deoxyephedrine","chalk","crank","glass","ice","shabu","trash"]},spectacles:{n:["spectacles","specs","eyeglasses","glasses"]},going:{n:["going","sledding"]},bejewel:{v:["bejewel","jewel"]},bloodshed:{n:["bloodshed","gore"]},gore:{n:["gore","panel"]},idol:{n:["idol","god"]},deity:{n:["deity","divinity","god","immortal"]},capricorn:{n:["capricorn","goat"]},medieval:{s:["medieval","mediaeval","gothic"],a:["medieval","mediaeval"]},gnome:{n:["gnome","dwarf"]},gnu:{n:["gnu","wildebeest"]},grab:{v:["grab","seize"],n:["grab","n"]},epicure:{n:["epicure","gourmet","gastronome",_548,"foodie"]},gospel:{n:["gospel","gospels","evangel"]},governor:{n:["governor","regulator"]},exhausted:{s:["exhausted","dog-tired","fagged","fatigued","spent","washed-out","worn-out,","gone"],a:["exhausted","spent"]},bygone:{s:["bygone","bypast","departed","foregone","gone"]},computable:{s:["computable","estimable"]},great:{s:["great","outstanding"]},"graduate,":{s:["graduate,","postgraduate"]},calibrate:{v:["calibrate","graduate","fine-tune"]},alumnus:{n:["alumnus","alumna","alum","graduate","grad"]},gradation:{n:["gradation","graduation","step"]},commencement:{n:["commencement","graduation"]},gradational:{s:["gradational","gradatory","graduated"]},calibrated:{a:["calibrated","graduated"]},glower:{v:["glower","glare"],n:["glower","n"]},grey:{s:["grey","gray","grey-haired","gray-haired","grey-headed","gray-headed","grizzly","hoar","hoary","white-haired","greyish","grayish"],v:["grey","gray"],n:["grey","gray"]},gray:{n:["gray","gy","grayness","grey","greyness"],s:["gray","s"],v:["gray","v"]},grip:{n:["grip","grasp","traction"],v:["grip","v"]},grandma:{n:["grandma","grandmother","granny","grannie","gran","nan","nanna"]},exalted:{s:["exalted","elevated",_549,"grand","high-flown","high-minded","lofty","rarefied","rarified","idealistic","noble-minded"]},expansive:{s:["expansive","grand","heroic","talkative"]},granulate:{v:["granulate","grain"]},ingrain:{v:["ingrain","grain"]},texture:{n:["texture","grain"]},grain:{n:["grain","caryopsis","cereal"],v:["grain","v"]},eatage:{n:["eatage","forage",_310,"pasturage","grass"]},supergrass:{n:["supergrass","grass"]},impressiveness:{n:["impressiveness",_426,"magnificence","richness"]},grandfather:{n:["grandfather","gramps","granddad","grandad","granddaddy","grandpa"]},graphic:{s:["graphic","lifelike","pictorial","vivid","graphical"],a:["graphic","graphical"]},fleeceable:{s:["fleeceable","green","gullible"]},green:{a:["green","unripe","unripened","immature"],s:["green","greenish","light-green","dark-green"],n:["green","greenness","viridity"]},k:{n:["k","jet","green"],s:["k","s"]},greens:{n:["greens","green"]},grapeshot:{n:["grapeshot","grape"]},grape:{n:["grape","grapevine"]},greet:{v:["greet",_128,"recognise"]},greenhouse:{n:["greenhouse","glasshouse"]},grateful:{a:["grateful","thankful"]},greek:{a:["greek","grecian","hellenic"],n:["greek","hellene","hellenic"]},confiscate:{s:["confiscate",_288,"forfeited"],v:["confiscate","v"]},gravity:{n:["gravity","solemnity","gravitation"]},graveness:{n:["graveness","gravity","sobriety","soberness","somberness","sombreness"]},greatest:{s:["greatest","sterling,","superlative"]},hypothesis:{n:["hypothesis","possibility","theory"]},greece:{n:["greece","ellas"]},greeting:{n:["greeting","salutation"]},gregory:{n:["gregory","hildebrand"]},grief:{n:["grief","sorrow","heartache","heartbreak","brokenheartedness"]},grill:{n:["grill","grille","grillwork"]},grillroom:{n:["grillroom","grill"]},grid:{n:["grid","gridiron"]},gryphon:{n:["gryphon","griffin","griffon"]},fascinate:{v:["fascinate","transfix","grip","spellbind"]},grapple:{v:[_234,"grip"],n:[_234,"n"]},paragon:{n:["paragon","idol","perfection"]},smile:{n:["smile","smiling","grin","grinning"]},grocery:{n:["grocery","foodstuff"]},capricornus:{n:["capricornus","capricorn"]},"crying,":{s:["crying,","egregious","flagrant","glaring","gross","rank"]},megascopic:{s:["megascopic","gross"]},gross:{s:["gross","porcine"],n:["gross","revenue","receipts","144"]},chivalric:{s:["chivalric","knightly","medieval"]},yard:{n:["yard","grounds","curtilage","railyard","pace"]},bloodbath:{n:["bloodbath","bloodletting","bloodshed","battue"]},heave:{v:["heave","buckle","warp","heft"],n:["heave","heaving","retch"]},warp:{n:["warp","buckle","warping"],v:["warp","v"]},grove:{n:["grove","woodlet","orchard","plantation"]},guam:{n:["guam","gu"]},kilobyte:{n:["kilobyte","kibibyte","k","kb","kib"]},potassium:{n:["potassium","k"]},kelvin:{n:["kelvin","k"]},fester:{v:["fester","maturate","suppurate"]},precaution:{n:["precaution","safeguard","guard"]},guidepost:{n:["guidepost","guideline"]},guest:{n:["guest","invitee"]},catgut:{n:["catgut","gut"]},intestine:{n:["intestine","bowel","gut"]},gulf:{n:["gulf","disconnect","disconnection"]},guilty:{s:["guilty","hangdog","shamefaced","shamed"]},guilt:{n:["guilt","guiltiness"]},gunman:{n:["gunman","gunslinger","gun","triggerman","hitman","torpedo","shooter"]},artillery:{n:["artillery","gun","ordnance"]},wop:{n:["wop","dago","ginzo","guinea","greaseball"]},gymnasium:{n:["gymnasium","gym"]},clayey:{s:["clayey","cloggy","heavy"],a:["clayey","a"]},fleshy:{s:["fleshy","heavy","overweight"],a:["fleshy","sarcoid"]},spokesperson:{n:["spokesperson","interpreter","representative","voice"]},earphone:{n:["earphone","earpiece","headphone","phone"]},telephone:{n:["telephone","phone","telephony"],v:["telephone","v"]},haircloth:{n:["haircloth","hair"]},hair:{n:["hair","pilus","fuzz","tomentum"]},"hair's-breadth":{n:["hair's-breadth","hairsbreadth","hair","whisker"]},regale:{v:["regale","treat"]},h:{n:["h"]},henry:{n:["henry","h"]},hydrogen:{n:["hydrogen","h"]},hispaniola:{n:["hispaniola","haiti","hayti"]},hairy:{a:["hairy","haired","hirsute"]},"one-half":{n:["one-half","half"]},goodly:{s:["goodly","goodish","healthy","hefty","respectable","sizable","sizeable","tidy"]},halfway:{r:["halfway","midway"],s:["halfway","s"]},wrestle:{n:["wrestle","wrestling",_234,"grappling"],v:["wrestle","v"]},clamshell:{n:["clamshell","grapple"]},grapnel:{n:["grapnel",_234,"grappler"]},halloween:{n:["halloween","hallowe'en"]},hallway:{n:["hallway","hall"]},overact:{v:["overact","ham","overplay"]},ham:{n:["ham","jambon","gammon"],v:["ham","v"]},bangle:{n:["bangle","bauble","gaud","gewgaw",_370,"fallal","trinket"]},knickknack:{n:["knickknack","novelty"]},handbook:{n:["handbook","enchiridion"]},"fine-looking":{s:["fine-looking","good-looking","better-looking","handsome","well-favored","well-favoured"]},mansion:{n:["mansion","manse","hall","residence"]},dormitory:{n:["dormitory","dorm","hall"]},anteroom:{n:["anteroom","antechamber","hall","foyer","lobby","vestibule"]},"hand-held":{a:["hand-held","handheld"]},treatment:{n:["treatment","handling","intervention"]},handmade:{a:["handmade","hand-crafted"]},handful:{n:["handful","fistful","smattering"]},tempo:{n:["tempo","pace","pacing"]},footstep:{n:["footstep","pace","step","stride"]},intrigue:{v:["intrigue","fascinate"],n:["intrigue","machination"]},grinding:{n:["grinding","abrasion","attrition","detrition"]},happening:{n:["happening","occurrence","occurrent"]},happiness:{n:["happiness","felicity"]},happily:{r:["happily","merrily","mirthfully","gayly","blithely","jubilantly"]},happy:{s:["happy","well-chosen"]},felicitous:{s:["felicitous","happy"]},signpost:{n:["signpost","guidepost"]},"hard-core":{s:["hard-core","hardcore"]},hardbacked:{s:["hardbacked","hardback","hardbound","hardcover"]},hardback:{n:["hardback","hardcover"],s:["hardback","s"]},hart:{n:["hart","stag"]},harvest:{n:[_167,"harvesting"],v:[_167,"v"]},hate:{v:["hate","detest"],n:["hate","hatred"]},hat:{n:["hat","chapeau","lid"]},harry:{v:["harry","ravage"]},hashish:{n:["hashish","hasheesh","haschisch","hash"]},harpist:{n:["harpist","harper"]},harsh:{s:["harsh","abrasive","rough"],a:["harsh","a"]},haven:{n:["haven","oasis"]},hawaii:{n:["hawaii","hawai'i","hi","haw."]},hardware:{n:["hardware","ironware"]},hemoglobin:{n:["hemoglobin","haemoglobin","hb"]},mortarboard:{n:["mortarboard","hawk"]},headache:{n:["headache","cephalalgia"]},scheme:{v:["scheme","intrigue","connive"],n:["scheme","strategy"]},hazardous:{s:["hazardous","risky","wild"]},headquarters:{n:["headquarters","hq"]},curative:{s:["curative","healing,","alterative","remedial","sanative","therapeutic"],n:["curative","n"]},helium:{n:["helium","he"]},health:{n:["health","wellness"]},hebraic:{a:["hebraic","hebraical","hebrew"]},jew:{n:["jew","hebrew","israelite"]},heater:{n:["heater","warmer"]},inflame:{v:["inflame","wake","ignite","heat"]},heat:{n:["heat","warmth","passion"],v:["heat","v"]},hotness:{n:["hotness","heat","pepperiness"]},heather:{n:["heather","ling","broom"]},heating:{n:["heating","warming"]},heath:{n:["heath","heathland"]},heated:{s:["heated","het"]},argillaceous:{a:["argillaceous","clayey"]},heel:{v:["heel","reheel"],n:["heel","n"]},helicopter:{n:["helicopter",_431,"whirlybird","eggbeater"]},altitude:{n:["altitude","height"]},stature:{n:["stature","height"]},height:{n:["height","tallness"]},hello:{n:["hello","hullo","hi","howdy","how-do-you-do"]},helping:{n:["helping",_327,"serving"]},harbinger:{n:["harbinger","forerunner","predecessor","herald","precursor"],v:["harbinger","v"]},herald:{n:["herald","trumpeter"],v:["herald","v"]},wound:{n:["wound","injury","wounding","lesion"],v:["wound","v"]},therefore:{r:["therefore","hence","thence","thus","so"]},here:{r:["here","hither"],n:["here","n"]},hera:{n:["hera","here"]},inheritance:{n:["inheritance","heritage"]},hereby:{r:["hereby","herewith"]},hero:{n:["hero","heron"]},gamey:{s:["gamey","gamy","high"]},eminent:{s:["eminent","high","lofty","soaring","towering"]},"high-tech":{a:["high-tech","hi-tech"]},highlight:{n:["highlight","highlighting"],v:["highlight","v"]},upland:{a:["upland","highland,"],n:["upland","n"]},highland:{n:["highland","upland"]},kindle:{v:["kindle","enkindle","conflagrate","inflame"]},horniness:{n:["horniness","hotness"]},injure:{v:["injure","wound"]},mound:{n:["mound","hill"]},"avant-garde":{n:["avant-garde","vanguard","van"],s:["avant-garde","daring"]},hindu:{a:["hindu","hindi","hindoo"],n:["hindu","hindoo","hindustani"]},pitcher:{n:["pitcher","mound","pitcherful","ewer","hurler","twirler"]},knoll:{n:["knoll","mound","hillock","hummock","hammock"]},hep:{s:["hep","hip"]},hip:{n:["hip","rosehip","coxa"],s:["hip","s"]},pelvis:{n:["pelvis","hip"]},chartered:{a:["chartered","hired","leased"]},hispanic:{a:["hispanic","latino"]},historian:{n:["historian","historiographer"]},historic:{s:["historic","historical"]},diachronic:{a:["diachronic","historical"]},hectoliter:{n:["hectoliter","hectolitre","hl"]},holmium:{n:["holmium","ho"]},tripper:{n:["tripper","trip"]},slip:{n:["slip","trip","elusion","eluding","sideslip","slip-up","miscue","parapraxis"],v:["slip","sneak"]},interject:{v:["interject","interpose","inject"]},hobby:{n:["hobby","hobbyhorse"]},save:{v:["save",_61,"economize","economise"]},holder:{n:["holder","bearer"]},retention:{n:["retention","keeping","holding"]},hole:{n:["hole","hollow"]},vacation:{v:["vacation","holiday"],n:["vacation","holiday"]},netherlands:{n:["netherlands","nederland","holland"]},hollow:{n:["hollow","holler"],s:["hollow","s"],v:["hollow","v"]},"still-hunt":{v:["still-hunt","ambush"]},retentiveness:{n:["retentiveness","retentivity","retention"]},dwelling:{n:["dwelling","home","domicile","abode","habitation"]},fatherland:{n:["fatherland","homeland","motherland"]},dispossessed:{s:["dispossessed","homeless","roofless"]},homeless:{s:["homeless","stateless"]},homework:{n:["homework","prep","preparation"]},honor:{v:["honor","honour","reward"],n:["honor","honour","purity","pureness","laurels"]},hop:{v:["hop","skip","hop-skip"],n:["hop","hops"]},hormone:{n:["hormone","endocrine"]},horn:{v:["horn","tusk"],n:["horn","n"]},cornet:{n:["cornet","horn","trumpet","trump"]},corneous:{s:["corneous","hornlike","horny"]},repugnance:{n:["repugnance","repulsion","revulsion","horror"]},incompatibility:{n:["incompatibility","inconsistency","repugnance"]},knight:{n:["knight","horse"],v:["knight","dub"]},cavalry:{n:["cavalry","horse"]},hose:{n:["hose","hosepipe"]},hosiery:{n:["hosiery","hose"]},hospital:{n:["hospital","infirmary"]},server:{n:["server","host"]},host:{n:["host","innkeeper","boniface","legion"]},horde:{n:["horde","host","legion"]},waiter:{n:["waiter","server"]},hostage:{n:["hostage","surety"]},hostile:{s:["hostile","uncongenial","unfriendly"]},hot:{s:["hot","live","red-hot","spicy","raging"]},blistering:{s:[_124,"hot","red-hot","blistery"],n:[_124,"n"]},vesiculation:{n:["vesiculation","vesication","blistering"]},house:{v:["house","domiciliate"],n:["house","n"]},theater:{n:["theater","theatre","house"]},dramaturgy:{n:["dramaturgy","dramatics","theater","theatre"]},caparison:{n:["caparison","trapping","housing"],v:["caparison","bard","barde"]},housing:{n:["housing","lodging"]},horsepower:{n:["horsepower","hp","h.p."]},hassium:{n:["hassium","hs"]},hug:{n:["hug","clinch","squeeze"],v:["hug","v"]},huge:{s:["huge","immense","vast","brobdingnagian"]},"human-centered":{s:["human-centered","human-centred",_551,_552,"humanitarian"]},humanist:{n:[_551,"humanitarian"],a:[_551,_552,"humane"],s:[_551,"s"]},humanitarian:{n:[_553,"do-gooder","improver"],s:[_553,"s"]},humanistic:{a:[_552,"humanist"],s:[_552,"s"]},humanness:{n:["humanness","humanity","manhood"]},humidity:{n:["humidity","humidness"]},humor:{v:["humor","humour"],n:["humor","humour"]},wit:{n:["wit","humor","humour","witticism","wittiness"]},tame:{v:["tame","chasten","subdue"],a:["tame","tamed"],s:["tame","s"]},hungarian:{a:["hungarian","magyar"],n:["hungarian","magyar"]},hungary:{n:["hungary","magyarorszag"]},starve:{v:["starve","hunger","famish"]},crave:{v:["crave","hunger","thirst","starve","lust"]},hunger:{n:["hunger","hungriness","thirst","thirstiness"],v:["hunger","v"]},"athirst,":{s:["athirst,","hungry,","thirsty,"]},orion:{n:["orion","hunter"]},hunter:{n:["hunter","huntsman"]},haste:{n:["haste","hurry","rush","rushing","hastiness","hurriedness","precipitation"]},hurry:{n:["hurry","haste"],v:["hurry","v"]},"rush,":{s:["rush,","rushed"]},"first-come-first-serve,":{s:["first-come-first-serve,","rush"]},straiten:{v:["straiten","distress"]},miserable:{s:[_500,_529,"wretched"]},husband:{n:["husband","hubby"],v:["husband","v"]},measly:{s:["measly",_500,"paltry"]},hapless:{s:["hapless",_500,"misfortunate","pathetic","piteous","pitiable","pitiful","poor","wretched"]},hygiene:{n:["hygiene","hygienics"]},conjectural:{s:["conjectural","divinatory","hypothetical","hypothetic","supposed","suppositional","suppositious","supposititious"]},i:{n:["i"],s:["i","s"]},iodine:{n:["iodine","iodin","i"]},iowa:{n:["iowa","ia","ia.","ioway"]},"ninety-nine":{s:["ninety-nine","99","ic"]},ice:{n:["ice","frappe","sparkler"],v:["ice","v"]},frosting:{n:["frosting","icing","ice"]},icon:{n:["icon","ikon"]},id:{n:["id","i.d."]},idaho:{n:["idaho","id","id."]},theme:{n:["theme","idea","motif"]},idea:{n:["idea","thought"]},identical:{s:["identical","superposable","selfsame,","very,","indistinguishable"],a:["identical","monovular"]},identity:{n:["identity","identicalness","indistinguishability","individuality"]},ideological:{s:["ideological","ideologic"]},"i.e.":{r:["i.e.","ie"]},ignored:{s:["ignored","neglected","unheeded"]},two:{s:["two","2","ii"],n:["two","2","ii","deuce"]},deuce:{n:["deuce","two"]},trey:{n:["trey","three"]},"forty-nine":{s:["forty-nine","49","il"]},illinois:{n:["illinois","il","ill."]},illness:{n:["illness","unwellness","malady","sickness"]},exemplify:{v:["exemplify","illustrate","instance","represent"]},exemplification:{n:["exemplification","illustration"]},typification:{n:["typification","exemplification"]},resource:{n:["resource","resourcefulness","imagination"]},imagination:{n:["imagination","imaging","imagery","imaginativeness","vision"]},imagine:{v:["imagine","ideate","envisage"]},imaging:{n:["imaging","tomography"]},conterminous:{s:["conterminous","contiguous"]},coextensive:{s:["coextensive","coterminous","conterminous"]},immigration:{n:["immigration","in-migration"]},immune:{s:["immune","resistant"]},impingement:{n:["impingement","encroachment","impact","impaction"]},impact:{n:["impact","wallop"],v:["impact","v"]},imperial:{s:["imperial","majestic","purple","regal","royal"]},implementation:{n:["implementation","effectuation"]},enforced:{a:["enforced","implemented"]},significance:{n:["significance","import","implication"]},meaning:{n:["meaning","significance","signification","import","substance"]},"meaning,":{s:["meaning,","pregnant","significant"]},"fee-tail":{v:["fee-tail","entail"]},import:{n:["import","importee","importation"],v:["import","v"]},importance:{n:["importance","grandness"]},importantly:{r:["importantly","significantly"]},levy:{v:["levy","impose"]},impossible:{s:["impossible","unacceptable","inconceivable","unimaginable"]},crank:{s:["crank","cranky","tender","tippy"],n:["crank","starter"],v:["crank","v"]},affectionate:{s:["affectionate","fond","lovesome","tender"]},varnish:{v:["varnish","seal"]},cachet:{n:["cachet","seal"]},impressive:{s:["impressive","telling"]},cubbyhole:{n:["cubbyhole","pigeonhole"]},improving:{s:["improving","up"]},momentum:{n:["momentum","impulse"]},impulse:{n:[_372,"impulsion","impetus"]},caprice:{n:["caprice",_372,"whim"]},in:{r:["in","inwards","inward"],n:["in","n"]},indiana:{n:["indiana","in","ind."]},indium:{n:["indium","in"]},inch:{n:["inch","in"],v:["inch","v"]},inappropriate:{s:["inappropriate",_481,"unfitting"]},incentive:{n:["incentive","inducement","motivator"]},incidental:{a:["incidental","incident"],s:["incidental","nonessential","accidental"]},inclusion:{n:["inclusion","comprehension"]},incomplete:{s:["incomplete","uncompleted"],a:["incomplete","uncomplete"]},increasingly:{r:["increasingly","progressively"]},incredible:{a:["incredible","unbelievable"]},fabulously:{r:["fabulously","fantastically","incredibly"]},incredibly:{r:["incredibly","improbably","implausibly","unbelievably"]},indeed:{r:["indeed","so"]},independence:{n:["independence","independency"]},independent:{a:[_544,"main,"],n:[_544,"n"],s:[_544,"s"]},autonomous:{s:["autonomous",_544,"self-governing","sovereign","self-directed","self-reliant"]},mugwump:{n:["mugwump",_544,"fencesitter"]},independently:{r:["independently","severally"]},index:{n:["index","forefinger","indicant","indicator"]},india:{n:["india","bharat"]},indian:{a:["indian","amerind","amerindic"],n:["indian","n"]},amerind:{n:["amerind","indian"],a:["amerind","a"]},reading:{n:["reading","indication"]},indication:{n:["indication","denotation","indicant"]},recitation:{n:["recitation","recital","reading"]},collateral:{a:["collateral","indirect"],s:["collateral","confirmative","confirming","confirmatory","corroborative","corroboratory","substantiating","substantiative","validating","validatory","verificatory","verifying"]},"individual,":{s:["individual,","private"]},individual:{s:[_555,"single,","case-by-case","item-by-item"],a:[_555,"single"],n:[_555,"n"]},person:{n:["person",_555,"someone","somebody","mortal","soul"]},individually:{r:["individually","separately","singly","severally"]},indonesian:{n:["indonesian","bahasa"]},evocation:{n:["evocation",_350,"elicitation","summoning"]},generalization:{n:["generalization","generalisation",_350,"generality"]},induction:{n:[_350,"inductance"]},inescapably:{r:["inescapably","ineluctably","inevitably","unavoidably"]},inevitably:{r:["inevitably","necessarily","needs"]},septic:{a:["septic","infected"]},contagion:{n:["contagion","infection"]},infection:{n:["infection","contagion","transmission"]},infectious:{s:["infectious","infective"]},countless:{s:["countless",_329,"innumerable","innumerous","multitudinous","myriad","numberless","uncounted","unnumberable","unnumbered","unnumerable"]},infinite:{a:[_329,"non-finite","nonfinite"],n:[_329,"n"],s:[_329,"s"]},information:{n:["information","info","entropy"]},cosy:{n:["cosy","cozy"],s:["cosy","s"]},informative:{a:["informative","informatory"]},instructive:{a:["instructive","informative"]},enlightening:{a:["enlightening","informative","illuminating"]},edifying:{a:["edifying","enlightening"]},misdemeanor:{n:["misdemeanor","misdemeanour","infraction",_324,"infringement"]},violation:{n:[_324,"infringement"]},irreverence:{n:["irreverence","violation"]},trespass:{n:[_164,"encroachment",_324,"intrusion","usurpation"],v:[_164,"intrude"]},ingredient:{n:["ingredient","fixings"]},broach:{v:["broach","initiate"],n:["broach","n"]},offended:{s:["offended","pained","injured"]},inpatient:{n:["inpatient","inmate"]},inside:{s:["inside","inner","privileged"],r:["inside","within","indoors"],n:["inside","interior"]},inner:{s:["inner","internal",_535,"interior"]},inwardly:{r:["inwardly","inside"]},"innocent,":{s:["innocent,","unacquainted,"]},innocent:{s:[_296,"ingenuous","innocuous"],a:[_296,"guiltless","clean-handed"]},impeccant:{s:["impeccant",_296,"sinless"]},innovative:{s:["innovative","innovational","groundbreaking"]},stimulation:{n:["stimulation","stimulus","stimulant","input"]},investigate:{v:["investigate","inquire","enquire"]},foreplay:{n:["foreplay","arousal","stimulation"]},worm:{n:["worm","louse","insect"],v:["worm","v"]},insight:{n:["insight","brainstorm","brainwave","perceptiveness","perceptivity"]},penetration:{n:["penetration","insight","incursion"]},interjection:{n:["interjection","interposition","interpolation","interpellation"]},inspection:{n:["inspection","review"]},examiner:{n:["examiner","inspector","tester","quizzer"]},inhalation:{n:["inhalation","inspiration","aspiration","intake"]},inspiration:{n:["inspiration",_557,"brainchild"]},inhalant:{n:["inhalant","inhalation"]},inhale:{v:["inhale","inspire"]},revolutionize:{v:["revolutionize","revolutionise",_447,"overturn"]},installation:{n:["installation","installing","installment","instalment"]},clamant:{s:["clamant","crying","exigent","insistent","instant"]},instant:{s:[_345,"inst"],n:[_345,"n"]},instantaneous:{s:["instantaneous","instant,"]},instantaneously:{r:["instantaneously","outright","instantly"]},blatant:{s:["blatant","clamant","clamorous",_558,"vociferous",_559,"conspicuous"]},rather:{r:["rather","instead","kinda"]},"instinct,":{s:["instinct,","replete,"]},quite:{r:["quite","rather"]},instruct:{v:["instruct","apprise","apprize"]},teacher:{n:["teacher","instructor"]},instrument:{v:["instrument","instrumentate"],n:["instrument","pawn","cat's-paw","tool"]},implemental:{s:["implemental","instrumental","subservient"]},orchestration:{n:["orchestration","instrumentation"]},instrumentality:{n:["instrumentality","instrumentation"]},insulant:{n:["insulant","insulation"]},insulation:{n:["insulation","insularity","insularism","detachment"]},indemnity:{n:["indemnity","insurance"]},policy:{n:["policy","insurance"]},intact:{s:["intact","inviolate"]},integrated:{s:["integrated","structured"]},integration:{n:["integration","integrating","desegregation"]},integrity:{n:["integrity","unity","wholeness"]},cerebral:{a:["cerebral","intellectual"]},intellectual:{s:[_561,"rational","noetic"],n:[_561,"intellect"],a:[_561,"a"]},news:{n:["news","intelligence","tidings","word"]},newsworthiness:{n:["newsworthiness","news"]},intelligent:{s:["intelligent","reasoning,","thinking,","well-informed"]},bastardly:{s:["bastardly","mean","misbegot","misbegotten","spurious"]},beggarly:{s:["beggarly","mean"]},hateful:{s:["hateful","mean"]},intense:{s:["intense","vivid"]},saturation:{n:["saturation","chroma","intensity","vividness"]},volume:{n:["volume","loudness","intensity"]},intensity:{n:["intensity","intensiveness","strength"]},intensifier:{n:["intensifier","intensive"]},impregnation:{n:["impregnation","saturation"]},prisoner:{n:["prisoner","captive"]},interactional:{s:["interactional","interactive"]},synergistic:{a:["synergistic","interactive"],s:["synergistic","s"]},interface:{n:["interface","port"]},synergetic:{s:["synergetic","synergistic"]},intervene:{v:["intervene","interfere","interpose"]},noise:{n:["noise","interference",_562,"dissonance","racket"]},intervention:{n:["intervention","interference","intercession"]},interim:{n:["interim","meantime","meanwhile","lag"]},interior:{s:[_556,"midland","upcountry"],n:[_556,"n"]},intercede:{v:["intercede","mediate","intermediate","liaise","arbitrate"]},internal:{s:["internal","intragroup"]},randomness:{n:["randomness","haphazardness","stochasticity","noise","entropy","s"]},interposition:{n:["interposition","intervention"]},internationally:{r:["internationally","globally"]},map:{v:["map","represent"],n:["map","n"]},typify:{v:["typify","symbolize","symbolise",_52,"epitomize","epitomise"]},interpreted:{s:["interpreted","taken"]},interracial:{s:["interracial","mixed"]},commiserate:{v:["commiserate","sympathize","sympathise"]},interval:{n:["interval","separation"]},intimate:{s:[_535,"knowledgeable","versed","sexual"],v:[_535,"adumbrate","insinuate"],n:[_535,"n"]},private:{s:["private","intimate"]},suggest:{v:["suggest",_535,"evoke"]},confidant:{n:["confidant","intimate"]},secret:{s:["secret","private"],n:["secret","arcanum"]},inaugurate:{v:["inaugurate","introduce"]},mysterious:{s:["mysterious","mystic","mystical","occult","secret","orphic"]},privy:{s:["privy","secluded","secret"],n:["privy","n"]},unavowed:{s:["unavowed","secret"]},clandestine:{s:["clandestine","cloak-and-dagger","hole-and-corner,","hugger-mugger","hush-hush","secret","surreptitious","undercover","underground"]},mystery:{n:["mystery","enigma","secret","whodunit"]},introductory:{s:["introductory","prefatorial","prefatory"]},invalid:{n:["invalid","shut-in"],v:["invalid","v"]},invasion:{n:["invasion","encroachment","intrusion"]},inventory:{v:[_80,"stock-take"],n:[_80,"inventorying","stocktaking","stock-taking"]},armory:{n:["armory","armoury",_80,"arsenal"]},arsenal:{n:["arsenal","armory","armoury"]},investigation:{n:["investigation","investigating"]},investing:{n:["investing","investment"]},investment:{n:["investment","investiture"]},inconspicuous:{a:["inconspicuous","invisible"]},invisible:{a:["invisible","unseeable"]},byzantine:{s:["byzantine","convoluted","involved","knotty","tangled","tortuous"]},involved:{s:["involved","mired"]},participation:{n:["participation","involvement"]},iridium:{n:["iridium","ir"]},iran:{n:["iran","persia"]},iraq:{n:["iraq","al-iraq","irak"]},iraqi:{a:["iraqi","iraki"],n:["iraqi","iraki"]},ireland:{n:["ireland","hibernia","eire"]},sarcasm:{n:["sarcasm","irony","satire"]},islam:{n:["islam","islamism","mohammedanism","muhammadanism","muslimism"]},muslim:{a:["muslim","moslem","islamic"],n:["muslim","moslem"]},isle:{n:["isle","islet"]},sequester:{v:["sequester","sequestrate","isolate"]},isolate:{v:["isolate","insulate"]},israel:{n:["israel","yisrael","zion","sion"]},istanbul:{n:["istanbul","stambul","stamboul","constantinople"]},italy:{n:["italy","italia"]},nominal:{s:["nominal","token,","tokenish","titular"]},keepsake:{n:["keepsake","souvenir","token","relic"]},unseasoned:{s:["unseasoned","untested","untried","young"]},youthful:{s:["youthful","vernal","young"]},new:{s:["new","young","unexampled"],r:["new","r"]},nominative:{s:["nominative","nominal"]},ivory:{n:["ivory","tusk"]},nine:{s:["nine","9","ix"],n:["nine","9","ix","niner","ennead"]},j:{n:["j"]},joule:{n:["joule","j"]},"nine-spot":{n:["nine-spot","nine"]},jade:{s:["jade","jade-green"],n:["jade","jadestone"],v:["jade","v"]},adulteress:{n:["adulteress","fornicatress","hussy","jade","slut","strumpet","trollop"]},jaguar:{n:["jaguar","panther"]},imprison:{v:["imprison","incarcerate","lag","immure","jail","jug","gaol","remand"]},jail:{n:["jail","jailhouse","gaol","clink","slammer","poky","pokey"],v:["jail","v"]},january:{n:["january","jan"]},japan:{n:["japan","nippon","nihon"]},japanese:{a:["japanese","nipponese"],n:["japanese","nipponese"]},clash:{v:["clash","jar","collide"],n:["clash","friction"]},jar:{n:["jar","jarful"],v:["jar","v"]},collide:{v:["collide","clash"]},yack:{v:["yack","jaw"],n:["yack","n"]},denim:{n:["denim","dungaree","jean"]},jeans:{n:["jeans","denim"]},jeep:{n:["jeep","landrover"]},jennet:{n:["jennet","jenny"]},kraut:{n:["kraut","krauthead","boche","jerry","hun"]},jersey:{n:["jersey","t-shirt"]},"coal-black":{s:["coal-black","jet","jet-black","pitchy","sooty"]},jewelry:{n:["jewelry","jewellery"]},jewish:{a:["jewish","judaic"]},jimmy:{n:["jimmy","jemmy"],v:["jimmy","v"]},speculate:{v:["speculate","job","theorize","theorise","conjecture","hypothesize","hypothesise","hypothecate","suppose"]},subcontract:{v:["subcontract","job"]},caper:{n:["caper","job","capriole"]},problem:{n:["problem","job"]},job:{n:["job","task","chore"],v:["job","v"]},whoremaster:{n:["whoremaster","whoremonger","john","trick"]},johnson:{n:["johnson","lbj"]},join:{v:["join","conjoin"],n:["join","n"]},joined:{s:["joined","united"]},joke:{v:["joke","jest"],n:["joke","gag","laugh","jest","jape"]},jest:{n:["jest","joke","jocularity"],v:["jest","v"]},kid:{v:["kid","chaff","jolly","josh","banter"],n:["kid","kidskin"]},kyd:{n:["kyd","kid"]},joshua:{n:["joshua","josue"]},diarist:{n:["diarist","journalist"]},journey:{n:["journey","journeying"],v:["journey","v"]},billow:{v:["billow","wallow","surge","heave"],n:["billow","surge"]},junior:{n:["junior","jr","jnr"]},"junior,":{s:["junior,","third-year","next-to-last"]},discriminative:{s:["discriminative","judicial","discriminatory"]},judicial:{a:["judicial","juridical","juridic"],s:["judicial","s"]},juice:{n:["juice","succus"]},trash:{v:["trash","junk","scrap"],n:["trash","scum"]},jury:{n:["jury","panel"]},juror:{n:["juror","juryman","jurywoman"]},just:{r:["just","simply"],s:["just","s"],a:["just","a"]},equitable:{a:["equitable","just"]},justice:{n:["justice","justness"]},justify:{v:["justify","vindicate"]},kansa:{n:["kansa","kansas"]},kansas:{n:["kansas","ks","kan."]},karen:{n:["karen","karenic"]},pan:{v:["pan","trash"]},folderol:{n:["folderol","rubbish","tripe","trumpery","trash","wish-wash","applesauce","codswallop"]},rubbish:{n:["rubbish","trash","scrap"]},kazakhstan:{n:["kazakhstan","kazakstan","kazakh","kazak"]},kilobit:{n:["kilobit","kbit","kb"]},exquisite:{s:["exquisite","keen","recherche"]},lament:{v:["lament","keen"],n:["lament","lamentation","plaint","wail"]},guardianship:{n:["guardianship","keeping","safekeeping"]},nutrify:{v:["nutrify","aliment","nourish"]},sight:{n:["sight","ken","vision"],v:["sight","v"]},cognizance:{n:["cognizance","ken"]},kennedy:{n:["kennedy","jfk"]},deplore:{v:["deplore","lament","bewail","bemoan"]},elegy:{n:["elegy","lament"]},dirge:{n:["dirge","coronach","lament","requiem","threnody"]},kentucky:{n:["kentucky","ky","ken."]},unbroken:{a:["unbroken","kept"]},spy:{v:["spy","sight","stag","snoop","sleuth"]},keystone:{n:["keystone","key","headstone"]},winder:{n:["winder","key"]},key:{n:["key","paint","cay","tonality"],v:["key","v"],s:["key","s"]},samara:{n:["samara","key"]},unplowed:{a:["unplowed","unploughed","unbroken"]},kilogram:{n:["kilogram","kg","kilo"]},killer:{n:["killer","slayer"]},blowback:{n:["blowback","backfire"]},king:{n:["king","queen","world-beater","rex"]},snog:{v:["snog","kiss","buss","osculate"]},kiss:{n:["kiss","buss","osculation"],v:["kiss","v"]},caressing:{n:["caressing","cuddling","fondling","hugging","kissing","necking","petting","smooching","snuggling"]},kit:{n:["kit","outfit"]},kitty:{n:["kitty","kitty-cat","puss","pussy","pussycat"]},kitten:{n:["kitten","kitty"]},pool:{n:["pool","kitty","puddle"]},pond:{n:["pond","pool"]},kilometer:{n:["kilometer","kilometre","km","klick"]},knee:{n:["knee","genu"]},kneel:{n:["kneel","kneeling"]},tongue:{n:["tongue","knife","lingua","glossa","clapper"]},gag:{v:["gag","choke",_355,"suffocate","heave","retch","quip","muzzle"],n:["gag","muzzle"]},clapper:{n:["clapper","tongue","applauder"]},spit:{n:["spit","tongue","spitting","expectoration"],v:["spit","ptyalize","ptyalise","spew","spue"]},skewer:{v:["skewer","spit"]},sprinkle:{v:[_202,"spit","spatter","patter","pitter-patter","sparge","besprinkle","splash","splosh"],n:[_202,"sprinkling","sparge"]},saliva:{n:["saliva","spit","spittle"]},glib:{s:["glib","pat","slick","glib-tongued","smooth-tongued"]},dab:{v:["dab","pat","swab","swob"],n:["dab","splash","splatter"]},knowing:{s:["knowing","knowledgeable","learned","lettered","well-educated","well-read","wise,"]},knowledgeable:{s:["knowledgeable","knowing"]},cognition:{n:["cognition","knowledge","noesis"]},knockout:{n:[_357,"ko","kayo"],s:[_357,"s"]},korea:{n:["korea","dae-han-min-gook","han-gook"]},kuwait:{n:["kuwait","koweit"]},kilowatt:{n:["kilowatt","kw"]},l:{n:["l"],s:["l","s"]},lambert:{n:["lambert","l"]},liter:{n:["liter","litre","l"]},la:{n:["la","lah"]},louisiana:{n:["louisiana","la","la."]},lanthanum:{n:["lanthanum","la"]},lab:{n:["lab","laboratory"]},labeled:{a:["labeled","labelled","tagged"]},ragtime:{n:["ragtime","rag"]},intertwine:{v:["intertwine","twine","entwine","enlace","interlace","lace"]},lace:{n:["lace","lacing"],v:["lace","v"]},laden:{s:["laden","oppressed","loaded","ladened"],v:["laden","v"]},ladle:{v:["ladle","lade","laden"]},loop:{v:["loop","intertwine"],n:["loop","loop-the-loop"]},tat:{v:["tat","intertwine"],n:["tat","n"]},lady:{n:["lady","noblewoman","peeress"]},cheapness:{n:["cheapness","tackiness","tat","sleaze"]},iteration:{n:["iteration","loop","looping"]},cringle:{n:["cringle","eyelet","loop","grommet","grummet"]},lancet:{n:["lancet","lance"]},terminology:{n:["terminology","nomenclature","language"]},language:{n:[_565,"speech"]},lyric:{n:["lyric","words","language"],s:["lyric","lyrical"]},speech:{n:["speech","language"]},largely:{r:["largely","mostly"]},lecture:{n:["lecture","speech","lecturing","talk"],v:["lecture","talk"]},persistent:{a:[_566,"lasting"],s:[_566,"relentless","unrelenting"]},permanent:{a:["permanent","lasting"]},recently:{r:["recently","late","lately","latterly"]},late:{r:["late","belatedly","tardily"],a:["late","later,"],s:["late","s"]},"late,":{s:["late,","recent"]},belated:{s:["belated","late","tardy"]},laundry:{n:["laundry","wash","washing","washables"]},washout:{n:["washout","wash"]},"later,":{s:["later,","ulterior","posterior"],a:["later,","a"]},latest:{s:["latest","modish"]},"up-to-the-minute":{s:["up-to-the-minute","latest"]},romance:{a:[_375,"latin"],v:[_375,"v"],n:[_375,"n"]},dogged:{s:["dogged","dour",_566,"pertinacious","tenacious","unyielding"]},haunting:{s:["haunting","persistent"]},latitude:{n:["latitude","parallel"]},laugh:{n:["laugh","laughter"]},"laughing,":{s:["laughing,","riant"]},launching:{n:["launching","launch"]},police:{n:["police","constabulary","law"],v:["police","v"]},jurisprudence:{n:["jurisprudence","law"]},law:{n:["law","jurisprudence"]},lawgiver:{n:["lawgiver","lawmaker"]},lawrence:{n:["lawrence","laurentius"]},torah:{n:["torah","pentateuch","laws"]},romanticism:{n:["romanticism","romance"]},laic:{s:["laic","lay","secular"]},lay:{v:["lay","repose"],s:["lay","s"],n:["lay","n"]},ballad:{n:["ballad","lay"]},faineant:{s:["faineant","indolent","lazy","otiose","slothful","work-shy"]},pound:{n:["pound","lb","lbf."],v:["pound","v"]},patrol:{v:["patrol","police"]},leadership:{n:["leadership","leaders","leading"]},lumber:{v:["lumber","pound"],n:["lumber","timber"]},ram:{v:["ram","pound"],n:["ram","tup"]},thump:{v:["thump","pound","poke"],n:["thump","thumping","clump","clunk","thud"]},leaf:{n:["leaf","folio","leafage","foliage"],v:["leaf","v"]},conditioned:{a:["conditioned","learned"]},erudite:{s:["erudite","learned"]},thud:{v:["thud","thump"],n:["thud","n"]},aries:{n:["aries","ram"]},downwind:{s:["downwind","lee,"],r:["downwind","r"]},lee:{n:["lee","leeward"]},log:{v:["log","lumber"],n:["log","n"]},"left,":{s:["left,","left-hand,"]},leftover:{s:["leftover","left,","odd","remaining","unexpended"],n:["leftover","remnant"]},legally:{r:["legally","lawfully"]},bequest:{n:["bequest","legacy"]},caption:{n:["caption","legend"]},legend:{n:["legend","fable"]},legislation:{n:["legislation","legislating","lawmaking"]},fabled:{s:["fabled","legendary"]},lawful:{s:["lawful",_568,"licit","rule-governed"]},legitimate:{s:[_568,"logical"],v:[_568,"v"]},legalize:{v:["legalize","legalise","decriminalize","decriminalise","legitimize","legitimise",_568,"legitimatize","legitimatise"]},lasso:{v:["lasso","rope"],n:["lasso","lariat","riata","reata"]},legislature:{n:["legislature","law-makers"]},lemon:{n:["lemon","stinker"]},gamboge:{n:["gamboge","lemon","maize"]},lender:{n:["lender","loaner"]},lending:{n:["lending","loaning"]},subtitle:{n:["subtitle","caption"]},windward:{r:["windward","downwind"]},lens:{n:["lens","lense"]},leo:{n:["leo","lion"]},lesbian:{s:["lesbian","sapphic"],n:["lesbian","tribade"]},moral:{n:["moral","lesson"]},letter:{n:["letter","missive"]},vardenafil:{n:["vardenafil","levitra"]},"fifty-one":{s:["fifty-one","51","li"]},lithium:{n:["lithium","li"]},indebtedness:{n:["indebtedness","liability"]},obligation:{n:["obligation","indebtedness"]},"liable,":{s:["liable,","nonimmune","nonresistant","unresistant"]},liberal:{n:[_237,"liberalist","progressive"],s:[_237,"s"]},familiarity:{n:["familiarity","impropriety","indecorum","liberty","intimacy","closeness"]},casualness:{n:["casualness","familiarity"]},librarian:{n:["librarian","bibliothec"]},beating:{n:["beating","thrashing","licking","drubbing","lacing","trouncing","whacking","whipping"]},eyelid:{n:["eyelid","lid","palpebra"]},life:{n:["life","lifetime","life-time","lifespan","living"]},light:{s:["light","wakeful","lite","low-cal","calorie-free","scant,","short","lightsome","tripping"],a:["light","light-colored"],v:["light","illume","illumine","illuminate"],n:["light","lighting",_571,"illumination"],r:["light","r"]},abstemious:{s:["abstemious","light,"]},unaccented:{s:["unaccented","light","weak"],a:["unaccented","a"]},unhorse:{v:["unhorse","dismount","light"]},ignite:{v:["ignite","light"]},lighter:{n:["lighter","light","igniter","ignitor"]},sparkle:{n:[_369,_397,"spark","light"],v:[_369,"scintillate","coruscate"]},luminosity:{n:["luminosity","brightness","luminance","luminousness","light"]},barge:{n:["barge","flatboat","hoy","lighter"]},igniter:{n:["igniter","ignitor","lighter"]},ignition:{n:["ignition","firing","lighting","kindling","inflammation"]},spark:{v:["spark","sparkle"],n:["spark","n"]},like:{a:["like","same","similar"],n:["like","ilk"],v:["like","v"],s:["like","s"]},whippersnapper:{n:["whippersnapper","jackanapes","lightweight"]},atonic:{a:["atonic","unaccented"]},likelihood:{n:["likelihood","likeliness"]},probably:{r:["probably","likely","belike"]},probable:{a:["probable","likely"]},birdlime:{v:["birdlime","lime"],n:["birdlime","lime"]},linden:{n:["linden","basswood","lime"]},limited:{s:[_429,_182,"modified"],n:[_429,"n"]},circumscribed:{s:["circumscribed","limited"]},limitation:{n:["limitation","restriction"]},restriction:{n:["restriction","limitation","confinement"]},similarly:{r:["similarly","likewise"]},confining:{s:["confining","constraining","constrictive","limiting","restricting"]},modification:{n:["modification","qualifying","limiting"]},lined:{s:["lined","seamed"]},credibly:{r:["credibly","believably","plausibly","probably"]},brim:{n:["brim","rim","lip"]},sass:{n:["sass","sassing","backtalk","lip","mouth"]},melted:{a:["melted","liquid","liquified"]},basswood:{n:["basswood","linden"]},listing:{n:["listing","itemization","itemisation"]},lighted:{a:["lighted","lit"],s:["lighted","s"]},illuminated:{s:["illuminated","lighted","lit","well-lighted"]},literature:{n:["literature","lit"]},little:{s:["little","minuscule","small"],a:["little","a"]},short:{a:["short","little"],r:["short","unawares"],s:["short","shortsighted","unforesightful","myopic"],v:["short","v"],n:["short","n"]},fiddling:{s:["fiddling","footling","lilliputian","little","niggling","piddling","piffling","petty","picayune","trivial"]},"little,":{a:["little,","slight"]},small:{a:["small","little"],s:["small","s"]},lithuania:{n:["lithuania","lietuva"]},bouncy:{s:["bouncy","live","lively","resilient","springy"]},live:{a:["live","unrecorded"],v:["live","v"],s:["live","s"]},"liver-colored":{s:["liver-colored","liver"]},ruffle:{v:["ruffle","rumple","pleat","fluff"],n:["ruffle","n"]},surviving:{s:["surviving","living"]},curtly:{r:["curtly","short","shortly"]},brusque:{s:["brusque","brusk","curt","short,"]},unretentive:{a:["unretentive",_572,"short"]},inadequate:{s:["inadequate","poor","short","jejune"],a:["inadequate","unequal"]},"short-circuit":{v:["short-circuit","short"]},"short-change":{v:["short-change","short"]},shortstop:{n:["shortstop","short"]},belittled:{s:["belittled",_573,"small"]},modest:{s:["modest","small"]},minor:{s:["minor","modest","small","small-scale","pocket-size","pocket-sized","venial"],a:["minor","nonaged","underage"],n:["minor","n"]},bouncing:{s:["bouncing","bouncy","peppy","spirited","zippy"],n:["bouncing","n"]},lumen:{n:["lumen","lm"]},loanword:{n:["loanword","loan"]},lobby:{v:["lobby","buttonhole"],n:["lobby","n"]},venue:{n:["venue","locale","locus"]},locally:{r:["locally","topically"]},bypass:{v:["bypass","short-circuit"],n:["bypass","n"]},meek:{s:["meek","mild","modest","spiritless","tame"]},locator:{n:["locator","locater"]},locking:{n:["locking","lockup"]},lodgment:{n:["lodgment","lodgement","lodging"]},logarithm:{n:["logarithm","log"]},mesh:{n:["mesh","meshing",_488,"interlocking"],v:["mesh","v"]},enmesh:{v:["enmesh","mesh","ensnarl"]},logo:{n:["logo","logotype"]},"lone,":{s:["lone,","lonesome,","only,","sole,","solitary,","lonely,","solitary"]},lonely:{s:["lonely",_243,"unfrequented","lonesome"]},farseeing:{s:["farseeing","farsighted","foresighted","foresightful","prospicient","long","longsighted"]},retentive:{a:["retentive","recollective","long","tenacious"]},hanker:{v:["hanker","long","yearn"]},"long-run":{s:["long-run","long-term","semipermanent"]},"eagle-eyed":{s:["eagle-eyed","keen-sighted","farseeing","longsighted"]},longer:{n:["longer","thirster","yearner"]},"longtime,":{s:["longtime,","long-time,"]},looking:{s:["looking","sounding"],n:["looking","n"]},lord:{n:["lord","noble","nobleman"]},losings:{n:["losings","losses"]},helpless:{s:["helpless","lost","incapacitated"]},bemused:{s:["bemused","lost,","preoccupied"]},lost:{s:["lost","missed"],n:["lost","n"]},doomed:{n:["doomed","lost"],s:["doomed","fated","ill-fated","ill-omened","ill-starred","unlucky"]},slack:{v:["slack","slacken","relax","slake"],n:["slack","slackness"],s:["slack","s"]},loudly:{r:["loudly","loud","aloud"]},forte:{a:["forte","loud"],r:["forte","loudly"],n:["forte","metier","specialty","speciality","strength"]},cursed:{s:["cursed","damned","doomed","unredeemed","unsaved"],a:["cursed","curst"]},loiter:{v:["loiter","lounge","footle","lollygag","loaf","lallygag","tarry","linger","lurk"]},adorable:{s:["adorable","endearing","lovely"]},obstreperously:{r:["obstreperously","loudly","clamorously"]},patriotic:{a:["patriotic","loyal"]},loyalty:{n:["loyalty","trueness"]},lp:{n:["lp","l-p"]},lutetium:{n:["lutetium","lutecium","lu"]},baggage:{n:["baggage","luggage"]},lunch:{n:["lunch","luncheon","tiffin","dejeuner"]},luxembourg:{n:["luxembourg","luxemburg"]},"luxembourg-ville":{n:["luxembourg-ville","luxembourg","luxemburg"]},luxury:{n:["luxury","luxuriousness","opulence","sumptuousness"]},lavishness:{n:["lavishness","luxury","sumptuosity","sumptuousness"]},extravagance:{n:["extravagance","prodigality","lavishness","highlife","profligacy","extravagancy"]},m:{n:["m"],s:["m","s"]},megabyte:{n:["megabyte","mebibyte","m","mb","mib"]},molarity:{n:["molarity","m"]},massachusetts:{n:["massachusetts","ma","mass."]},milliampere:{n:["milliampere","ma"]},ma:{n:["ma","mama","mamma","mom","momma","mommy","mammy","mum","mummy"]},macintosh:{n:["macintosh","mackintosh","mac","mack"]},macedon:{n:["macedon","macedonia","makedonija"]},massachuset:{n:["massachuset","massachusetts"]},mackintosh:{n:["mackintosh","macintosh"]},harebrained:{s:["harebrained","insane","mad"]},huffy:{s:["huffy","mad","sore","thin-skinned","feisty","touchy"]},madness:{n:[_574,"rabidity","rabidness"]},folly:{n:["folly","foolishness","craziness",_574,"foolery","tomfoolery","lunacy","indulgence","unwiseness"]},fury:{n:["fury","rage",_574,"eumenides","erinyes"]},rabies:{n:["rabies","hydrophobia","lyssa","madness"]},lunacy:{n:["lunacy",_574,"insaneness"]},craze:{n:["craze","delirium","frenzy","fury","hysteria"],v:["craze","v"]},stupidity:{n:["stupidity","betise","folly","foolishness","imbecility"]},mary:{n:["mary","madonna"]},madden:{v:["madden","craze"]},magic:{n:["magic","thaumaturgy"],s:["magic","s"]},charismatic:{s:["charismatic","magnetic"]},magnetic:{a:["magnetic","magnetized","magnetised"],s:["magnetic","s"]},maid:{n:["maid","maiden","maidservant","housemaid","amah"]},"mail-clad":{s:["mail-clad","mailed"]},mailing:{n:["mailing","posting"]},main:{n:["main","briny"]},maine:{n:["maine","me","me."]},chiefly:{r:["chiefly","principally","primarily","mainly"]},retained:{s:["retained","maintained"]},sustenance:{n:["sustenance","sustentation","sustainment","maintenance","upkeep"]},alimony:{n:["alimony","maintenance"]},nutriment:{n:["nutriment","nourishment","nutrition","sustenance","aliment","alimentation","victuals"]},manufacturer:{n:["manufacturer","maker","producer"]},maker:{n:["maker","shaper"]},makeup:{n:["makeup","make-up"]},qualification:{n:["qualification","making"]},devising:{n:["devising","fashioning","making"]},malawi:{n:["malawi","nyasaland"]},male:{s:["male","manful","manlike","manly","virile"]},promenade:{n:[_533,"mall","prom"],v:[_533,"v"]},amble:{n:["amble",_533,"saunter","stroll","perambulation"],v:["amble","mosey"]},compulsory:{s:["compulsory","mandatory","required"]},mandatary:{n:["mandatary","mandatory"]},mar:{v:["mar","impair","spoil","deflower","vitiate"],n:["mar","n"]},borderland:{n:["borderland","march","marchland"]},mare:{n:["mare","maria"]},cannabis:{n:["cannabis","marijuana","marihuana","ganja","hemp"]},marijuana:{n:["marijuana","marihuana","ganja"]},nautical:{a:["nautical","maritime","marine"]},marine:{n:["marine","leatherneck"],a:["marine","a"]},marked:{s:["marked","pronounced"]},commercialize:{v:["commercialize","commercialise","market"]},marketplace:{n:["marketplace","mart","market"]},market:{n:["market","marketplace"],v:["market","v"]},selling:{n:["selling","merchandising","marketing"]},marking:{n:["marking","grading","scoring"]},marital:{a:["marital","matrimonial","married"]},marsh:{n:["marsh","marshland","fen","fenland"]},marshal:{n:["marshal","marshall"],v:["marshal","v"]},warlike:{s:["warlike","martial"]},soldierly:{s:["soldierly","soldierlike","warriorlike","martial"]},maryland:{n:["maryland","md","md."]},disguise:{v:["disguise","mask"],n:["disguise","camouflage"]},masquerade:{n:["masquerade","masque","mask","charade"]},freemason:{n:["freemason","mason"]},mason:{n:["mason","stonemason"]},massive:{s:["massive","monolithic","monumental"]},masturbation:{n:["masturbation","onanism"]},flatness:{n:["flatness","lusterlessness","lustrelessness","mat","matt","matte"]},mat:{n:["mat","matting"],s:["mat","s"],v:["mat","v"]},motherliness:{n:["motherliness","maternalism","maternity"]},motherhood:{n:["motherhood","maternity"]},pregnancy:{n:["pregnancy","gestation","maternity"]},mathematics:{n:["mathematics","math","maths"]},numerical:{a:[_530,"mathematical"],s:[_530,"s"]},matthew:{n:["matthew","levi"]},maximal:{a:["maximal","maximum"]},utmost:{n:["utmost","uttermost","maximum"],s:["utmost","s"]},whitethorn:{n:["whitethorn","may"]},possibly:{r:["possibly","perchance","perhaps","maybe","mayhap","peradventure"]},megabit:{n:["megabit","mbit","mb"]},megahertz:{n:["megahertz","mhz","megacycle","mc"]},mendelevium:{n:["mendelevium","md","mv"]},languor:{n:["languor","lethargy","sluggishness","phlegm","flatness","lassitude","listlessness","dreaminess"]},"two-dimensionality":{n:["two-dimensionality","flatness","planeness"]},meal:{n:["meal","repast"]},bodily:{s:["bodily","corporal","corporeal","somatic"]},achiever:{n:["achiever","winner","success","succeeder"]},meanwhile:{r:["meanwhile","meantime"],n:["meanwhile","n"]},machinist:{n:["machinist","mechanic"]},numeric:{s:["numeric","numerical"],a:["numeric","a"]},mechanism:{n:["mechanism","mechanics"]},median:{s:["median","medial"]},medial:{s:["medial","median"]},measured:{s:[_430,"metrical","metric"],a:[_430,"a"]},mensural:{a:["mensural",_430,"mensurable"]},aesculapian:{a:["aesculapian","medical"]},checkup:{n:["checkup","medical"]},medicate:{v:["medicate","medicine"]},music:{n:["music",_575,"euphony"]},medicine:{n:[_575,"medication","medicament"],v:[_575,"v"]},decoration:{n:["decoration","medal","medallion","palm","ribbon","ornament","ornamentation"]},metier:{n:["metier","medium"]},farthermost:{s:["farthermost",_576,"furthermost",_577,"utmost","uttermost"]},penis:{n:["penis","phallus","member"]},extremity:{n:["extremity","appendage","member"]},memo:{n:["memo","memorandum","memoranda"]},membership:{n:["membership","rank"]},upstanding:{s:["upstanding","solid"]},memorial:{n:["memorial","monument","commemoration","remembrance"]},genial:{a:["genial","mental"],s:["genial","s"]},mercury:{n:["mercury","quicksilver","hydrargyrum","hg"]},mercifulness:{n:["mercifulness","mercy"]},clemency:{n:["clemency","mercifulness","mercy"]},merchandise:{n:["merchandise","ware","product"],v:["merchandise","v"]},deservingness:{n:["deservingness","merit","meritoriousness"]},merit:{n:["merit","virtue"],v:["merit","v"]},mess:{n:["mess","messiness","muss","mussiness"]},amalgamation:{n:["amalgamation","merger","uniting"]},merchant:{n:["merchant","merchandiser"]},mesa:{n:["mesa","table"]},metallic:{a:["metallic","metal,"]},metamorphosis:{n:["metamorphosis","metabolism"]},metric:{a:["metric","metrical"],s:["metric","s"]},metro:{n:["metro","tube",_563,"subway"]},magnesium:{n:["magnesium","mg"]},milligram:{n:["milligram","mg"]},mile:{n:["mile","mi","mil"]},microphone:{n:["microphone","mike","mic"]},microwave:{v:["microwave","micro-cook","zap","nuke"]},"in-between":{s:["in-between","mediate","middle"]},middle:{n:["middle","midriff","midsection"],s:["middle","s"]},milan:{n:["milan","milano"]},grind:{n:["grind","mill","pulverization","pulverisation"],v:["grind","mash","crunch","bray","comminute"]},mill:{n:["mill","grinder"]},balmy:{s:["balmy","mild","soft","barmy","bats","batty","bonkers","buggy","cracked","crackers","daft","dotty","fruity","haywire","kooky","kookie","loco","loony","loopy","nuts","nutty","wacky","whacky"]},mileage:{n:["mileage","milage"]},millennium:{n:["millennium","millenary"]},mime:{v:["mime","pantomime"],n:["mime","pantomime","mimer","mummer","pantomimer","pantomimist"]},mimic:{v:["mimic","mime"],n:["mimic","mimicker"]},minimal:{a:["minimal","minimum"]},miniskirt:{n:["miniskirt","mini"]},mildness:{n:["mildness","clemency"]},affable:{s:["affable","amiable","cordial","genial"]},minimize:{v:["minimize","belittle","denigrate","derogate","minimise"]},understate:{v:["understate","minimize","minimise","downplay"]},curate:{n:["curate","minister","parson","pastor","rector"]},minus:{s:["minus","negative"],n:["minus","n"]},minnesota:{n:["minnesota","mn","minn."]},transfiguration:{n:["transfiguration","metamorphosis"]},minutes:{n:["minutes","proceedings","transactions"]},minority:{n:["minority","nonage"]},"many-sided":{s:["many-sided","multifaceted","miscellaneous","multifarious"],a:["many-sided","a"]},assorted:{s:["assorted","miscellaneous","mixed","motley","sundry,","various"]},missionary:{a:["missionary","missional"],n:["missionary","missioner"]},projectile:{n:["projectile","missile"]},missouri:{n:["missouri","mo","mo."]},mississippi:{n:["mississippi","ms","miss."]},sociable:{n:["sociable","social","mixer"]},schoolmarm:{n:["schoolmarm","schoolma'am","schoolmistress","mistress"]},concoction:{n:["concoction","mixture","intermixture"]},grate:{v:["grate","grind"],n:["grate","grating"]},crunch:{v:["crunch","cranch","craunch","grind","munch","scranch","scraunch","crackle"],n:["crunch","n"]},drudgery:{n:["drudgery",_579,"grind","donkeywork"]},swot:{n:["swot","grind","nerd","wonk","dweeb"],v:["swot","v"]},millimeter:{n:["millimeter","millimetre","mm"]},manganese:{n:["manganese","mn"]},molybdenum:{n:["molybdenum","mo"]},mobile:{s:["mobile","nomadic","peregrine","roving","wandering"]},mod:{s:["mod","modern","modernistic"]},lenience:{n:["lenience","leniency","mildness","lenity"]},gentleness:{n:["gentleness",_581,"mildness"]},mood:{n:["mood","mode","modality"]},modality:{n:["modality","mode"]},modern:{s:["modern","new"],n:["modern","bodoni"]},multilateral:{a:["multilateral","many-sided"]},moisture:{n:["moisture","wet"]},moldova:{n:["moldova","moldavia"]},monday:{n:["monday","mon"]},putter:{v:["putter","potter","tinker","monkey"]},tamper:{v:["tamper","fiddle","monkey"],n:["tamper","n"]},imp:{n:["imp","scamp","monkey","rascal","rapscallion","scalawag","scallywag"]},monitor:{v:[_582,"supervise"],n:[_582,"varan"]},admonisher:{n:["admonisher",_582,"reminder"]},proctor:{n:["proctor","monitor"],v:["proctor","v"]},monetary:{a:["monetary","pecuniary"]},mono:{s:["mono","monophonic","single-channel"]},confection:{n:[_583,"concoction"],v:[_583,"v"]},montana:{n:["montana","mt","mont."]},daydream:{v:[_515,"moon"],n:[_515,"n"]},moon:{n:["moon"],v:["moon","v"]},rocket:{n:["rocket","projectile",_584,"roquette","arugula"],v:["rocket","skyrocket"]},morning:{n:["morning","morn","forenoon"]},repository:{n:["repository","monument","secretary"]},morocco:{n:["morocco","maroc","marruecos","al-magrib"]},deathrate:{n:["deathrate","mortality"]},meddle:{v:["meddle","tamper"]},tamp:{n:["tamp","tamper"]},"motive,":{s:["motive,","motor"]},centrifugal:{s:["centrifugal","motor,"]},confect:{v:["confect",_583,"comfit"],n:["confect","n"]},sweet:{n:["sweet",_583,_414,"sugariness"],s:["sweet","s"],a:["sweet","a"],r:["sweet","r"]},"motivative,":{s:["motivative,","motive,","motivating"]},motif:{n:["motif","motive"]},invigilate:{v:["invigilate","proctor"]},potter:{v:["potter","putter"],n:["potter","thrower","ceramicist","ceramist"]},elf:{n:["elf","hob","gremlin","pixie","pixy","brownie","imp"]},sneak:{v:["sneak","mouse","creep","pussyfoot"],n:["sneak","n"]},shiner:{n:["shiner","mouse"]},reverie:{n:["reverie","revery",_515,"daydreaming","oneirism"]},mouthpiece:{n:["mouthpiece","mouth","embouchure","gumshield"]},skyrocket:{n:[_584,"rocket"],v:[_584,"v"]},mozambique:{n:["mozambique","mocambique"]},mister:{n:["mister","mr","mr."]},mrs:{n:["mrs","mrs."]},ms:{n:["ms","ms."]},manuscript:{n:["manuscript","ms","holograph"]},much:{r:["much","often","practically"]},meitnerium:{n:["meitnerium","mt"]},furtive:{s:["furtive","sneak,","sneaky","stealthy","surreptitious"]},fink:{n:["fink","snitch","snitcher","stoolpigeon","stoolie","sneak","sneaker","canary"],v:["fink","scab","rat","blackleg"]},prowler:{n:["prowler","sneak","stalker"]},countenance:{n:[_242,"physiognomy","phiz","visage","kisser","smiler","mug"],v:[_242,"v"]},mug:{n:["mug","mugful"]},mumbai:{n:["mumbai","bombay"]},brawn:{n:["brawn","brawniness","muscle","muscularity","sinew","heftiness"]},muscleman:{n:["muscleman","muscle"]},muscle:{n:["muscle","musculus"]},munich:{n:["munich","muenchen"]},potato:{n:["potato","murphy","spud","tater"]},speak:{v:["speak","talk"]},melodious:{a:["melodious","melodic","musical"]},musician:{n:["musician","instrumentalist","player"]},mustiness:{n:["mustiness","must","moldiness"]},murmur:{v:["murmur","mutter",_585,"croak","gnarl"],n:["murmur","n"]},mumble:{v:["mumble","mutter","maunder","mussitate","gum"]},grumble:{n:[_585,_586,"murmur",_587,"mutter","muttering"],v:[_585,"growl","rumble"]},mutter:{n:["mutter","muttering","murmur",_587,"murmuration","mussitation"],v:["mutter","v"]},reciprocal:{a:["reciprocal","mutual"]},millivolt:{n:["millivolt","mv"]},maxwell:{n:["maxwell","mx"]},myanmar:{n:["myanmar","burma"]},n:{n:["n"]},normality:{n:["normality","n","normalcy"]},newton:{n:["newton","n"]},north:{n:["north","northward","n"],r:["north","northerly","northwards","northward"]},nitrogen:{n:["nitrogen","n"]},dislocate:{v:["dislocate","luxate","splay","slip"]},strip:{n:["strip","slip","striptease"],v:["strip","undress","divest","disinvest","dismantle"]},slickness:{n:["slickness","slick","slipperiness","slip"]},mooring:{n:["mooring","moorage","berth","slip"]},sodium:{n:["sodium","na"]},pinpoint:{v:["pinpoint","nail"],n:["pinpoint","n"]},backstair:{s:["backstair","backstairs","furtive"]},namely:{r:["namely","viz.","videlicet"]},bodybuilder:{n:["bodybuilder","muscle-builder","musclebuilder","muscleman"]},naples:{n:["naples","napoli"]},tuneful:{a:["tuneful","melodious"]},narrative:{n:["narrative","narration","story","tale"]},rumble:{v:["rumble","grumble"],n:["rumble","rumbling",_585,"grumbling"]},grouch:{v:["grouch",_585,"scold"],n:["grouch","grump","crank","churl","crosspatch"]},treacle:{n:["treacle","mush","slop","glop"]},nationally:{r:["nationally","nationwide"]},countrywide:{s:["countrywide","nationwide"]},speck:{n:["speck","pinpoint"]},seafaring:{n:["seafaring","navigation","sailing"],s:["seafaring","s"]},navigation:{n:["navigation","pilotage","piloting"]},navigate:{v:["navigate","pilot"]},niobium:{n:["niobium","nb"]},neodymium:{n:["neodymium","nd"]},nebraska:{n:["nebraska","ne","neb."]},northeast:{n:[_588,"nor'-east","northeastward","ne"],r:[_588,"north-east","nor'-east"],s:[_588,"s"]},neon:{n:["neon","ne"]},necessarily:{r:["necessarily","needfully"]},neck:{n:["neck","cervix"]},negative:{s:[_578,"electronegative"],a:[_578,"disconfirming"],v:[_578,"v"]},damaging:{s:["damaging",_578,"detrimental","prejudicial","prejudicious"]},veto:{v:["veto","blackball","negative"]},needle:{v:["needle","goad"]},oceangoing:{s:["oceangoing","seafaring","seagoing"]},needed:{s:["needed","needful","required","requisite"]},neighbor:{v:["neighbor","neighbour"],n:["neighbor","neighbour"]},negotiate:{v:["negotiate","negociate"]},negociate:{v:["negociate","negotiate"]},neighborhood:{n:["neighborhood","neighbourhood"]},vicinity:{n:["vicinity","locality","neighborhood","neighbourhood"]},northeasterly:{s:["northeasterly","northeast"]},northeastern:{s:["northeastern","northeasterly","northeast"]},steel:{v:["steel","nerve"],n:["steel","n"]},nerve:{n:["nerve","nervus"],v:["nerve","v"]},cuddle:{v:["cuddle","snuggle","nestle","nest","nuzzle"],n:["cuddle","nestle","snuggle"]},skittish:{s:["skittish","flighty","spooky","nervous"]},aflutter:{s:["aflutter","nervous"]},nervous:{a:[_277,"neural"],s:[_277,"s"]},weathervane:{n:["weathervane","vane"]},neutral:{s:[_589,"electroneutral"],a:[_589,"a"]},achromatic:{a:["achromatic","neutral"]},inert:{s:["inert",_590,_589,"sluggish","soggy","torpid"]},impersonal:{s:["impersonal","neutral"]},neural:{a:["neural","neuronal","neuronic"]},never:{r:["never","ne'er"]},nevada:{n:["nevada","nv","nev."]},newcastle:{n:["newcastle","newcastle-upon-tyne"]},newsletter:{n:["newsletter","newssheet"]},newspaper:{n:["newspaper","newsprint","paper"]},nanogram:{n:["nanogram","ng"]},nickel:{n:["nickel","ni"]},dub:{v:["dub","nickname"]},nickname:{n:["nickname","moniker","cognomen","sobriquet","soubriquet","byname"],v:["nickname","v"]},courteous:{s:["courteous","gracious","nice"]},nice:{s:["nice","skillful"]},nightmare:{n:["nightmare","incubus"]},nothing:{n:["nothing","nil","nix","nada","null","aught","cipher","cypher","naught","zero","zilch","zip","zippo"]},nipple:{n:["nipple","mammilla","mamilla","pap","teat","tit"]},nirvana:{n:["nirvana","enlightenment"]},nisan:{n:["nisan","nissan"]},nanometer:{n:["nanometer","nanometre","nm","millimicron","micromillimeter","micromillimetre"]},nobelium:{n:["nobelium","no"]},baronial:{s:["baronial","imposing","noble","stately"]},indenture:{v:["indenture","indent"],n:["indenture","n"]},indentation:{n:["indentation","indention","indent","indenture"]},cipher:{n:["cipher","cypher","nobody","nonentity","cryptograph"],v:["cipher","v"]},zero:{n:["zero","0","nought","cipher","cypher"],s:["zero","0"]},nominated:{s:["nominated","nominative"]},not:{r:["not","non"]},nonprofit:{s:["nonprofit","non-profit-making"]},noon:{n:["noon","midday","noonday","noontide"]},northerly:{s:["northerly","northern"],r:["northerly","r"]},northwest:{r:[_591,"north-west","nor'-west"],n:[_591,"nor'-west","northwestward","nw"],s:[_591,"s"]},northwesterly:{s:["northwesterly","northwest"]},northwestern:{s:["northwestern","northwesterly","northwest"]},norway:{n:["norway","norge","noreg"]},norwegian:{a:["norwegian","norse"],n:["norwegian","norseman","norse"]},nuzzle:{v:["nuzzle","nose"]},nozzle:{n:["nozzle","nose"]},cogent:{s:["cogent",_145,"weighty"]},revealing:{s:["revealing",_145,"telltale,"],n:["revealing","n"]},tattle:{n:["tattle",_592,"telling"],v:["tattle","v"]},relation:{n:["relation",_145,"recounting"]},notion:{n:["notion","whim","whimsy","whimsey"]},november:{n:["november","nov"]},novel:{s:["novel","refreshing"]},"bric-a-brac":{n:["bric-a-brac","knickknack","nicknack","knickknackery","whatnot"]},nowadays:{r:["nowadays","now","today"],n:["nowadays","n"]},neptunium:{n:["neptunium","np"]},nudist:{n:["nudist","naturist"]},nakedness:{n:["nakedness","nudity","nudeness"]},"atom-bomb":{v:["atom-bomb","nuke"]},nuke:{v:["nuke","atomize","atomise","zap"]},openness:{n:["openness","nakedness"]},bleakness:{n:["bleakness","desolation","bareness","nakedness"]},null:{s:["null","void"],n:["null","n"]},receptiveness:{n:["receptiveness","receptivity","openness"]},numerous:{s:["numerous","legion,"]},nanny:{n:["nanny","nursemaid","nurse","nanny-goat","she-goat"]},crackpot:{n:["crackpot","crank","nut","fruitcake","screwball"]},alimentary:{s:["alimentary","alimental","nourishing","nutrient","nutritious","nutritive"]},nutritional:{a:["nutritional","nutritionary"]},o:{n:["o"]},oxygen:{n:["oxygen","o"]},obstetrics:{n:["obstetrics","ob","tocology","midwifery"]},fleshiness:{n:["fleshiness","obesity","corpulency"]},expostulation:{n:["expostulation","remonstrance","remonstration","objection"]},objective:{a:["objective","accusative","nonsubjective"],n:["objective","n"]},observation:{n:["observation",_282,_283,_120,"watching"]},observer:{n:["observer","commentator"]},perceiver:{n:["perceiver","percipient","observer","beholder"]},juncture:{n:["juncture","occasion","crossroads"]},periodic:{s:["periodic","occasional"],a:["periodic","periodical"]},episodic:{s:["episodic","occasional"]},occupied:{s:["occupied","tenanted"]},ocean:{n:["ocean","sea"]},october:{n:["october","oct"]},odd:{s:["odd","unmatched","unmated","unpaired"],a:["odd","uneven"]},wrongdoer:{n:["wrongdoer","offender"]},offense:{n:["offense","offence","offensive"]},umbrage:{n:["umbrage","offense","offence"]},discourtesy:{n:["discourtesy","offense","offence","rudeness"]},nauseating:{s:["nauseating","nauseous","noisome","queasy","loathsome",_593,"sickening","vile"]},unsavory:{a:["unsavory","unsavoury","offensive"],s:["unsavory","s"]},offensive:{s:[_593,"violative"],n:[_593,"n"],a:[_593,"a"]},disrespect:{n:["disrespect","discourtesy"],v:["disrespect","disesteem"]},distasteful:{s:["distasteful","unsavory","unsavoury"]},oblation:{n:["oblation","offering"]},policeman:{n:["policeman","officer"]},officeholder:{n:["officeholder","officer"]},official:{s:["official","prescribed"],n:["official","functionary"]},formally:{r:["formally","officially"]},offset:{v:["offset","countervail"],n:["offset","n"]},"set-back":{n:["set-back","setoff","offset"]},stolon:{n:["stolon","runner","offset"]},counterbalance:{n:[_259,"offset"],v:[_259,"v"]},offshore:{a:["offshore","seaward"]},incumbent:{n:["incumbent","officeholder"]},anoint:{v:["anoint","inunct","oil","anele","embrocate"]},ohio:{n:["ohio","oh"]},"o.k.":{n:["o.k.","ok","okay","okey","okeh"],v:["o.k.","v"],r:["o.k.","r"]},oklahoma:{n:["oklahoma","ok","okla."]},oppose:{v:["oppose",_259,"controvert","contradict"]},okay:{r:["okay","o.k.","alright"],v:["okay","v"],n:["okay","n"]},"previous,":{s:["previous,","old","premature"]},old:{s:["old","older"]},olympian:{a:[_531,"olympic"],s:[_531,"s"]},sabotage:{v:["sabotage","undermine","countermine",_409,"subvert","weaken"]},countercheck:{v:["countercheck","counteract"]},antagonize:{v:["antagonize","antagonise","counteract"]},olympus:{n:["olympus","olimbos"]},react:{v:["react","oppose","respond"]},omaha:{n:["omaha","maha"]},omega:{n:["omega","z"]},"one-third":{n:["one-third","third","tierce"]},majestic:{s:["majestic","olympian"]},ongoing:{s:["ongoing","on-going"]},"on-line,":{s:["on-line,","online"]},"on-line":{a:["on-line","online"]},gallant:{s:[_518,"lofty","majestic","proud"],n:[_518,"n"]},operational:{s:["operational","operating,"]},opponent:{s:[_594,"opposing"],n:[_594,"n"]},adversary:{n:["adversary","antagonist",_594,"opposer","resister"]},opposition:{n:[_469,_594,_406,"oppositeness"]},hustler:{n:["hustler","operator"]},operator:{n:["operator","manipulator"]},"face-to-face":{r:["face-to-face","opposite"]},diametric:{s:["diametric","diametrical",_406,"polar"],a:["diametric","a"]},opposite:{a:[_406,"paired"],n:[_406,"n"],r:[_406,"r"],s:[_406,"s"]},antonym:{n:["antonym","opposite"]},ocular:{a:["ocular","optic","optical","ophthalmic","visual"],s:["ocular","visual"],n:["ocular","n"]},resistance:{n:[_595,"opposition"]},optimum:{s:["optimum","optimal"]},optimization:{n:["optimization","optimisation"]},affirmative:{s:["affirmative","optimistic"],a:["affirmative","affirmatory"]},optimize:{v:["optimize","optimise"]},orb:{v:["orb","orbit","revolve"],n:["orb","n"]},oregon:{n:["oregon","or","ore."]},oral:{a:["oral","buccal"],s:["oral","unwritten"],n:["oral","viva"]},prophet:{n:["prophet","prophesier","oracle","seer","vaticinator"]},orange:{s:["orange","orangish"],n:["orange","orangeness"]},streetwalker:{n:["streetwalker","hooker","hustler","floozy","floozie","slattern"]},ordination:{n:["ordination","ordinance"]},regulation:{n:["regulation","ordinance","regulating","regularization","regularisation"]},harmonium:{n:["harmonium","organ"]},organization:{n:[_126,_127,"system"]},diametral:{a:["diametral","diametric","diametrical"]},eyepiece:{n:["eyepiece","ocular"]},organized:{s:["organized","organised","unionized","unionised"]},organizational:{a:["organizational","organisational"]},orgy:{n:["orgy","debauch","debauchery","saturnalia","riot","bacchanal","bacchanalia","binge","splurge"]},eyeball:{n:["eyeball","orb"],v:["eyeball","v"]},approving:{s:["approving","affirmative","approbative","approbatory","plausive"],n:["approving","n"]},resistor:{n:["resistor","resistance"]},underground:{n:[_563,"resistance"],s:[_563,"s"]},immunity:{n:["immunity","resistance"]},oriented:{a:["oriented","orientated"]},original:{n:["original","archetype","pilot"]},osmium:{n:["osmium","os"]},primitively:{r:["primitively","originally"]},extinct:{s:["extinct","out,"],a:["extinct","nonextant"]},outaouais:{n:["outaouais","ottawa"]},mentality:{n:["mentality","outlook","mindset","mind-set"]},outstanding:{s:["outstanding","owing,","undischarged","prominent","salient","spectacular","striking"]},over:{r:["over","o'er"]},"egg-shaped":{s:["egg-shaped","elliptic","elliptical","oval","oval-shaped","ovate","oviform","ovoid","prolate"]},ellipse:{n:["ellipse","oval"]},overall:{n:["overall","boilersuit"]},nightlong:{s:["nightlong","all-night","overnight"]},belowground:{s:["belowground","underground"]},consuming:{s:["consuming","overwhelming"]},overpowering:{s:["overpowering","overwhelming"]},possession:{n:["possession","ownership"]},owner:{n:["owner","possessor","proprietor"]},unsusceptibility:{n:["unsusceptibility","immunity"]},pacific:{s:["pacific","peaceable"]},pennsylvania:{n:["pennsylvania","pa","pa."]},pascal:{n:["pascal","pa"]},protactinium:{n:["protactinium","protoactinium","pa"]},p:{n:["p"]},phosphorus:{n:["phosphorus","p"]},footfall:{n:["footfall","footstep","step"]},jammed:{s:["jammed","jam-packed","packed"]},mailboat:{n:["mailboat","packet"]},foliate:{v:["foliate","paginate","page"],s:["foliate","foliated","foliaceous"],a:["foliate","foliated"]},page:{n:["page","varlet","pageboy"],v:["page","v"]},rouge:{n:["rouge","paint","blusher"]},paint:{n:["paint","pigment"]},pad:{v:["pad","bolster"],n:["pad","inkpad","tablet"]},diggings:{n:["diggings","digs","domiciliation","lodgings","pad"]},gainful:{s:["gainful","paid","paying"]},nonrecreational:{s:["nonrecreational","paid"]},irritating:{s:["irritating","painful","irritative"]},afflictive:{s:["afflictive","painful","sore"]},cougar:{n:["cougar","puma","catamount","painter","panther"]},motley:{s:["motley","calico","multicolor","multi-color","multicolour","multi-colour","multicolored","multi-colored","multicoloured","multi-coloured","painted","particolored","particoloured","piebald","pied","varicolored","varicoloured"],v:["motley","parti-color"],n:["motley","n"]},pale:{s:["pale","pallid","wan","sick"],v:["pale","blanch","blench"],n:["pale","n"]},picket:{n:["picket","pale","piquet"]},palm:{n:["palm","thenar"],v:["palm","v"]},palestine:{n:["palestine","canaan"]},boater:{n:["boater","leghorn","panama","sailor","skimmer"]},panic:{n:["panic","scare","terror","affright"]},empanel:{v:["empanel","impanel","panel"]},panel:{n:["panel","venire"],v:["panel","v"]},wallpaper:{v:["wallpaper","paper"]},"self-control":{n:["self-control","self-possession","possession","willpower","self-command","self-will"]},monomania:{n:["monomania","possession"]},paperback:{s:["paperback","paperbacked"]},bloomers:{n:["bloomers","pants","drawers","knickers"]},parallel:{v:[_265,"collimate"],n:[_265,"n"]},belem:{n:["belem","para"]},paratrooper:{n:["paratrooper","para"]},parity:{n:["parity","para"]},slug:{v:["slug","slog","swig"],n:["slug","n"]},parental:{a:["parental","maternal","paternal"]},vary:{v:["vary","variegate","motley"]},fantan:{n:["fantan","sevens","parliament"]},player:{n:["player","participant"]},participant:{n:["participant","player"]},"fond,":{s:["fond,","partial,"]},overtone:{n:["overtone","partial"]},finical:{s:["finical","finicky","fussy",_388,"picky"]},particular:{s:[_388,"special"],n:[_388,"specific"]},"particular,":{s:["particular,","peculiar,","special,"]},boatman:{n:["boatman","boater","waterman"]},collaborator:{n:["collaborator","cooperator","partner","pardner","collaborationist","quisling"]},"self-denial":{n:["self-denial","self-discipline","self-control"]},sluggard:{n:["sluggard","slug"]},glue:{v:["glue","paste"],n:["glue","gum","mucilage"]},passenger:{n:["passenger","rider"]},"past,":{s:["past,","preceding,","retiring,"]},past:{n:["past","yesteryear"],r:["past","r"]},recommendation:{n:["recommendation","passport","testimonial"]},password:{n:["password","watchword","word","parole","countersign"]},mania:{n:["mania",_528,"cacoethes"]},rage:{n:["rage","passion"],v:["rage","v"]},passion:{n:[_528,"passionateness"]},paul:{n:["paul","saul"]},paroxetime:{n:["paroxetime","paxil"]},solitaire:{n:["solitaire","patience"]},patience:{n:["patience","forbearance","longanimity"]},compensable:{s:["compensable","paying,","remunerative","salaried","stipendiary"]},requital:{n:["requital","payment"]},payment:{n:["payment","defrayal","defrayment"]},palladium:{n:["palladium","pd"]},pavilion:{n:["pavilion","marquee"]},payroll:{n:["payroll","paysheet"]},peaceful:{a:["peaceful","peaceable"],s:["peaceful","s"]},petabyte:{n:["petabyte","pebibyte","pb","pib"]},petabit:{n:["petabit","pbit","pb"]},pediatric:{a:["pediatric","paediatric"]},peace:{n:["peace","pacification","peacefulness","repose","serenity","heartsease","ataraxis"]},percentage:{n:["percentage","percent","pct"]},undress:{v:["undress","discase","uncase","unclothe","strip","disrobe","peel"]},peel:{n:["peel","skin"],v:["peel","v"]},peeing:{n:["peeing","pee","pissing","piss"]},urine:{n:["urine","piss","pee","piddle","weewee","water"]},penitentiary:{n:["penitentiary","pen"],s:["penitentiary","s"]},playpen:{n:["playpen","pen"]},insignificant:{s:["insignificant","peanut"],a:["insignificant","unimportant"]},peanut:{n:["peanut","earthnut","goober","groundnut"],s:["peanut","s"]},punishment:{n:["punishment","penalty","penalization","penalisation"]},capsicum:{n:["capsicum","pepper"]},perfect:{v:["perfect","hone"],n:["perfect","n"]},perfective:{n:["perfective","perfect"]},citizenry:{n:["citizenry","people"]},sensing:{n:["sensing","perception"]},percept:{n:["percept","perception"]},sensed:{s:["sensed","perceived"]},perceive:{v:["perceive","comprehend"]},confederate:{n:[_241,"collaborator","henchman"],s:[_241,"s"]},sporadically:{r:["sporadically","periodically"]},individualized:{s:["individualized","individualised","personalized","personalised"]},iranian:{a:["iranian","persian"],n:["iranian","n"]},persian:{n:[_597,"farsi"],a:[_597,"a"]},irani:{n:["irani","iranian","persian"]},bark:{v:["bark","skin"],n:["bark","barque"]},baldhead:{n:["baldhead","baldpate","baldy","skinhead","skin"]},skinhead:{n:["skinhead","skin"]},prayer:{n:["prayer","petition","orison","supplicant","supplication"]},bantam:{s:["bantam","diminutive","lilliputian","midget","petite","tiny","flyspeck"]},retribution:{n:["retribution","requital"]},dinky:{s:["dinky","insignificant"],n:["dinky","dinkey"]},penitential:{s:["penitential","penitentiary"]},pest:{n:["pest","blighter","cuss","pesterer","gadfly"]},plague:{n:["plague","pestilence","pest","pestis"],v:["plague","v"]},pharmaceutical:{a:["pharmaceutical","pharmaceutic"],n:["pharmaceutical","pharmaceutic"]},accomplice:{n:["accomplice","confederate"]},drugstore:{n:["drugstore","chemist's","pharmacy"]},pharmacy:{n:["pharmacy","pharmaceutics"]},philosophical:{s:["philosophical","philosophic"],a:["philosophical","a"]},philosophic:{a:["philosophic","philosophical"],s:["philosophic","s"]},"ph.d.":{n:["ph.d.","phd"]},photographer:{n:["photographer","lensman"]},idiom:{n:["idiom","phrase"]},forcible:{s:["forcible","physical","strong-arm"]},deprive:{v:["deprive","strip","divest","impoverish"]},airstrip:{n:["airstrip","strip"]},piano:{r:["piano","softly"],a:["piano","soft"],n:["piano","pianissimo","pianoforte","forte-piano"]},vengeance:{n:["vengeance","retribution","payback"]},picking:{n:["picking","pick"]},blight:{v:["blight","plague"]},infestation:{n:["infestation","plague"]},parlance:{n:["parlance","idiom"]},farrow:{v:["farrow","pig"],n:["farrow","farrowing"]},hog:{n:["hog","pig","grunter","squealer","hogget","hogg"]},slob:{n:["slob","sloven","pig"]},pill:{n:["pill","anovulant","lozenge","tablet","tab"]},pickup:{n:["pickup","getaway","pick-me-up"]},expressway:{n:["expressway","freeway","motorway","pike","superhighway","throughway","thruway"]},pioneer:{n:["pioneer","innovator","trailblazer","groundbreaker"],v:["pioneer","v"]},shriek:{v:["shriek","shrill","pipe"],n:["shriek","n"]},pipe:{n:["pipe","tube","pipage","piping"],v:["pipe","v"]},pistol:{n:["pistol","handgun"]},pyx:{n:["pyx","pix"]},pixel:{n:["pixel","pel"]},"aforethought(ip)":{s:["aforethought(ip)","planned","plotted"]},planner:{n:["planner","contriver","deviser"]},satellite:{n:["satellite","planet","orbiter"]},planning:{n:["planning",_285,"provision"]},plastic:{s:["plastic","pliant"]},fictile:{s:["fictile","moldable","plastic","pliable"]},screech:{n:[_483,"screeching","shriek","shrieking","scream","screaming"],v:[_483,"v"]},scream:{n:["scream","screaming","shriek","shrieking",_483,"screeching"],v:["scream","v"]},plaintiff:{n:["plaintiff","complainant"]},playboy:{n:["playboy","man-about-town","corinthian"]},plasma:{n:["plasma","plasm"]},platinum:{n:["platinum","pt"]},chopine:{n:["chopine","platform"]},platform:{n:["platform","program"]},supplication:{n:["supplication","plea"]},scold:{n:["scold","scolder","nag","nagger"],v:["scold","v"]},pleasure:{n:["pleasure","pleasance"]},bathymetry:{n:["bathymetry","plumbing"]},plumbing:{n:["plumbing","plumbery"]},promethium:{n:["promethium","pm"]},autopsy:{n:["autopsy","necropsy","postmortem","post-mortem","pm"]},plug:{v:["plug","secure"],n:["plug","stopper","stopple"]},fireplug:{n:["fireplug","plug"]},ballyhoo:{n:["ballyhoo","hoopla","hype","plug"]},plus:{s:["plus","positive"],n:["plus","n"]},plenty:{n:["plenty","plentifulness","plenteousness","plenitude","plentitude"],r:["plenty","r"]},sew:{v:["sew","tailor","tailor-make","stitch"]},polonium:{n:["polonium","po"]},poetry:{n:["poetry","poesy","verse"]},poison:{v:["poison","envenom"],n:["poison","toxicant"]},poland:{n:["poland","polska"]},dawdler:{n:["dawdler","drone","laggard","lagger","trailer","poke"]},poke:{n:["poke","garget","scoke"],v:["poke","v"]},punt:{v:["punt","pole"],n:["punt","punting"]},squawk:{v:["squawk","screak","skreak","skreigh","screech"],n:["squawk","n"]},poll:{v:["poll","pollard","canvass"],n:["poll","canvass"]},pivotal:{s:["pivotal","polar"]},yell:{v:["yell","scream"],n:["yell","n"]},poker:{n:["poker","salamander"]},politician:{n:["politician","politico","pol"]},befoulment:{n:["befoulment","defilement","pollution"]},milled:{s:["milled","polished"]},polished:{s:["polished",_525,"urbane"]},popular:{s:["popular","pop"]},pop:{n:["pop","popping","soda","tonic"],v:["pop","v"],s:["pop","s"]},polyphonic:{a:["polyphonic","contrapuntal","polyphonous"]},pope:{n:["pope","pontiff"]},port:{s:["port","larboard"],n:["port","embrasure","porthole"]},larboard:{n:["larboard","port"],s:["larboard","s"]},pork:{n:["pork","porc"]},dowry:{n:["dowry","dowery","dower","portion"]},invocation:{n:["invocation","supplication"]},doorkeeper:{n:["doorkeeper","doorman","porter","gatekeeper","ostiary","ostiarius"]},portuguese:{a:["portuguese","lusitanian"]},"self-discipline":{n:["self-discipline","self-denial"]},aligning:{s:["aligning","positioning"]},portsmouth:{n:["portsmouth","pompey"]},affectation:{n:["affectation","mannerism","pose","affectedness"]},airs:{n:["airs","pose"]},sitting:{n:[_599,"posing"],a:[_599,"a"]},hammock:{n:["hammock","sack"]},cocksure:{s:["cocksure","overconfident","positive"]},positive:{s:[_598,"electropositive","prescribed"],a:[_598,"confirming"]},positivist:{a:["positivist","positivistic","positive"],n:["positivist","rationalist"]},incontrovertible:{s:["incontrovertible","irrefutable","positive"]},postcard:{n:["postcard","mailing-card"]},pottery:{n:["pottery","clayware"]},powderize:{v:["powderize","powderise","powder","pulverize","pulverise"]},gunpowder:{n:["gunpowder","powder"]},powder:{n:["powder","pulverization","pulverisation"],v:["powder","v"]},poverty:{n:["poverty","poorness","impoverishment"]},praseodymium:{n:["praseodymium","pr"]},herculean:{s:["herculean","powerful"]},brawny:{s:["brawny","hefty","muscular",_457,"sinewy"]},potent:{s:["potent",_457,"strong"],a:["potent","virile","strong","stiff"]},"knock-down,":{s:["knock-down,","powerful"]},practitioner:{n:["practitioner","practician"]},prague:{n:["prague","praha","prag"]},"virtual,":{s:["virtual,","practical,"]},hardheaded:{s:["hardheaded","hard-nosed","practical",_600,"mulish"]},conjuring:{n:["conjuring","conjuration","conjury","invocation"]},precious:{r:[_489,"preciously"],s:[_489,"s"]},valued:{s:["valued","precious"]},cherished:{s:["cherished",_489,"treasured","wanted"]},precipitation:{n:["precipitation","downfall"]},preciseness:{n:["preciseness","precision","clearcutness"]},seated:{a:["seated","sitting"]},seance:{n:["seance",_599,"session"]},marauder:{n:["marauder","predator","vulture","piranha"]},crump:{v:["crump","thud","scrunch"]},demonstrable:{s:["demonstrable","incontrovertible","provable"]},preferable:{s:["preferable","preferred"]},premier:{s:[_443,"premiere"],v:[_443,"premiere"],n:[_443,"n"]},"fraught,":{s:["fraught,","pregnant"]},bounty:{n:["bounty","premium","bounteousness"]},agio:{n:["agio","agiotage","premium"]},postpaid:{s:["postpaid","prepaid"]},training:{n:["training",_285,"grooming"]},readiness:{n:["readiness","preparedness",_285,"eagerness","zeal","forwardness"]},preparation:{n:[_285,"readying"]},"disposed,":{s:["disposed,","fain","inclined,","prepared"]},pressing:{s:["pressing","urgent"],n:["pressing","n"]},preview:{n:["preview","prevue","trailer"]},"make-believe":{s:["make-believe","pretend"],n:["make-believe","pretend"]},profess:{v:["profess","pretend"]},preservation:{n:["preservation","saving"]},previously:{r:["previously","antecedently"]},pride:{v:["pride","plume","congratulate"],n:["pride","superbia","pridefulness"]},presumably:{r:["presumably","presumptively"]},priority:{n:["priority","antecedence","antecedency","anteriority","precedence","precedency"]},precedence:{n:["precedence","precedency","priority"]},printer:{n:["printer","pressman"]},anterior:{s:["anterior","prior,"]},amplitude:{n:["amplitude","bountifulness","bounty"]},privacy:{n:["privacy","privateness","secrecy","concealment","seclusion"]},professional:{n:["professional","pro"]},proceeding:{n:["proceeding","proceedings"]},refined:{a:[_525,"processed"],s:[_525,"s"]},procurement:{n:["procurement","procurance","procural"]},product:{n:["product","production"]},productiveness:{n:["productiveness","productivity"]},generative:{a:["generative","productive"],s:["generative","procreative","reproductive"]},pretense:{n:["pretense","pretence","make-believe","feigning","dissembling","pretending","simulation"]},winnings:{n:["winnings","win","profits"]},profession:{n:["profession","professing"]},visibility:{n:["visibility","profile","visibleness"]},program:{v:[_220,"programme"],n:[_220,"programme"]},profound:{s:["profound","unfathomed","unplumbed","unsounded"]},professor:{n:["professor","prof"]},programmer:{n:["programmer","coder"]},programming:{n:["programming","programing"]},scheduling:{n:["scheduling","programming","programing"]},progressive:{s:["progressive","reformist","reform-minded"],n:["progressive","imperfect"]},precession:{n:["precession","precedence","precedency"]},promptly:{r:["promptly","readily","pronto","quickly","quick"]},proofread:{v:["proofread","proof"]},validation:{n:["validation","proof","substantiation"]},proprietorship:{n:["proprietorship","proprietary"]},proposal:{n:["proposal","proposition"]},suggestion:{n:["suggestion","proposition","proffer","prompting"]},prostate:{a:["prostate","prostatic"]},protrusion:{n:["protrusion","projection","jut","jutting"]},protected:{s:["protected","saved"]},jutting:{s:["jutting","projected","projecting","protruding","relieved","sticking,"],n:["jutting","n"]},protection:{n:["protection","tribute","shelter"]},auspices:{n:["auspices","protection","aegis"]},connote:{v:["connote","predicate"]},pursuance:{n:["pursuance","prosecution"]},supplier:{n:["supplier","provider"]},proved:{a:["proved","proven"]},fluoxetine:{n:["fluoxetine","prozac","sarafem"]},province:{n:["province","responsibility"]},guise:{n:["guise","pretense","pretence","pretext"]},pretension:{n:["pretension","pretense","pretence"]},proxy:{n:["proxy","placeholder","procurator"]},psychiatry:{n:["psychiatry","psychopathology"]},commissariat:{n:["commissariat","provisions","provender","viands","victuals"]},publicly:{r:["publicly","publically"]},publication:{n:["publication","publishing"]},promulgated:{s:["promulgated","published"]},"sneaking,":{s:["sneaking,","unavowed"]},kindling:{n:["kindling","tinder","touchwood","spunk","punk"]},outhouse:{n:["outhouse","privy","earth-closet","jakes"]},puppy:{n:["puppy","pup"]},hypnotism:{n:["hypnotism","mesmerism","suggestion"]},leverage:{n:["leverage","purchase","leveraging"]},punish:{v:["punish","penalize","penalise"]},empurpled:{s:["empurpled","over-embellished","purple"]},purple:{s:["purple","violet","purplish"],v:["purple","empurple","purpurate"],n:["purple","purpleness"]},pure:{s:["pure","vestal","virgin","virginal","virtuous"],a:["pure","a"]},saturated:{a:["saturated","pure","concentrated"]},purulent:{s:["purulent","pussy"]},puzzle:{n:["puzzle","puzzler","mystifier","teaser"],v:["puzzle","v"]},q:{n:["q"]},qatar:{n:["qatar","katar"]},quartet:{n:["quartet","quartette","quadruplet","quadruple","foursome"]},putt:{n:["putt","putting"]},restricted:{s:["restricted","qualified"]},chivalrous:{s:["chivalrous",_518,"knightly"]},dashing:{s:["dashing","gallant"]},squire:{n:["squire","gallant"]},quarter:{v:[_144,"billet","canton"],n:[_144,"n"]},stern:{n:["stern",_144,"poop","tail"],s:["stern","strict","exacting"]},tabby:{n:["tabby","queen"],s:["tabby","s"]},quest:{n:["quest","seeking"],v:["quest","v"]},quick:{s:["quick","warm","ready","speedy"],r:["quick","r"]},agile:{s:["agile","nimble","quick","spry"]},quietly:{r:["quietly","quiet"]},hushed:{s:["hushed","muted",_503,"quiet"]},quiet:{s:["quiet","restrained"],v:["quiet","v"],r:["quiet","r"],n:["quiet","n"]},repose:{n:["repose","quiet","placidity","serenity","tranquillity","tranquility"],v:["repose","v"]},silence:{n:[_465,"quiet"],v:[_465,"v"]},tranquillity:{n:["tranquillity","tranquility","quiet","quietness","quietude"]},lull:{n:["lull","quiet"],v:["lull","v"]},restfully:{r:["restfully","quietly"]},softly:{r:["softly","quietly"]},foreswear:{v:["foreswear",_298,"quit","relinquish"]},cursorily:{r:["cursorily","quickly"]},quickly:{r:["quickly","rapidly","speedily","chop-chop","apace"]},rabbit:{n:["rabbit","hare","coney","cony"]},lapin:{n:["lapin","rabbit"]},ra:{n:["ra","re"]},radium:{n:["radium","ra"]},radius:{n:["radius","r"]},r:{n:["r"],r:["r","r"]},roentgen:{n:["roentgen","r","rontgen"]},racetrack:{n:["racetrack","racecourse","raceway","track"]},scud:{v:["scud","rack"],n:["scud","scudding"]},extort:{v:["extort",_65,"rack","gouge","wring"]},"single-foot":{v:["single-foot","rack"],n:["single-foot","n"]},wrack:{n:["wrack","rack"]},racism:{n:["racism","racialism"]},dapper:{s:["dapper","dashing","jaunty","natty","raffish","rakish","spiffy","snappy","spruce"]},spoke:{n:["spoke","radius"]},austere:{s:["austere","severe","stark","stern"]},grim:{s:["grim","inexorable","relentless","stern","unappeasable","unforgiving","unrelenting"]},brindled:{s:["brindled","brindle","brinded","tabby"]},radiotherapy:{n:["radiotherapy","radiation","actinotherapy","irradiation"]},radiation:{n:["radiation","radioactivity"]},dragoon:{v:["dragoon","sandbag","railroad"]},railway:{n:["railway","railroad"]},foray:{n:["foray","raid","maraud"],v:["foray","v"]},rain:{n:["rain","pelting","rainwater","rainfall"]},fulminate:{v:["fulminate","rail"]},vilify:{v:["vilify","revile","vituperate","rail"]},rail:{v:["rail","inveigh"],n:["rail","n"]},track:{n:["track","rail","rails","runway","running","cartroad"],v:["track","v"]},railing:{n:["railing","rail"]},radar:{n:["radar","radiolocation"]},radio:{n:["radio","wireless","radiocommunication"]},raising:{n:["raising","rearing","nurture"]},letup:{n:["letup","lull"]},waive:{v:["waive","relinquish","forgo","forego","foreswear"]},raleigh:{n:["raleigh","ralegh"]},"raised,":{s:["raised,","elevated"]},brocaded:{s:["brocaded","embossed","raised"]},commando:{n:["commando","ranger"]},rank:{v:["rank","outrank"],s:["rank","s"],n:["rank","n"]},secrecy:{n:["secrecy","secretiveness","silence"]},muteness:{n:["muteness","silence"]},"ranking,":{s:["ranking,",_435,"higher-ranking"]},witwatersrand:{n:["witwatersrand","rand","reef"]},recumb:{v:["recumb","repose","recline"]},graded:{s:["graded","ranked","stratified"]},rare:{s:["rare","uncommon","rarefied","rarified"]},squeeze:{n:[_65,"wring","squeezing"],v:[_65,"v"]},informer:{n:["informer","betrayer","rat","squealer","blabber"]},scab:{n:["scab","strikebreaker","blackleg","rat"],v:["scab","v"]},rarely:{r:["rarely","seldom"]},resuscitate:{v:["resuscitate","revive"]},rapid:{s:["rapid","speedy"]},rubidium:{n:["rubidium","rb"]},irradiate:{v:["irradiate","ray"]},radiate:{v:[_368,"ray"],s:[_368,"s"]},re:{n:["re","ray"]},rhenium:{n:["rhenium","re"]},ascetic:{s:[_601,"ascetical","austere","spartan"],a:[_601,"ascetical"],n:[_601,"n"]},lector:{n:["lector","lecturer","reader"]},proofreader:{n:["proofreader","reader"]},reviewer:{n:["reviewer","referee","reader"]},reaction:{n:["reaction","response"]},naturalistic:{s:["naturalistic","realistic"]},dour:{s:["dour","forbidding","grim"]},ghastly:{s:["ghastly","grim","grisly","gruesome","macabre","sick"]},truly:{r:["truly","genuinely","really"]},reality:{n:["reality","realness","realism"]},realize:{v:[_172,_173,"actualize","actualise","substantiate"]},recognize:{v:[_128,_129,_172,_173,"agnize","agnise"]},reasonable:{s:["reasonable","sane"],a:["reasonable","sensible"]},reception:{n:["reception","receipt","response"]},rebecca:{n:["rebecca","rebekah"]},recipient:{n:["recipient","receiver"]},mutism:{n:["mutism","muteness"]},rotatory:{a:["rotatory","revolutionary"]},revolutionist:{n:["revolutionist",_360,"subversive","subverter"]},recognized:{s:["recognized","recognised"]},registrar:{n:["registrar","record-keeper","recorder"]},liquidator:{n:["liquidator","receiver"]},receding:{n:["receding","recession","fadeout"]},recession:{n:["recession","recessional"]},recording:{n:["recording","transcription"]},enlighten:{v:["enlighten","irradiate","edify"]},refreshment:{n:["refreshment","recreation"]},holocene:{n:["holocene","recent"]},recruitment:{n:["recruitment","enlisting"]},cured:{s:["cured","healed","recovered","vulcanized","vulcanised"]},radial:{s:["radial","stellate","radiate"]},diversify:{v:["diversify",_368,"broaden"]},ransom:{v:["ransom","redeem"]},recovery:{n:["recovery","retrieval"]},convalescence:{n:["convalescence","recuperation","recovery"]},redhead:{n:["redhead","redheader","red-header","carrottop"]},bobbin:{n:["bobbin","spool","reel"]},reduced:{s:["reduced","rock-bottom"],a:["reduced","a"]},referee:{n:["referee","ref"],v:["referee","umpire"]},reduction:{n:["reduction","reducing","simplification"]},refrigerator:{n:["refrigerator","icebox"]},refresh:{v:["refresh","freshen","refreshen"]},freshen:{v:["freshen","refresh","refreshen"]},reflection:{n:[_282,_283,"reflectivity"]},contemplation:{n:["contemplation",_282,_283,"rumination","musing","thoughtfulness"]},sincerely:{r:["sincerely","unfeignedly","truly"]},rightfully:{r:["rightfully","truly"]},regardless:{r:["regardless","irrespective","disregardless","disregarding"],s:["regardless","s"]},"careless,":{s:["careless,","regardless"]},"cross-file":{v:["cross-file","register"]},register:{n:[_401,"registry"],v:[_401,"v"]},commentator:{n:["commentator","reviewer"]},regimen:{n:["regimen","regime"]},repent:{v:["repent","regret","rue","atone"]},sorrow:{n:["sorrow","regret","rue","ruefulness"],v:["sorrow","v"]},regulative:{s:["regulative","regulatory"]},murderer:{n:["murderer","liquidator","manslayer"]},reinforce:{v:["reinforce","reward","reenforce"]},jilted:{s:["jilted","rejected","spurned"]},reclamation:{n:["reclamation","renewal","rehabilitation","reformation"]},corned:{s:["corned","cured"]},liberalization:{n:["liberalization","liberalisation","relaxation"]},relaxation:{n:[_422,"loosening","slackening"]},easiness:{n:["easiness","relaxation"]},whirl:{v:["whirl","birl","spin","twirl","tumble"],n:["whirl","swirl","vortex","convolution","commotion"]},tailspin:{n:["tailspin","spin"]},dependability:{n:["dependability","dependableness","reliability","reliableness"]},relate:{v:["relate","interrelate"]},kinship:{n:["kinship","relationship"]},relevance:{n:["relevance","relevancy"]},relatively:{r:["relatively","comparatively"]},recharge:{v:["recharge","reload"]},relations:{n:["relations","dealings"]},resettlement:{n:["resettlement","relocation"]},loath:{s:["loath","loth","reluctant"]},religious:{s:["religious","spiritual"]},relieve:{v:[_297,"lighten","alleviate","palliate","assuage"]},unbosom:{v:["unbosom","relieve"]},noteworthy:{s:["noteworthy","remarkable","notable"]},remarkable:{s:["remarkable","singular"]},grieve:{v:["grieve","sorrow","aggrieve"]},sadness:{n:["sadness","sorrow","sorrowfulness","unhappiness"]},"outback,":{s:["outback,","remote"]},recapitulation:{n:["recapitulation","recap","review"]},revue:{n:["revue","review"]},"follow-up":{n:["follow-up","followup","reexamination","review"]},reappraisal:{n:["reappraisal","revaluation","review","reassessment"]},rep:{n:["rep","repp"]},removal:{n:["removal","remotion"]},rebirth:{n:[_478,"renaissance","renascence"]},renaissance:{n:["renaissance","renascence"]},obliterable:{s:["obliterable","removable"]},reincarnate:{v:["reincarnate","renew","transmigrate"]},reply:{n:["reply","response"],v:["reply","v"]},refilling:{n:["refilling","replenishment",_247,"renewal"]},replacement:{n:[_247,"replacing"]},rental:{n:["rental","renting"]},supplant:{v:["supplant","replace","supersede"]},successor:{n:["successor",_247,"heir"]},abate:{v:["abate","slack"]},slake:{v:["slake","abate","slack"]},slow:{v:["slow","slack","slacken"],r:["slow","r"],s:["slow","s"]},reporter:{n:["reporter","newsman","newsperson"]},perennial:{s:["perennial","recurrent","repeated"]},regurgitate:{v:["regurgitate","reproduce"]},reproduce:{v:["reproduce","procreate","multiply"]},reprint:{v:[_420,"reissue"],n:[_420,"n"]},reissue:{n:["reissue",_420,"reprinting"],v:["reissue","v"]},affinity:{n:["affinity","kinship"]},congressman:{n:["congressman","congresswoman","representative"]},nonmigratory:{a:["nonmigratory","resident"]},resident:{n:["resident","occupant","occupier"],a:["resident","a"]},antipathetic:{s:["antipathetic","antipathetical","averse,","indisposed,","loath,","loth,"]},twirl:{v:["twirl","swirl","twiddle","whirl"],n:["twirl","n"]},readjust:{v:["readjust","reset","readapt"]},residency:{n:["residency","residence","abidance"]},residence:{n:["residence","abode"]},reservoir:{n:["reservoir","source"]},militia:{n:["militia","reserves"]},repellent:{s:[_462,"resistant"],n:[_462,"repellant"]},insubordinate:{s:["insubordinate",_554,"resistive"]},tolerant:{s:["tolerant","resistant"]},respondent:{n:["respondent","responder","answerer"],s:["respondent","s"]},respected:{s:["respected","well-thought-of"]},restaurant:{n:["restaurant","eatery"]},"respective,":{s:["respective,","several,","various,"]},respectively:{r:["respectively","severally"]},inhibit:{v:["inhibit","suppress"]},responsibility:{n:["responsibility","responsibleness"]},gloominess:{n:["gloominess","lugubriousness","sadness"]},creditworthy:{s:["creditworthy","responsible"]},solved:{a:["solved","resolved"]},"single-minded":{s:["single-minded","resolved"]},decelerate:{v:["decelerate","slow","retard"]},reincarnation:{n:["reincarnation",_478,"renascence"]},metempsychosis:{n:["metempsychosis","rebirth"]},resume:{v:["resume","restart","re-start"],n:["resume","n"]},quench:{v:["quench","slake","allay","assuage"]},palingenesis:{n:["palingenesis","recapitulation"]},flange:{n:["flange","rim"]},reward:{v:["reward","repay"],n:["reward","reinforcement"]},wages:{n:["wages","reward","payoff"]},ribbon:{n:["ribbon","thread"]},ample:{s:["ample","copious","plenteous","plentiful","rich","sizable","sizeable"]},"full-bodied":{s:["full-bodied","racy","rich","robust"]},revenge:{v:["revenge","avenge","retaliate"],n:["revenge","n"]},retaliation:{n:["retaliation","revenge"]},carouse:{v:["carouse","roister","riot"],n:["carouse","carousal","bender","toot","booze-up"]},rioting:{n:["rioting","riot"]},haystack:{n:["haystack","hayrick","rick"]},crick:{n:["crick","kink","rick","wrick"]},reunion:{n:["reunion","reunification"]},farcical:{s:["farcical","ludicrous","ridiculous"]},absurd:{s:["absurd","cockeyed","derisory","idiotic","laughable","ludicrous","nonsensical","preposterous","ridiculous"]},pathetic:{s:["pathetic","ridiculous","silly","pitiable","pitiful"]},"returning,":{s:["returning,","reversive"]},returning:{s:["returning","reverting"]},rhodium:{n:["rhodium","rh"]},palaver:{n:[_334,"rhetoric"],v:[_334,"v"]},grandiosity:{n:["grandiosity","magniloquence","ornateness","grandiloquence","rhetoric"]},rutherfordium:{n:["rutherfordium","rf","unnilquadium","unq"]},roentgenium:{n:["roentgenium","rg"]},revelation:{n:["revelation","apocalypse"]},riding:{n:["riding","equitation"]},ridge:{n:["ridge","ridgepole","rooftree","ridgeline"]},ritual:{n:["ritual","rite"]},rotation:{n:["rotation","revolution","gyration"]},acclivitous:{s:["acclivitous","rising","uphill"]},rebellion:{n:["rebellion","insurrection","revolt","rising","uprising"]},riverbank:{n:["riverbank","riverside"]},radon:{n:["radon","rn"]},roman:{a:["roman","r.c.","romanist","romish","popish","papist","papistic","papistical","romanic"]},roads:{n:["roads","roadstead"]},automaton:{n:["automaton","robot","golem","zombi","zombie"]},road:{n:["road","route"]},roughly:{r:["roughly","rough"]},uncut:{a:["uncut","rough"],s:["uncut","s"]},rough:{a:["rough","rocky","bumpy","jolty","jolting","jumpy","unsmooth"],s:["rough","s"],r:["rough","r"]},pugnacious:{s:["pugnacious","rough"]},grating:{s:["grating","gravelly","rasping","raspy","rough","scratchy"],n:["grating","n"]},rocky:{s:["rocky","rough","bouldery","bouldered","stony"],a:["rocky","a"]},robin:{n:["robin","redbreast"]},russell:{n:["russell","a.e."]},commiseration:{n:["commiseration","pity","ruth","pathos"]},rebarbative:{s:["rebarbative",_462,"repellant"]},rowing:{n:["rowing","row"]},rolled:{s:["rolled","rolling","trilled"]},wheeling:{n:["wheeling","rolling"]},rover:{n:["rover","scouter"]},wanderer:{n:["wanderer","roamer","rover"]},gat:{n:["gat","rod"]},furled:{s:["furled","rolled"]},involute:{s:["involute","rolled"]},rome:{n:["rome","roma"]},quixotic:{s:["quixotic",_604,"wild-eyed"]},amatory:{s:["amatory","amorous","romantic"]},romantic:{a:[_604,_605,"romanticistic"],s:[_604,"s"],n:[_604,"n"]},romanticist:{n:[_605,"romantic"],a:[_605,"a"]},rubber:{s:["rubber","no-good"],n:["rubber","caoutchouc"],v:["rubber","v"]},rubberize:{v:["rubberize","rubberise","rubber"]},regnant:{s:["regnant","reigning","ruling"]},smuggler:{n:["smuggler","runner","contrabandist","moon-curser"]},romania:{n:["romania","roumania","rumania"]},ron:{n:["ron","bokkos","daffo"]},deflower:{v:["deflower","ruin"]},downfall:{n:["downfall","ruin","ruination"]},ruin:{n:["ruin","ruination"],v:["ruin","v"]},dilapidation:{n:["dilapidation","ruin"]},rumor:{v:["rumor","rumour","bruit"],n:["rumor","rumour","hearsay"]},rose:{s:["rose","roseate","rosaceous"],n:["rose","rosiness","rosebush"]},sa:{n:["sa","sturmabteilung"]},rugby:{n:["rugby","rugger"]},rwanda:{n:["rwanda","ruanda"]},s:{n:["s"],s:["s","s"]},mho:{n:["mho","siemens","s"]},south:{n:["south","southward","s"]},sulfur:{n:["sulfur","s","sulphur"],v:["sulfur","v"]},hussein:{n:["hussein","husain","husayn","saddam"]},ruthenium:{n:["ruthenium","ru"]},hallowed:{s:["hallowed","sacred"]},salt:{n:["salt","saltiness","salinity"]},roommate:{n:["roommate","roomie","roomy"]},suite:{n:["suite","rooms"]},obeche:{n:["obeche","obechi","arere","samba"]},sortie:{n:["sortie","sally"]},"aforesaid,":{s:["aforesaid,","aforementioned,","said,"]},"pink-orange":{s:["pink-orange","pinkish-orange","salmon"]},wheedle:{v:["wheedle","cajole",_334,"blarney","coax","sweet-talk","inveigle"]},blandishment:{n:["blandishment","cajolery",_334,"wheedling"]},retral:{s:["retral","retrograde"]},regress:{v:[_93,_524,"retrogress"],n:[_93,"n"]},sage:{s:["sage","sage-green"],n:["sage","salvia"]},redemption:{n:["redemption","salvation","repurchase","buyback"]},azure:{n:["azure","cerulean","sapphire","lazuline","sky-blue"],s:["azure","cerulean","sky-blue"]},glide:{n:["glide","gliding","sailplaning","soaring","sailing"]},lapp:{n:["lapp","sami","saami","same","saame","lapplander"]},sandpaper:{v:["sandpaper","sand"]},backbone:{n:["backbone","grit","guts","moxie","sand","gumption"]},arenaceous:{a:["arenaceous","sandy","sandlike"]},flaxen:{s:["flaxen","sandy"]},atonement:{n:["atonement","expiation","satisfaction"]},gratification:{n:["gratification","satisfaction"]},saturday:{n:["saturday","sabbatum","sat"]},satisfy:{v:["satisfy","gratify","fulfill","fulfil"]},proverb:{n:["proverb","adage","saw","byword"]},suppose:{v:[_87,"say"]},allege:{v:["allege","aver","say"]},antimony:{n:["antimony","sb"]},"saudi-arabian":{a:["saudi-arabian","saudi"]},scandium:{n:["scandium","sc"]},redemptive:{s:["redemptive","redeeming,","saving,"],a:["redemptive","redemptional","redemptory"]},savanna:{n:["savanna","savannah"]},frighten:{v:["frighten","fright","scare","affright"]},frightened:{s:["frightened","scared"]},schema:{n:["schema","scheme"]},quenched:{s:["quenched","satisfied","slaked"]},scale:{v:["scale","descale","surmount"],n:["scale","scurf","exfoliation"]},rescuer:{n:["rescuer","recoverer","saver"]},system:{n:["system","scheme"]},scots:{a:["scots","scottish","scotch"],n:["scots","n"]},scottish:{n:["scottish","scots"],a:["scottish","a"]},chilling:{s:["chilling","scary","shivery","shuddery"],n:["chilling","n"]},learner:{n:["learner","scholar","assimilator"]},scholar:{n:["scholar","bookman","student"]},scramble:{v:[_308,"jumble"],n:[_308,"scuffle"]},scamper:{n:["scamper",_308,"scurry"],v:["scamper","v"]},school:{n:["school","shoal","schooltime","schooling","schoolhouse"],v:["school","v"]},screening:{n:["screening","showing","viewing"]},"full-length":{s:["full-length","uncut"]},unmown:{a:["unmown","uncut"]},untrimmed:{a:["untrimmed","uncut"]},condolence:{n:["condolence","commiseration"]},aqualung:{n:["aqualung","aqua-lung","scuba"]},spider:{n:["spider","wanderer"]},confederacy:{n:["confederacy","south","dixie","dixieland"]},"hard-bitten":{s:["hard-bitten","hard-boiled","pugnacious"]},decrepitude:{n:["decrepitude","dilapidation"]},southeast:{n:[_606,"sou'-east","southeastward","se"],r:[_606,"south-east","sou'-east"],s:[_606,"southeastern","southeasterly"]},selenium:{n:["selenium","se"]},sulphur:{v:["sulphur","sulfur"],n:["sulphur","n"]},impregnable:{s:["impregnable","inviolable","secure","strong","unassailable","unattackable","inexpugnable"]},secure:{a:["secure","unafraid","untroubled"],v:["secure","v"],s:["secure","s"]},batten:{v:["batten","secure"],n:["batten","n"]},procure:{v:["procure","secure"]},"junior-grade":{s:["junior-grade","lower-ranking","lowly","petty,","secondary","subaltern"]},seating:{n:["seating","seats"]},sec:{s:["sec","unsweet"],n:["sec","n"]},secant:{n:["secant","sec"]},profane:{a:[_18,"secular"],s:[_18,"unconsecrated","unsanctified"],v:[_18,"v"]},worldly:{a:["worldly",_567,"temporal"],s:["worldly","s"]},layman:{n:["layman","layperson","secular"]},sow:{v:["sow","seed"]},source:{n:["source","seed","germ"]},segment:{v:["segment","section"],n:["segment","n"]},section:{n:[_383,"segment","subdivision"],v:[_383,"v"]},cortege:{n:["cortege","retinue","suite","entourage"]},searching:{s:["searching","trenchant"]},inquisitory:{s:["inquisitory","probing","searching"]},semivowel:{n:["semivowel","glide"]},sentimentalist:{n:["sentimentalist","romanticist"]},secretary:{n:["secretary","escritoire","secretaire"]},secretariat:{n:["secretariat","secretariate"]},"blue-ribbon,":{s:["blue-ribbon,","select"]},seize:{v:["seize","clutch","prehend"]},relapse:{v:["relapse","lapse","recidivate",_93,"retrogress"],n:["relapse","n"]},survival:{n:["survival","selection","endurance"]},seeker:{n:["seeker","searcher","quester"]},expiation:{n:["expiation","atonement","propitiation"]},"self-esteem":{n:["self-esteem","self-pride"]},betray:{v:["betray","sell","bewray"]},seller:{n:["seller","marketer","vender","vendor","trafficker"]},spine:{n:["spine","backbone","thorn",_391,"pricker","sticker","spikelet"]},eyesight:{n:["eyesight","seeing","sightedness"]},semitrailer:{n:["semitrailer","semi"]},semifinal:{n:["semifinal","semi"]},scurry:{v:["scurry","scamper","skitter","scuttle"],n:["scurry","n"]},smell:{v:["smell","sense"],n:["smell","smelling","olfaction","odor","odour"]},sense:{n:["sense","sensation","sentience","sentiency","signified"],v:["sense","v"]},transmitter:{n:["transmitter","sender"]},sender:{n:["sender","transmitter"]},sensation:{n:["sensation","esthesis","aesthesis"]},apprentice:{n:["apprentice","learner","prentice"]},sensitivity:{n:["sensitivity","sensitiveness","predisposition","sensibility"]},"senior,":{s:["senior,","fourth-year"]},serial:{s:["serial","nonparallel"],n:["serial","series"]},series:{n:["series","serial"]},disjointed:{s:["disjointed","dislocated","separated"]},separated:{s:["separated","spaced"]},unplayful:{a:["unplayful","serious","sober"]},panicky:{s:["panicky","panicked","panic-stricken","panic-struck","terrified","frightened"]},quelled:{s:["quelled","quenched","squelched"]},serbia:{n:["serbia","srbija"]},fret:{n:["fret","stew","sweat","lather","swither"],v:["fret","v"]},presuppose:{v:["presuppose","suppose"]},september:{n:["september","sep","sept"]},savior:{n:["savior","saviour","rescuer","deliverer"]},seriously:{r:["seriously","earnestly"]},sewing:{n:["sewing","stitchery","stitching"]},separation:{n:["separation","breakup","detachment"]},lampshade:{n:["lampshade","shade"]},tad:{n:["tad","shade"]},colonized:{s:["colonized","colonised","settled"]},seventh:{s:["seventh","7th"],n:["seventh","n"]},"one-seventh":{n:["one-seventh","seventh"]},quill:{n:["quill","calamus","shaft"]},shaft:{n:["shaft","scape"],v:["shaft","v"]},diaphysis:{n:["diaphysis","shaft"]},sternly:{r:["sternly","severely"]},seaborgium:{n:["seaborgium","sg"]},seven:{s:["seven","7","vii"],n:["seven","7","vii","sevener","heptad","septet","septenary"]},"seven-spot":{n:["seven-spot","seven"]},aphrodisiac:{a:["aphrodisiac","aphrodisiacal","sexy"]},"frame-up":{n:["frame-up","setup"]},shakespeare:{n:["shakespeare","shakspere"]},severe:{s:["severe","spartan",_340,"wicked"]},sunglasses:{n:["sunglasses","shades"]},dishonor:{v:["dishonor","disgrace","dishonour","attaint","shame"],n:["dishonor","dishonour"]},pity:{n:["pity","shame"]},shame:{n:["shame","disgrace","ignominy"],v:["shame","v"]},batting:{n:["batting","batten"]},southeasterly:{s:["southeasterly","southeast"]},shaped:{s:["shaped","molded","wrought"]},sheer:{r:["sheer","perpendicularly"],s:["sheer","s"],v:["sheer","v"]},diaphanous:{s:["diaphanous","filmy","gauzy","gauze-like","gossamer","see-through","sheer","transparent","vaporous","vapourous","cobwebby"]},sharply:{r:["sharply","sharp","acutely","crisply"]},abrupt:{s:["abrupt","precipitous","sharp","disconnected"]},shrill:{s:["shrill","sharp"],v:["shrill","v"]},sharp:{s:["sharp","sharp-worded","tart"],r:["sharp","r"]},astute:{s:["astute","sharp","shrewd"]},crisp:{s:["crisp","sharp","curt","laconic","terse","frizzly","frizzy","kinky","nappy","frosty","nipping","nippy","snappy","crispy"],v:["crisp","v"],n:["crisp","n"]},sheepherder:{n:["sheepherder","shepherd","sheepman"]},conceptive:{s:["conceptive","impregnable"]},informant:{n:["informant","source"]},ledge:{n:["ledge","shelf"]},stockholder:{n:["stockholder","shareholder","shareowner"]},sharing:{n:["sharing","share-out"]},communion:{n:["communion","sharing","manduction"]},lilt:{n:["lilt","swing"]},precipitously:{r:["precipitously","sharply"]},aggressively:{r:["aggressively","sharply"]},horseshoe:{n:["horseshoe","shoe"]},shore:{n:["shore","shoring"],v:["shore","v"]},shaven:{a:["shaven","shaved"]},pander:{v:["pander","pimp","procure"],n:["pander","n"]},dearth:{n:["dearth","famine","shortage","paucity"]},spur:{n:["spur","spine","acantha","gad"],v:["spur","goad"]},"short-run":{s:["short-run","short-term"]},shoulder:{n:["shoulder","berm"]},deceive:{v:["deceive","betray","delude","cozen"]},prawn:{n:["prawn","shrimp"]},runt:{n:["runt","shrimp","peewee","half-pint"]},drawers:{n:["drawers","underdrawers","shorts","boxers","boxershorts"]},"punch-drunk":{s:["punch-drunk","silly","slaphappy"]},airheaded:{s:["airheaded","dizzy","empty-headed","featherbrained","giddy","light-headed","lightheaded","silly"]},goofy:{s:["goofy","silly","wacky","whacky","zany"]},snivel:{v:["snivel","whine","sniffle","blubber","blub","snuffle"],n:["snivel","sniveling"]},whimper:{n:["whimper","whine"],v:["whimper","v"]},vector:{n:["vector","transmitter"]},jostle:{v:["jostle","shove"],n:["jostle","jostling"]},disgusted:{s:["disgusted","sick,"]},nauseated:{s:["nauseated","nauseous","queasy","sick","sickish"]},sidewalk:{n:["sidewalk","pavement"]},ti:{n:["ti","te","si"]},silicon:{n:["silicon","si"]},sibling:{n:["sibling","sib"]},lavish:{v:["lavish","shower"],s:["lavish","lucullan","plush","plushy","munificent","overgenerous","too-generous","unsparing","unstinted","unstinting"]},exhibitor:{n:["exhibitor","exhibitioner","shower"]},shower:{n:["shower","cascade"],v:["shower","v"]},sigh:{v:["sigh","suspire"],n:["sigh","suspiration"]},exchangeable:{s:["exchangeable","interchangeable","similar","standardized","standardised"],a:["exchangeable","a"]},simple:{a:["simple","unsubdivided"],s:["simple","s"],n:["simple","n"]},"dim-witted":{s:["dim-witted","simple","simple-minded"]},simpleton:{n:["simpleton","simple"]},size:{n:["size","sizing"]},plainly:{r:["plainly","simply"]},sixth:{s:["sixth","6th"],n:["sixth","n"]},"one-sixth":{n:["one-sixth","sixth"]},unmarried:{a:["unmarried","single"]},single:{n:["single","bingle"],a:["single","a"]},extinction:{n:["extinction","extermination","extinguishing","quenching","defunctness"]},whistle:{v:["whistle","sing"],n:["whistle","whistling"]},cantabile:{s:["cantabile","singing"]},singing:{n:[_592,"vocalizing"],s:[_592,"s"]},slave:{n:["slave","striver"]},annulus:{n:["annulus","skirt"]},warble:{v:["warble","trill","quaver"]},six:{s:["six","6","vi","half-dozen"],n:["six","6","vi","sixer","sise","sextet","sestet","sextuplet","hexad"]},"six-spot":{n:["six-spot","six"]},decamp:{v:["decamp","skip","vamoose"]},singer:{n:["singer","vocalist","vocalizer","vocaliser"]},chic:{s:["chic","smart","voguish"],n:["chic","chicness","chichi","modishness",_608,"stylishness","swank"]},smart:{n:["smart","smarting","smartness"],s:["smart","s"],v:["smart","v"]},slovenia:{n:["slovenia","slovenija"]},"baby-sit":{v:["baby-sit","sit","babysit"]},slight:{v:["slight","cold-shoulder"],n:["slight","n"],s:["slight","s"],a:["slight","a"]},sister:{n:["sister","sis"]},sleep:{v:["sleep","kip","slumber"],n:["sleep","nap","sopor","slumber"]},slattern:{n:["slattern","slut","trollop"]},samarium:{n:["samarium","sm"]},slavery:{n:["slavery","slaveholding"]},"dormant(ip)":{s:["dormant(ip)","sleeping"]},quiescence:{n:["quiescence","quiescency","dormancy","sleeping"]},legato:{a:["legato","smooth"]},smooth:{v:["smooth","smoothen"],s:["smooth","s"],a:["smooth","a"]},smoke:{n:["smoke","smoking","fume"],v:["smoke","v"]},smaller:{s:["smaller","littler"]},strident:{s:[_558,"shrill"]},fume:{v:["fume","smoke"],n:["fume","n"]},slenderly:{r:["slenderly","slimly","slightly"]},slightly:{r:["slightly","somewhat"]},hydra:{n:["hydra","snake"]},snake:{n:["snake","serpent","ophidian"]},soak:{v:["soak","imbue"],n:["soak","soaking","soakage"]},souse:{v:["souse","soak","inebriate"],n:["souse","n"]},intoxicate:{v:["intoxicate","soak","inebriate"]},pawn:{v:["pawn","soak","hock"],n:["pawn","n"]},drench:{v:["drench","douse","dowse","soak","sop","souse"]},smith:{n:["smith","metalworker"]},tin:{n:["tin","sn"],v:["tin","v"]},compassion:{n:["compassion","pity","compassionateness"]},gratify:{v:["gratify","pander","indulge"]},pimp:{n:["pimp","procurer","panderer","pander","pandar","ponce"],v:["pimp","v"]},bamboozle:{v:["bamboozle","snow","hoodwink"]},snow:{n:["snow","snowfall"],v:["snow","v"]},social:{a:["social","societal"],n:["social","n"]},then:{r:["then","so"]},thus:{r:["thus","thusly","so"],n:["thus","n"]},sol:{n:["sol","soh","so"]},sole:{v:["sole","resole"]},sort:{n:["sort","sorting"],v:["sort","v"]},cushy:{s:["cushy","soft","easygoing"]},indulgent:{s:["indulgent","lenient","soft"]},voiced:{a:["voiced","sonant","soft"]},"good-for-nothing":{s:["good-for-nothing","good-for-naught","meritless","no-account","no-count","no-good","sorry"],n:["good-for-nothing","n"]},sailplane:{v:["sailplane","soar"],n:["sailplane","n"]},soar:{v:["soar","surge","zoom"],n:["soar","zoom"]},sonic:{a:["sonic","transonic"]},somewhere:{r:["somewhere","someplace"]},soul:{n:["soul","soulfulness","psyche"]},sought:{s:["sought","sought-after,"]},grouped:{s:["grouped","sorted"]},soma:{n:["soma","haoma"]},somehow:{r:["somehow","someway","someways"]},southerly:{s:["southerly","southern"],r:["southerly","southward","southwards"]},southwest:{r:[_609,"south-west","sou'west"],s:[_609,"southwestern","southwesterly"],n:[_609,"sou'-west","southwestward","sw"]},southwesterly:{s:["southwesterly","southwest"]},spank:{v:["spank","paddle","larrup"]},charnel:{s:["charnel","ghastly","sepulchral"]},reign:{n:["reign","sovereignty"],v:["reign","v"]},straddle:{n:["straddle","span"],v:["straddle","v"]},peculiarity:{n:["peculiarity","specialness","specialty","speciality","distinctiveness"]},specialist:{n:["specialist","specializer","specialiser"]},stipulation:{n:["stipulation","specification"]},specification:{n:["specification","spec"]},spain:{n:["spain","espana"]},titanium:{n:["titanium","ti"]},amphetamine:{n:["amphetamine","upper","speed"]},speed:{n:["speed","speeding","hurrying","swiftness","fastness","velocity"],v:["speed","v"]},spending:{n:["spending","disbursement","disbursal","outlay"]},loudspeaker:{n:["loudspeaker","speaker"]},speaker:{n:["speaker","talker","utterer","verbalizer","verbaliser"]},specialized:{a:["specialized","specialised"]},spatial:{a:["spatial","spacial"]},scattering:{n:["scattering",_202,"sprinkling"]},disconnected:{s:[_467,"disunited","fragmented","split"],a:[_467,"a"]},cleave:{v:["cleave","split","rive"]},schism:{n:["schism","split"]},smooch:{v:["smooch","spoon"],n:["smooch","n"]},spoon:{n:["spoon","spoonful"],v:["spoon","v"]},liquor:{n:["liquor","spirits","booze"]},sperm:{n:["sperm","spermatozoon","spermatozoan"]},zest:{v:["zest","spice"],n:["zest","n"]},spiciness:{n:["spiciness","spice","spicery"]},atomizer:{n:["atomizer","atomiser","spray","sprayer","nebulizer","nebuliser"]},spray:{n:["spray","spraying"]},apparitional:{s:["apparitional","ghostlike","ghostly","phantasmal","spectral","spiritual"]},spiritual:{s:["spiritual","unearthly"]},spirituality:{n:["spirituality","spiritualism","spiritism","otherworldliness"]},spiritualty:{n:["spiritualty","spirituality"]},team:{n:["team","squad"]},cattiness:{n:["cattiness","bitchiness","spite","spitefulness","nastiness"]},malice:{n:["malice","maliciousness","spite","spitefulness","venom"]},pennywhistle:{n:["pennywhistle","whistle"]},springer:{n:["springer","impost"]},yodel:{v:["yodel","warble","descant"]},dissemination:{n:["dissemination","airing","spreading","diffusion"]},glibness:{n:["glibness","slickness"]},trickery:{n:["trickery","hocus-pocus","slickness","jiggery-pokery","skulduggery","skullduggery","chicanery","chicane","guile","wile","shenanigan"]},schutzstaffel:{n:["schutzstaffel","ss"]},static:{s:["static","stable","unchanging"],n:["static","atmospherics"],a:["static","a"]},stable:{n:["stable","stalls"],s:["stable","s"]},steradian:{n:["steradian","sr"]},strontium:{n:["strontium","sr"]},meagerly:{r:["meagerly","sparingly","slenderly","meagrely"],a:["meagerly","a"]},electrostatic:{a:["electrostatic","static"]},abstainer:{n:["abstainer",_601,"abstinent","nondrinker"]},appetizer:{n:["appetizer","appetiser","starter"]},starter:{n:[_545,"dispatcher"]},constancy:{n:["constancy","stability"]},stability:{n:["stability","stableness"]},jetting:{s:["jetting","spouting","spurting","squirting"]},canister:{n:["canister","cannister","tin"]},drenching:{n:["drenching","soaking","souse","sousing"]},alcoholic:{n:["alcoholic","alky","dipsomaniac","boozer","lush","soaker","souse"],s:["alcoholic","alcohol-dependent"]},codified:{s:["codified","statute,"]},stainless:{s:["stainless","unstained","unsullied","untainted","untarnished"]},dormancy:{n:["dormancy","quiescence","quiescency"]},step:{n:["step","stair"],v:["step","tread"]},bandstand:{n:["bandstand","stand"]},stall:{n:["stall","stand","stalling"],v:["stall","conk"]},stand:{n:["stand","standstill","tie-up"],v:["stand","v"]},corset:{n:["corset","girdle","stays"]},steamer:{v:["steamer","steam"],n:["steamer","steamship"]},elate:{v:["elate","uplift","intoxicate"]},stiffly:{r:["stiffly","stiff"]},rigid:{s:["rigid","stiff","strict"]},starchy:{s:["starchy","stiff","buckram"]},footprint:{n:["footprint","footmark","step"]},fete:{n:["fete","feast","fiesta"],v:["fete","v"]},affirmation:{n:["affirmation","assertion","statement"]},stomach:{n:[_29,"tummy","tum","breadbasket"],v:[_29,"v"]},awkward:{s:["awkward","embarrassing","sticky","unenviable","uneasy","clumsy","cumbersome","inapt","inept","ill-chosen","bunglesome","ungainly"]},muggy:{s:["muggy","steamy","sticky"]},gluey:{s:["gluey","glutinous","gummy","mucilaginous","pasty","sticky","viscid","viscous"]},reek:{v:["reek","fume","stink"],n:["reek","n"]},fumigate:{v:["fumigate","fume"]},raucous:{s:["raucous",_558,"rowdy"]},fricative:{s:["fricative","continuant","sibilant","spirant","strident"]},stereophonic:{s:["stereophonic","stereo","two-channel"]},stereo:{n:["stereo","stereophony"],s:["stereo","s"]},shunt:{n:["shunt","bypass"]},beltway:{n:["beltway","bypass","ringway"]},dagger:{n:["dagger","sticker","obelisk"]},poser:{n:["poser","stumper","toughie","sticker"]},frankincense:{n:["frankincense","olibanum","thus"]},stairs:{n:["stairs","steps"]},fillet:{n:["fillet","stopping","filet"],v:["fillet","filet"]},strong:{s:["strong","warm"],a:["strong","a"]},smitten:{s:["smitten","stricken","struck"]},tidy:{v:["tidy","neaten","straighten"],s:["tidy","s"]},straighten:{v:["straighten","unbend"]},imbrue:{v:["imbrue","drench"]},swamp:{v:["swamp","drench"],n:["swamp","swampland"]},goldbrick:{n:[_390,"goof-off","ne'er-do-well","good-for-nothing","no-account","good-for-naught"],v:[_390,"v"]},glider:{n:["glider","sailplane"]},powerfully:{r:["powerfully","strongly"]},morphologic:{a:["morphologic","morphological","structural"]},geomorphologic:{a:["geomorphologic","geomorphological","morphologic","morphological","structural"]},strew:{v:["strew","straw"]},repositing:{n:["repositing","reposition","storage","warehousing"]},lastingness:{n:["lastingness","durability","enduringness","strength"]},persuasiveness:{n:["persuasiveness","strength"]},stopped:{s:["stopped","stopped-up,"]},flog:{v:["flog","welt","whip","lather","lash","slash","strap","trounce"]},fib:{n:["fib","story","tale","tarradiddle","taradiddle"]},maroon:{v:["maroon","strand"],s:["maroon","brownish-red"]},fibril:{n:["fibril","filament","strand"]},expatriate:{v:["expatriate","deport","exile"],n:["expatriate","n"]},unintelligent:{a:["unintelligent","stupid"]},dazed:{s:["dazed","stunned","stupefied","stupid,","foggy","groggy","logy","stuporous"]},stupid:{n:["stupid","stupe","dullard","dolt","pudden-head","pillock"],a:["stupid","a"]},submarine:{n:["submarine","pigboat","sub","u-boat"],s:["submarine","undersea"]},stud:{n:["stud","studhorse","rivet","he-man","macho-man"],v:["stud","v"]},scantling:{n:["scantling","stud"]},arresting:{s:["arresting","sensational","stunning"]},fashionable:{a:["fashionable","stylish"]},stylish:{a:["stylish","fashionable"]},student:{n:["student","pupil","educatee"]},subsection:{n:["subsection","subdivision"]},nonindulgent:{a:["nonindulgent","strict"]},"hard-and-fast":{s:["hard-and-fast","strict"]},rigorous:{s:["rigorous","strict","stringent","tight"]},cyclosis:{n:["cyclosis","streaming"]},insidious:{s:["insidious","pernicious","subtle"]},elusive:{s:["elusive","subtle"]},supreme:{s:["supreme","sublime"]},reverend:{s:["reverend","sublime"],n:["reverend","n"]},empyreal:{s:["empyreal","empyrean","sublime"],a:["empyreal","a"]},sublime:{v:[_549,"sublimate"],s:[_549,"s"]},strange:{s:["strange","unknown"],a:["strange","unusual"]},rigorously:{r:["rigorously","strictly"]},strictly:{r:["strictly","stringently","purely"]},sun:{v:["sun","insolate","solarize","solarise","sunbathe"],n:["sun"]},sunday:{n:["sunday","dominicus","sun"]},sunlight:{n:["sunlight","sunshine","sun"]},summary:{n:[_432,"sum-up"],s:[_432,"s"]},immanent:{a:["immanent","subjective"]},summer:{n:["summer","summertime"]},strategic:{a:["strategic","strategical"]},sugar:{v:["sugar","saccharify"],n:["sugar","n"]},suburb:{n:["suburb","suburbia"]},superintendent:{n:["superintendent","super"]},sunset:{n:["sunset","sundown"]},suitable:{s:["suitable","suited"]},perusal:{n:["perusal","perusing","studying"]},sudan:{n:["sudan","soudan"]},suicide:{n:["suicide","felo-de-se","self-destruction","self-annihilation"]},auxiliary:{s:[_89,"subsidiary","supplemental","supplementary"],n:[_89,"n"]},subordinate:{n:[_495,"subsidiary","underling"],a:[_495,"low-level"],v:[_495,"subdue"]},gaminess:{n:["gaminess","raciness","ribaldry","spiciness"]},prod:{n:["prod","goad"],v:["prod","incite"]},dispersion:{n:["dispersion","scattering","dispersal","dissemination","diffusion"]},zigzag:{v:["zigzag","crank"],s:["zigzag","zig-zag"],n:["zigzag","zig","zag"]},malevolence:{n:["malevolence","malevolency","malice","malignity"]},meager:{a:["meager","meagre","meagerly","stingy","scrimpy"]},append:{v:["append",_90,"affix","tack"]},supplement:{n:[_90,"supplementation"],v:[_90,"v"]},addendum:{n:["addendum",_90,"postscript"]},superscript:{a:["superscript","superior"],n:["superscript","superior"]},superior:{n:[_435,"higher-up","superordinate"],s:[_435,"s"],a:[_435,"a"]},indisputable:{s:["indisputable","sure"]},sure:{s:["sure","trusted"],a:["sure","a"],r:["sure","r"]},sweetly:{r:["sweetly","sweet"]},sugared:{s:["sugared","sweetened","sweet","sweet-flavored"]},odoriferous:{s:["odoriferous","odorous","perfumed","scented","sweet","sweet-scented","sweet-smelling"]},gratifying:{s:["gratifying","sweet"]},dulcet:{s:["dulcet","honeyed","mellifluous","mellisonant","sweet"]},angelic:{s:["angelic","angelical","cherubic","seraphic","sweet","beatific","saintlike","saintly","sainted"],a:["angelic","angelical"]},sweetness:{n:[_414,"sweet"]},surfing:{n:["surfing","surfboarding","surfriding"]},scend:{v:["scend","surge"]},tide:{v:["tide","surge"]},surge:{n:["surge","upsurge"],v:["surge","v"]},surf:{v:["surf","channel-surf"],n:["surf","breaker","breakers"]},surfboard:{v:["surfboard","surf"]},surgeon:{n:["surgeon","sawbones"]},supervision:{n:["supervision","supervising","superintendence","oversight"]},fascination:{n:["fascination","captivation"]},"load-bearing,":{s:["load-bearing,","supporting,"]},supplementary:{s:["supplementary","supplemental"]},distrust:{v:["distrust","mistrust","suspect"],n:["distrust","distrustfulness","mistrust"]},suspect:{v:[_493,"surmise"],n:[_493,"n"],s:[_493,"s"]},surprise:{n:["surprise","surprisal"],v:["surprise","v"]},swell:{v:["swell","intumesce","tumefy","tumesce"],s:["swell","s"],n:["swell","n"]},overseer:{n:["overseer","superintendent"]},switzerland:{n:["switzerland","suisse","schweiz","svizzera"]},suspicion:{n:["suspicion","suspiciousness"]},misgiving:{n:["misgiving","mistrust","distrust","suspicion"]},intuition:{n:["intuition","hunch","suspicion"]},surgical:{a:["surgical","operative"]},synchronize:{v:["synchronize","synchronise","sync","contemporize","contemporise"]},swear:{v:["swear","depose","depone"]},sweat:{v:["sweat","sudate","perspire"],n:["sweat","n"]},perspiration:{n:["perspiration","sweat","sudor","sweating","diaphoresis","sudation","hidrosis"]},tonicity:{n:["tonicity","tonus","tone"]},table:{v:["table","tabularize","tabularise","tabulate"],n:["table","n"]},postpone:{v:["postpone","prorogue","table","shelve","defer","remit"]},videotape:{v:["videotape","tape"]},tape:{n:["tape","tapeline","taping"],v:["tape","v"]},leery:{s:["leery","mistrustful","suspicious","untrusting","wary"]},surrounded:{s:["surrounded","encircled"]},staccato:{a:["staccato","disconnected"]},celluloid:{s:["celluloid","synthetic"],n:["celluloid","n"]},synthetic:{a:[_610,"synthetical"],s:[_610,"s"]},"man-made":{s:["man-made","semisynthetic","synthetic"]},"encompassing,":{s:["encompassing,","surrounding,","circumferent"]},tantalum:{n:["tantalum","ta"]},thyroxine:{n:["thyroxine","thyroxin","tetraiodothyronine","t"]},triiodothyronine:{n:["triiodothyronine","liothyronine","t"]},t:{n:["t"]},thymine:{n:["thymine","t"]},amazingly:{r:["amazingly","surprisingly","astonishingly"]},sovereign:{s:["sovereign","supreme"],n:["sovereign","monarch"]},procrastinate:{v:["procrastinate","stall","shillyshally","dilly-dally","dillydally"]},carrel:{n:["carrel","carrell","cubicle","stall"]},survivor:{n:["survivor","subsister"]},tank:{n:["tank","tankful"]},tablespoon:{n:["tablespoon","tablespoonful"]},sur:{n:["sur","tyre"]},syracuse:{n:["syracuse","siracusa"]},perspirer:{n:["perspirer","sweater"]},sweater:{n:["sweater","jumper"]},surname:{n:["surname","cognomen"]},purportedly:{r:["purportedly","supposedly"]},sweden:{n:["sweden","sverige"]},pretentiousness:{n:["pretentiousness","pretension","largeness"]},harness:{v:["harness","tackle","rein"]},rigging:{n:["rigging","tackle"]},symbolic:{a:["symbolic","symbolical"],s:["symbolic","s"]},tea:{n:["tea","teatime"]},taxonomic:{a:["taxonomic","taxonomical","systematic"]},terabyte:{n:["terabyte","tebibyte","tb","tib"]},terabit:{n:["terabit","tbit","tb"]},tuberculosis:{n:["tuberculosis","tb","t.b."]},terbium:{n:["terbium","tb"]},crying:{n:["crying","weeping","tears"],s:["crying","s"]},malodor:{n:["malodor","malodour","stench","stink","reek","fetor","foetor","mephitis"]},tellurium:{n:["tellurium","te"]},fetching:{s:["fetching","taking","winning"]},pickings:{n:["pickings","taking"]},symbol:{n:["symbol","symbolization","symbolisation"]},technetium:{n:["technetium","tc"]},teaspoon:{n:["teaspoon","teaspoonful"]},dentition:{n:["dentition","teeth"]},telecommunication:{n:["telecommunication","telecom"]},casebook:{s:["casebook","textbook"]},textbook:{n:["textbook","text","schoolbook"],s:["textbook","s"]},terminus:{n:["terminus","term"]},enamored:{s:["enamored","infatuated","potty","smitten"]},proficiency:{n:["proficiency","technique"]},tenant:{n:["tenant","renter"]},fiddle:{v:["fiddle","shirk","goldbrick"],n:["fiddle","n"]},kempt:{s:["kempt","tidy"]},thorium:{n:["thorium","th"]},thursday:{n:["thursday","th"]},avowal:{n:["avowal","avouchment","affirmation"]},terrific:{s:["terrific","terrifying"]},testimony:{n:["testimony","testimonial"]},terror:{n:["terror","brat",_492,"threat"]},poseur:{n:["poseur","poser"]},taenia:{n:["taenia","tenia","fillet"]},lemniscus:{n:["lemniscus","fillet"]},terribly:{r:["terribly","atrociously","awfully","abominably","abysmally","rottenly","awful","frightfully"]},thai:{a:["thai","tai","siamese"],n:["thai","siamese","tai"]},will:{n:["will","testament"],v:["will","v"]},tested:{s:["tested","time-tested","tried","well-tried"]},synagogue:{n:["synagogue","temple","tabernacle"]},therapeutic:{a:[_487,"therapeutical"],n:[_487,"n"],s:[_487,"s"]},inflexible:{s:["inflexible","rigid","unbending"],a:["inflexible","a"]},third:{r:["third","thirdly"],s:["third","3rd","tertiary"],n:["third","n"]},texas:{n:["texas","tx","tex."]},thread:{n:["thread","yarn"],v:["thread","v"]},impermanent:{a:["impermanent","temporary"]},temp:{n:["temp","temporary"]},cane:{v:["cane","flog","lambaste","lambast"]},tennessee:{n:["tennessee","tn","tenn."]},thailand:{n:["thailand","siam"]},larceny:{n:["larceny","theft","thievery","thieving","stealing"]},terry:{n:["terry","terrycloth"]},menace:{n:["menace","threat"],v:["menace","v"]},exhaustive:{s:["exhaustive","thorough","thoroughgoing"]},thermal:{a:["thermal","thermic","caloric"]},togs:{n:["togs","threads","duds"]},thence:{r:["thence","therefrom","thereof"]},there:{r:["there","thither"]},thereafter:{r:["thereafter","thenceforth"]},trio:{n:["trio","threesome","triad","trinity","triplet","triple"]},endanger:{v:["endanger","jeopardize","jeopardise","menace","threaten","imperil","peril"]},thirty:{s:["thirty","30","xxx"],n:["thirty","30","xxx"]},"flip-flop":{n:["flip-flop","thong"],v:["flip-flop","v"]},"g-string":{n:["g-string","thong"]},lash:{n:["lash","thong"],v:["lash","v"]},dissertation:{n:["dissertation","thesis"]},sightseer:{n:["sightseer","excursionist","tripper","rubberneck"]},stumbler:{n:["stumbler","tripper"]},theoretical:{a:["theoretical","theoretic"]},therapist:{n:["therapist","healer"]},thinking:{n:["thinking","thought","cerebration","intellection","mentation"]},baffling:{s:["baffling","elusive","knotty","problematic","problematical","tough"]},theology:{n:["theology","divinity"]},brink:{n:["brink",_511,"verge"]},doorsill:{n:["doorsill","doorstep","threshold"]},threshold:{n:[_511,"limen"]},taut:{s:["taut","tight"]},thrive:{v:["thrive","prosper","flourish"]},ovolo:{n:["ovolo","thumb"]},thumb:{n:["thumb","pollex"],v:["thumb","v"]},laced:{a:["laced","tied"]},tied:{a:["tied","fastened"],s:["tied","s"]},trussed:{s:["trussed","tied"]},potently:{r:["potently","powerfully"]},throat:{n:["throat","pharynx"]},hyponym:{n:["hyponym","subordinate"]},timekeeper:{n:["timekeeper","timer"]},cashbox:{n:["cashbox","till"]},seasonably:{r:["seasonably","timely","well-timed","apropos"]},timely:{s:["timely","seasonable","well-timed,"],r:["timely","r"]},passim:{r:["passim","throughout"]},throughout:{r:["throughout","end-to-end"]},toe:{v:["toe","toenail"]},thickness:{n:["thickness","heaviness"]},empyrean:{a:["empyrean","empyreal"],s:["empyrean","s"]},multiplication:{n:["multiplication","times"]},coroneted:{s:["coroneted","highborn","titled"]},thulium:{n:["thulium","tm"]},tobacco:{n:["tobacco","baccy"]},toddler:{n:["toddler","yearling","tot","bambino"]},joyride:{v:["joyride","tool"]},excessively:{r:["excessively","overly","too"]},quaver:{v:["quaver","waver"]},fluctuate:{v:["fluctuate","vacillate","waver"]},falter:{v:["falter","waver"],n:["falter","n"]},hesitation:{n:["hesitation","waver","falter","faltering","vacillation","wavering"]},pleasantness:{n:["pleasantness","sweetness"]},titmouse:{n:["titmouse","tit"]},tom:{n:["tom","tomcat"]},discard:{v:["discard","fling","toss","dispose"]},convulse:{v:["convulse","thresh","thrash","slash","toss","jactitate"]},together:{r:["together","unitedly"]},tokyo:{n:["tokyo","tokio","yeddo","yedo","edo"]},enjoyable:{s:["enjoyable","gratifying","pleasurable"]},ruffianly:{s:["ruffianly","tough"]},sturdy:{s:["sturdy","tough"],a:["sturdy","a"]},tough:{a:["tough","toughened"],s:["tough","s"],n:["tough","n"]},rugged:{s:["rugged","tough"],a:["rugged","a"]},bully:{n:["bully","tough","hooligan","ruffian","roughneck","rowdy","yob","yobo","yobbo"],s:["bully","s"],v:["bully","v"]},incontestable:{s:["incontestable","indisputable","undisputable"],a:["incontestable","incontestible"]},abeyant:{s:["abeyant","dormant"]},"bare-breasted":{s:["bare-breasted","braless","topless"]},clergyman:{n:["clergyman","reverend"]},fey:{s:["fey","touched,"]},tourism:{n:["tourism","touristry"]},tourist:{n:["tourist","tourer","holidaymaker"]},township:{n:["township","town"]},permissiveness:{n:["permissiveness","tolerance"]},atilt:{s:["atilt","canted",_268,"tilted","tipped"]},proclivity:{n:["proclivity","propensity","leaning"]},tournament:{n:["tournament","tourney"]},town:{n:["town","townspeople","townsfolk"]},scruple:{n:["scruple","qualm","misgiving"]},transform:{v:["transform","transmute","metamorphose","transubstantiate"]},dealings:{n:["dealings","traffic"]},hallmark:{n:["hallmark","trademark","earmark","stylemark"]},erode:{v:["erode","fret","gnaw"]},choke:{v:["choke","gag","fret",_316,_355,"scrag"]},chafe:{v:["chafe","gall","fret","excoriate"],n:["chafe","n"]},transmittance:{n:["transmittance","transmission"]},transmission:{n:["transmission","transmittal","transmitting"]},theodolite:{n:["theodolite","transit"]},cubby:{n:["cubby","cubbyhole","snuggery","snug"]},teething:{n:["teething","dentition","odontiasis"]},bribery:{n:["bribery","graft"]},"put-down":{n:["put-down",_396,"squelcher","takedown"]},transition:{n:["transition","modulation"]},transsexual:{n:["transsexual","transexual","transgendered"]},tragic:{s:["tragic","tragical"]},treble:{s:["treble","threefold","three-fold","triple"],v:["treble","v"],n:["treble","n"]},ternary:{s:["ternary","treble","triple","triplex"],n:["ternary","n"]},triple:{v:["triple","treble"],n:["triple","three-bagger"],s:["triple","s"]},trailing:{n:["trailing","tracking"]},tree:{v:["tree","shoetree"]},foil:{n:["foil","transparency","enhancer"],v:["foil","v"]},transparency:{n:["transparency","transparence","transparentness"]},guileless:{s:["guileless","transparent"]},crystalline:{s:["crystalline","limpid","lucid","pellucid","transparent"]},traveler:{n:["traveler","traveller"]},tribute:{n:["tribute","testimonial"]},treasury:{n:["treasury","exchequer"]},whip:{v:["whip","lash"],n:["whip","lash","whiplash"]},eyelash:{n:["eyelash","lash","cilium"]},tuesday:{n:["tuesday","tues"]},gloat:{v:["gloat",_54,"crow"],n:["gloat","gloating","glee"]},victory:{n:["victory","triumph"]},tumor:{n:["tumor","tumour","neoplasm"]},triangulum:{n:["triangulum","triangle"]},triangle:{n:["triangle","trigon","trilateral"]},uncompromising:{a:["uncompromising","sturdy","inflexible"]},burrow:{v:["burrow","tunnel"],n:["burrow","tunnel"]},twenty:{s:["twenty","20","xx"],n:["twenty","20","xx"]},twentieth:{s:["twentieth","20th"]},tube:{n:["tube","tubing"]},proboscis:{n:["proboscis","trunk"]},trunk:{n:["trunk","bole"]},micronesia:{n:["micronesia","tt"]},palau:{n:["palau","tt","belau","pelew"]},"nerve-racking":{s:["nerve-racking","nerve-wracking","stressful","trying"]},volition:{n:["volition","will","willing"]},tropical:{s:["tropical","tropic"]},capsize:{v:["capsize","turtle"]},turtleneck:{n:["turtleneck","turtle","polo-neck"]},tutelage:{n:["tutelage","tuition","tutorship"]},tub:{n:["tub","tubful","vat"]},bathtub:{n:["bathtub","tub"]},triviality:{n:["triviality","trivia","trifle"]},truth:{n:["truth","verity","trueness"]},troy:{n:["troy","ilion","ilium"]},type:{v:["type","typecast","typewrite"],n:["type","n"]},timepiece:{n:["timepiece","timekeeper","horologe"]},regent:{n:["regent","trustee"]},up:{r:["up","upwards","upward","upwardly"],s:["up","s"]},"up,":{s:["up,","upward,"]},"astir,":{s:["astir,","up,"]},distorted:{s:["distorted","misrepresented","perverted","twisted"]},truck:{n:["truck","motortruck"]},ukraine:{n:["ukraine","ukrayina"]},u:{n:["u"]},uranium:{n:["uranium","u"]},uracil:{n:["uracil","u"]},typing:{n:["typing","typewriting"]},undifferentiated:{a:["undifferentiated","uniform"]},uniform:{a:[_475,"unvarying"],s:[_475,"s"]},despicable:{s:["despicable","ugly","vile","slimy","unworthy","worthless","wretched"]},surly:{s:["surly","ugly"]},inexhaustible:{s:["inexhaustible","unlimited"]},outright:{s:["outright","straight-out","unlimited"],r:["outright","r"]},unlimited:{a:[_612,"limitless"],s:[_612,"s"]},disruptive:{s:["disruptive","riotous","troubled","tumultuous","turbulent"]},ineffective:{s:["ineffective","ineffectual","unable","inefficient"],a:["ineffective","uneffective","ineffectual"]},reversal:{n:[_405,"flip-flop","turnabout","turnaround"]},dumbly:{r:["dumbly","densely","obtusely"]},undergraduate:{n:["undergraduate","undergrad"]},unfortunately:{r:["unfortunately","unluckily","regrettably","alas"]},unauthorized:{s:["unauthorized","unauthorised","wildcat"],a:["unauthorized","unauthorised"]},nameless:{s:["nameless","unidentified",_240,"unnamed"]},browbeat:{v:["browbeat","bully","swagger"]},"strong-arm":{v:["strong-arm","bully","browbeat","bullyrag","ballyrag","hector"],s:["strong-arm","s"]},unmake:{v:["unmake","undo"]},undefined:{a:["undefined","vague"]},unsealed:{a:["unsealed","uncertain"]},uncertain:{a:[_356,"unsure","incertain"],s:[_356,"s"]},upstairs:{a:["upstairs","upstair"]},underwear:{n:["underwear","underclothes","underclothing"]},ignoble:{s:["ignoble","ungentle","untitled"]},hardy:{s:["hardy",_613,"stout","sturdy"]},unnecessary:{a:["unnecessary","unneeded"]},infelicitous:{s:["infelicitous","unhappy"]},dysphoric:{a:["dysphoric",_508,"unhappy"]},unfair:{a:["unfair","unjust"]},uncertainty:{n:["uncertainty","uncertainness","precariousness"]},oneness:{n:["oneness","unity"]},overturned:{s:["overturned","upset","upturned"]},swage:{v:["swage","upset"],n:["swage","n"]},overturn:{v:[_305,"upset"],n:[_305,"upset"]},upset:{v:["upset","discompose","untune","disconcert","discomfit"],n:["upset",_305,"turnover","swage","derangement","overthrow"],s:["upset","s"]},disturbance:{n:[_562,"perturbation","upset",_77,"commotion",_362,"to-do","hoo-ha","hoo-hah","kerfuffle"]},vacuum:{v:["vacuum","vacuum-clean","hoover"],n:["vacuum","vacuity"]},void:{n:["void","vacancy","emptiness","vacuum"],v:["void","v"],s:["void","s"]},validity:{n:["validity","validness"]},cogency:{n:["cogency","validity","rigor","rigour"]},whole:{n:["whole","unit"],r:["whole","r"],s:["whole","s"]},aberration:{n:["aberration","distortion"]},singular:{s:["singular","unique"]},verge:{n:["verge","brink"]},virginia:{n:["virginia","va","va."]},furrowed:{a:["furrowed","rugged"]},varying:{s:["varying","variable"]},variation:{n:["variation",_509,"fluctuation"]},velvet:{s:["velvet","velvety","velvet-textured"]},uzbekistan:{n:["uzbekistan","uzbek"]},vaccine:{n:["vaccine","vaccinum"]},diazepam:{n:["diazepam","valium"]},exploiter:{n:["exploiter","user"]},valuable:{s:["valuable","worthful"]},v:{n:["v"],v:["v","v"],s:["v","s"]},vanadium:{n:["vanadium","v"]},volt:{n:["volt","v"]},variability:{n:["variability","variableness","variance"]},discrepancy:{n:["discrepancy","disagreement","divergence",_509,"variant"]},soprano:{s:["soprano","treble"],n:["soprano","treble"]},utah:{n:["utah","ut","ut."]},valley:{n:["valley","vale"]},utility:{n:["utility","usefulness"]},utilitarian:{s:["utilitarian","useful"]},useful:{a:["useful","utile"],s:["useful","s"]},venice:{n:["venice","venezia"]},ultraviolet:{n:["ultraviolet","uv"]},vault:{v:["vault","overleap"],n:["vault","hurdle"]},secondhand:{s:["secondhand","used"]},exploited:{s:["exploited","ill-used","put-upon","used","victimized","victimised"]},fomite:{n:["fomite","vehicle"]},vampire:{n:["vampire","lamia"]},vegetable:{n:["vegetable","veggie","veg"]},elfin:{s:["elfin","fey","elfish","elvish","elflike"]},"volt-ampere":{n:["volt-ampere","var"]},veterinarian:{n:["veterinarian","veterinary","vet"]},verse:{v:["verse","versify","poetize","poetise"],n:["verse","rhyme"]},versatile:{s:["versatile","various"]},vegetation:{n:["vegetation","flora","botany"]},varied:{s:["varied","wide-ranging"]},erect:{a:["erect",_614,"upright"],v:["erect","v"],s:["erect","s"]},vertical:{a:[_614,"perpendicular"],n:[_614,"n"]},upright:{n:[_458,"vertical"],s:[_458,"unsloped"],a:[_458,"a"]},vessel:{n:["vessel","watercraft","vas"]},vermont:{n:["vermont","vt","vt."]},wake:{n:["wake","viewing","backwash"],v:["wake","v"]},priggish:{s:["priggish","prim","prissy","prudish","puritanical","square-toed","straitlaced","strait-laced","straightlaced","straight-laced","tight-laced","victorian"]},sildenafil:{n:["sildenafil","viagra"]},victim:{n:["victim","dupe"]},vietnam:{n:["vietnam","annam"]},violin:{n:["violin","fiddle"]},vietnamese:{n:["vietnamese","annamese","annamite"]},blister:{v:["blister","scald","whip","vesicate"],n:["blister","bulla","bleb"]},whisk:{v:["whisk","whip"]},worst:{v:["worst","pip","whip"]},frailty:{n:["frailty","vice"]},virgo:{n:["virgo","virgin"]},walker:{n:["walker","baby-walker","go-cart","zimmer"]},pedestrian:{n:["pedestrian","walker","footer"],s:["pedestrian","prosaic","prosy","earthbound"]},visible:{a:["visible","seeable"]},"walk-to,":{s:["walk-to,","walking,"]},walk:{n:["walk","walking","walkway","paseo"]},virtue:{n:["virtue","chastity","virtuousness"]},nothingness:{n:["nothingness","void","nullity","nihility"]},vocabulary:{n:["vocabulary","lexicon"]},outspoken:{s:["outspoken","vocal"]},bungler:{n:["bungler","blunderer","fumbler","bumbler","stumbler","botcher","butcher","fuckup"]},hydrofoil:{n:["hydrofoil","foil","hydroplane"]},lively:{s:["lively","vital","racy"]},vital:{s:["vital","life-sustaining"]},violent:{s:["violent","wild"]},aftermath:{n:["aftermath","wake","backwash"]},voter:{n:["voter","elector"]},war:{n:["war","warfare"]},voltage:{n:["voltage","emf"]},wait:{v:["wait","waitress"],n:["wait","waiting"]},wagon:{n:["wagon","waggon"]},waist:{n:["waist","waistline"]},warmly:{r:["warmly","warm"]},ardent:{s:["ardent","warm","fervent","fervid","fiery","impassioned","perfervid","torrid"]},voyeur:{n:["voyeur","peeper"]},washington:{n:["washington","wa","wash."]},w:{n:["w","double-u"]},watt:{n:["watt","w"]},west:{n:["west","westward","w","occident"]},tungsten:{n:["tungsten","wolfram","w"]},wallet:{n:["wallet","billfold","notecase","pocketbook"]},wales:{n:["wales","cymru","cambria"]},visitor:{n:["visitor","visitant"]},cellblock:{n:["cellblock","ward"]},trifle:{n:["trifle","triviality"],v:["trifle","v"]},pettiness:{n:["pettiness","triviality","slightness","puniness","littleness","smallness"]},calefacient:{s:["calefacient","warming"]},warmth:{n:["warmth","warmness"]},warmheartedness:{n:["warmheartedness","warmth"]},deformed:{s:["deformed","distorted","ill-shapen","malformed","misshapen"]},reluctance:{n:["reluctance","hesitancy","hesitation","disinclination","indisposition"]},admonition:{n:["admonition","monition","warning","admonishment"]},water:{v:["water","irrigate"],n:["water","h2o"]},rainproof:{s:["rainproof","waterproof","waterproofed"]},raincoat:{n:["raincoat","waterproof"]},brandish:{v:["brandish",_412,"wave"],n:["brandish","n"]},beckon:{v:["beckon","wave"]},wave:{n:["wave","undulation","waving","wafture"],v:["wave","v"]},exhausting:{s:["exhausting","tiring","wearing","wearying"]},erosion:{n:["erosion","eroding","wearing"]},wet:{a:["wet","lactating"],s:["wet","s"],n:["wet","n"]},"de-escalate":{v:["de-escalate","weaken"]},overthrow:{v:[_407,"subvert","overturn"],n:[_407,"n"]},bumble:{v:["bumble","stutter","stammer","falter"]},weber:{n:["weber","wb"]},aberrance:{n:["aberrance","aberrancy","aberration","deviance"]},wednesday:{n:["wednesday","midweek","wed"]},helplessness:{n:["helplessness","weakness","impuissance"]},wed:{s:["wed","wedded"],v:["wed","v"],n:["wed","n"]},wealth:{n:["wealth","riches","wealthiness"]},sweeping:{s:["sweeping","wholesale"]},wedding:{n:["wedding","nuptials","hymeneals"]},decrepit:{s:["decrepit","debile","feeble","infirm","rickety","sapless","weak","weakly"]},fallible:{s:["fallible","frail","imperfect","weak"]},watery:{s:["watery","washy","weak"]},leaden:{s:["leaden","weighted","plodding"]},weight:{n:["weight","weighting","weightiness"],v:["weight","v"]},welsh:{a:["welsh","cambrian"],v:["welsh","welch"],n:["welsh","cymric"]},welshman:{n:["welshman","welsh","cambrian","cymry"]},hebdomadally:{r:["hebdomadally","weekly"]},weekly:{s:["weekly","hebdomadal","hebdomadary"],r:["weekly","r"]},prostitute:{n:["prostitute","cocotte","whore","harlot","bawd","tart","cyprian"]},hale:{s:["hale","whole"],v:["hale","v"]},unharmed:{s:["unharmed","unhurt","unscathed","whole"]},westerly:{s:["westerly","western"]},victorious:{s:["victorious","winning"]},why:{n:["why","wherefore"]},workweek:{n:["workweek","week"]},week:{n:["week","hebdomad"]},wherever:{r:["wherever","wheresoever"]},wisconsin:{n:["wisconsin","wi","wis.","wisc."]},uncoerced:{s:["uncoerced","unforced","willing"]},flank:{n:["flank","wing"]},wing:{n:["wing","offstage","backstage"],v:["wing","v"]},eldritch:{s:["eldritch","weird","uncanny","unearthly"]},wyrd:{n:["wyrd","weird"]},rampantly:{r:["rampantly","wild"]},wild:{a:["wild","untamed"],s:["wild","s"],r:["wild","r"],n:["wild","n"]},wilderness:{n:["wilderness","wild"]},wellbeing:{n:["wellbeing","well-being","welfare","upbeat","eudaemonia","eudaimonia"]},ashen:{s:["ashen","blanched","bloodless","livid","white"]},white:{s:["white","whitened","white-hot","lily-white","snowy"],n:["white","whiteness","caucasian"],v:["white","v"]},whiten:{v:["whiten","white"]},flannel:{n:["flannel","gabardine","tweed","white"]},scepter:{n:["scepter","sceptre","verge","wand"]},sinful:{s:["sinful","unholy","wicked"]},width:{n:["width","breadth"]},ways:{n:["ways","shipway","slipway"]},"about-face":{n:["about-face","volte-face","reversal"]},transposition:{n:["transposition",_405,"heterotaxy"]},winter:{v:["winter","overwinter"],n:["winter","wintertime"]},"long-familiar":{s:["long-familiar","well-known,"]},hag:{n:["hag","beldam","beldame","witch","crone"]},wiccan:{n:["wiccan","witch"]},enchantress:{n:["enchantress","witch","temptress","siren","delilah"]},whisper:{n:["whisper","whispering","susurration","voicelessness"]},inquisitive:{s:["inquisitive","speculative",_615,"wondering,"]},wine:{n:["wine","wine-colored","wine-coloured","vino"]},"far-flung":{s:["far-flung","widespread"]},wisdom:{n:["wisdom","wiseness","soundness","sapience"]},electrify:{v:["electrify","wire"]},telegram:{n:["telegram","wire"]},affray:{n:["affray",_562,"fray","ruffle","altercation","fracas"]},perturbation:{n:["perturbation",_562,"fluster"]},womanhood:{n:["womanhood","woman","muliebrity"]},wolf:{n:["wolf","masher"]},windowpane:{n:["windowpane","window"]},sorcerer:{n:["sorcerer","magician","wizard","necromancer","thaumaturge","thaumaturgist"]},judicious:{s:["judicious","wise","heady"]},working:{n:["working","workings"]},unevenness:{n:["unevenness","variability"]},woodwind:{n:["woodwind","wood"]},proletarian:{n:["proletarian","prole","worker"]},worse:{a:["worse","worsened"]},works:{n:["works","workings","deeds"]},deserving:{s:["deserving","worth,"]},tumid:{s:["tumid","erect"]},parole:{n:["parole","word"]},secession:{n:["secession","withdrawal","sezession"]},withdrawal:{n:["withdrawal",_560,"backdown","climb-down"]},"pumped-up,":{s:["pumped-up,","pumped,","wired"]},apprehensive:{s:["apprehensive","worried","discerning"]},idolize:{v:["idolize","idolise","worship","hero-worship","revere"]},worship:{n:["worship","adoration"],v:["worship","v"]},envelop:{v:["envelop","enfold","enwrap","wrap","enclose"]},wrapping:{n:["wrapping","wrap","wrapper"]},wrap:{n:["wrap","wrapper"],v:["wrap","v"]},worldwide:{s:["worldwide","world-wide"]},wrestling:{n:["wrestling","rassling","grappling"]},photocopy:{v:["photocopy","xerox"]},swathe:{n:["swathe","wrapping"],v:["swathe","v"]},cloaked:{s:["cloaked","clothed","draped","mantled","wrapped","disguised","masked"]},infirmity:{n:["infirmity","frailty","debility","feebleness","frailness","valetudinarianism"]},y:{n:["y","wye"]},yttrium:{n:["yttrium","y"]},narration:{n:["narration","recital","yarn"]},wyoming:{n:["wyoming","wy","wyo."]},scripted:{a:["scripted","written"]},wrist:{n:["wrist","carpus"]},alprazolam:{n:["alprazolam","xanax"]},sulkiness:{n:["sulkiness","sullenness","moroseness","sourness","huffishness"]},yeast:{n:["yeast","barm"]},jaundiced:{s:["jaundiced","icteric","yellow"]},scandalmongering:{s:["scandalmongering","sensationalistic","yellow,"]},yellow:{s:["yellow","yellowed","yellowish","xanthous"],n:["yellow","yellowness"]},hagiographa:{n:["hagiographa","ketubim","writings"]},yea:{r:["yea","yeah"]},year:{n:["year","twelvemonth","yr"]},yokel:{n:["yokel","rube","hick","yahoo","hayseed","bumpkin","chawbacon"]},menagerie:{n:["menagerie","zoo"]},zinc:{n:["zinc","zn"]},zoom:{v:["zoom","whizz"],n:["zoom","n"]},impenitent:{a:["impenitent","unrepentant","unremorseful"]},abdicate:{v:["abdicate","renounce"]},irreclaimable:{s:["irreclaimable","irredeemable","unredeemable","unreformable"]},sertraline:{n:["sertraline","zoloft"]},zimbabwe:{n:["zimbabwe","rhodesia"]},frivol:{v:["frivol","trifle"]},piddle:{v:["piddle","wanton","trifle"],n:["piddle","n"]},hankering:{n:["hankering","yen"]},faithlessly:{r:["faithlessly","traitorously","treacherously","treasonably","false"]},delusive:{s:["delusive","false"]},zu:{n:["zu","zubird"]},depraved:{s:["depraved","perverse","perverted","reprobate"]},abjure:{v:["abjure","recant","forswear","retract","resile"]},flinty:{s:["flinty","flint","granitic","obdurate","stony"]},cussed:{s:["cussed","obdurate","obstinate","unrepentant"]},zoophilia:{n:["zoophilia","zoophilism"]},desertion:{n:["desertion","abandonment","defection"]},abandonment:{n:["abandonment","forsaking","desertion"]},demoralized:{s:["demoralized","demoralised","discouraged","disheartened"]},cession:{n:["cession","ceding"]},applaudable:{s:["applaudable","commendable","laudable","praiseworthy"]},z:{n:["z","zee","zed","ezed","izzard"]},youth:{n:["youth","youthfulness","juvenility"]},younger:{s:["younger","jr."]},shameless:{s:["shameless","unblushing"]},gauche:{s:["gauche","graceless","unpolished"]},graceless:{s:["graceless","ungraceful"]},zealand:{n:["zealand","seeland","sjaelland"]},disown:{v:["disown",_298,"repudiate"]},admirably:{r:["admirably","laudably","praiseworthily","commendable"]},delinquency:{n:["delinquency","dereliction"]},heartily:{r:["heartily","cordially","warmly"]},abrogation:{n:["abrogation","repeal","annulment"]},iniquitous:{s:["iniquitous","sinful","ungodly"]},poisonous:{s:["poisonous","venomous",_394,"toxicant"]},humiliation:{n:["humiliation","abasement","mortification"]},abasement:{n:["abasement","degradation","abjection"]},apostasy:{n:["apostasy","renunciation","defection","tergiversation"]},merrymaking:{n:["merrymaking","conviviality","jollification"]},conviviality:{n:["conviviality","joviality"]},degradation:{n:["degradation","debasement"]},flourish:{n:[_412,"brandish","fanfare","tucket"],v:[_412,"v"]},degrade:{v:["degrade","cheapen"]},penitent:{a:["penitent","repentant"]},doggedness:{n:["doggedness","perseverance","persistence","persistency","tenacity","tenaciousness","pertinacity"]},conscientious:{s:["conscientious","painstaking","scrupulous"]},discredit:{v:[_616,"disgrace"],n:[_616,"n"]},adulteration:{n:["adulteration","debasement"]},extravagant:{s:["extravagant","prodigal",_379,"spendthrift"]},prodigal:{n:["prodigal",_379,"squanderer"],s:["prodigal","s"]},reprobate:{n:[_466,"miscreant"],v:[_466,"v"],s:[_466,"s"]},degeneration:{n:["degeneration","retrogression","devolution"]},degeneracy:{n:["degeneracy","degeneration","decadence","decadency"]},"cast-off,":{s:["cast-off,","discarded","throwaway,","thrown-away,"]},extenuate:{v:["extenuate","palliate","mitigate"]},solicitude:{n:["solicitude","solicitousness"]},retraction:{n:["retraction","abjuration","recantation"]},chagrin:{n:["chagrin","humiliation","mortification"],v:["chagrin","v"]},stoop:{n:["stoop","stoep"],v:["stoop","v"]},stoup:{n:["stoup","stoop"]},watchfulness:{n:["watchfulness","vigilance","wakefulness","alertness"]},disbelieve:{v:["disbelieve","discredit"]},disrepute:{n:["disrepute","discredit"]},upheaval:{n:[_179,"uplift","upthrow","upthrust"]},renunciation:{n:["renunciation","forgoing","forswearing","renouncement"]},repudiation:{n:["repudiation","renunciation","debunking"]},ebb:{n:["ebb","reflux","ebbing","wane"]},corrosion:{n:["corrosion","corroding","erosion"]},necrose:{v:["necrose",_617,"mortify","sphacelate"]},mortify:{v:["mortify","subdue","crucify"]},relinquishment:{n:["relinquishment","relinquishing"]},deterioration:{n:["deterioration","declension","worsening","impairment"]},obsequiousness:{n:["obsequiousness","servility","subservience"]},subservience:{n:["subservience","subservientness"]},creaky:{s:["creaky","decrepit",_2,"flea-bitten","run-down","woebegone","screaky"]},puffy:{s:["puffy","intumescent","tumescent","tumid","turgid"]},westbound:{s:["westbound","westerly","westward"]},reclaimable:{s:["reclaimable","recyclable","reusable"]},incite:{v:["incite","instigate"]},reeking:{s:["reeking","watery"]},slacken:{v:["slacken","remit"]},domination:{n:["domination","mastery","supremacy"]},hagfish:{n:["hagfish","hag"]},exhilarate:{v:["exhilarate",_517,"thrill","exalt","beatify"]},withhold:{v:["withhold","deduct","recoup"]},subtract:{v:["subtract","deduct"]},propitiate:{v:["propitiate","appease"]},triumphant:{s:["triumphant","victorious"]},overstate:{v:["overstate","exaggerate","overdraw","hyperbolize","hyperbolise","magnify","amplify"]},magnify:{v:["magnify","amplify"]},moderation:{n:["moderation","mitigation","moderateness"]},extenuation:{n:["extenuation","mitigation","palliation"]},disparagement:{n:["disparagement","depreciation","derogation","dispraise"]},washcloth:{n:["washcloth","washrag","flannel"]},draining:{s:["draining","exhausting"]},remit:{v:["remit","remand"],n:["remit","n"]},remission:{n:["remission","remitment","remit","remittal","subsidence"]},dilation:{n:["dilation","dilatation"]},deification:{n:["deification","exaltation","apotheosis"]},dilate:{v:["dilate","distend"]},settling:{n:["settling","subsiding","subsidence"]},swaddle:{v:["swaddle","swathe"]},bowdlerize:{v:["bowdlerize","bowdlerise","expurgate",_244,"shorten"]},temperance:{n:["temperance","moderation"]},condensation:{n:["condensation","abridgement","abridgment","capsule","condensate"]},exacerbate:{v:["exacerbate","exasperate","aggravate"]},disruption:{n:[_77,"perturbation"]},condensing:{n:["condensing","condensation"]},absolution:{n:["absolution","remission","remittal"]},remittance:{n:["remittance","remittal","remission","remitment"]},accretion:{n:["accretion","accumulation"]},constipation:{n:["constipation","irregularity"]},irregularity:{n:["irregularity","unregularity"]},abnormality:{n:["abnormality","irregularity","freakishness","abnormalcy"]},devious:{s:["devious","circuitous","roundabout","shifty","oblique"]},seizure:{n:["seizure","ictus","raptus"]},takeout:{n:["takeout","takeaway"],s:["takeout","take-away"]},erratic:{s:["erratic",_516,_580,"temperamental","fickle","mercurial","quicksilver,"]},"meandering,":{s:["meandering,","rambling","wandering,","winding"]},wandering:{n:[_580,"roving","vagabondage"],s:[_580,"s"]},abnormal:{a:["abnormal","unnatural"]},impede:{v:["impede","hinder"]},attenuation:{n:["attenuation","fading"]},handicap:{v:[_312,"hinder","hamper"],n:[_312,"n"]},divergence:{n:["divergence","divergency"]},hunched:{s:["hunched","round-backed","round-shouldered","stooped","stooping","crooked"]},asymmetrical:{s:["asymmetrical","crooked"],a:["asymmetrical","asymmetric"]},digressive:{s:["digressive","discursive","excursive","rambling","tangential"]},sprawling:{s:["sprawling","straggling","rambling","straggly"],n:["sprawling","n"]},singularity:{n:["singularity","uniqueness"]},annexation:{n:["annexation","appropriation"]},unsalted:{s:["unsalted","unseasoned"]},retrenchment:{n:["retrenchment","curtailment","downsizing"]},uniformity:{n:["uniformity","uniformness"]},divergent:{a:["divergent","diverging"]},pitchy:{s:["pitchy","resinous","resiny","tarry"]},tarry:{v:["tarry","linger"],s:["tarry","s"]},negate:{v:["negate","contradict"]},contradict:{v:["contradict","negate","contravene","belie"]},disjunction:{n:["disjunction","disjuncture","disconnection","disconnectedness"]},abettor:{n:["abettor","abetter"]},abhor:{v:["abhor","loathe","abominate","execrate"]},abhorrent:{s:["abhorrent","detestable","obscene","repugnant","repulsive"]},disgraceful:{s:["disgraceful","scandalous","shameful","shocking"]},lurid:{s:["lurid","shocking"]},instigator:{n:["instigator","initiator","provoker","inciter","instigant","firebrand"]},benefactor:{n:["benefactor","helper"]},disfavor:{n:["disfavor","disfavour","dislike","disapproval"],v:["disfavor","v"]},showman:{n:["showman","promoter","impresario"]},promoter:{n:["promoter","booster","plugger"]},arthritic:{s:["arthritic","creaky","rheumatic","rheumatoid","rheumy"]},perishable:{n:["perishable","spoilable"]},discombobulated:{s:["discombobulated","disconcerted"]},contemn:{v:["contemn","despise","scorn","disdain"]},disinherit:{v:["disinherit","disown"]},abiding:{s:["abiding","enduring","imperishable"]},abominable:{s:["abominable","detestable","execrable","odious"]},ingenuity:{n:["ingenuity","ingeniousness","cleverness"]},inventiveness:{n:["inventiveness","ingeniousness","ingenuity","cleverness"]},shun:{v:["shun","eschew"]},insubstantial:{a:["insubstantial","unsubstantial","unreal"],s:["insubstantial","s"]},dexterity:{n:["dexterity","sleight"]},convulsion:{n:["convulsion","turmoil","upheaval"]},turbulence:{n:["turbulence",_179,"turbulency"]},inability:{n:["inability","unfitness"]},competence:{n:["competence","competency"]},incompetence:{n:["incompetence","incompetency"]},sicken:{v:["sicken","nauseate"]},fickle:{s:["fickle","volatile"]},migrate:{v:["migrate","transmigrate"]},cringing:{s:["cringing","groveling","grovelling","wormlike","wormy"]},reside:{v:["reside","shack","domicile","domiciliate"]},impotence:{n:["impotence","impotency"]},powerlessness:{n:["powerlessness","impotence","impotency"]},brightness:{n:["brightness","cleverness","smartness"]},vigor:{n:["vigor","vigour","dynamism","heartiness"]},worthlessness:{n:["worthlessness","ineptitude"]},awkwardness:{n:["awkwardness","clumsiness","ineptness","ineptitude","maladroitness","slowness","cumbersomeness","unwieldiness","gracelessness","stiffness"]},hideous:{s:["hideous","repulsive","horrid","horrific","outrageous"]},exultant:{s:["exultant","exulting","jubilant","prideful","rejoicing","triumphal","triumphant"]},inept:{s:["inept","tactless"]},feckless:{s:["feckless","inept"]},revival:{n:["revival","resurgence","revitalization","revitalisation","revivification"]},dignified:{s:["dignified","self-respecting","self-respectful"]},unentitled:{s:["unentitled","unqualified"]},incompetent:{a:[_618,"unqualified"],s:[_618,"unskilled"]},apostatize:{v:["apostatize","apostatise","tergiversate"]},incapable:{s:["incapable","incompetent"]},celerity:{n:["celerity","quickness","rapidity","rapidness","speediness"]},disdainful:{s:["disdainful","haughty","imperious","lordly","overbearing","prideful","sniffy","supercilious","swaggering"]},washup:{n:["washup","bathing"]},pamperer:{n:["pamperer","spoiler","coddler","mollycoddler"]},plunderer:{n:["plunderer","pillager","looter","spoiler","despoiler","raider","freebooter"]},bungling:{s:["bungling","clumsy","fumbling","incompetent"]},honorable:{a:[_477,"honourable"],s:[_477,"s"]},midazolam:{n:["midazolam","versed"]},bootless:{s:["bootless","fruitless","futile","sleeveless","vain"]},conceited:{s:["conceited","egotistic","egotistical","self-conceited","swollen","swollen-headed","vain"]},debased:{s:["debased","devalued","degraded"]},stain:{n:["stain","discoloration","discolouration"],v:["stain","v"]},avow:{v:["avow","avouch"]},botchy:{s:["botchy","butcherly","unskillful"]},assertion:{n:["assertion","averment","asseveration"]},sobriety:{n:["sobriety","temperance","dryness"]},arrogant:{s:["arrogant","chesty","self-important"]},cleansing:{s:[_451,"purifying"],n:[_451,"n"]},ablutionary:{s:["ablutionary","cleansing"]},impurity:{n:["impurity","impureness","dross"]},indulgence:{n:["indulgence","indulging","pampering","humoring","lenience","leniency","self-indulgence"]},abstinence:{n:["abstinence","abstention"]},consummate:{s:["consummate","masterful","masterly","virtuoso,"]},"afloat,":{s:["afloat,","awash,","flooded","inundated","overflowing"]},nonnatural:{s:["nonnatural","otherworldly","preternatural","transcendental"]},preternatural:{s:["preternatural","uncanny"]},vindication:{n:["vindication","exoneration"]},perfection:{n:["perfection","flawlessness"]},bootlicking:{s:["bootlicking","fawning","sycophantic","toadyish","obsequious"]},inhabitancy:{n:["inhabitancy","inhabitation","habitation"]},grotesque:{s:["grotesque","monstrous"]},sprawl:{n:["sprawl","sprawling"],v:["sprawl","straggle"]},campsite:{n:["campsite","campground","bivouac","encampment"]},purification:{n:["purification","purgation"]},injustice:{n:["injustice","unfairness","iniquity","shabbiness","unjustness"]},stultification:{n:["stultification","constipation",_491,"deadening","befooling"]},unclean:{a:["unclean","impure"]},uproot:{v:["uproot","extirpate","deracinate","eradicate","exterminate"]},longing:{n:["longing","yearning","hungriness"]},accustomed:{s:["accustomed","customary","habitual","wonted,"]},aboveboard:{s:["aboveboard","straightforward"],r:["aboveboard","r"]},primitive:{s:["primitive","naive"]},archaic:{s:["archaic","primitive"]},multiply:{v:["multiply","manifold"]},artlessly:{r:["artlessly","ingenuously","crudely","inexpertly"]},indulge:{v:["indulge","luxuriate"]},luxuriate:{v:["luxuriate","wanton"]},aversion:{n:["aversion","averting"]},antipathy:{n:["antipathy","aversion","distaste"]},motiveless:{s:["motiveless","unprovoked","wanton"]},enjoyment:{n:["enjoyment","delectation"]},atrophied:{a:["atrophied","wasted","diminished"]},diminished:{s:[_573,"lessened","vitiated","weakened"],a:[_573,"a"]},dishonestly:{r:["dishonestly","venally","deceitfully"]},annulment:{n:["annulment","invalidation"]},revocation:{n:["revocation","annulment"]},damnable:{s:["damnable","execrable"]},underarm:{r:["underarm","underhand"],a:["underarm","a"]},underhandedly:{r:["underhandedly","underhand"]},sneaky:{s:["sneaky",_619,"underhanded"]},underhand:{a:[_619,"underhanded","underarm"],r:[_619,"r"],s:[_619,"s"]},attrition:{n:["attrition","contrition","contriteness"]},paraphrase:{v:["paraphrase","rephrase","reword"],n:["paraphrase","paraphrasis"]},disconnection:{n:["disconnection","disjunction"]},distracted:{s:["distracted","distrait"]},exuberant:{s:["exuberant","lush","luxuriant","profuse","riotous"]},ebullient:{s:["ebullient","exuberant","high-spirited"]},annihilation:{n:["annihilation",_419,"obliteration"]},dissolution:{n:[_522,_419,"breakup"]},disadvantage:{v:["disadvantage","disfavor","disfavour"]},continuance:{n:["continuance","continuation"]},friction:{n:["friction","detrition","rubbing"]},overflow:{n:["overflow","runoff","overspill"],v:["overflow","overrun"]},abolition:{n:["abolition","abolishment"]},aft:{r:["aft","abaft","astern"]},faraway:{s:["faraway","far-off"]},inattentive:{s:["inattentive","neglectful"]},exposition:{n:["exposition","expounding"]},inherence:{n:["inherence","inherency"]},debonair:{s:["debonair","debonaire","debonnaire","suave"]},heedful:{a:[_433,"attentive","thoughtful"],s:[_433,"s"]},avoidance:{n:["avoidance","shunning","dodging"]},strengthener:{n:["strengthener","reinforcement"]},reinforcement:{n:[_346,"reenforcement"]},insufficiency:{n:["insufficiency","inadequacy","deficiency"]},cragged:{s:["cragged","craggy","hilly","mountainous"]},complaisant:{s:["complaisant","obliging"]},unceremonious:{s:["unceremonious","unceremonial"]},immanence:{n:["immanence","immanency"]},commanding:{s:["commanding","dominating","overlooking"]},materialization:{n:["materialization","materialisation","manifestation"]},nonexistence:{n:["nonexistence","nonentity"]},discontinuance:{n:["discontinuance","discontinuation"]},nonsensitive:{s:["nonsensitive","unrestricted"]},unexclusive:{s:["unexclusive","unrestricted"]},reprimand:{v:["reprimand",_532,"criminate"],n:["reprimand","n"]},censure:{n:[_532,"animadversion"],v:[_532,"v"]},corrupted:{s:["corrupted","debased","vitiated"]},adulterate:{s:["adulterate","adulterated","debased"],v:["adulterate","v"]},bumbling:{s:["bumbling","bungling","butterfingered","ham-fisted","ham-handed","handless","heavy-handed","left-handed"]},unconditional:{a:["unconditional","unconditioned"],s:["unconditional","s"]},unconditioned:{a:["unconditioned","innate","unlearned"]},revel:{v:["revel","racket","jollify","wassail"],n:["revel","revelry"]},ductile:{s:["ductile","malleable",_542,"pliant","tensile","tractile"]},authoritarian:{s:["authoritarian","autocratic","dictatorial","despotic","tyrannic","tyrannical","overbearing"],n:["authoritarian","dictator"]},autocratic:{s:["autocratic","bossy","dominating","high-and-mighty","magisterial","peremptory"]},despotic:{a:["despotic","despotical"],s:["despotic","s"]},brooding:{s:["brooding","broody","contemplative","meditative","musing","pensive","pondering","reflective","ruminative"],n:["brooding","incubation"]},oppressive:{s:["oppressive","tyrannical","tyrannous"]},amnesty:{n:["amnesty","pardon"]},pardon:{n:["pardon","amnesty"],v:["pardon","v"]},forgiveness:{n:["forgiveness","pardon"]},penance:{n:["penance","self-mortification","self-abasement"]},repentance:{n:["repentance","penitence","penance"]},assimilate:{v:["assimilate","imbibe"]},doubtful:{s:["doubtful","dubious","dubitable","tentative"]},haunted:{s:["haunted","obsessed","preoccupied"]},maimed:{s:["maimed","mutilated"],n:["maimed","n"]},exigent:{s:["exigent","exacting"]},fastidious:{a:["fastidious","exacting"]},soberness:{n:["soberness","sobriety"]},disapprobation:{n:["disapprobation","condemnation"]},purge:{n:["purge","purging","purgation"],v:["purge","v"]},catharsis:{n:["catharsis","katharsis","purgation","abreaction"]},emancipate:{v:["emancipate","liberate"]},oversight:{n:["oversight","lapse","inadvertence"]},unmindfulness:{n:["unmindfulness","heedlessness","inadvertence","inadvertency"]},scour:{v:["scour","abrade"]},submersion:{n:["submersion",_5,"ducking","dousing"]},ingress:{n:["ingress","immersion"]},submergence:{n:["submergence","submerging","submersion","immersion"]},contemptuous:{s:["contemptuous","disdainful","insulting","scornful"]},conurbation:{n:["conurbation","sprawl"]},economical:{s:[_523,"frugal","scotch","sparing","stinting"],a:[_523,"a"]},whipping:{n:[_570,"tanning","flogging","lashing","flagellation"],s:[_570,"s"]},dishwashing:{n:["dishwashing","washup"]},sponge:{n:["sponge","poriferan","parazoan"],v:["sponge","v"]},leech:{n:["leech","parasite","sponge","sponger","bloodsucker","hirudinean"],v:["leech","v"]},drab:{s:["drab","sober","somber","sombre","dreary"]},abstinent:{s:["abstinent","abstentious"],n:["abstinent","n"]},forebear:{n:["forebear","forbear"]},detergent:{s:["detergent","detersive"]},cathartic:{s:["cathartic","evacuant","purgative","releasing","psychotherapeutic"],n:["cathartic","n"]},purgative:{n:["purgative","cathartic","physic","aperient"],s:["purgative","s"]},spatter:{v:["spatter","bespatter",_238,"plash","splash","splosh","swash"],n:["spatter","spattering","splash","splashing","splattering",_238,_365,_620,"sputtering"]},continence:{n:["continence","continency"]},antediluvian:{s:[_266,"antiquated","archaic"],a:[_266,"antediluvial"],n:[_266,"n"]},drunkenness:{n:["drunkenness","inebriation","inebriety","intoxication","tipsiness","insobriety"]},poisoning:{n:["poisoning","intoxication"]},intentness:{n:["intentness","engrossment"]},gluttony:{n:["gluttony","overeating","gula"]},sensuality:{n:["sensuality","sensualness","sensualism"]},stealth:{n:["stealth","stealing"]},epicurean:{s:[_548,"luxurious","luxuriant","sybaritic","voluptuary","voluptuous"],n:[_548,"n"]},hedonic:{s:["hedonic","hedonistic","epicurean"]},corruptive:{s:["corruptive","perversive","pestiferous"]},bedaub:{v:["bedaub","besmear"]},avid:{s:["avid","devouring,","esurient","greedy","zealous"]},avaricious:{s:["avaricious","covetous","grabby","grasping","greedy","prehensile"]},indifferent:{s:[_590,"so-so,","unbiased","unbiassed"]},immaterial:{s:[_543,"indifferent"],a:[_543,"nonmaterial"]},apathetic:{s:["apathetic","indifferent"]},"law-abiding":{s:["law-abiding","observant"]},observant:{s:["observant","observing"]},debilitation:{n:["debilitation","enervation","enfeeblement","exhaustion"]},intemperance:{n:["intemperance","intemperateness","self-indulgence"]},licentiousness:{n:["licentiousness","wantonness"]},purgatorial:{a:["purgatorial","purging","purifying"]},grope:{v:["grope","fumble"]},thoughtful:{s:["thoughtful","serious-minded"],a:["thoughtful","a"]},avarice:{n:["avarice","greed","covetousness","rapacity","avaritia","avariciousness","cupidity"]},irrationality:{n:["irrationality","unreason"]},forgetful:{s:[_572,"oblivious"],a:[_572,"a"]},"oblivious,":{s:["oblivious,","unmindful,"]},frugality:{n:["frugality","frugalness"]},limpid:{s:["limpid","lucid","luculent","pellucid","perspicuous"]},supernatural:{n:["supernatural","occult"]},apprehensible:{s:["apprehensible","intelligible","graspable","perceivable","understandable"]},importing:{n:["importing","importation"]},perspicacious:{s:["perspicacious","sagacious","sapient"]},abundance:{n:["abundance","copiousness","teemingness"]},thoughtless:{s:["thoughtless","uncaring","unthinking"]},superficial:{s:["superficial","trivial"]},mystic:{a:["mystic","mystical"],s:["mystic","s"]},absurdity:{n:["absurdity","fatuity","fatuousness","silliness","absurdness","ridiculousness"]},indrawn:{s:["indrawn","withdrawn"]},recluse:{s:["recluse","reclusive","withdrawn"],n:["recluse","n"]},adjournment:{n:["adjournment","dissolution"]},dissolving:{n:["dissolving","dissolution"]},"nonsense,":{s:["nonsense,","nonsensical"]},heedless:{s:["heedless","reckless"],a:["heedless","unheeding"]},idiocy:{n:["idiocy","amentia"]},individualization:{n:["individualization","individualisation","individuation"]},chipper:{s:["chipper","debonair","debonaire","jaunty"]},enumeration:{n:["enumeration","numbering"]},largeness:{n:["largeness","bigness","extensiveness"]},breadth:{n:["breadth","comprehensiveness","largeness"]},affluence:{n:["affluence","richness"]},anserine:{s:["anserine","dopy","dopey","foolish","goosey","goosy","gooselike","jerky"]},nitwitted:{s:["nitwitted",_622,"soft-witted","witless"]},otiose:{s:["otiose",_623,"purposeless",_622,"superfluous","wasted"]},insensible:{s:["insensible","senseless"]},mindless:{s:["mindless","reasonless",_622,"vacuous"],a:["mindless","a"]},maxim:{n:["maxim","axiom"]},pensiveness:{n:["pensiveness","brooding","meditativeness","contemplativeness"]},advertent:{s:["advertent","heedful"]},copious:{s:["copious","voluminous"]},scarcity:{n:["scarcity","scarceness"]},rebuke:{n:["rebuke","reproof","reproval","reprehension","reprimand"]},profusion:{n:["profusion","profuseness",_550,"cornucopia"]},bountiful:{s:["bountiful","plentiful"]},abounding:{s:["abounding","galore(ip)"]},richness:{n:[_550,"rankness","prolificacy","fertility"]},fertility:{n:["fertility","fecundity"]},birthrate:{n:["birthrate","fertility","natality"]},meagerness:{n:["meagerness","meagreness","leanness","poorness","scantiness","scantness","exiguity"]},scandalization:{n:["scandalization","scandalisation","outrage"]},indignation:{n:["indignation","outrage"]},wounded:{n:["wounded","maimed"],s:["wounded","s"]},stint:{v:["stint","skimp","scant"],n:["stint","n"]},scant:{v:["scant","skimp"]},skimp:{v:["skimp","scant"]},rarity:{n:["rarity","tenuity","rareness","infrequency"]},diss:{v:["diss","insult","affront"]},insult:{n:["insult","affront"],v:["insult","v"]},destitute:{s:["destitute","impoverished","indigent","necessitous","needy","poverty-stricken"]},streamlined:{s:["streamlined","aerodynamic","flowing","sleek"]},manumit:{v:["manumit","emancipate"]},aspersion:{n:["aspersion","calumny","slander","defamation","denigration","sprinkling","slur"]},defamation:{n:["defamation","calumny","calumniation","obloquy","traducement"]},obloquy:{n:["obloquy","opprobrium"]},grudging:{s:["grudging","niggardly","scrimy"]},bleed:{v:["bleed","leech","phlebotomize","phlebotomise"]},kindness:{n:["kindness","benignity"]},forgivingness:{n:["forgivingness","kindness"]},deleterious:{s:["deleterious","hurtful","injurious"]},badmouth:{v:["badmouth","malign","traduce"]},fullness:{n:["fullness","mellowness",_550,"voluminosity","voluminousness"]},denunciation:{n:["denunciation","denouncement"]},laudatory:{s:["laudatory","praiseful","praising"]},abusive:{s:["abusive","opprobrious","scurrilous"]},reproach:{v:["reproach","upbraid"]},eulogize:{v:["eulogize","eulogise"]},snappy:{s:["snappy","whipping"]},whipstitch:{n:["whipstitch",_570,"whipstitching"]},thrashing:{n:["thrashing","walloping","debacle","drubbing",_624,"trouncing","whipping"]},buttress:{n:["buttress","buttressing"]},adjacency:{n:["adjacency","contiguity","contiguousness"]},disparage:{v:["disparage","belittle"]},uncivil:{a:["uncivil","rude"]},"ill-bred":{s:["ill-bred","bounderish","lowbred","rude","underbred","yokelish"]},"ill-mannered":{s:["ill-mannered","bad-mannered","rude","unmannered","unmannerly"]},juxtaposition:{n:["juxtaposition","apposition","collocation"]},knackered:{s:["knackered","drained"]},ignorant:{s:["ignorant","illiterate","unknowledgeable","unknowing","unwitting","nescient","unlearned","unlettered"]},illiterate:{n:["illiterate","nonreader"],s:["illiterate","s"]},pedant:{n:["pedant","bookworm","scholastic"]},alcoholism:{n:["alcoholism","inebriation","drunkenness"]},abyss:{n:["abyss","abysm"]},respectful:{s:["respectful","reverential","venerating"]},cadence:{n:["cadence","cadency"]},concur:{v:["concur","coincide"]},coincide:{v:["coincide","co-occur","cooccur"]},intonation:{n:["intonation","chanting","modulation"]},incorporeal:{a:["incorporeal","immaterial"]},collegiate:{a:["collegiate","collegial"]},"olive-drab":{s:["olive-drab","drab"]},unschooled:{s:["unschooled","untaught","untutored"]},nearness:{n:["nearness","closeness"]},suavity:{n:["suavity","suaveness","blandness","smoothness"]},eloquence:{n:["eloquence","fluency","smoothness"]},quicken:{v:[_19,"invigorate"]},whet:{v:["whet","quicken"]},expedite:{v:["expedite","hasten"]},modulation:{n:["modulation","inflection"]},monotony:{n:["monotony",_625,"sameness"]},babble:{v:["babble","blather","smatter","blether","blither"],n:["babble","babbling","lallation"]},"clear-eyed":{s:["clear-eyed","clear-sighted","perspicacious"]},underestimate:{v:[_626,"underrate"],n:[_626,"underestimation","underrating","underreckoning"]},lowball:{v:["lowball","underestimate"]},undervalue:{v:["undervalue","underestimate"]},inactiveness:{n:["inactiveness","inactivity","inertia"]},acknowledgment:{n:["acknowledgment","acknowledgement"]},unmindful:{a:["unmindful",_572,"mindless"]},grievous:{s:[_342,"heartbreaking","heartrending"]},unwelcome:{s:["unwelcome","unwished","unwished-for"]},indiscernible:{s:["indiscernible","insensible","undetectable"]},"insensible,":{s:["insensible,","unaffected,"]},idiot:{n:["idiot","imbecile","cretin","moron","changeling","half-wit","retard"]},inflow:{n:["inflow","influx"]},futile:{s:["futile","ineffectual","otiose","unavailing","meaningless"]},listlessness:{n:["listlessness","torpidity","torpidness","torpor"]},torpor:{n:["torpor","torpidity"]},accordant:{s:["accordant","agreeable","conformable","consonant","concordant"]},onset:{n:["onset","oncoming"]},outshout:{v:["outshout","outcry"]},ungrateful:{a:["ungrateful","thankless","unthankful"]},unapproachable:{s:["unapproachable","unreachable","unreached"]},approachable:{s:["approachable","reachable"]},scrimp:{v:["scrimp","stint","skimp"]},disagreeable:{s:["disagreeable","unsympathetic"]},inessential:{n:["inessential","nonessential"],a:["inessential","unessential"]},hermit:{n:["hermit","recluse",_243,"solitudinarian","troglodyte"]},mishap:{n:["mishap","misadventure","mischance"]},causeless:{s:["causeless","fortuitous","uncaused","reasonless"]},accidental:{s:["accidental","inadvertent"]},slavish:{s:["slavish","subservient","submissive"]},dispose:{v:["dispose","incline"]},itch:{v:["itch","spoil"],n:["itch","itchiness","itching"]},spoil:{n:["spoil","spoliation","spoilation","despoilation","despoilment","despoliation","spoiling","spoilage"],v:["spoil","v"]},applause:{n:["applause","clapping"]},troublesomeness:{n:["troublesomeness",_413,"worriment"]},inconvenience:{n:[_413,"incommodiousness"],v:[_413,"v"]},sibilation:{n:["sibilation","assibilation"]},hiss:{n:["hiss","hissing","hushing","fizzle","sibilation"],v:["hiss","siss","sizz","sibilate"]},conciliatory:{a:["conciliatory","conciliative"]},inconsiderate:{s:["inconsiderate","unconsidered"]},mismanagement:{n:["mismanagement","misdirection"]},disobliging:{s:["disobliging","uncooperative"]},comprehensiveness:{n:["comprehensiveness","fullness"]},equate:{v:["equate","correspond"]},unchained:{s:["unchained","unfettered","unshackled","untied"]},amenable:{s:["amenable","conformable","tractable"]},civilized:{s:["civilized","civilised","cultivated","cultured","genteel","polite"],a:["civilized","civilised"]},congruous:{a:["congruous","congruent"]},snappish:{s:["snappish","snappy"]},consonant:{s:["consonant","harmonic","harmonical","harmonized","harmonised"]},practiced:{s:["practiced","practised"]},discrepant:{s:["discrepant","inconsistent","incompatible"]},impertinently:{r:["impertinently","saucily","pertly","freshly","impudently"]},dipsomania:{n:["dipsomania","alcoholism","potomania"]},depute:{v:["depute","deputize","deputise"]},pleasantly:{r:["pleasantly","agreeably","enjoyably","cheerily","sunnily"]},harmonious:{s:["harmonious","proportionate","symmetrical"]},accouter:{v:["accouter","accoutre"]},miscalculate:{v:["miscalculate","misestimate"]},penal:{s:["penal","punishable"]},coherence:{n:["coherence","coherency","cohesion","cohesiveness"]},depreciate:{v:["depreciate","undervalue","devaluate","devalue"]},sloppiness:{n:[_627,"slovenliness","unkemptness"]},discordant:{s:["discordant","disharmonious","dissonant","inharmonic"]},"pull-off":{n:["pull-off","layby","lay-by"]},inaction:{n:["inaction","inactivity","inactiveness"]},ratified:{s:["ratified","sanctioned"]},canonic:{s:["canonic","canonical","sanctioned"],a:["canonic","canonical"]},accumulation:{n:["accumulation","accrual","accruement"]},segregation:{n:["segregation","sequestration","separatism"]},granary:{n:["granary","garner"]},justness:{n:["justness","rightness","nicety"]},twit:{n:["twit","taunt","taunting"],v:["twit","v"]},scabies:{n:["scabies","itch"]},fidelity:{n:["fidelity","faithfulness"]},correctness:{n:["correctness","rightness"]},habituate:{v:["habituate","accustom"]},exactness:{n:["exactness","exactitude"]},anchorite:{n:["anchorite","hermit"]},inerrable:{s:["inerrable","inerrant","unerring"]},incorrectness:{n:["incorrectness","wrongness"]},estrange:{v:["estrange","alienate","disaffect"]},acerbity:{n:["acerbity","tartness"]},inure:{v:["inure","harden","indurate"]},harden:{v:["harden","indurate"]},acidity:{n:["acidity","acidulousness"]},familiarize:{v:["familiarize","familiarise","acquaint"]},effeminacy:{n:["effeminacy","effeminateness","sissiness",_581,"womanishness","unmanliness"]},indistinctness:{n:["indistinctness",_581,"blurriness","fogginess","fuzziness"]},balminess:{n:["balminess","softness"]},unfitness:{n:["unfitness","softness"]},severity:{n:[_628,_629,"harshness","rigor","rigour","rigorousness","rigourousness","inclemency","hardness","stiffness"]},cruelty:{n:["cruelty","cruelness","harshness","mercilessness","pitilessness","ruthlessness"]},harshness:{n:["harshness",_510,"abrasiveness","scratchiness"]},wean:{v:["wean","ablactate"]},culminate:{v:["culminate","climax"]},climax:{n:["climax","culmination"],v:["climax","v"]},gradualness:{n:["gradualness","gentleness"]},mawkishness:{n:["mawkishness","sentimentality","drippiness","mushiness","soupiness",_627,"bathos"]},carelessness:{n:["carelessness","sloppiness"]},wateriness:{n:["wateriness","muddiness","sloppiness"]},pitting:{n:["pitting",_510,"indentation"]},choppiness:{n:["choppiness","roughness"]},crudeness:{n:["crudeness",_510,"crudity","gaucheness","primitiveness","primitivism","rudeness"]},roughness:{n:[_510,"raggedness"]},inexperience:{n:["inexperience","rawness"]},apogee:{n:["apogee","culmination"]},closeness:{n:[_569,"intimacy","secretiveness"]},castigation:{n:["castigation","chastisement","earful","upbraiding","going-over"]},unfamiliarity:{n:["unfamiliarity","strangeness"]},deprecate:{v:["deprecate","depreciate","vilipend"]},cessation:{n:["cessation","surcease"]},asperity:{n:["asperity",_389,"grimness","hardship","rigor","rigour",_628,_629,"rigorousness","rigourousness"]},distinctness:{n:["distinctness","sharpness"]},sharpness:{n:[_389,"keenness"]},acuteness:{n:["acuteness","acuity",_389,"keenness"]},deliberation:{n:["deliberation","deliberateness","weighing","advisement"]},slowness:{n:["slowness","deliberation","deliberateness","unhurriedness"]},austereness:{n:["austereness",_628,"severeness"]},badness:{n:["badness",_628,"severeness"]},energetic:{s:["energetic","gumptious","industrious","up-and-coming"]},hardworking:{s:["hardworking","industrious","tireless","untiring"]},twerp:{n:["twerp","twirp","twit"]},passivity:{n:["passivity","passiveness"]},impassive:{s:["impassive","stolid"]},armistice:{n:["armistice","cease-fire","truce"]},detectable:{s:["detectable","perceptible","noticeable"]},eagerness:{n:["eagerness","avidity","avidness","keenness"]},diligent:{s:["diligent","persevering"]},actualize:{v:["actualize","actualise"]},brisk:{v:["brisk","brisken"],s:["brisk","s"]},hardness:{n:["hardness","ruggedness"]},unfeelingness:{n:["unfeelingness","callousness","callosity","hardness","insensibility"]},fabricated:{s:["fabricated","fancied","fictional","fictitious"]},obtuse:{s:["obtuse","purblind"]},suitability:{n:["suitability","suitableness"]},dullness:{n:["dullness","bluntness","obtuseness"]},calculating:{s:["calculating","calculative","conniving","scheming","shrewd"]},insightfulness:{n:["insightfulness","acumen"]},discernment:{n:[_291,"perceptiveness"]},incongruity:{n:["incongruity","incongruousness"]},aptness:{n:["aptness","appositeness","propensity"]},discerning:{s:["discerning","discreet"]},discord:{n:[_501,"discordance","dissension","strife"],v:[_501,"v"]},discordance:{n:["discordance","discord"]},prone:{s:["prone","prostrate"]},graduality:{n:["graduality","gradualness"]},ailing:{s:["ailing","indisposed","peaked,","poorly,","sickly","unwell","seedy"]},meanness:{n:["meanness","minginess","niggardliness","niggardness","parsimony","parsimoniousness",_6,"tightfistedness","closeness"]},stuffiness:{n:["stuffiness","closeness"]},retardation:{n:[_630,"backwardness","slowness","subnormality"]},deadpan:{s:["deadpan","expressionless","impassive","poker-faced","unexpressive"]},tact:{n:["tact","tactfulness"]},otherness:{n:["otherness","distinctness","separateness"]},discreteness:{n:["discreteness","distinctness","separateness","severalty"]},harangue:{n:["harangue","rant","ranting"]},politeness:{n:["politeness","civility","niceness"]},naughtiness:{n:["naughtiness","mischievousness","badness"]},subscript:{a:["subscript","inferior"],n:["subscript","inferior"]},disqualify:{v:["disqualify","unfit","indispose"]},stodginess:{n:["stodginess","stuffiness"]},pertain:{v:["pertain","appertain"]},partiality:{n:["partiality","partisanship"]},beastliness:{n:["beastliness","meanness"]},devotion:{n:["devotion","veneration","cultism","devotedness"]},discerp:{v:["discerp","sever","lop"]},infidelity:{n:["infidelity","unfaithfulness"]},slowdown:{n:["slowdown","lag","retardation"]},retardant:{n:["retardant","retardent","retardation"]},deceleration:{n:["deceleration","slowing","retardation"]},disagreement:{n:["disagreement","dissension","dissonance"]},nonconformity:{n:["nonconformity","nonconformance","nonconformism"]},mismanage:{v:["mismanage","mishandle","misconduct"]},astonishment:{n:["astonishment","amazement"]},dismember:{v:["dismember","discerp"]},accurse:{v:["accurse","execrate","anathemize","comminate","anathemise","anathematize","anathematise"]},revers:{n:["revers","revere"]},permissible:{a:["permissible","allowable"]},illegitimate:{s:["illegitimate","illicit","outlaw,","outlawed","unlawful"],n:["illegitimate","n"]},unlawful:{s:["unlawful","wrongful"]},admonish:{v:["admonish","reprove","reproof"]},bastard:{n:[_392,"by-blow","illegitimate","whoreson","mongrel"],s:[_392,"s"]},forewarn:{v:["forewarn","previse"]},exhortation:{n:["exhortation","incitement"]},incitement:{n:[_631,"incitation","provocation"]},provocation:{n:["provocation","incitement"]},incitation:{n:["incitation","incitement"]},importunity:{n:["importunity","urgency","urging"]},fomentation:{n:["fomentation","instigation"]},abetment:{n:["abetment","abettal","instigation"]},adoration:{n:["adoration","latria","idolization","idolisation"]},fancify:{v:["fancify","beautify",_203,"prettify"]},garnishee:{v:["garnishee","garnish"]},gild:{v:["gild","begild","engild"],n:["gild","n"]},deft:{s:["deft","dexterous","dextrous"]},symbolize:{v:["symbolize","symbolise"]},misrepresent:{v:["misrepresent","belie"]},expedience:{n:["expedience","expediency"]},opportunism:{n:["opportunism","self-interest","self-seeking","expedience"]},exodus:{n:["exodus","hegira","hejira"]},pleonastic:{s:["pleonastic","redundant","tautologic","tautological"]},intrinsic:{a:["intrinsic","intrinsical"]},eventuality:{n:["eventuality","contingency","contingence"]},adventurous:{a:["adventurous","adventuresome"]},headlong:{r:[_337,"rashly","precipitately","headfirst"],s:[_337,"s"]},headfirst:{s:["headfirst","headlong"],r:["headfirst","r"]},parlous:{s:["parlous","perilous","precarious","touch-and-go"]},"unafraid,":{a:["unafraid,","fearless"]},hesitant:{s:["hesitant","hesitating"]},attacker:{n:["attacker","aggressor","assailant","assaulter"]},unlucky:{a:["unlucky","luckless"],s:["unlucky","s"]},inauspicious:{a:[_211,"unfortunate"],s:[_211,"s"]},adversity:{n:["adversity","hardship"]},woe:{n:["woe","woefulness"]},prosperity:{n:["prosperity","successfulness"]},deferent:{s:["deferent","deferential","regardful"]},insomniac:{s:["insomniac","sleepless","watchful"]},misinform:{v:["misinform","mislead"]},mislead:{v:["mislead","misdirect","misguide"]},premeditation:{n:["premeditation","forethought"]},deception:{n:["deception","deceit","dissembling","dissimulation"]},misrepresentation:{n:["misrepresentation","deceit","deception"]},undesirable:{s:["undesirable","unsuitable"],a:["undesirable","unwanted"]},inexpedient:{s:["inexpedient","unwise"]},upholder:{n:["upholder","maintainer","sustainer"]},liqueur:{n:["liqueur","cordial"]},benign:{a:["benign","benignant"]},benignant:{s:["benignant","gracious"],a:["benignant","a"]},inaccessible:{s:["inaccessible","unobtainable","unprocurable","untouchable"],a:["inaccessible","unaccessible"]},supercilious:{s:["supercilious","sneering","snide"]},idiosyncrasy:{n:["idiosyncrasy","foible","mannerism"]},simplicity:{n:["simplicity","simmpleness","simpleness"]},artlessness:{n:["artlessness","innocence","ingenuousness","naturalness"]},authenticity:{n:["authenticity","genuineness","legitimacy"]},softheartedness:{n:["softheartedness","tenderness"]},tenderness:{n:["tenderness","tenderheartedness","soreness","rawness"]},nonchalance:{n:["nonchalance","unconcern","indifference"]},apathy:{n:["apathy","indifference","numbness","spiritlessness"]},emotionlessness:{n:["emotionlessness","impassivity","impassiveness","phlegm","indifference","stolidity","unemotionality"]},unemotionality:{n:["unemotionality","emotionlessness"]},repulsion:{n:["repulsion","standoff"]},alienation:{n:["alienation","disaffection","estrangement"]},allegiance:{n:["allegiance","fealty"]},treachery:{n:["treachery","betrayal","treason","perfidy"]},treason:{n:["treason","subversiveness","traitorousness"]},perfidy:{n:["perfidy","perfidiousness","treachery"]},disjoin:{v:["disjoin","disjoint"]},decouple:{v:["decouple","dissociate"]},uncouple:{v:["uncouple","decouple"]},consanguinity:{n:["consanguinity","cognation"]},proximity:{n:["proximity","propinquity"]},hostility:{n:["hostility","enmity","antagonism"]},gloom:{n:["gloom","gloominess","somberness","sombreness","glumness"]},misery:{n:["misery","wretchedness","miserableness"]},reparation:{n:["reparation","amends"]},compliment:{v:["compliment","congratulate"]},ignited:{s:["ignited","enkindled","kindled"]},steadfast:{s:["steadfast","staunch","unswerving"]},"afoot,":{s:["afoot,","underway"]},extroverted:{s:[_632,"forthcoming","outgoing"],a:[_632,"a"]},extrovert:{s:["extrovert","extravert",_632,"extraverted","extrovertive","extravertive"],n:["extrovert","extravert"]},extrospective:{a:["extrospective","extroverted"]},sluggish:{s:["sluggish","sulky"]},aspirant:{n:["aspirant","aspirer","hopeful","wannabe","wannabee"],s:["aspirant","aspiring,","wishful"]},afresh:{r:["afresh","anew"]},sidelong:{r:[_633,_634,"obliquely"],s:[_633,"s"]},lateral:{s:["lateral","sidelong"]},askance:{s:["askance","askant","asquint","squint","squint-eyed","squinty","sidelong"]},"agape,":{s:["agape,","gaping"]},drowsy:{s:["drowsy","oscitant","yawning,","drowsing,","dozy"]},yawn:{n:["yawn","yawning","oscitance","oscitancy"],v:["yawn","v"]},"goggle-eyed":{s:["goggle-eyed","openmouthed","popeyed"]},goggle:{v:["goggle","gape","gawp","gawk"]},amazed:{s:["amazed","astonied","astonished","astounded","stunned"]},dispirited:{s:["dispirited","listless"]},halfhearted:{s:["halfhearted","half-hearted","tepid","lukewarm"]},lukewarm:{s:["lukewarm","tepid"]},maturity:{n:["maturity","matureness"]},adulthood:{n:["adulthood","maturity"]},infancy:{n:["infancy","babyhood"]},inventor:{n:["inventor","discoverer","artificer"]},conglomeration:{n:["conglomeration","conglobation"]},infuriate:{v:["infuriate","exasperate","incense"]},embitter:{v:["embitter","envenom","acerbate"]},emptying:{n:["emptying","voidance","evacuation"]},"aghast,":{s:["aghast,","appalled","dismayed","shocked"]},horrified:{s:["horrified","horror-stricken","horror-struck"]},dumbfounded:{s:["dumbfounded","dumfounded","flabbergasted","stupefied","thunderstruck","dumbstruck","dumbstricken"]},"in-situ":{s:["in-situ","unmoved"]},"unmoved,":{a:["unmoved,","unaffected","untouched"]},limber:{s:["limber","supple"]},lissome:{s:["lissome","lissom","lithe","lithesome","supple","sinuous"]},bestir:{v:["bestir","rouse"]},excite:{v:["excite","energize","energise"]},refute:{v:["refute","rebut","controvert"]},hereinafter:{r:["hereinafter","hereafter","hereunder"]},afterlife:{n:["afterlife","hereafter"]},machete:{n:["machete","matchet","panga"]},crucifixion:{n:["crucifixion","excruciation"]},amiable:{s:["amiable","good-humored","good-humoured"]},inharmonious:{a:["inharmonious","unharmonious"]},objectionable:{s:["objectionable","obnoxious"]},unaccommodating:{a:["unaccommodating","unobliging"]},sterility:{n:["sterility","infertility"]},asepsis:{n:["asepsis","antisepsis","sterility","sterileness"]},exceptionable:{s:["exceptionable","objectionable"]},succor:{v:["succor","succour"],n:["succor","n"]},antisepsis:{n:["antisepsis","asepsis"]},insalubrious:{s:["insalubrious","unhealthful","unhealthy"]},feeble:{s:["feeble","nerveless","lame"]},sanity:{n:["sanity","saneness"]},fluke:{n:["fluke","trematode","flue"]},vaporization:{n:["vaporization","vaporisation","vapor","vapour","evaporation"]},vapor:{n:["vapor","vapour"]},airy:{s:["airy","impractical","visionary","laputan","windy"]},aired:{s:["aired","airy"]},ethereal:{s:["ethereal","gossamer"]},celestial:{s:["celestial","ethereal","supernal"],a:["celestial","heavenly"]},sublimed:{a:["sublimed","sublimated"]},buoyant:{s:["buoyant","chirpy","perky","floaty"]},vibrant:{s:["vibrant","vivacious"]},explosive:{s:["explosive","volatile"]},blithe:{s:["blithe","blithesome","lighthearted","lightsome","light-hearted"]},bendable:{s:["bendable",_542,"pliant","waxy"]},glossy:{s:["glossy","showy","calendered"],n:["glossy","n"]},flashy:{s:["flashy","gaudy","jazzy","showy","sporty"]},flamboyant:{s:["flamboyant","showy","splashy"]},glistening:{s:["glistening","glossy","lustrous","sheeny","shiny","shining"]},gilded:{s:["gilded","meretricious","specious","glossy"]},slick:{n:["slick","glossy"],v:["slick","sleek"],s:["slick","s"]},"long-winded":{s:["long-winded","tedious","verbose","windy","wordy"]},blowy:{s:["blowy","breezy","windy"]},depressing:{a:["depressing","cheerless","uncheerful"]},satiny:{s:["satiny","sleek","silken","silky","silklike","slick"]},doleful:{s:["doleful","mournful"]},homogeneous:{a:["homogeneous","homogenous"]},connate:{s:["connate","cognate"]},harmonic:{s:["harmonic","sympathetic"]},sympathetic:{a:[_446,"appealing","likeable","likable"],s:[_446,"s"]},heterogenous:{a:["heterogenous","heterogeneous"]},heterogeneous:{a:["heterogeneous","heterogenous"]},unalike:{a:["unalike","dissimilar"]},alacrity:{n:["alacrity","briskness","smartness"]},punctuality:{n:["punctuality","promptness"]},promptness:{n:["promptness","promptitude"]},agility:{n:["agility","legerity",_571,"lightsomeness","nimbleness"]},shrinking:{n:["shrinking","shrinkage"]},lullaby:{n:["lullaby","cradlesong","berceuse"]},"argus-eyed":{s:["argus-eyed","open-eyed","vigilant","wakeful","hawk-eyed","keen-sighted","lynx-eyed","quick-sighted","sharp-eyed","sharp-sighted"]},dilatory:{s:["dilatory","laggard","poky","pokey"]},countryman:{n:["countryman","ruralist"]},naturalized:{s:["naturalized","naturalised"]},firmness:{n:["firmness","soundness"]},steadiness:{n:["steadiness","firmness"]},flagellate:{v:["flagellate","scourge"],a:["flagellate","flagellated","whiplike","lash-like"],n:["flagellate","mastigophoran","mastigophore"]},scourge:{n:[_492,"flagellum"],v:[_492,"v"]},cheerful:{s:["cheerful","pollyannaish","upbeat"]},lifeless:{s:["lifeless","exanimate"]},breathless:{s:["breathless","inanimate","pulseless","breathtaking"],a:["breathless","dyspneic","dyspnoeic","dyspneal","dyspnoeal"]},inanimate:{a:["inanimate","nonliving","non-living"],s:["inanimate","s"]},entirety:{n:["entirety","entireness","integrality","totality"]},solace:{n:["solace","solacement"],v:["solace","v"]},disprove:{v:["disprove","confute"]},emblem:{n:["emblem","allegory"]},fable:{n:["fable","parable","allegory","apologue"]},brighten:{v:["brighten","lighten"]},allocate:{v:["allocate","apportion"]},purity:{n:["purity","pureness","sinlessness","innocence","whiteness"]},allure:{n:["allure","allurement","temptingness"],v:["allure","v"]},decoy:{n:["decoy","steerer"]},damp:{s:["damp","dampish","moist"],n:["damp","dampness","moistness"],v:["damp","v"]},terrify:{v:["terrify","terrorize","terrorise"]},inkling:{n:["inkling","intimation","glimmering","glimmer"]},insinuation:{n:["insinuation","innuendo"]},ingratiation:{n:["ingratiation","insinuation"]},skyward:{r:["skyward","skywards"],s:["skyward","s"]},heavenward:{s:["heavenward","skyward"],r:["heavenward","heavenwards","heavenwardly"]},nongregarious:{s:["nongregarious","nonsocial","solitary"]},lengthways:{r:["lengthways","lengthwise","longwise","longways","longitudinally"],a:["lengthways","a"]},lengthwise:{a:["lengthwise","lengthways"],r:["lengthwise","r"]},sideway:{r:["sideway",_634,"sidewise"]},sideways:{r:[_634,"sideway","sidewise"],s:[_634,"s"]},crabwise:{s:["crabwise","sideways"]},"bicycle-built-for-two":{n:["bicycle-built-for-two","tandem"]},sonorously:{r:["sonorously","rotundly"]},mutely:{r:["mutely","wordlessly","silently","taciturnly"]},shifting:{s:["shifting","unfirm","shifty"],n:["shifting","n"]},changelessness:{n:["changelessness","unchangeability","unchangeableness","unchangingness"]},immutability:{n:["immutability","immutableness","fixity"]},fastness:{n:["fastness","fixedness","fixity","fixture","secureness"]},permanence:{n:["permanence","permanency"]},stronghold:{n:["stronghold","fastness"]},brawl:{v:["brawl","wrangle"],n:["brawl","free-for-all"]},haggle:{n:["haggle","haggling","wrangle","wrangling"],v:["haggle","higgle","chaffer","huckster"]},reconciliation:{n:["reconciliation","balancing","rapprochement"]},consonance:{n:["consonance","harmoniousness"]},compulsion:{n:["compulsion","coercion","obsession"]},predicament:{n:["predicament","quandary","plight"]},stateliness:{n:["stateliness","majesty","loftiness"]},highness:{n:["highness","loftiness"]},jointly:{r:["jointly","collectively","conjointly"]},"bit-by-bit":{s:["bit-by-bit","piecemeal","step-by-step","stepwise"]},altruism:{n:["altruism","selflessness"]},generosity:{n:["generosity","unselfishness","generousness"]},sophistication:{n:["sophistication","worldliness","mundaneness","mundanity"]},sophism:{n:["sophism","sophistry","sophistication"]},edification:{n:["edification","sophistication"]},egoism:{n:["egoism","egocentrism","self-interest","self-concern","self-centeredness"]},evermore:{r:["evermore","forevermore"]},momentarily:{r:["momentarily","momently"]},fuse:{n:["fuse","fuze","fusee","fuzee","primer","priming"],v:["fuse","v"]},decompose:{v:["decompose","rot","molder","moulder"]},deathless:{s:["deathless","undying"]},catechumen:{n:["catechumen","neophyte"]},dilettante:{s:["dilettante","dilettantish","dilettanteish","sciolistic"],n:["dilettante","n"]},dabbler:{n:["dabbler","dilettante","sciolist"]},bewilderment:{n:["bewilderment","obfuscation","puzzlement","befuddlement","mystification","bafflement","bemusement"]},grogginess:{n:["grogginess","stupor","stupefaction","semiconsciousness"]},coolness:{n:["coolness","nervelessness","imperturbability","imperturbableness"]},stoicism:{n:["stoicism","stolidity","stolidness"]},astonishing:{s:["astonishing","astounding","staggering","stupefying"]},astounding:{s:["astounding","dumbfounding","dumfounding"]},marvelous:{s:["marvelous","marvellous","miraculous"]},portentous:{s:["portentous","prodigious"]},colossal:{s:["colossal","prodigious","stupendous"]},commonplace:{s:[_436,_625,"prosaic","unglamorous","unglamourous"],n:[_436,"n"]},platitude:{n:["platitude","cliche","banality",_436,"bromide"]},equivocal:{a:["equivocal","ambiguous"]},tortuous:{s:["tortuous","twisting","twisty","winding","voluminous"]},sinuate:{s:["sinuate","sinuous","wiggly"]},circuitous:{s:["circuitous","roundabout"]},enigmatic:{s:["enigmatic","oracular","enigmatical","puzzling"]},envoy:{n:["envoy","envoi"]},emissary:{n:["emissary","envoy"]},involution:{n:[_411,"enfolding"]},exponentiation:{n:["exponentiation","involution"]},elaborateness:{n:["elaborateness",_207,"intricacy","involution"]},ornateness:{n:["ornateness","elaborateness"]},penetrative:{s:["penetrative","penetrating"]},permeant:{s:["permeant","permeating","permeative","pervasive"]},amelioration:{n:["amelioration","melioration","betterment"]},impressionable:{a:["impressionable","waxy","impressible"]},stubborn:{a:["stubborn","obstinate","unregenerate"],s:["stubborn","s"]},refractory:{s:["refractory","stubborn"]},fractious:{s:["fractious","refractory","recalcitrant"]},agreeableness:{n:["agreeableness","amenity","agreeability"]},affability:{n:["affability","affableness","amiability","amiableness","bonhomie","geniality"]},austerity:{n:["austerity","asceticism","nonindulgence"]},moroseness:{n:["moroseness","glumness","sullenness"]},lovable:{a:["lovable","loveable"]},crusty:{s:["crusty","curmudgeonly","gruff","ill-humored","ill-humoured"]},crusted:{s:["crusted","encrusted","crusty","crustlike"]},unlovely:{s:["unlovely","unpicturesque"]},gruff:{s:["gruff","hoarse","husky"]},peaceable:{s:[_596,"peace-loving"],a:[_596,"a"]},pitiless:{s:["pitiless","unkind","remorseless","ruthless","unpitying"]},unfriendly:{s:["unfriendly","inimical"]},imperfectly:{r:["imperfectly","amiss"]},awry:{r:["awry","amiss"]},askew:{r:["askew","awry","skew-whiff"],s:["askew","awry,","cockeyed","lopsided","wonky","skew-whiff"]},faultless:{s:["faultless","immaculate","impeccable","incorrupted"]},installment:{n:["installment","instalment"]},roomy:{s:["roomy","spacious"],n:["roomy","n"]},stingy:{a:["stingy","ungenerous"]},tediousness:{n:["tediousness","tedium","tiresomeness"]},boredom:{n:["boredom","ennui","tedium"]},athleticism:{n:["athleticism","strenuosity"]},unlikeness:{n:["unlikeness","dissimilitude"]},anarchy:{n:["anarchy","lawlessness"]},misgovernment:{n:["misgovernment","misrule"]},lawlessness:{n:["lawlessness","outlawry"]},conquest:{n:["conquest","conquering","subjection","subjugation"]},subjugation:{n:["subjugation","subjection"]},oppression:{n:["oppression","subjugation","oppressiveness"]},seduction:{n:["seduction","conquest"]},disused:{s:["disused","obsolete"]},"nouveau-riche":{s:["nouveau-riche","parvenu","parvenue","upstart,"],n:["nouveau-riche","n"]},kip:{n:["kip","upstart"],v:["kip","v"]},upstart:{n:["upstart","parvenu","nouveau-riche","arriviste"]},clogging:{s:["clogging","hindering","impeding","obstructive"]},impertinent:{s:["impertinent","irreverent","pert","saucy"]},seraphic:{a:["seraphic","seraphical"],s:["seraphic","s"]},ecstatic:{s:["ecstatic","enraptured","rapturous","rapt","rhapsodic"]},demoniac:{a:["demoniac","demoniacal","possessed"]},demonic:{s:["demonic","diabolic","diabolical","fiendish","hellish","infernal","satanic","unholy"]},devilish:{s:["devilish","diabolic","diabolical","mephistophelian","mephistophelean","rascally","roguish"],r:["devilish","r"]},devilishly:{r:["devilishly","devilish"]},diabolically:{r:["diabolically","devilishly","fiendishly"]},irritability:{n:["irritability","crossness","fretfulness","fussiness","peevishness","petulance","choler"]},excitability:{n:["excitability","irritability","excitableness","volatility"]},animosity:{n:["animosity","animus"]},aggravated:{s:["aggravated","provoked"]},indignant:{s:["indignant","incensed","outraged","umbrageous"]},annoyed:{s:["annoyed","irritated","miffed","nettled","peeved","pissed","riled","roiled","steamed","stung","harassed","harried","pestered","vexed"]},wrathful:{s:["wrathful","wroth","wrothful"]},angered:{s:["angered","enraged","furious","infuriated","maddened"]},huffish:{s:["huffish","sulky"]},absolvitory:{s:["absolvitory","exonerative","forgiving"]},chafed:{s:["chafed","galled"]},fauna:{n:["fauna","zoology"]},invigorate:{v:[_519,"reinvigorate"]},vitality:{n:["vitality","verve"]},irrepressibility:{n:["irrepressibility","buoyancy"]},buoyancy:{n:["buoyancy","perkiness"]},unresponsiveness:{n:["unresponsiveness","deadness"]},malignity:{n:["malignity","malignancy","malignance"]},congenialness:{n:["congenialness","congeniality"]},unplug:{v:["unplug","disconnect"]},eradication:{n:["eradication","obliteration"]},obliviousness:{n:["obliviousness","oblivion"]},oblivion:{n:["oblivion","limbo"]},prolongation:{n:["prolongation","protraction","perpetuation","lengthening"]},lengthiness:{n:["lengthiness","prolongation","continuation","protraction"]},scholium:{n:["scholium","scholia"]},clarification:{n:["clarification","elucidation","illumination"]},proclamation:{n:["proclamation","promulgation"]},manifesto:{n:["manifesto","pronunciamento"]},concealment:{n:["concealment","concealing","hiding"]},equivocation:{n:["equivocation","tergiversation","prevarication","evasiveness"]},ambiguity:{n:["ambiguity","equivocalness"]},imposition:{n:["imposition","infliction"]},biennial:{s:["biennial","biyearly"],a:["biennial","two-year"]},tercentennial:{n:["tercentennial","tercentenary","triennial"]},questionable:{s:["questionable","refutable","confutable","confutative"]},correlative:{s:["correlative","correlate","correlated"],n:["correlative","n"]},correlate:{n:["correlate","correlative"],s:["correlate","s"]},inapplicable:{s:["inapplicable","unsuitable"]},amity:{n:["amity","cordiality"]},antecedent:{n:["antecedent","forerunner"]},precursory:{s:["precursory","premonitory"]},foreboding:{n:["foreboding","premonition","presentiment","boding"]},prescience:{n:["prescience","prevision"]},prevision:{n:["prevision","foresight","farsightedness","prospicience"]},despair:{n:["despair","desperation"]},"old-time":{s:["old-time","quaint"]},ancientness:{n:["ancientness","antiquity"]},archeology:{n:["archeology","archaeology"]},modernity:{n:["modernity","modernness","modernism","contemporaneity","contemporaneousness"]},descendants:{n:["descendants","posterity"]},diffidence:{n:["diffidence","self-doubt","self-distrust"]},inanition:{n:["inanition","lassitude","lethargy","slackness"]},lethargy:{n:["lethargy","lassitude","sluggishness"]},stationariness:{n:["stationariness","immobility","fixedness"]},phlegm:{n:["phlegm","sputum"]},motionlessness:{n:["motionlessness","stillness","lifelessness"]},stillness:{n:["stillness","windlessness"]},susceptibility:{n:["susceptibility","susceptibleness"]},caricature:{v:["caricature","ape"],n:["caricature","imitation","impersonation"]},anthropoid:{n:["anthropoid","ape"],s:["anthropoid","manlike","anthropoidal","apelike"]},copycat:{n:["copycat","imitator","emulator","ape","aper"]},counterfeit:{a:[_461,"imitative"],n:[_461,"forgery"],v:[_461,"v"]},personify:{v:["personify","personate"]},cleft:{s:["cleft","dissected"],n:["cleft","n"]},impenetrability:{n:["impenetrability","imperviousness","impenetrableness"]},aphorism:{n:["aphorism","apothegm","apophthegm"]},pronouncement:{n:["pronouncement","dictum","say-so"]},apocalyptic:{s:["apocalyptic","apocalyptical","revelatory"]},prophetic:{a:["prophetic","prophetical"]},inauthentic:{s:["inauthentic","unauthentic","spurious"]},specious:{s:["specious","spurious"]},palpable:{a:["palpable","tangible"],s:["palpable","s"]},recreant:{s:[_638,"renegade"],n:[_638,"n"]},deserter:{n:["deserter","apostate","renegade","turncoat",_638,"ratter","defector"]},craven:{s:["craven","recreant"],n:["craven","n"]},poltroon:{n:["poltroon","craven","recreant"]},recidivist:{n:["recidivist","backslider","reversionist","repeater"]},"double-crosser":{n:["double-crosser","double-dealer","two-timer","betrayer","traitor"]},traitor:{n:["traitor","treasonist"]},disciple:{n:["disciple","adherent"]},partisan:{n:["partisan","zealot","drumbeater","partizan"],a:["partisan","partizan"]},enthusiast:{n:["enthusiast","partisan","partizan"]},fancier:{n:["fancier","enthusiast"]},dogmatist:{n:["dogmatist","doctrinaire"]},fanatic:{s:["fanatic","fanatical","overzealous","rabid"],n:["fanatic","fiend"]},tirade:{n:["tirade","philippic","broadside"]},furnishing:{n:["furnishing","trappings"]},dishabille:{n:["dishabille","deshabille"]},condescension:{n:["condescension",_480,_246,"condescendingness","superciliousness","disdainfulness"]},disappearance:{n:["disappearance","disappearing"]},cense:{v:["cense","incense","thurify"]},anonymity:{n:["anonymity","namelessness"]},farfetched:{s:["farfetched","far-fetched"]},appetite:{n:["appetite","appetency","appetence"]},vituperation:{n:["vituperation","invective","vitriol"]},suer:{n:["suer","petitioner"]},petitioner:{n:["petitioner","suppliant","supplicant","requester"]},suitor:{n:["suitor","suer","wooer"]},solicitor:{n:["solicitor","canvasser"]},amuse:{v:["amuse","divert","disport"]},designate:{v:[_328,"denominate"]},assignation:{n:["assignation","tryst"]},tryst:{n:["tryst","rendezvous"]},prematurely:{r:["prematurely","untimely"]},premature:{s:["premature","untimely"]},mislaid:{s:["mislaid","misplaced"]},misconstrue:{v:["misconstrue","misinterpret","misconceive","misunderstand","misapprehend"]},sensibility:{n:["sensibility","esthesia","aesthesia"]},illiteracy:{n:["illiteracy","analphabetism"]},juggle:{v:["juggle","beguile","hoodwink"],n:["juggle","juggling"]},conspire:{v:["conspire","collude","cabal","complot","conjure","machinate"]},aloofness:{n:["aloofness","remoteness","standoffishness","withdrawnness"]},farness:{n:["farness","remoteness","farawayness"]},arbiter:{n:["arbiter","arbitrator","umpire"]},umpire:{n:["umpire","ump"],v:["umpire","v"]},appellate:{a:["appellate","appellant"]},litigant:{n:["litigant","litigator"]},disputant:{n:["disputant","controversialist","eristic"]},capricious:{s:["capricious",_514,"whimsical","freakish"]},froward:{s:["froward","headstrong","self-willed","willful","wilful"]},willful:{s:["willful","wilful"]},fanciful:{s:["fanciful","imaginary","notional"]},mediation:{n:["mediation","intermediation"]},fervent:{s:["fervent","fervid"]},fiery:{s:["fiery","flaming","igneous"]},dispassionate:{s:["dispassionate","cold-eyed"]},phlegmatic:{s:["phlegmatic","phlegmatical"]},dogma:{n:["dogma","tenet"]},aridity:{n:["aridity","aridness","thirstiness"]},fruitlessness:{n:["fruitlessness","aridity","barrenness"]},dispassion:{n:["dispassion","dispassionateness","dryness"]},dryness:{n:["dryness","waterlessness","xerotes"]},greenness:{n:["greenness","verdancy","verdure"]},luxuriance:{n:["luxuriance","lushness","voluptuousness"]},huddle:{v:["huddle","cower"],n:["huddle","powwow"]},gentry:{n:["gentry","aristocracy"]},nobility:{n:["nobility","aristocracy","noblesse","nobleness","magnanimousness","grandeur"]},peerage:{n:["peerage","baronage"]},rabble:{n:["rabble","riffraff","ragtag"]},divest:{v:["divest","disinvest"]},disarm:{v:["disarm","unarm","demilitarize","demilitarise"]},arming:{n:["arming","armament","equipping"]},aromatic:{s:["aromatic","redolent"]},"redolent,":{s:["redolent,","smelling,"]},evocative:{s:["evocative","redolent","remindful","reminiscent","resonant"]},ambrosial:{s:["ambrosial","ambrosian","nectarous"]},malodorous:{a:["malodorous","malodourous","unpleasant-smelling","ill-smelling","stinky"]},unbalance:{v:[_639,"derange"],n:[_639,"n"]},derangement:{n:["derangement","unbalance"]},imbalance:{n:["imbalance","instability","unbalance"]},asymmetry:{n:["asymmetry","dissymmetry","imbalance"]},confine:{v:[_57,"detain"]},enclose:{v:["enclose",_57,"inclose"]},egoistic:{a:["egoistic","egoistical","egocentric","self-centered","self-centred"]},dogmatic:{s:["dogmatic","dogmatical"]},bashful:{s:["bashful","blate"]},ruse:{n:["ruse","artifice"]},fraudulence:{n:["fraudulence","deceit","duplicity"]},craftiness:{n:["craftiness","deceitfulness","guile"]},candor:{n:["candor","candour","candidness","frankness","directness","forthrightness"]},ploy:{n:["ploy","gambit","stratagem"]},gambit:{n:["gambit","ploy"]},imposture:{n:["imposture","impersonation"]},frankness:{n:["frankness","outspokenness"]},seriousness:{n:["seriousness","earnestness","serious-mindedness","sincerity","distressfulness"]},sincerity:{n:["sincerity","unassumingness"]},earnestness:{n:["earnestness","seriousness","sincerity"]},honesty:{n:["honesty","satinpod","honestness"]},agonistic:{s:["agonistic","strained","agonistical","combative"]},labored:{s:["labored","laboured","strained"]},"ad-lib":{s:["ad-lib","spontaneous","unwritten","extemporaneous","extemporary","extempore","impromptu","offhand","offhanded","off-the-cuff","unrehearsed"],v:["ad-lib","v"]},spontaneous:{a:["spontaneous","self-generated"],s:["spontaneous","s"]},improvise:{v:["improvise","improvize","ad-lib","extemporize","extemporise"]},artless:{s:["artless","uncultivated","uncultured"],a:["artless","a"]},ingenuous:{a:["ingenuous","artless"],s:["ingenuous","s"]},craftsman:{n:["craftsman","artisan","journeyman","artificer","crafter"]},sculptor:{n:["sculptor","sculpturer","carver"]},cutter:{n:["cutter","carver","cutlery"]},woodcarver:{n:["woodcarver","carver"]},stonecutter:{n:["stonecutter","cutter"]},mastery:{n:["mastery","subordination"]},hyponymy:{n:["hyponymy","subordination"]},sternness:{n:["sternness","strictness"]},smirch:{v:["smirch","besmirch"],n:["smirch","n"]},convoke:{v:["convoke","convene"]},hookup:{n:["hookup","assemblage"]},assiduous:{s:["assiduous","sedulous"]},indefatigable:{s:["indefatigable","tireless","unflagging","unwearying"]},derelict:{s:[_2,"delinquent","neglectful","remiss"]},bedraggled:{s:["bedraggled","broken-down",_2,"dilapidated","ramshackle","tatterdemalion","tumble-down","draggled"]},fixation:{n:["fixation","fixing"]},neutering:{n:["neutering","fixing","altering"]},obsession:{n:["obsession","fixation"]},helpmate:{n:["helpmate","helpmeet"]},brotherhood:{n:["brotherhood","fraternity","sodality"]},fraternity:{n:["fraternity","frat"]},individuality:{n:["individuality","individualism","individuation"]},florilegium:{n:["florilegium","garland","miscellany"]},disorganization:{n:["disorganization","disorganisation","disarrangement"]},displacement:{n:[_507,"deracination"]},supplanting:{n:["supplanting","displacement"]},postulate:{v:[_38,"posit"],n:[_38,"posit"]},arrogance:{n:["arrogance","haughtiness","hauteur","high-handedness","lordliness"]},conceit:{n:["conceit","conceitedness","vanity"]},timidity:{n:["timidity","timorousness","timidness"]},hesitance:{n:["hesitance","hesitancy"]},amaze:{v:["amaze","astonish","astound"]},besot:{v:["besot","stupefy"]},imbecile:{s:["imbecile","imbecilic","idiotic"],n:["imbecile","n"]},crackbrained:{s:["crackbrained","idiotic"]},"ill-considered":{s:["ill-considered","ill-judged","improvident","shortsighted"]},nearsighted:{a:["nearsighted","shortsighted","myopic"]},shallow:{v:["shallow","shoal"],n:["shallow","n"]},shoal:{n:["shoal","shallow"],v:["shoal","v"]},"ill-famed":{s:["ill-famed","infamous","notorious"]},nefarious:{s:["nefarious","villainous"]},flagitious:{s:["flagitious","heinous"]},encrust:{v:["encrust","incrust","beset"]},alertness:{n:["alertness","sharp-sightedness","alerting"]},heedlessness:{n:["heedlessness","mindlessness","rashness"]},inattentiveness:{n:["inattentiveness","heedlessness"]},distraction:{n:["distraction","misdirection"]},beguilement:{n:["beguilement","distraction"]},attenuate:{s:["attenuate","attenuated","faded","weakened"],v:["attenuate","v"]},rarefy:{v:["rarefy","attenuate","sublimate","subtilize"]},bewitchery:{n:["bewitchery","beguilement"]},bilious:{s:["bilious","liverish","livery"],a:["bilious","biliary"]},lure:{n:["lure","enticement","come-on"],v:["lure","v"]},atrabilious:{s:["atrabilious","bilious","dyspeptic","liverish"]},enticement:{n:["enticement","temptation"]},temptation:{n:["temptation","enticement"]},witchcraft:{n:["witchcraft","witchery"]},unenterprising:{a:["unenterprising","nonenterprising"]},augur:{n:["augur","auspex"],v:["augur","v"]},reticent:{s:["reticent","self-effacing","retiring","untalkative"]},retiring:{s:["retiring","unassuming"]},omen:{n:["omen","portent","presage","prognostic","prognostication","prodigy"],v:["omen","v"]},restrained:{s:[_62,"reticent","unemotional"]},prophesy:{v:["prophesy","vaticinate"]},stately:{s:["stately","statuesque"]},guarded:{s:["guarded","restrained"]},kingly:{s:["kingly","kinglike"]},negligible:{s:["negligible","paltry","trifling"]},booming:{s:["booming","flourishing","palmy","prospering","prosperous","roaring","thriving","stentorian"]},abortive:{s:["abortive","stillborn","unsuccessful"]},destroyer:{n:["destroyer","ruiner","undoer","waster","uprooter"]},trustworthy:{a:["trustworthy","trusty"]},connoisseur:{n:["connoisseur","cognoscente"]},insubordination:{n:["insubordination","rebelliousness"]},banishment:{n:["banishment","proscription","ostracism","coventry"]},interdict:{n:["interdict","interdiction"],v:["interdict","v"]},injunction:{n:["injunction","enjoining","enjoinment"]},grasping:{n:["grasping","seizing","prehension"],s:["grasping","s"]},flyblown:{s:["flyblown","squalid","sordid","maggoty"]},seamy:{s:["seamy","seedy","sleazy","sordid","squalid"]},covetous:{s:["covetous","envious","jealous"]},uneconomical:{s:["uneconomical","wasteful","uneconomic"]},mediocre:{s:["mediocre","second-rate"]},unwillingness:{n:["unwillingness","involuntariness"]},edacity:{n:["edacity","esurience","rapaciousness","rapacity","voracity","voraciousness","ravenousness"]},greediness:{n:["greediness","voraciousness","rapaciousness","hoggishness","piggishness"]},embezzle:{v:["embezzle","defalcate","peculate","misappropriate","malversate"]},appalling:{s:["appalling","dismaying"]},folderal:{n:["folderal","falderol","frill","gimcrackery","gimcrack","nonsense","trumpery"]},nonsense:{n:["nonsense","bunk","nonsensicality","meaninglessness","hokum"]},prate:{n:["prate","prattle","blether"],v:["prate","v"]},commotion:{n:["commotion","din","ruction","ruckus","rumpus","tumult"]},tumult:{n:["tumult","turmoil","tumultuousness","uproar","garboil"]},clamor:{v:["clamor","clamour"],n:["clamor","clamoring","clamour","clamouring"]},blare:{n:["blare","blaring","cacophony","clamor","din"],v:["blare","v"]},honk:{v:["honk","blare","beep","claxon","toot","cronk"]},enunciation:{n:["enunciation","diction"]},backmost:{s:["backmost","hindermost","hindmost","rearmost"]},defamer:{n:["defamer","maligner","slanderer","vilifier","libeler","backbiter","traducer"]},detractor:{n:["detractor","disparager","depreciator","knocker"]},cynic:{n:["cynic","faultfinder"]},apologist:{n:["apologist","vindicator","justifier"]},backward:{r:["backward","backwards"],s:["backward","half-witted","slow-witted","feebleminded"]},vacillant:{s:["vacillant","vacillating","wavering"]},fluctuation:{n:["fluctuation","wavering"]},disappointing:{s:["disappointing","dissatisfactory","unsatisfying"]},"moth-eaten":{s:["moth-eaten","ratty","shabby","tatty","mothy"]},equalize:{v:["equalize","equalise"]},preponderate:{v:["preponderate","outweigh","overbalance","outbalance"]},unwooded:{a:["unwooded","treeless"]},unadorned:{a:["unadorned","undecorated"]},"matter-of-fact":{s:["matter-of-fact","prosaic",_600,"pragmatical"]},unstained:{s:["unstained","unvarnished"]},misprint:{n:["misprint","erratum","typo","literal"]},adorned:{a:["adorned","decorated"]},peruked:{s:["peruked","periwigged"]},uncorroborated:{s:["uncorroborated","unsubstantiated"]},flowery:{s:["flowery","ornate"]},"aglitter,":{s:["aglitter,","coruscant","fulgid","glinting","glistering","glittering","glittery","scintillant","scintillating","sparkly"]},bubbling:{s:["bubbling","effervescent","frothy","scintillating","sparkly","bubbly","foaming","foamy","effervescing","spumy"]},blasting:{s:["blasting","ruinous"]},catastrophic:{s:["catastrophic","ruinous"]},rafter:{n:["rafter","balk","baulk"]},balk:{n:["balk","baulk"],v:["balk","v"]},unsoiled:{s:["unsoiled","unspotted","unstained"]},ostracize:{v:["ostracize","ostracise"]},oust:{v:["oust","expel"]},blaring:{s:["blaring","blasting"],n:["blaring","n"]},raftsman:{n:["raftsman","raftman","rafter"]},starvation:{n:["starvation","starving","famishment"]},banter:{n:["banter","raillery","give-and-take","backchat"],v:["banter","v"]},derisive:{s:["derisive","gibelike","jeering","mocking","taunting"]},jeer:{n:["jeer","jeering","mockery","scoff","scoffing"],v:["jeer","scoff","flout","barrack","gibe"]},parody:{n:["parody","mockery","takeoff","lampoon","spoof","sendup","send-up","burlesque","travesty","pasquinade","put-on"],v:["parody","v"]},merciless:{a:["merciless","unmerciful"]},spoof:{v:["spoof","burlesque","parody"],n:["spoof","n"]},sterile:{s:["sterile","unimaginative","uninspired","uninventive"],a:["sterile","unfertile","infertile"]},aseptic:{s:["aseptic","sterile"]},prolific:{s:["prolific","fertile"]},fecund:{s:["fecund","fertile","prolific"]},esteemed:{s:["esteemed","honored","prestigious"]},suffuse:{v:["suffuse","perfuse"]},wreath:{n:["wreath","garland","coronal","chaplet","lei"]},littoral:{n:["littoral","litoral","sands"]},margarine:{n:["margarine","margarin","oleo","oleomargarine","marge"]},beacon:{n:["beacon","lighthouse","pharos"]},seaside:{n:["seaside","seaboard"]},begrudge:{v:["begrudge","resent"]},misbehavior:{n:["misbehavior","misbehaviour","misdeed"]},irrelevance:{n:["irrelevance","irrelevancy"]},inanity:{n:["inanity","senselessness","mindlessness","vacuity","pointlessness"]},thrash:{v:["thrash","thresh","lam","flail"]},cudgel:{v:["cudgel","fustigate"]},dinge:{v:["dinge","batter"],n:["dinge","n"]},clobber:{v:[_361,"baste","batter"],n:[_361,"n"]},batter:{n:["batter","hitter","slugger","batsman"],v:["batter","v"]},afflict:{v:["afflict","smite"]},envy:{v:["envy","begrudge"],n:["envy","invidia","enviousness"]},pummel:{v:["pummel","pommel","biff"]},pommel:{n:["pommel","saddlebow"],v:["pommel","v"]},bruise:{v:["bruise","contuse"],n:["bruise","contusion"]},dinginess:{n:["dinginess","dinge"]},bastinado:{n:["bastinado","falanga"]},belabour:{v:["belabour","belabor"]},belabor:{v:["belabor","belabour"]},caress:{v:["caress","fondle"]},blessedness:{n:["blessedness","beatitude","beatification"]},bliss:{n:["bliss","blissfulness"]},dolor:{n:["dolor","dolour"]},felicity:{n:["felicity","felicitousness"]},befall:{v:["befall","bechance","betide"]},indecent:{s:["indecent","indecorous","unbecoming","uncomely","unseemly","untoward"]},derogative:{s:["derogative","derogatory","disparaging"]},beggar:{v:["beggar","pauperize","pauperise"],n:["beggar","mendicant"]},friar:{n:["friar","mendicant"]},suppliant:{s:["suppliant","supplicant","supplicatory"],n:["suppliant","n"]},beggary:{n:["beggary","mendicancy","mendicity","begging"]},fulfillment:{n:["fulfillment","fulfilment"]},aweary:{s:["aweary","weary"]},misbehave:{v:["misbehave","misconduct","misdemean"]},wrongdoing:{n:["wrongdoing","misconduct"]},blockade:{n:[_319,"encirclement"],v:[_319,"v"]},creed:{n:["creed","credo"]},persuasion:{n:["persuasion","suasion"]},contentious:{s:["contentious","combative","disputatious","disputative","litigious"]},forbearing:{s:["forbearing","longanimous"]},ingratitude:{n:["ingratitude","ungratefulness"]},liberality:{n:["liberality","liberalness"]},benevolence:{n:["benevolence","benefaction"]},benignity:{n:["benignity","benignancy","graciousness"]},munificence:{n:["munificence","largess","largesse","magnanimity","openhandedness"]},kindheartedness:{n:["kindheartedness","kind-heartedness"]},brutality:{n:["brutality","barbarity","barbarism","savagery"]},ferociousness:{n:["ferociousness","brutality","viciousness","savagery"]},atrocity:{n:["atrocity","atrociousness","barbarity","barbarousness","heinousness","inhumanity"]},beneficent:{s:["beneficent","benevolent","eleemosynary","philanthropic"]},benevolent:{s:["benevolent","freehearted"]},mourning:{n:["mourning","bereavement"]},bereaved:{s:["bereaved","bereft","grief-stricken","grieving","mourning,","sorrowing,"]},lamentation:{n:["lamentation","mourning"]},devastation:{n:["devastation","desolation"]},forlornness:{n:["forlornness","loneliness","desolation"]},ravaging:{n:["ravaging","devastation"]},bereft:{s:["bereft","lovelorn","unbeloved"]},stripped:{s:["stripped","stripped-down"]},despoiled:{s:["despoiled","pillaged","raped","ravaged","sacked"]},deprived:{s:["deprived","disadvantaged"]},compensated:{s:["compensated","remunerated","salaried","stipendiary"]},requite:{v:["requite","repay"]},hemin:{n:["hemin","protohemin"]},embarrass:{v:["embarrass","abash"]},shipwreck:{n:["shipwreck","wreck"]},cripple:{v:["cripple","lame","stultify"]},overplus:{n:["overplus","plethora","superfluity","embarrassment"]},tangle:{n:["tangle","snarl","maze"],v:["tangle","v"]},maze:{n:["maze","labyrinth"]},mystification:{n:["mystification","obfuscation"]},tousle:{v:["tousle","dishevel","tangle"]},ravel:{v:["ravel","tangle","knot","unravel"],n:["ravel","n"]},magnetize:{v:["magnetize","mesmerize","mesmerise","magnetise","bewitch","spellbind"]},yonder:{r:["yonder","yon"],s:["yonder","yon"]},skeptic:{n:["skeptic","sceptic","doubter"]},agnostic:{n:["agnostic","doubter"],a:["agnostic","agnostical"]},illiberal:{s:["illiberal","intolerant"]},opinionated:{s:["opinionated","opinionative","self-opinionated"]},prejudiced:{a:["prejudiced","discriminatory"]},reckoning:{n:["reckoning","tally"]},sardonic:{s:["sardonic","snarky"]},"hard-hitting":{s:["hard-hitting","trenchant","high-pressure"]},assuasive:{s:["assuasive","soothing"]},caustic:{s:["caustic","corrosive","erosive","vitriolic","mordant"]},irate:{s:["irate","ireful"]},pungent:{s:["pungent","acrid"]},honeyed:{s:["honeyed","honied","syrupy"]},juicy:{s:["juicy","luscious","red-hot","toothsome","voluptuous","lush"]},cloying:{s:["cloying","saccharine","syrupy","treacly"]},plaster:{v:[_640,"daub","beplaster"],n:[_640,"plasterwork"]},poultice:{v:["poultice","plaster"],n:["poultice","cataplasm","plaster"]},villain:{n:["villain","scoundrel","baddie"]},rogue:{n:["rogue","knave","rascal","rapscallion","scalawag","scallywag","varlet"]},blameless:{s:["blameless","inculpable","irreproachable","unimpeachable"]},blameworthy:{s:["blameworthy","blamable","blameable","blameful","censurable","culpable"]},blanch:{v:["blanch","parboil"]},bleach:{v:["bleach","decolor","decolour","decolorize","decolourize","decolorise","decolourise","discolorize","discolourise","discolorise"]},dye:{n:["dye","dyestuff"]},coaxing:{s:["coaxing","ingratiatory"],n:["coaxing","n"]},blarney:{n:["blarney","coaxing"],v:["blarney","v"]},chiding:{n:["chiding","scolding","objurgation","tongue-lashing"]},profanation:{n:["profanation","desecration","blasphemy","sacrilege"]},impiety:{n:["impiety","impiousness"]},oath:{n:["oath","swearing"]},emblazon:{v:["emblazon","blazon"]},blaze:{n:["blaze","blazing"]},depopulate:{v:["depopulate","desolate"]},imperfection:{n:["imperfection","imperfectness"]},defacement:{n:["defacement","disfigurement","disfiguration","mutilation"]},disfigurement:{n:["disfigurement","disfiguration","deformity"]},wholeness:{n:["wholeness","haleness"]},transfigure:{v:["transfigure","glorify","spiritualize"]},metamorphose:{v:["metamorphose","transfigure","transmogrify"]},congratulate:{v:[_280,"felicitate"]},imprecation:{n:["imprecation","malediction"]},pauperization:{n:["pauperization","pauperisation","impoverishment"]},pestilence:{n:["pestilence","canker"]},atrophy:{n:["atrophy","withering","wasting"]},eyeless:{s:["eyeless","sightless","unseeing"]},unobservant:{s:["unobservant","unseeing"]},coltish:{s:["coltish","frolicsome","frolicky","rollicking","sportive"]},elated:{s:["elated","gleeful","joyful","jubilant"]},dunce:{n:["dunce","dunderhead","numskull","blockhead","bonehead","lunkhead","hammerhead","knucklehead","loggerhead","muttonhead","shithead","dumbass","fuckhead"]},nincompoop:{n:["nincompoop","poop","ninny"]},luminary:{n:["luminary","notable","notability"]},bloodthirsty:{s:["bloodthirsty","bloody-minded","sanguinary"]},homicidal:{s:["homicidal","murderous"]},gory:{s:["gory","sanguinary","sanguineous","slaughterous","butcherly"]},bloodstained:{s:["bloodstained","gory"]},unfolding:{n:["unfolding","flowering"]},formidability:{n:["formidability","toughness"]},huskiness:{n:["huskiness","ruggedness","toughness"]},stamina:{n:["stamina","toughness"]},ghastliness:{n:["ghastliness","grimness","gruesomeness","luridness"]},obsoleteness:{n:["obsoleteness","superannuation"]},coarseness:{n:["coarseness","commonness","grossness","vulgarity","vulgarism","raunch","nubbiness","tweediness","graininess","granularity"]},saltiness:{n:["saltiness","coarseness"]},gruffness:{n:["gruffness","hoarseness","huskiness"]},"dried-up":{s:["dried-up","sere","sear","shriveled","shrivelled","withered"]},shriveled:{s:["shriveled","shrivelled","shrunken","withered","wizen","wizened"]},abruptness:{n:["abruptness","brusqueness","curtness","gruffness","shortness","precipitateness","precipitousness","precipitance","precipitancy","suddenness","steepness"]},blotch:{n:["blotch","splodge","splotch"],v:["blotch","v"]},obliterate:{v:["obliterate","efface"]},manacle:{v:["manacle","cuff","handcuff"],n:["manacle","n"]},cuff:{v:["cuff","whomp"],n:["cuff","turnup"]},handcuff:{n:["handcuff","cuff","handlock","manacle"],v:["handcuff","v"]},"blustering,":{s:["blustering,","blusterous","blustery"]},misinterpretation:{n:["misinterpretation","misunderstanding","mistaking"]},discourteous:{s:["discourteous","ungracious"]},foresight:{n:["foresight","foresightedness","foresightfulness"]},scoreless:{s:["scoreless","goalless","hitless","pointless"]},pointless:{a:[_623,"unpointed"],s:[_623,"s"]},paralyze:{v:["paralyze","paralyse"]},vitalize:{v:["vitalize","vitalise"]},carnation:{n:["carnation","gillyflower"]},swagger:{v:[_456,_404,"swash"],s:[_456,"s"],n:[_456,"n"]},braggadocio:{n:["braggadocio",_404,"rodomontade","rhodomontade"]},bravado:{n:["bravado","bluster"]},groovy:{s:["groovy","swagger"]},strut:{n:["strut","prance","swagger"],v:["strut","v"]},swagman:{n:["swagman",_456,"swaggie"]},roar:{v:["roar","howl"],n:["roar","n"]},bellow:{v:["bellow","roar"],n:["bellow","bellowing","holla","holler","hollering","hollo","holloa","roar","roaring","yowl"]},bawl:{v:["bawl","bellow"]},wail:{v:["wail","whimper","mewl","pule"],n:["wail","n"]},brag:{n:["brag","bragging","crow","crowing","vaporing","line-shooting","gasconade"],v:["brag","v"],s:["brag","s"]},yawp:{v:["yawp","bawl"]},snuffle:{v:[_607,"snivel"],n:[_607,"sniffle","snivel"]},carcase:{n:["carcase","carcass"]},snuff:{v:["snuff","snuffle"]},stormy:{s:["stormy","tempestuous"]},understated:{s:["understated","unostentatious","unpretentious"]},unostentatious:{a:["unostentatious","unpretentious","unpretending"],s:["unostentatious","s"]},valiant:{s:["valiant","valorous"]},humility:{n:["humility","humbleness"]},imprisonment:{n:["imprisonment","internment"]},captivity:{n:["captivity","imprisonment","incarceration","immurement"]},enslavement:{n:["enslavement","captivity"]},serfdom:{n:["serfdom","serfhood","vassalage"]},bondman:{n:["bondman","bondsman"]},bondsman:{n:["bondsman","bondswoman"]},serf:{n:["serf","helot","villein"]},vassal:{n:["vassal","liege","liegeman","feudatory"]},freeman:{n:["freeman","freewoman"]},buxom:{s:["buxom","zaftig","zoftig"]},bosomy:{s:["bosomy","busty","buxom","curvaceous","curvy","full-bosomed","sonsie","sonsy","stacked","voluptuous","well-endowed"]},bookish:{s:["bookish","studious"]},agrestic:{s:["agrestic","rustic"]},bumpkinly:{s:["bumpkinly","hick","rustic","unsophisticated"]},countrified:{s:["countrified","countryfied","rustic"]},clown:{v:["clown","antic"],n:["clown","buffoon","goof","goofball"]},plowman:{n:["plowman","ploughman","plower"]},boorish:{s:["boorish","loutish","neanderthal","neandertal","oafish","swinish"]},buffoonish:{s:["buffoonish","clownish","clownlike","zany"]},plundering:{n:["plundering","pillage","pillaging"]},confiscation:{n:["confiscation","arrogation"]},pierced:{s:["pierced","perforated","perforate","punctured"]},hayfield:{n:["hayfield","meadow"]},frisk:{n:["frisk","frisking"],v:["frisk","v"]},hopple:{v:["hopple","hobble"]},creep:{n:["creep","weirdo","weirdie","weirdy","spook"],v:["creep","v"]},bourn:{n:["bourn","bourne"]},boundless:{s:["boundless","unbounded","limitless"]},bastion:{n:["bastion","citadel"]},illimitable:{s:["illimitable","limitless","measureless","unmeasured"]},embower:{v:["embower","bower"]},gazebo:{n:["gazebo","summerhouse"]},pleat:{n:["pleat","plait"],v:["pleat","plicate"]},branchlet:{n:["branchlet","twig","sprig"]},complication:{n:["complication","ramification"]},complicatedness:{n:["complicatedness","complication","knottiness","tortuousness"]},frill:{n:["frill","flounce","ruffle","furbelow","ruff"]},heroic:{s:["heroic","heroical"]},undaunted:{s:["undaunted","undismayed","unshaken"]},glorious:{s:["glorious","resplendent","splendid","splendiferous"]},pusillanimous:{s:["pusillanimous","poor-spirited","unmanly"]},mesomorphic:{a:["mesomorphic","muscular"]},tendinous:{a:["tendinous","sinewy"]},fibrous:{s:["fibrous","sinewy","stringy","unchewable"]},portly:{s:["portly","stout"]},stalwart:{s:[_613,"stout","stouthearted"],n:[_613,"n"]},hempen:{s:["hempen","fibrous"]},effeminate:{s:["effeminate","emasculate","epicene","cissy","sissified","sissyish","sissy"]},loyalist:{n:["loyalist","stalwart"]},honoring:{n:["honoring","observance"]},shiver:{v:["shiver","shudder"],n:["shiver","n"]},shudder:{v:[_449,"shiver","throb","thrill"],n:[_449,"n"]},teller:{n:["teller","cashier"]},faze:{v:["faze","unnerve","enervate","unsettle"]},tremor:{n:["tremor",_449,"microseism"],v:["tremor","quake"]},narrator:{n:["narrator","storyteller","teller"]},fascinated:{s:["fascinated","hypnotized","hypnotised","mesmerized","mesmerised","spellbound","spell-bound","transfixed"]},"pedigree,":{s:["pedigree,","pedigreed","pureblood","pureblooded","thoroughbred"]},pedigree:{n:["pedigree","bloodline"]},brevity:{n:["brevity","briefness","transience"]},shortness:{n:["shortness","truncation"]},conciseness:{n:["conciseness","concision","pithiness","succinctness"]},prolixity:{n:["prolixity","prolixness","windiness","long-windedness","wordiness"]},verboseness:{n:["verboseness","verbosity"]},brew:{n:["brew","brewage"]},hatchback:{n:["hatchback","liftgate","hatch"]},hatch:{n:["hatch","hatching","crosshatch","hachure"],v:["hatch","v"]},curb:{n:["curb","curbing","kerb"],v:["curb","v"]},bristle:{v:["bristle","uprise"]},shining:{n:[_424,"polishing"],s:[_424,"s"]},"aglow,":{s:["aglow,","lambent","lucent","luminous"]},agleam:{s:["agleam","gleaming","nitid"]},blazing:{s:[_559,"blinding","dazzling","fulgent","glaring","glary"],n:[_559,"n"]},appellative:{s:["appellative","naming,"],n:["appellative","n"]},rubicund:{s:["rubicund","ruddy","florid","sanguine"]},dazzling:{s:["dazzling","eye-popping","fulgurant","fulgurous"]},sparkling:{a:["sparkling","effervescent"],n:["sparkling","n"]},twinkle:{n:[_397,"scintillation","sparkling"],v:[_397,"winkle","scintillate"]},cloudless:{s:["cloudless","unclouded"]},opaque:{s:["opaque","unintelligible"]},murky:{s:["murky","mirky"]},demoralizing:{s:["demoralizing","demoralising","disheartening","dispiriting"]},analphabetic:{s:["analphabetic","unlettered"],n:["analphabetic","n"]},analphabet:{n:["analphabet","analphabetic"]},slowgoing:{s:["slowgoing","unenergetic"]},lethargic:{a:["lethargic","unenergetic"]},stagnant:{s:["stagnant","moribund"]},bristly:{s:["bristly","prickly","splenetic","waspish"]},chapped:{s:["chapped","cracked","roughened"]},brittle:{s:["brittle","unannealed","brickle","brickly"],n:["brittle","toffee","toffy"]},sketchy:{s:["sketchy","unelaborated"]},froth:{v:["froth","spume","suds"],n:["froth","n"]},mountebank:{n:["mountebank","charlatan"]},erecting:{n:["erecting","erection"]},erection:{n:["erection","hard-on"]},dismantling:{n:["dismantling","dismantlement","disassembly"]},gusty:{s:["gusty","puffy"]},bouffant:{s:["bouffant","puffy"]},enormousness:{n:["enormousness",_426,"greatness","immenseness","immensity","sizeableness","vastness","wideness"]},greatness:{n:["greatness","illustriousness"]},heft:{n:["heft","heftiness","massiveness","ponderousness","ponderosity"],v:["heft","v"]},bulkiness:{n:["bulkiness","massiveness"]},feebleness:{n:["feebleness","tenuity"]},thinness:{n:[_642,"tenuity","slenderness"]},breakwater:{n:["breakwater","groin","groyne","mole","bulwark","seawall","jetty"]},sparseness:{n:["sparseness","spareness","sparsity","thinness"]},fineness:{n:["fineness",_642,"powderiness","choiceness"]},leanness:{n:["leanness",_642,"spareness"]},fortification:{n:["fortification","munition"]},entrenchment:{n:["entrenchment","intrenchment"]},parapet:{n:["parapet","breastwork"]},siege:{n:["siege","besieging","beleaguering"]},cannonade:{n:["cannonade","drumfire"]},boarding:{n:["boarding","embarkation","embarkment"]},moody:{s:["moody","temperamental"]},tonnage:{n:["tonnage","tunnage"]},lightsomeness:{n:["lightsomeness","lightness"]},lightness:{n:[_571,"weightlessness"]},elation:{n:["elation","lightness"]},carefreeness:{n:["carefreeness","insouciance","lightheartedness","lightsomeness"]},burying:{n:["burying","burial"]},burial:{n:["burial","entombment","inhumation","interment","sepulture"]},exhumation:{n:["exhumation","disinterment"]},scorch:{v:["scorch","sear","singe"],n:["scorch","singe"]},sear:{v:["sear","scorch"],s:["sear","s"]},parch:{v:["parch","sear"]},singe:{v:["singe","swinge"],n:["singe","n"]},smolder:{v:["smolder","smoulder"],n:["smolder","n"]},smoulder:{n:["smoulder","smolder"],v:["smoulder","v"]},benight:{v:["benight","bedim"]},abrade:{v:["abrade","corrade","abrase"]},disinter:{v:["disinter","exhume"]},handicraft:{n:["handicraft","handcraft","handiwork","handwork"]},stagnation:{n:["stagnation","stagnancy","doldrums"]},faineance:{n:["faineance","idleness"]},groundlessness:{n:["groundlessness","idleness"]},idleness:{n:["idleness","idling","loafing"]},indolence:{n:["indolence","laziness"]},stirring:{s:[_557,"soul-stirring"],n:[_557,"n"]},rousing:{s:["rousing","stirring"],n:["rousing","n"]},meddling:{n:["meddling","tampering"],s:["meddling","s"]},arousal:{n:["arousal","rousing"]},subsidize:{v:["subsidize","subsidise"]},cabal:{n:["cabal","faction","junto","camarilla"],v:["cabal","v"]},faction:{n:["faction","sect"]},cadaverous:{a:["cadaverous","cadaveric"],s:["cadaverous","emaciated","gaunt","haggard","pinched","skeletal","wasted"]},bloodless:{s:["bloodless","exsanguine","exsanguinous"]},deathlike:{s:["deathlike","deathly"]},"ash-grey":{s:["ash-grey","ash-gray","ashy"]},blushful:{s:["blushful","rosy","blushing,","red-faced"]},flushed:{s:["flushed","rose-cheeked","rosy","rosy-cheeked"]},"rose-colored":{s:["rose-colored","rosy","rosy-colored"]},sanguine:{s:["sanguine","sanguineous"]},rootless:{s:["rootless","vagabond"]},vagrant:{n:["vagrant","drifter","floater",_311,"clochard"],s:["vagrant","s"]},patriot:{n:["patriot","nationalist"]},philanthropist:{n:["philanthropist","altruist"]},flatter:{v:["flatter","blandish"]},enumerate:{v:["enumerate","recite","itemize","itemise"]},circumspect:{s:["circumspect","discreet"]},farsighted:{a:["farsighted","presbyopic"],s:["farsighted","s"]},wariness:{n:["wariness","chariness"]},indiscretion:{n:["indiscretion","peccadillo","injudiciousness"]},inconsideration:{n:["inconsideration","inconsiderateness","thoughtlessness"]},smallness:{n:["smallness","littleness"]},childishness:{n:["childishness","puerility"]},hark:{v:["hark","harken","hearken"]},imperturbable:{s:["imperturbable","unflappable"]},unflurried:{s:["unflurried","unflustered","unperturbed","unruffled"]},frantic:{s:["frantic","frenetic","phrenetic","frenzied"]},frenzied:{s:["frenzied","manic"]},churning:{s:["churning","roiling","roiled","roily","turbulent","churned-up"]},unbiased:{s:["unbiased","unbiassed"]},uninitiate:{s:["uninitiate","uninitiated","naive"]},uninstructed:{s:["uninstructed","unenlightened","naive"]},naive:{a:["naive","naif"],s:["naive","s"]},earnest:{s:["earnest","sincere","solemn"]},unprejudiced:{a:["unprejudiced","impartial"]},businesslike:{s:["businesslike","earnest"]},uncomplicated:{s:["uncomplicated","unsophisticated"]},unsophisticated:{s:["unsophisticated","unworldly"]},ambidextrous:{s:["ambidextrous","deceitful","double-dealing","duplicitous","janus-faced","two-faced","double-faced","double-tongued"],a:["ambidextrous","two-handed"]},deceitful:{s:["deceitful","fallacious","fraudulent"]},disingenuous:{a:["disingenuous","artful"]},catchy:{s:["catchy","tricky"]},slippery:{s:["slippery","tricky"],a:["slippery","slippy"]},"attention-getting":{s:["attention-getting","catchy","eye-catching"]},pollster:{n:["pollster","headcounter","canvasser"]},scrutineer:{n:["scrutineer","canvasser"]},"narrow-mindedness":{n:["narrow-mindedness","narrowness"]},oddity:{n:["oddity","queerness","quirk","quirkiness","crotchet","oddness"]},fitful:{s:["fitful","interrupted","off-and-on,","spasmodic"]},captious:{s:["captious","faultfinding"]},faultfinding:{n:["faultfinding","carping"],s:["faultfinding","s"]},hypercritical:{s:["hypercritical","overcritical"]},disenchant:{v:["disenchant","disillusion"]},laxness:{n:["laxness","laxity","remissness","slackness"]},recklessness:{n:["recklessness","foolhardiness","rashness"]},pensive:{s:["pensive","wistful"]},thoughtlessly:{r:["thoughtlessly","unthinkingly","unthinking"]},lumpish:{s:["lumpish","lumpen","unthinking"]},unreflective:{s:["unreflective",_621,"unthoughtful"]},dreamy:{s:["dreamy","lackadaisical","languid","languorous","moony","woolgathering"]},dalliance:{n:["dalliance","dawdling","trifling"]},flirt:{n:["flirt","flirting","flirtation","coquetry","dalliance","toying"],v:["flirt","v"]},apery:{n:["apery","mimicry"]},exaggeration:{n:["exaggeration","overstatement","magnification"]},hyperbole:{n:["hyperbole","exaggeration"]},slaughter:{n:[_624,"massacre","carnage","butchery"],v:[_624,"v"]},massacre:{v:["massacre","slaughter"],n:["massacre","n"]},butcher:{v:["butcher","slaughter"],n:["butcher","slaughterer","meatman"]},havoc:{n:["havoc","mayhem"]},butchery:{n:["butchery","butchering"]},abattoir:{n:["abattoir","butchery","shambles","slaughterhouse"]},lustful:{s:["lustful","lusty","concupiscent"]},lascivious:{s:["lascivious","lewd","libidinous","lustful"]},lubricious:{s:["lubricious","lustful","prurient","salacious"]},unreformable:{s:["unreformable","unregenerate"]},unregenerate:{a:[_636,"unregenerated"],s:[_636,"s"]},lent:{n:["lent","lententide"]},necrosis:{n:["necrosis","mortification",_617,"sphacelus"]},tweedle:{v:["tweedle","chirp"]},peep:{v:["peep","cheep","chirp","chirrup"],n:["peep","n"]},chitter:{v:["chitter","twitter"]},chirrup:{n:["chirrup","twitter"],v:["chirrup","v"]},peek:{n:["peek","peep"],v:["peek","v"]},cheep:{n:["cheep","peep"],v:["cheep","v"]},chant:{v:["chant","intone","intonate","cantillate"]},hymn:{n:["hymn","anthem"]},croak:{v:["croak","cronk"],n:["croak","croaking"]},groan:{v:["groan","moan"],n:["groan","moan"]},cavil:{v:["cavil","carp","chicane"],n:["cavil","n"]},generalize:{v:["generalize","generalise","extrapolate","infer"]},popularize:{v:["popularize","popularise","vulgarize","vulgarise","generalize","generalise"]},plight:{n:["plight","troth"],v:["plight","v"]},inflection:{n:["inflection","flection","flexion","inflexion"]},prosody:{n:["prosody","inflection","metrics"]},supposition:{n:["supposition","supposal"]},universality:{n:["universality","catholicity"]},coinage:{n:["coinage","mintage","specie"]},neologism:{n:["neologism","neology","coinage"]},splurge:{v:["splurge","fling"],n:["splurge","n"]},spree:{n:["spree","fling"]},sling:{v:["sling","catapult"],n:["sling","n"]},slingback:{n:["slingback","sling"]},slingshot:{n:["slingshot","sling","catapult"]},taboo:{s:["taboo","tabu"],n:["taboo","tabu"]},commonsense:{s:["commonsense","commonsensible","commonsensical"]},congratulation:{n:["congratulation","felicitation"]},declarative:{a:["declarative","declaratory","asserting,"]},falsify:{v:["falsify",_16,"garble","warp"]},indicative:{a:["indicative","declarative"],s:["indicative","indicatory","revelatory","significative","suggestive"]},audacity:{n:["audacity","audaciousness","temerity"]},improvidence:{n:["improvidence","shortsightedness"]},cavalier:{s:["cavalier","high-handed"],n:["cavalier","royalist","chevalier"]},cavity:{n:["cavity","cavum","caries"]},commemoration:{n:["commemoration","memorialization","memorialisation"]},obscurity:{n:["obscurity","obscureness"]},obscureness:{n:["obscureness","obscurity","abstruseness","reconditeness"]},humbleness:{n:["humbleness","unimportance","obscureness","lowliness"]},infamy:{n:["infamy","opprobrium"]},sublunar:{s:["sublunar","sublunary","terrestrial"],a:["sublunar","sublunary","cislunar"]},mundane:{s:["mundane",_643,"terrene"]},planetary:{a:[_516,"terrestrial"],s:[_516,"s"]},tellurian:{a:["tellurian","telluric",_643,"terrene"],n:["tellurian","earthling","earthman","worldling"]},planetal:{a:["planetal","planetary"]},encomium:{n:["encomium","eulogy","panegyric","paean","pean"]},eulogy:{n:["eulogy","eulogium"]},localize:{v:["localize","localise","focalize","focalise"]},formality:{n:["formality","formalities","formalness"]},meticulous:{s:["meticulous","punctilious"]},mincing:{s:["mincing","niminy-piminy","prim","twee"]},unfailing:{s:["unfailing","unflagging"]},foolproof:{s:["foolproof","unfailing"],v:["foolproof","v"]},goofproof:{v:["goofproof","goof-proof","foolproof"]},incontrovertibility:{n:["incontrovertibility","incontrovertibleness","positivity","positiveness"]},positivity:{n:["positivity","positiveness","positivism"]},favorableness:{n:["favorableness","favourableness","advantageousness","positivity","positiveness","profitableness"]},indecisiveness:{n:["indecisiveness","indecision"]},indecision:{n:["indecision","indecisiveness","irresolution"]},continuousness:{n:["continuousness","ceaselessness","incessancy","incessantness"]},gall:{v:["gall","irk"],n:["gall","n"]},bile:{n:["bile","gall"]},nettle:{v:["nettle","urticate"]},buffoonery:{n:["buffoonery","clowning","japery","frivolity","harlequinade","prank"]},bagatelle:{n:["bagatelle","fluff","frippery","frivolity"]},frivolity:{n:["frivolity","frivolousness"]},discomfiture:{n:["discomfiture","discomposure","disconcertion","disconcertment"]},exultation:{n:["exultation","rejoicing","jubilation","jubilance","jubilancy"]},transmutation:{n:["transmutation","transubstantiation"]},perseverance:{n:["perseverance","persistence","perseveration"]},undeviating:{s:["undeviating","unswerving"]},immovable:{s:["immovable","immoveable","stabile","unmovable"]},indefiniteness:{n:["indefiniteness","indeterminateness","indefinity","indetermination","indeterminacy"]},characterless:{s:["characterless","nondescript"]},commonality:{n:["commonality","commonness"]},commonness:{n:["commonness","commonplaceness","everydayness","expectedness"]},revengeful:{s:["revengeful","vindictive","vengeful"]},hypocrite:{n:["hypocrite","dissembler","dissimulator","phony","phoney","pretender"]},incantation:{n:["incantation","conjuration"]},sorcery:{n:["sorcery","necromancy"]},disenchantment:{n:["disenchantment","disillusion","disillusionment"]},immaculate:{s:["immaculate","speckless","spick-and-span","spic-and-span","spic","spick","spotless","undefiled"]},gladness:{n:["gladness","gladfulness","gladsomeness"]},hilarity:{n:["hilarity","mirth","mirthfulness","glee","gleefulness"]},unsociability:{n:["unsociability","unsociableness"]},somber:{s:["somber","sombre","melancholy"]},melancholy:{s:["melancholy","melancholic"]},childish:{s:["childish","infantile"]},manfully:{r:["manfully","manly"]},manly:{a:["manly","manful","manlike"],s:["manly","s"],r:["manly","r"]},chimeric:{a:["chimeric","chimerical","chimeral"]},visionary:{n:["visionary","illusionist","seer"],s:["visionary","s"]},gentlemanlike:{s:["gentlemanlike","gentlemanly"]},enlivened:{s:["enlivened","spirited"]},"dastard,":{s:["dastard,","dastardly"]},predestination:{n:["predestination","foreordination","preordination","predetermination"]},outcast:{n:["outcast","castaway","pariah","ishmael"],s:["outcast","s"]},friendless:{s:["friendless","outcast"]},eternity:{n:["eternity","infinity","timelessness"]},monopolize:{v:["monopolize","monopolise"]},periphery:{n:["periphery","fringe"]},circumlocution:{n:["circumlocution","periphrasis","ambage"]},redundancy:{n:["redundancy","redundance"]},directness:{n:["directness","straightness"]},homeliness:{n:["homeliness","plainness"]},perspicuity:{n:["perspicuity","perspicuousness","plainness"]},dowdiness:{n:["dowdiness","drabness","homeliness"]},inhabitant:{n:["inhabitant","habitant","dweller","denizen","indweller"]},townsman:{n:["townsman","towner"]},burgess:{n:["burgess","burgher"]},transeunt:{a:["transeunt","transient"]},humanization:{n:["humanization","humanisation"]},demoralization:{n:["demoralization","demoralisation"]},savageness:{n:["savageness","savagery"]},sequestration:{n:["sequestration","requisition"]},hubbub:{n:["hubbub","uproar","brouhaha","katzenjammer"]},ecphonesis:{n:["ecphonesis","exclamation"]},exclamation:{n:["exclamation","exclaiming"]},sultry:{s:["sultry","stifling","sulfurous","sulphurous"]},sensual:{s:["sensual","sultry"]},grouping:{n:["grouping","pigeonholing"]},homogeneity:{n:["homogeneity","homogeneousness"]},heterogeneity:{n:["heterogeneity","heterogeneousness"]},gargle:{v:["gargle","rinse"],n:["gargle","mouthwash"]},rinse:{n:["rinse","rinsing"],v:["rinse","v"]},fogged:{s:["fogged","foggy"]},brumous:{s:["brumous","foggy","hazy","misty"]},shitless:{s:["shitless","witless"]},anticlimax:{n:["anticlimax","bathos"]},bucolic:{a:[_395,"pastoral"],n:[_395,"n"],s:[_395,"s"]},arcadian:{s:["arcadian",_395,"pastoral"]},eclogue:{n:["eclogue",_395,"idyll","idyl"]},cloddish:{s:["cloddish","doltish"]},indecorous:{a:["indecorous","indelicate"],s:["indecorous","s"]},indelicate:{s:["indelicate","off-color","off-colour"],a:["indelicate","a"]},coexistent:{s:["coexistent","coexisting"]},coincident:{s:["coincident","coincidental","coinciding","concurrent","co-occurrent","cooccurring","simultaneous"]},irresistible:{a:["irresistible","resistless"]},dianoetic:{s:["dianoetic","discursive"]},coincidence:{n:["coincidence","happenstance"]},contemporaneity:{n:["contemporaneity","contemporaneousness"]},asynchronism:{n:["asynchronism","asynchrony","desynchronization","desynchronisation","desynchronizing"]},anachronism:{n:["anachronism","mistiming","misdating"]},chilly:{s:["chilly","parky"],n:["chilly","n"]},frosty:{s:["frosty","rimed","rimy"]},wintry:{a:["wintry","wintery"],s:["wintry","s"]},connivance:{n:["connivance","collusion"]},imbue:{v:["imbue","hue"]},hue:{n:["hue","chromaticity"],v:["hue","v"]},speciousness:{n:["speciousness","meretriciousness"]},improvised:{s:["improvised","jury-rigged","makeshift"]},makeshift:{n:["makeshift","stopgap","make-do"],s:["makeshift","s"]},stressed:{s:["stressed","distressed"],a:["stressed","accented"]},distressed:{s:[_508,"hard-pressed"],a:[_508,"a"]},pacification:{n:["pacification","counterinsurgency","mollification"]},pithy:{s:["pithy","sententious"]},solitude:{n:["solitude","purdah"]},aloneness:{n:["aloneness","loneliness","lonesomeness","solitariness"]},loneliness:{n:["loneliness","solitariness"]},vindictiveness:{n:["vindictiveness","vengefulness"]},confounding:{s:["confounding","contradictory"]},hamper:{v:["hamper","halter","cramp","strangle"],n:["hamper","n"]},sufficiency:{n:["sufficiency","adequacy"]},adequacy:{n:["adequacy","adequateness"]},complacent:{s:["complacent","self-satisfied","self-complacent"]},embroiled:{s:["embroiled","entangled"]},manifold:{s:["manifold","multiplex"],v:["manifold","v"]},calumniatory:{s:["calumniatory","calumnious","defamatory","denigrative","denigrating","denigratory","libellous","libelous","slanderous"]},comminatory:{s:["comminatory","denunciative","denunciatory"]},restlessness:{n:["restlessness",_644,"queasiness","impatience"]},fidget:{n:["fidget","fidgetiness","restlessness"]},ignorantness:{n:["ignorantness","nescience","unknowing","unknowingness"]},extricate:{v:["extricate","untangle",_645,"disencumber"]},inducement:{n:["inducement","inducing"]},compunction:{n:["compunction","remorse","self-reproach"]},severance:{n:["severance","severing"]},convex:{a:["convex","bulging"]},bellied:{s:["bellied","bellying","bulbous","bulging","bulgy","protuberant"]},definitive:{s:["definitive","determinate","unequivocal"]},debatable:{s:["debatable","problematic","problematical","disputable"]},arguable:{s:["arguable","debatable","disputable","moot"]},indeterminate:{a:["indeterminate","undetermined"]},incompleteness:{n:["incompleteness","rawness"]},synchronous:{a:["synchronous","synchronal","synchronic"]},resistless:{s:["resistless","unresisting"],a:["resistless","a"]},percussion:{n:["percussion","pleximetry"]},merited:{a:["merited","deserved"]},flavorer:{n:["flavorer","flavourer","flavoring","flavouring","seasoner","seasoning"]},flatly:{r:["flatly","categorically","unconditionally"]},expiate:{v:["expiate","aby","abye","atone"]},soliloquy:{n:["soliloquy","monologue"]},heresy:{n:["heresy","unorthodoxy"]},unorthodoxy:{n:["unorthodoxy","heterodoxy","heresy"]},punic:{s:["punic","perfidious","treacherous"],a:["punic","a"]},treacherous:{s:["treacherous","unreliable"]},faithless:{s:["faithless","traitorous","unfaithful","treasonable","treasonous"]},carthaginian:{a:["carthaginian","punic"]},deformity:{n:["deformity","malformation","misshapenness"]},arson:{n:["arson","incendiarism","fire-raising"]},smoldering:{s:["smoldering","smouldering"]},secede:{v:["secede","splinter"]},unkindly:{s:["unkindly","unsympathetic"]},unsympathetic:{a:[_452,"unappealing","unlikeable","unlikable"],s:[_452,"s"]},congenital:{s:["congenital","inborn","innate"]},connatural:{s:["connatural","inborn","inbred"]},congestion:{n:["congestion","over-crowding"]},divination:{n:["divination","foretelling","soothsaying"]},prophecy:{n:["prophecy","divination","prognostication","vaticination"]},inference:{n:["inference","illation"]},guarantor:{n:["guarantor","surety","warrantor","warranter"]},dissociation:{n:["dissociation","disassociation"]},irresponsibility:{n:["irresponsibility","irresponsibleness"]},dishonest:{a:["dishonest","dishonorable"],s:["dishonest","s"]},dishonorable:{a:["dishonorable","dishonourable"]},corruptible:{s:["corruptible","bribable","dishonest","purchasable","venal"]},unaware:{a:["unaware","incognizant"]},disordered:{a:[_425,"unordered"],s:[_425,"s"]},illogical:{a:["illogical","unlogical"],s:["illogical","s"]},sequel:{n:["sequel","continuation","subsequence"]},paltriness:{n:["paltriness","sorriness"]},consequential:{s:["consequential","eventful"]},incoherent:{s:["incoherent","tongue-tied"]},solidity:{n:["solidity","solidness"]},congruity:{n:["congruity","congruousness","congruence"]},invariability:{n:["invariability","invariableness","invariance"]},evenness:{n:["evenness","invariability"]},volatility:{n:["volatility","unpredictability"]},incoherence:{n:["incoherence","incoherency","unintelligibility"]},thicken:{v:["thicken","inspissate"]},evaporate:{v:["evaporate",_504,"vaporise"]},gasify:{v:["gasify",_504,"vaporise","aerify"]},zap:{v:["zap","vaporize"]},microscopic:{s:["microscopic","microscopical"],a:["microscopic","microscopical"]},imperceptible:{a:["imperceptible","unperceivable"]},unanticipated:{s:["unanticipated","unforeseen","unseen","unlooked-for"]},unobserved:{s:["unobserved","unseen"]},unhesitating:{s:["unhesitating","resolute"]},untrustworthy:{a:["untrustworthy","untrusty"]},fearlessness:{n:["fearlessness","bravery"]},absolutism:{n:["absolutism","tyranny","despotism","totalitarianism","totalism"]},dictatorship:{n:["dictatorship","absolutism","authoritarianism","caesarism","despotism","monocracy","shogunate","stalinism","totalitarianism","tyranny"]},replenish:{v:["replenish","refill"]},restless:{s:["restless","ungratified","unsatisfied"],a:["restless","uneasy"]},unsated:{s:["unsated","unsatiated","unsatisfied"]},disaffected:{s:["disaffected","ill-affected","malcontent","rebellious"]},discontented:{a:["discontented","discontent"]},discontentment:{n:["discontentment","discontent","discontentedness"]},probationary:{s:["probationary","provisional","provisionary","tentative"]},uninfluenced:{s:["uninfluenced","unswayed","untouched"]},cranky:{s:["cranky","fractious","irritable","nettlesome","peevish","peckish","pettish","petulant",_603,"testy","tetchy","techy"]},stubbornness:{n:["stubbornness","bullheadedness","obstinacy","obstinance","pigheadedness","self-will","mulishness"]},perversity:{n:["perversity","perverseness"]},contrariness:{n:["contrariness","perversity","perverseness"]},crankiness:{n:["crankiness","crotchetiness","contrariness","grumpiness"]},adamance:{n:["adamance","obduracy","unyieldingness"]},disobedience:{n:["disobedience","noncompliance"]},unpracticed:{s:["unpracticed","unpractised","unversed"]},indistinguishable:{a:["indistinguishable","undistinguishable"],s:["indistinguishable","s"]},reversible:{a:["reversible","two-sided"]},unbelief:{n:["unbelief","disbelief"]},incredulity:{n:["incredulity","disbelief","skepticism"]},immunize:{v:["immunize","immunise","inoculate","vaccinate"]},convivial:{s:["convivial","good-time"]},unneighborly:{s:["unneighborly","unneighbourly"]},gyrus:{n:["gyrus","convolution"]},coiling:{s:["coiling","helical","spiral","spiraling","volute","voluted","whorled","turbinate"]},corkscrew:{v:["corkscrew","spiral"]},spiral:{n:["spiral","volute"],v:["spiral","v"],s:["spiral","s"]},helix:{n:["helix","spiral"]},tortuosity:{n:["tortuosity","tortuousness","torsion","contortion","crookedness"]},contortion:{n:["contortion","deformation"]},excitable:{s:["excitable","irritable"]},convexity:{n:["convexity","convexness"]},corpulent:{s:["corpulent","obese","weighty","rotund"]},fallacious:{s:["fallacious","unsound"]},preventive:{a:[_313,"preventative"],s:[_313,_314,"prophylactic"],n:[_313,_314,"prophylactic"]},contraceptive:{n:["contraceptive",_313,"preventative"],s:["contraceptive",_330,"antifertility"]},reformative:{s:["reformative","reformatory"]},interrelation:{n:["interrelation","interrelationship","interrelatedness"]},mutuality:{n:["mutuality","interdependence","interdependency","mutualness"]},reciprocality:{n:["reciprocality","reciprocity"]},rust:{s:["rust","rusty","rust-brown"],n:["rust","rusting"],v:["rust","v"]},infect:{v:["infect","taint"]},depravity:{n:["depravity","turpitude"]},dishonesty:{n:["dishonesty","knavery"]},preciosity:{n:["preciosity","preciousness"]},invaluableness:{n:["invaluableness","preciousness","pricelessness","valuableness"]},costliness:{n:["costliness","dearness","preciousness"]},luster:{n:["luster","lustre","brilliancy","splendor","splendour"]},shininess:{n:["shininess","sheen","luster","lustre"]},agriculturist:{n:["agriculturist","agriculturalist","cultivator","grower","raiser"]},yeoman:{n:["yeoman","beefeater"]},splice:{n:["splice","splicing"],v:["splice","v"]},heroism:{n:["heroism","gallantry","valor","valour","valorousness","valiance","valiancy"]},dauntlessness:{n:["dauntlessness","intrepidity"]},cowardice:{n:["cowardice","cowardliness"]},plebeian:{n:["plebeian","pleb"],s:["plebeian","s"]},concordant:{s:["concordant","concurring,"]},clothe:{v:["clothe","cloak","drape","robe"]},caul:{n:["caul","veil"]},veil:{n:["veil","velum"],v:["veil","v"]},desirous:{a:["desirous","wishful"]},edacious:{s:["edacious","esurient","rapacious","ravening","ravenous","voracious","wolfish"]},rapacious:{s:["rapacious","ravening","voracious"]},predatory:{s:["predatory","rapacious","raptorial","ravening","vulturine","vulturous"]},daredevil:{n:["daredevil","madcap","hothead","swashbuckler","lunatic","harum-scarum"]},coy:{s:["coy","demure","overmodest"]},predaceous:{s:["predaceous","predacious","predatory"]},marauding:{s:["marauding","predatory","raiding"]},predacious:{s:["predacious","predaceous"]},flippant:{s:["flippant","light-minded"]},singleness:{n:["singleness","straightforwardness"]},downrightness:{n:["downrightness","straightforwardness"]},spasm:{n:["spasm","cramp"]},rending:{s:["rending","ripping","splitting"]},rapport:{n:["rapport","resonance"]},plangency:{n:["plangency","resonance","reverberance","ringing","sonorousness","sonority","vibrancy"]},crassness:{n:["crassness","crassitude"]},crabbiness:{n:["crabbiness","crabbedness","crossness"]},corpulence:{n:["corpulence","overweight","stoutness","adiposis"]},slenderness:{n:["slenderness","slightness","slimness"]},shattered:{s:["shattered","tattered"]},tottering:{s:["tottering","tottery"]},lunatic:{s:["lunatic","moonstruck"],n:["lunatic","madman","maniac"]},alligatored:{s:["alligatored","cracked"]},crazed:{s:["crazed","deranged","half-crazed"]},chimera:{n:["chimera","chimaera"]},agnosticism:{n:["agnosticism","skepticism","scepticism"]},credible:{a:["credible","believable"]},unreliable:{a:[_646,"undependable"],s:[_646,"s"]},undependable:{s:["undependable","unreliable"],a:["undependable","a"]},credulousness:{n:["credulousness","gullibility"]},chapfallen:{s:["chapfallen","chopfallen","crestfallen","deflated"]},outrageousness:{n:["outrageousness","enormity"]},exorbitance:{n:["exorbitance","outrageousness"]},transgression:{n:["transgression","evildoing"]},meritorious:{s:["meritorious","meritable"]},refurbish:{v:["refurbish","renovate"]},renovate:{v:["renovate","restitute"]},quibbler:{n:["quibbler","caviller","caviler","pettifogger"]},carper:{n:["carper","niggler"]},precarious:{s:["precarious","shaky","unstable"]},stenosis:{n:["stenosis","stricture"]},anatomize:{v:["anatomize","anatomise"]},opine:{v:["opine","animadvert"]},curved:{a:["curved","curving"]},bowed:{s:["bowed","bowing"]},bandy:{s:["bandy","bandy-legged","bowed","bowleg","bowlegged"]},arced:{s:["arced","arched","arching","arciform","arcuate","bowed"]},fretful:{s:["fretful","querulous","whiney","whiny"]},antsy:{s:["antsy","fidgety","fretful","itchy"]},cynical:{s:["cynical","misanthropic","misanthropical"]},pedestal:{n:["pedestal","plinth","footstall"]},unfledged:{a:["unfledged","immature"],s:["unfledged","fledgeless","unvaned"]},hardhearted:{s:["hardhearted","stonyhearted","unfeeling"],a:["hardhearted","heartless"]},fledgling:{s:["fledgling","unfledged","callow"],n:["fledgling","fledgeling"]},perpetrator:{n:["perpetrator","culprit"]},delinquent:{s:["delinquent","overdue"]},"fledgling,":{s:["fledgling,","fledgeling,"]},felon:{n:["felon","whitlow"]},subtlety:{n:["subtlety","niceness"]},lust:{n:["lust","luxuria"],v:["lust","v"]},lecherousness:{n:["lecherousness","lust","lustfulness"]},antidote:{n:["antidote","counterpoison"]},recuperative:{s:["recuperative","restorative"]},renewing:{s:["renewing",_505,"reviving","revitalizing","revitalising"]},tonic:{n:["tonic",_505,"keynote"],a:["tonic","accented","tonal"],s:["tonic","s"]},inoculation:{n:["inoculation","vaccination"]},curiousness:{n:["curiousness","inquisitiveness"]},nosy:{s:["nosy","nosey","prying","snoopy"]},nosiness:{n:["nosiness","prying","snoopiness"]},satirical:{s:["satirical","satiric"]},stabbing:{s:["stabbing","wounding"]},foreignness:{n:["foreignness","strangeness","curiousness"]},comforting:{s:["comforting","consolatory","consoling","cheering","satisfying"]},misanthropic:{s:["misanthropic","misanthropical"]},palatable:{a:["palatable","toothsome"]},"mouth-watering":{s:["mouth-watering","savory","savoury"]},piquant:{s:["piquant","savory",_648,"zesty","salty"]},savory:{a:["savory","savoury"],n:["savory","savoury"],s:["savory","s"]},defiled:{s:["defiled","maculate"]},maleficence:{n:["maleficence","mischief","balefulness"]},mischief:{n:["mischief","mischief-making","mischievousness","deviltry","devilry","devilment","rascality","roguery","roguishness","shenanigan"]},riskiness:{n:["riskiness","peril"]},shadowy:{s:["shadowy","wraithlike"]},shady:{s:["shady","shadowed","shadowy","umbrageous"]},blighted:{s:["blighted","spoilt"]},mournful:{s:["mournful","plaintive"]},indomitable:{s:["indomitable","never-say-die","unsubduable"]},insuperable:{s:["insuperable","unconquerable","insurmountable"]},insipid:{s:["insipid","jejune"]},inaudible:{a:["inaudible","unhearable"]},adamant:{s:["adamant","adamantine","inexorable","intransigent"],n:["adamant","n"]},despised:{s:["despised","detested","hated","scorned"]},debtor:{n:["debtor","debitor"]},mortgagor:{n:["mortgagor","mortgager"]},adulterous:{s:["adulterous","cheating,","two-timing,","extramarital","extracurricular"]},bunk:{n:["bunk","bunkum","buncombe","guff","rot","hogwash"],v:["bunk","v"]},putrefaction:{n:["putrefaction","rot"]},duplicity:{n:["duplicity","double-dealing"]},berth:{n:["berth","bunk"],v:["berth","v"]},falsehood:{n:["falsehood","falsity","untruth"]},hover:{v:["hover",_649,"vacillate","oscillate","linger"]},unravel:{v:["unravel","unknot","unscramble","untangle","unpick"]},moor:{v:["moor","berth","wharf"],n:["moor","moorland"]},levitate:{v:["levitate","hover"]},declaim:{v:["declaim","inveigh","recite"]},recite:{v:["recite","retell"]},decorum:{n:["decorum","decorousness"]},propriety:{n:["propriety","properness","correctitude"]},autograph:{v:["autograph","inscribe"]},untying:{n:["untying","undoing","unfastening"]},lapse:{v:["lapse","backslide"],n:["lapse","n"]},"safe-conduct":{n:["safe-conduct","safeguard"]},overuse:{v:["overuse","overdrive"],n:["overuse","n"]},defiance:{n:["defiance","rebelliousness"]},malformation:{n:["malformation","miscreation"]},embezzlement:{n:["embezzlement","peculation","defalcation","misapplication","misappropriation"]},overexploitation:{n:["overexploitation","overuse","overutilization","overutilisation"]},despondent:{s:["despondent","heartsick"]},dilatoriness:{n:["dilatoriness","procrastination"]},procrastination:{n:["procrastination","cunctation","shillyshally"]},acceleration:{n:["acceleration","quickening","speedup"]},sanitary:{a:["sanitary","healthful"]},bantering:{s:["bantering","facetious","tongue-in-cheek"]},hotheaded:{s:["hotheaded",_514,"impetuous","madcap","tearaway,","brainish"]},impulsive:{s:[_514,"unprompted"]},choleric:{s:["choleric","irascible","hotheaded","hot-tempered","quick-tempered","short-tempered"]},meticulousness:{n:["meticulousness","meticulosity","punctiliousness","scrupulousness"]},woebegone:{s:["woebegone","woeful"]},overdo:{v:["overdo","exaggerate"]},drought:{n:["drought","drouth"]},snare:{n:["snare","gin","noose"],v:["snare","v"]},oligarchic:{a:["oligarchic","oligarchical"]},enthrone:{v:["enthrone","throne"]},ravage:{n:["ravage","depredation"],v:["ravage","v"]},depredation:{n:["depredation","predation"]},looting:{n:["looting","robbery"]},ruler:{n:["ruler","swayer"]},deriving:{n:["deriving","derivation","etymologizing"]},overvalue:{v:["overvalue","overestimate"]},overestimate:{v:["overestimate","overrate"],n:["overestimate","overestimation","overrating","overreckoning","overvaluation","overappraisal"]},descendant:{s:["descendant","descendent"],n:["descendant","descendent"]},progenitor:{n:["progenitor","primogenitor"]},pasture:{n:[_310,"pastureland","lea","ley"],v:[_310,"v"]},canter:{n:["canter","lope"]},desacralize:{v:["desacralize","secularize"]},secularize:{v:["secularize","secularise"]},misread:{v:["misread","misinterpret"]},baptize:{v:["baptize","baptise","christen"]},misname:{v:["misname","miscall"]},inadvisable:{a:["inadvisable","unadvisable"]},disadvantageous:{a:["disadvantageous","unfavorable","unfavourable"]},despondency:{n:["despondency","despondence","heartsickness","disconsolateness"]},defiant:{a:["defiant","noncompliant"]},convulsive:{s:["convulsive","spasmodic","spastic"]},detachment:{n:[_560,"disengagement"]},prejudice:{v:["prejudice","prepossess"],n:["prejudice","n"]},deceptive:{s:["deceptive","misleading","delusory"]},carousel:{n:["carousel","carrousel","merry-go-round","roundabout","whirligig"]},dedication:{n:["dedication","inscription"]},piety:{n:["piety","piousness"]},holiness:{n:["holiness","sanctity","sanctitude"]},wording:{n:["wording","diction","phrasing","phraseology","verbiage"]},sectionalism:{n:["sectionalism","provincialism","localism"]},utterance:{n:["utterance","vocalization"]},verbiage:{n:["verbiage","verbalism"]},didactic:{s:["didactic","didactical"]},exhale:{v:["exhale","expire","emanate"]},comestible:{n:["comestible","edible","eatable","pabulum","victual","victuals"],a:["comestible","a"]},edible:{a:["edible","comestible","eatable"],n:["edible","n"]},personalize:{v:["personalize","personalise","individualize","individualise"]},individualize:{v:["individualize","individualise"]},burdensome:{s:["burdensome","onerous","taxing"]},foreword:{n:["foreword","preface","prolusion"]},aphoristic:{s:["aphoristic","apothegmatic","epigrammatic"],a:["aphoristic","a"]},axiomatic:{a:["axiomatic","aphoristic","axiomatical","postulational"],s:["axiomatic","self-evident"]},systematize:{v:["systematize","systematise","systemize","systemise"]},scrawny:{s:["scrawny","scrubby","stunted"]},tarriance:{n:["tarriance","lingering"]},dwarf:{n:["dwarf","midget","nanus"],v:["dwarf","v"]},racket:{n:["racket","racquet"],v:["racket","v"]},begrimed:{s:["begrimed","dingy","grimy","grubby","grungy","raunchy"]},statesmanship:{n:["statesmanship","statecraft","diplomacy"]},naivete:{n:["naivete","naivety","naiveness"]},tactful:{s:["tactful","kid-glove"]},tactless:{a:["tactless","untactful"],s:["tactless","s"]},rectilinear:{s:["rectilinear","rectilineal"]},obscenity:{n:["obscenity","smut","vulgarism","filth","lewdness","bawdiness","salaciousness","salacity"]},filth:{n:["filth","filthiness","foulness","nastiness","crud","skank"]},dirtiness:{n:["dirtiness","uncleanness"]},droppings:{n:["droppings","dung","muck"]},malodorousness:{n:["malodorousness","stinkiness","foulness","rankness","fetidness"]},foulness:{n:["foulness","raininess"]},smuttiness:{n:["smuttiness","dirtiness","sootiness"]},spotlessness:{n:["spotlessness","immaculateness"]},ascertainable:{s:["ascertainable","discoverable"]},intangible:{a:["intangible","impalpable"],s:["intangible","nonphysical"]},blindness:{n:["blindness","sightlessness","cecity"]},unburden:{v:["unburden","disburden"]},unload:{v:["unload","unlade","offload"]},believer:{n:["believer","worshiper","worshipper","truster"]},schoolchild:{n:["schoolchild","pupil"]},inconsolable:{a:["inconsolable","disconsolate","unconsolable"]},brokenhearted:{s:["brokenhearted","heartbroken","heartsick"]},myopia:{n:["myopia","nearsightedness","shortsightedness"]},inconsequent:{s:["inconsequent","inconsequential"]},dogmatize:{v:["dogmatize","dogmatise"]},nausea:{n:["nausea","sickness"]},robustness:{n:["robustness","hardiness","lustiness"]},salubrity:{n:["salubrity","salubriousness"]},funereal:{s:["funereal","sepulchral"]},inversion:{n:["inversion","eversion","everting","upending"]},anastrophe:{n:["anastrophe","inversion"]},debater:{n:["debater","arguer"]},fulmination:{n:["fulmination","diatribe"]},conjoined:{s:["conjoined","conjoint"]},blurred:{s:["blurred","clouded"]},curvaceousness:{n:["curvaceousness","shapeliness","voluptuousness"]},disassemble:{v:["disassemble","dismantle"]},accomplishable:{s:["accomplishable","achievable","doable","manageable","realizable"]},tractable:{a:["tractable","manipulable"],s:["tractable","s"]},transcendence:{n:["transcendence","transcendency","superiority"]},tyrannize:{v:["tyrannize","tyrannise","domineer"]},irresoluteness:{n:["irresoluteness","irresolution"]},bareness:{n:["bareness","starkness"]},purposelessness:{n:["purposelessness","aimlessness"]},exude:{v:["exude","exudate","transude","ooze"]},wilt:{v:["wilt","droop"],n:["wilt","wilting"]},droop:{v:["droop","loll"],n:["droop","n"]},adust:{s:["adust","baked","parched","scorched","sunbaked"]},arid:{s:["arid","desiccate","desiccated","waterless"]},buttery:{s:["buttery","fulsome","oily","oleaginous","smarmy","soapy","unctuous"],n:["buttery","n"]},pantry:{n:["pantry","larder","buttery"]},mute:{s:["mute","tongueless","unspoken","wordless"],n:["mute","deaf-mute"],v:["mute","v"]},inarticulate:{a:["inarticulate","unarticulate"]},bigmouthed:{s:["bigmouthed","blabbermouthed","blabby","talkative"]},chatty:{s:["chatty","gabby","garrulous","loquacious","talkative","talky","gossipy","newsy"]},"impatient,":{s:["impatient,","raring,"]},jesting:{s:["jesting","jocose","jocular","joking"]},disquiet:{n:[_376,"unease","uneasiness"],v:[_376,"v"]},anxiousness:{n:["anxiousness","disquiet"]},"self-consciousness":{n:["self-consciousness",_644,"uncomfortableness"]},malaise:{n:["malaise","unease","uneasiness"]},edginess:{n:["edginess",_644,"inquietude","disquietude"]},repetition:{n:["repetition","repeating"]},repercussion:{n:["repercussion","reverberation"]},illuminance:{n:["illuminance","illumination"]},parsimony:{n:["parsimony","parsimoniousness","thrift","penny-pinching"]},inedible:{a:["inedible","uneatable"]},misadvise:{v:["misadvise","misguide"]},retool:{v:["retool","revise"]},annotate:{v:["annotate","footnote"]},womanly:{a:["womanly","feminine"]},unmanfully:{r:["unmanfully","unmanly"]},unmanly:{a:[_641,"unmanful","unmanlike"],s:[_641,"s"],r:[_641,"r"]},adynamic:{s:["adynamic","asthenic","debilitated","enervated"],a:["adynamic","a"]},decayed:{s:["decayed","rotten","rotted"]},undynamic:{a:["undynamic","adynamic"]},squandered:{s:["squandered","wasted"]},efficacy:{n:["efficacy","efficaciousness"]},inefficacy:{n:["inefficacy","inefficaciousness"]},unthoughtfulness:{n:["unthoughtfulness","thoughtlessness"]},unproductively:{r:["unproductively","fruitlessly","unprofitably"]},sloth:{n:["sloth","laziness","acedia","slothfulness"]},denudation:{n:["denudation","stripping","uncovering","baring","husking"]},dehydration:{n:["dehydration","desiccation","evaporation"]},outflow:{n:["outflow","effluence","efflux"]},miasma:{n:["miasma","miasm"]},ventilation:{n:["ventilation","airing"]},ointment:{n:["ointment","unction","unguent","balm","salve"]},bactericidal:{s:["bactericidal","disinfectant","germicidal"]},disinfectant:{n:["disinfectant","germicide","antimicrobic","antimicrobial"],s:["disinfectant","s"]},spontaneity:{n:["spontaneity","spontaneousness"]},shamelessness:{n:["shamelessness","brazenness"]},opacity:{n:["opacity","opaqueness"]},skimpy:{s:["skimpy","scanty"]},desquamation:{n:["desquamation","peeling","shedding"]},shedding:{n:["shedding","sloughing"]},effluent:{s:["effluent","outflowing"],n:["effluent","wastewater"]},effusive:{s:["effusive","gushing,","gushy"]},burbling:{s:["burbling","burbly","effusive","gushing"]},gushing:{s:["gushing","pouring"]},vanity:{n:["vanity","emptiness"]},abashment:{n:["abashment","bashfulness"]},transcendent:{s:["transcendent","surpassing"]},extensile:{a:["extensile","extensible"]},crystallized:{s:["crystallized","crystalised"],a:["crystallized","crystallised"]},gladdened:{s:["gladdened","exhilarated"]},"high-flown":{s:["high-flown","high-sounding","inflated"]},hyperbolic:{s:["hyperbolic","inflated"]},ransomed:{s:["ransomed","redeemed"]},heartening:{s:["heartening","inspiriting"]},exhilarating:{s:["exhilarating","stimulating"]},stimulant:{s:["stimulant","stimulating"],n:["stimulant","excitant"]},elating:{s:["elating","exhilarating"]},electrifying:{s:["electrifying","thrilling"]},thrill:{v:["thrill","tickle","vibrate"],n:["thrill","n"]},hypnotize:{v:["hypnotize","hypnotise","mesmerize","mesmerise"]},symmetrical:{a:["symmetrical","symmetric"],s:["symmetrical","s"]},uncompounded:{s:["uncompounded","unmixed"]},vestigial:{s:["vestigial","rudimentary"]},puniness:{n:["puniness","runtiness","stuntedness"]},impregnate:{v:["impregnate","infuse",_438,"tincture","saturate"]},inculcate:{v:["inculcate",_438,"infuse"]},instill:{v:[_438,"instil","transfuse"]},expunction:{n:["expunction","expunging","erasure"]},ellipsis:{n:["ellipsis","eclipsis"]},implantation:{n:["implantation","nidation"]},elliptic:{s:["elliptic","elliptical"]},implicative:{s:["implicative","suggestive"]},expository:{s:["expository","expositive"]},clarify:{v:["clarify","elucidate"]},mock:{v:["mock","bemock"]},illusive:{s:["illusive","illusory"]},fleeting:{s:["fleeting","fugitive","momentaneous","momentary"]},fugitive:{n:["fugitive","runaway","fleer"],s:["fugitive","s"]},unequivocal:{a:["unequivocal","univocal","unambiguous"],s:["unequivocal","s"]},bonyness:{n:["bonyness","boniness","emaciation","gauntness","maceration"]},cachexia:{n:["cachexia","cachexy","wasting"]},skinniness:{n:["skinniness","scrawniness"]},affranchise:{v:["affranchise","enfranchise"]},vulgarize:{v:["vulgarize","vulgarise"]},vulgarise:{v:["vulgarise","vulgarize"]},disembark:{v:["disembark","debark"]},comb:{v:["comb",_645,"ransack"],n:["comb","combing","cockscomb","coxcomb"]},unwind:{v:["unwind",_645,"unroll"]},disinvolve:{v:["disinvolve","disembroil","disentangle"]},disentangle:{v:[_645,"unsnarl"]},sweeten:{v:["sweeten","dulcify","edulcorate","dulcorate"]},embryo:{n:["embryo","conceptus"]},nucleus:{n:["nucleus","karyon"]},emigration:{n:["emigration","out-migration","expatriation"]},tameness:{n:["tameness","domestication"]},jejunity:{n:["jejunity","jejuneness","tameness","vapidity","vapidness"]},demulcent:{s:["demulcent","emollient","salving","softening"]},balsamic:{a:["balsamic","balsamy"]},alleviative:{s:["alleviative","alleviatory","lenitive","mitigative","mitigatory","palliative"]},palliative:{n:["palliative","alleviant","alleviator"],s:["palliative","s"]},irritant:{n:["irritant","thorn"]},astringent:{n:["astringent","styptic"],s:["astringent","s"]},emphatic:{s:["emphatic","forceful","exclamatory","emphasized","emphasised"]},experiential:{s:["experiential","existential"]},inductive:{s:["inductive","inducive"]},unoccupied:{s:["unoccupied","untenanted"]},entrancement:{n:["entrancement","ravishment"]},encomiastic:{s:["encomiastic","eulogistic","panegyric","panegyrical"]},encumbrance:{n:["encumbrance","incumbrance"]},incomputable:{s:["incomputable","inestimable","immeasurable"]},immeasurable:{a:["immeasurable","unmeasurable","immensurable"],s:["immeasurable","s"]},largess:{n:["largess","largesse"]},cernuous:{s:["cernuous","drooping","nodding","pendulous","weeping"]},drooping:{s:["drooping","droopy","sagging","flagging"]},manfulness:{n:["manfulness","manliness","virility"]},burdensomeness:{n:["burdensomeness",_611,"onerousness","oppressiveness"]},ponderousness:{n:["ponderousness","heaviness"]},heaviness:{n:[_611,"weightiness"]},inculcation:{n:["inculcation","ingraining","instilling"]},disenfranchise:{v:["disenfranchise","disfranchise"]},unattractive:{s:["unattractive","untempting"]},engrave:{v:["engrave","etch"]},confusing:{s:["confusing","perplexing","puzzling"]},incomprehensible:{a:["incomprehensible","uncomprehensible"]},inexplicable:{a:["inexplicable","incomprehensible"]},descant:{n:["descant","discant"],v:["descant","v"]},kindliness:{n:["kindliness","helpfulness"]},villainy:{n:["villainy","villainousness"]},gigantic:{s:["gigantic","mammoth"]},misplace:{v:["misplace","mislay"]},knot:{n:["knot","greyback","grayback","gnarl"],v:["knot","v"]},slub:{n:["slub","knot","burl"]},humdrum:{s:[_625,"monotonous"],n:[_625,"n"]},notional:{s:["notional","speculative"]},conceptional:{s:["conceptional","ideational","notional"]},fanaticism:{n:["fanaticism","fanatism","zealotry"]},tepidness:{n:["tepidness","lukewarmness"]},lukewarmness:{n:["lukewarmness","tepidity","tepidness"]},undiminished:{s:["undiminished","unrelieved"]},repayment:{n:["repayment","quittance"]},recapitulate:{v:["recapitulate","recap"]},stammer:{n:["stammer","stutter"],v:["stammer","v"]},jealous:{s:["jealous","green-eyed","overjealous"]},trustful:{a:["trustful","trusting"]},enduring:{s:["enduring","long-suffering"]},circumlocutious:{s:["circumlocutious","circumlocutory","periphrastic","ambagious"]},unfirm:{s:["unfirm","unsteady"]},disproportionate:{a:["disproportionate","disproportional"]},inequitable:{a:["inequitable","unjust"]},dissimilarity:{n:["dissimilarity","unsimilarity"]},materiel:{n:["materiel","equipage"]},uprightness:{n:["uprightness","rectitude"]},verticality:{n:["verticality","verticalness","erectness","uprightness"]},erectness:{n:["erectness","uprightness"]},impartiality:{n:["impartiality","nonpartisanship"]},unfairness:{n:["unfairness","inequity"]},spotty:{s:["spotty","uneven","scratchy"]},mismatched:{s:["mismatched","uneven"]},patched:{s:["patched","spotty","spotted"]},unbalanced:{a:["unbalanced","imbalanced"],s:["unbalanced","s"]},supine:{s:["supine","resupine"]},flighty:{s:["flighty","flyaway","head-in-the-clouds","scatterbrained"]},unalterable:{a:["unalterable","inalterable"],s:["unalterable","s"]},erring:{s:["erring","error-prone"]},misguided:{s:["misguided","mistaken"]},"ill-conceived":{s:["ill-conceived","misguided"]},falsity:{n:["falsity","falseness"]},outbreak:{n:["outbreak","eruption","irruption"]},eruption:{n:["eruption","eructation","extravasation"]},inmost:{s:["inmost","innermost"]},quintessence:{n:["quintessence","ether"]},milieu:{n:["milieu","surroundings"]},undeserving:{s:["undeserving","unworthy"]},amaranthine:{s:["amaranthine","unfading"]},boorishness:{n:["boorishness","uncouthness"]},euphonious:{a:["euphonious","euphonous"]},euphonic:{a:["euphonic","euphonical"]},silvern:{s:["silvern","silvery"]},unresolved:{s:[_303,"dissonant"],a:[_303,"a"]},unsolved:{a:["unsolved","unresolved"]},rusticity:{n:["rusticity","gaucherie"]},crystallize:{v:["crystallize","crystalize","crystalise","effloresce","crystallise"]},overlooked:{s:["overlooked","unmarked","unnoted"]},tangible:{a:[_534,"touchable"],s:[_534,"s"]},undiscovered:{s:["undiscovered","unexplored"]},undreamed:{s:["undreamed","undreamt","unimagined"]},loosely:{r:["loosely","slackly"]},anomaly:{n:["anomaly","anomalousness"]},innocuous:{s:["innocuous","unobjectionable"]},overabundance:{n:["overabundance","overmuch","overmuchness","superabundance"]},inadequacy:{n:["inadequacy","inadequateness"]},undue:{s:["undue","unjustified","unwarranted"]},irascibility:{n:["irascibility","spleen"]},insensitivity:{n:["insensitivity","insensitiveness"]},barring:{n:["barring","blackball"]},extirpation:{n:["extirpation",_428,"deracination"]},ablation:{n:["ablation","extirpation","excision"]},agonize:{v:["agonize","agonise"]},excusable:{s:["excusable","forgivable","venial"]},inexcusable:{s:["inexcusable","unforgivable"]},accursed:{s:["accursed","accurst","maledict"]},pageant:{n:["pageant","pageantry"]},fostering:{n:["fostering","fosterage"]},remembrance:{n:["remembrance","recollection","anamnesis"]},desirability:{n:["desirability","desirableness"]},profitableness:{n:["profitableness","profitability","gainfulness","lucrativeness"]},inutility:{n:["inutility","uselessness","unusefulness"]},inexpedience:{n:["inexpedience","inexpediency"]},thoroughbred:{n:["thoroughbred","purebred","pureblood"],s:["thoroughbred","s"]},inexperienced:{a:["inexperienced","inexperient"]},implicit:{s:["implicit","unquestioning"],a:["implicit","inexplicit"]},interpreter:{n:["interpreter","translator"]},defenseless:{r:["defenseless","defenceless","defenselessly","defencelessly"],s:["defenseless","defenceless"]},extemporaneously:{r:["extemporaneously","extemporarily","extempore"]},offhand:{r:["offhand","offhanded","offhandedly"],s:["offhand","offhanded"]},outward:{r:["outward","outwards"],s:["outward","s"]},outbound:{s:["outbound","outward","outward-bound"]},inward:{r:["inward","inwards"],s:["inward","s"]},inbound:{s:["inbound","inward"]},colonize:{v:["colonize","colonise"]},suffocation:{n:["suffocation","asphyxiation"]},closefisted:{s:["closefisted","hardfisted","tightfisted"]},spendthrift:{n:["spendthrift","spend-all","spender","scattergood"],s:["spendthrift","s"]},furthest:{r:[_577,"farthest"],s:[_577,"s"]},farthest:{r:[_576,"furthest"],s:[_576,"s"]},outermost:{s:["outermost","outmost"]},exudation:{n:["exudation","transudation"]},exudate:{n:["exudate","exudation"],v:["exudate","v"]},seep:{v:["seep","ooze"]},seepage:{n:["seepage","ooze","oozing"]},sludge:{n:["sludge","slime","goo","goop","gook","guck","gunk","muck","ooze"]},percolation:{n:["percolation","infiltration"]},secretion:{n:["secretion","secernment"]},lacerate:{s:["lacerate","lacerated","mangled","torn"]},jocosely:{r:["jocosely","jocular"]},humorous:{a:["humorous","humourous"]},pliability:{n:["pliability","pliancy","pliantness","suppleness"]},pliancy:{n:["pliancy","pliantness","suppleness"]},ductility:{n:["ductility","ductileness"]},unreality:{n:["unreality","irreality"]},dissentious:{s:["dissentious","divisive","factious"]},bendability:{n:["bendability","pliability"]},incendiary:{s:["incendiary","incitive","inflammatory","instigative","rabble-rousing","seditious"],n:["incendiary","n"]},arsonist:{n:["arsonist","incendiary","firebug"]},adversative:{s:["adversative","oppositive"]},etiolate:{s:["etiolate","etiolated","blanched"]},drudge:{n:["drudge","peon","navvy"],v:["drudge","v"]},lag:{v:["lag","dawdle"],n:["lag","n"]},linger:{v:["linger","dawdle"]},pail:{n:["pail","pailful"]},stave:{n:["stave","lag"]},jaded:{s:["jaded","wearied"]},unblemished:{a:["unblemished","unmarred","unmutilated"]},"all-knowing":{s:["all-knowing","omniscient"]},neglected:{s:["neglected","unattended"]},lowbrow:{s:["lowbrow","lowbrowed","uncultivated"],n:["lowbrow","n"]},philistine:{n:["philistine","anti-intellectual","lowbrow"],s:["philistine","s"]},"anti-intellectual":{s:["anti-intellectual","philistine"],n:["anti-intellectual","n"]},seeded:{s:["seeded","sown"]},unpatriotic:{a:["unpatriotic","disloyal"]},sophistic:{s:["sophistic","sophistical"]},quiver:{v:["quiver","quake","palpitate"],n:["quiver","n"]},vibration:{n:["vibration","quiver","quivering","vibe"]},shaking:{n:["shaking","shakiness","trembling","quiver","quivering","vibration","palpitation"]},oscillation:{n:["oscillation","vibration"]},teeter:{v:["teeter","seesaw","totter"],n:["teeter","n"]},toddle:{v:["toddle","coggle","totter","dodder","paddle","waddle"]},seesaw:{n:["seesaw","teeter","teeter-totter","teetertotter","teeterboard"],v:["seesaw","v"]},"teeter-totter":{v:["teeter-totter","teetertotter","seesaw"],n:["teeter-totter","n"]},brotherly:{a:["brotherly","brotherlike","fraternal"]},fraternal:{a:["fraternal","biovular"]},unappreciated:{s:["unappreciated","unsung","unvalued"]},thankless:{s:["thankless","unappreciated","ungratifying"],a:["thankless","a"]},bigotry:{n:["bigotry","dogmatism"]},rationalism:{n:["rationalism","freethinking"]},imaginative:{s:["imaginative","inventive"]},turnout:{n:[_74,"widening"]},valediction:{n:["valediction","valedictory"]},congee:{v:["congee","conge"],n:["congee","jook"]},conge:{n:["conge","congee"],v:["conge","v"]},outlandishness:{n:["outlandishness","bizarreness","weirdness"]},buttoned:{a:["buttoned","fastened"]},bastioned:{s:["bastioned","fortified"]},insecure:{s:["insecure","unsafe"],a:["insecure","unsafe"]},overrefined:{s:["overrefined","superfine"]},uncritical:{a:["uncritical","noncritical"]},greasy:{s:["greasy","oily","sebaceous","oleaginous"]},blown:{s:["blown","pursy","short-winded","winded"]},lucrative:{s:["lucrative","moneymaking","remunerative"]},anatomic:{a:["anatomic","anatomical"]},"life-giving":{s:["life-giving","vitalizing"]},abysmal:{s:["abysmal","abyssal","unfathomable"]},indefatigably:{r:["indefatigably","tirelessly","inexhaustibly"]},unassailable:{s:["unassailable","unshakable","watertight","bulletproof","untouchable"]},adoring:{s:["adoring","doting","fond","worshipful"]},unfavorable:{a:["unfavorable","unfavourable"]},favoritism:{n:["favoritism","favouritism"]},slaveholder:{n:["slaveholder","slaver"]},satirize:{v:["satirize","satirise","lampoon"]},shaky:{s:["shaky","shivering","trembling"]},rickety:{s:["rickety","shaky","wobbly","wonky","rachitic"]},alluring:{s:["alluring","beguiling","enticing","tempting"]},feasible:{s:["feasible","executable","practicable","viable","workable"]},operable:{s:["operable","practicable"]},impracticable:{s:["impracticable","infeasible","unfeasible","unworkable"]},cleverly:{r:["cleverly","smartly"]},dexterously:{r:["dexterously","dextrously","deftly"]},fief:{n:["fief","feoff"]},sallow:{s:["sallow","sickly"]},forceless:{a:["forceless","unforceful"]},puny:{s:["puny","runty","shrimpy"]},insentient:{a:["insentient","insensate"]},unsusceptible:{a:["unsusceptible","insusceptible"]},pathos:{n:["pathos","poignancy"]},hem:{n:["hem","ahem"]},sociability:{n:["sociability","sociableness"]},leaven:{n:["leaven","leavening"],v:["leaven","v"]},stereotyped:{s:["stereotyped","stereotypic","stereotypical","unimaginative"]},icky:{s:["icky","crappy","lousy","rotten","shitty","stinking","stinky"]},gooey:{s:["gooey","icky"]},miasmic:{s:["miasmic","mephitic"]},miasmal:{s:["miasmal","miasmic","vaporous","vapourous"]},odorless:{a:["odorless","odourless","inodorous"]},perfumed:{s:["perfumed","scented"]},fray:{v:["fray","frazzle"],n:["fray","n"]},frigidity:{n:["frigidity","frigidness"]},filament:{n:["filament","filum"]},flabbiness:{n:["flabbiness","limpness","flaccidity"]},inexactness:{n:["inexactness","inexactitude"]},famished:{s:["famished","ravenous","sharp-set","starved","esurient"]},unbridled:{s:["unbridled","unchecked","uncurbed","ungoverned"]},emotionless:{s:["emotionless","passionless"]},figural:{s:["figural","figurative"]},figurative:{a:["figurative","nonliteral"],s:["figurative","s"]},metaphorical:{s:["metaphorical","metaphoric"]},poetic:{s:["poetic","poetical"],a:["poetic","poetical"]},rasp:{n:["rasp","rasping"]},jag:{n:["jag","dag"]},cusp:{n:["cusp","leaflet"]},leak:{n:["leak","wetting"]},addle:{v:["addle","muddle","puddle"]},muddle:{v:["muddle","puddle"],n:["muddle","n"]},unsanitary:{a:["unsanitary","insanitary","unhealthful"]},incipient:{s:["incipient","inchoate"]},capillary:{s:["capillary","hairlike"]},ostentatious:{s:["ostentatious","pretentious"],a:["ostentatious","pretentious"]},casuistic:{a:["casuistic","casuistical"]},petty:{s:["petty","small-minded"]},fixings:{n:["fixings","trimmings"]},flashiness:{n:["flashiness","garishness","gaudiness","loudness","brashness","meretriciousness","tawdriness","glitz"]},dandified:{s:["dandified","dandyish","foppish"]},inartistic:{s:["inartistic","unartistic"]},bounded:{s:["bounded","delimited"]},impetuousness:{n:["impetuousness","impetuosity"]},braced:{s:["braced","buttressed"]},aflare:{s:["aflare","flaring"]},cheapjack:{s:["cheapjack","shoddy","tawdry"]},"low-key":{s:["low-key","low-keyed","subdued"]},dowdy:{s:["dowdy","frumpy","frumpish"],n:["dowdy","pandowdy"]},dowding:{n:["dowding","dowdy"]},colorless:{a:["colorless","colourless"]},bathetic:{s:["bathetic","drippy","hokey","maudlin","mawkish","kitschy","mushy","schmaltzy","schmalzy","sentimental","sappy","soppy","soupy","slushy"]},sensational:{a:["sensational","sensory"],s:["sensational","s"]},histrionic:{s:["histrionic","melodramatic"]},scoff:{v:["scoff","flout"],n:["scoff","n"]},palpitate:{v:["palpitate","flutter"]},flap:{n:["flap","flapping",_362,"fluttering","flaps"],v:["flap","v"]},malinger:{v:["malinger","skulk"]},lurk:{v:["lurk","skulk"]},savor:{v:["savor","savour"],n:["savor","n"]},blandness:{n:["blandness","insipidity","insipidness"]},boringness:{n:["boringness","dreariness","insipidness","insipidity"]},flavorlessness:{n:["flavorlessness","flavourlessness","savorlessness","savourlessness","tastelessness"]},hegira:{n:["hegira","hejira"]},asinine:{s:["asinine","fatuous","inane"]},rubbishy:{s:["rubbishy","trashy"]},sneer:{n:["sneer","leer"]},freshet:{n:["freshet","spate"]},distraught:{s:["distraught","overwrought"]},anemic:{a:["anemic","anaemic"],s:["anemic","anaemic"]},dregs:{n:["dregs","settlings"]},oscillate:{v:["oscillate","vibrate"]},unsteadiness:{n:["unsteadiness","ricketiness"]},inconstancy:{n:["inconstancy","changefulness"]},faithlessness:{n:["faithlessness","falseness","fickleness","inconstancy"]},steadfastness:{n:["steadfastness","staunchness"]},fixedness:{n:["fixedness","unalterability"]},fluency:{n:["fluency","volubility","articulateness"]},fluidity:{n:["fluidity","fluidness","liquidity","liquidness","runniness"]},nestle:{v:["nestle","snuggle"],n:["nestle","n"]},liquescent:{s:["liquescent","melting"]},solvent:{n:["solvent","dissolvent","dissolver","resolvent"]},crystallization:{n:["crystallization","crystallisation","crystallizing"]},mucky:{s:["mucky","muddy"]},boggy:{s:["boggy","marshy","miry","mucky","muddy","quaggy","sloppy","sloughy","soggy","squashy","swampy","waterlogged"]},addled:{s:["addled","befuddled","muddled","muzzy","woolly","wooly","woolly-headed","wooly-minded"]},pursuer:{n:["pursuer","chaser"]},impersonator:{n:["impersonator","imitator"]},duplicator:{n:["duplicator","copier"]},superficiality:{n:["superficiality","shallowness"]},giddiness:{n:["giddiness","silliness"]},dizziness:{n:["dizziness","giddiness","lightheadedness","vertigo"]},scrounge:{v:["scrounge","forage"]},foraging:{n:["foraging","forage"]},schnorr:{v:["schnorr","shnorr","scrounge","cadge"]},"fine-tune":{v:["fine-tune","tweak"]},brainless:{s:["brainless","headless"]},dislodgment:{n:["dislodgment","dislodgement"]},ouster:{n:["ouster","ousting","ejector"]},instability:{n:["instability","unstableness"]},frowsy:{s:["frowsy","frowzy","slovenly"]},escapade:{n:["escapade","lark"]},abscondment:{n:["abscondment","decampment"]},prohibitive:{s:["prohibitive","prohibitory"]},neutralization:{n:["neutralization","neutralisation","counteraction"]},stoma:{n:["stoma","stomate","pore"]},precursor:{n:["precursor","forerunner"]},predictive:{s:["predictive","prognostic","prognosticative"]},forewarning:{n:["forewarning","premonition"]},formulary:{n:["formulary","pharmacopeia"]},disorganize:{v:["disorganize","disorganise"]},inflexibility:{n:["inflexibility","rigidity","rigidness","inflexibleness"]},rigidity:{n:["rigidity","rigidness"]},formidable:{s:["formidable","redoubtable","unnerving"]},entrench:{v:["entrench","intrench"]},dimness:{n:["dimness","faintness","subduedness","duskiness"]},faintheartedness:{n:["faintheartedness","faintness"]},stained:{s:["stained","varnished"]},contaminated:{s:["contaminated","polluted"]},showery:{s:["showery","rainy"]},uncorrupted:{s:["uncorrupted","unspoiled","undefiled"]},uncontaminated:{s:["uncontaminated","unpolluted"]},substrate:{n:["substrate","substratum"]},caster:{n:["caster","castor"]},raving:{r:["raving","ravingly"]},maniacal:{s:["maniacal","maniac,"]},fraternize:{v:["fraternize","fraternise"]},kittenish:{s:["kittenish","frisky"]},emancipated:{s:["emancipated","liberated"]},gratuitous:{s:["gratuitous","needless","uncalled-for"]},unhampered:{s:["unhampered","unhindered"]},untrammeled:{s:["untrammeled","untrammelled"]},unconfined:{s:["unconfined","unimprisoned"]},fettered:{s:["fettered","shackled"]},choked:{s:["choked","clogged"]},clogged:{s:["clogged","clotted"]},reanimated:{s:["reanimated","revived"]},untired:{s:["untired","unwearied","unweary"]},untested:{s:["untested","untried"]},moldy:{s:["moldy","mouldy","musty"]},fusty:{s:["fusty","musty","frowsty","standpat,","unprogressive","nonprogressive"]},splenic:{a:["splenic","splenetic","lienal"]},neighborly:{s:["neighborly","neighbourly"]},alienated:{s:["alienated","estranged","anomic","disoriented"]},battleful:{s:["battleful","bellicose","combative"]},tomboy:{n:["tomboy","romp","hoyden"]},runaway:{n:["runaway","blowout","romp","laugher","shoo-in","walkaway"]},dallier:{n:["dallier","dillydallier","dilly-dallier","mope","lounger"]},pipit:{n:["pipit","titlark","lark"]},meadowlark:{n:["meadowlark","lark"]},disobedient:{s:["disobedient","unruly"]},parsimonious:{s:["parsimonious","penurious"]},bawdy:{s:["bawdy","off-color","ribald"],n:["bawdy","n"]},bawdry:{n:["bawdry","bawdy"]},rave:{v:["rave","gush"]},rant:{v:["rant","jabber","spout","rave"],n:["rant","n"]},sedateness:{n:["sedateness","staidness","solemnity","solemness"]},jabber:{n:["jabber","jabbering","gabble"],v:["jabber","v"]},jargoon:{n:["jargoon","jargon"]},rattle:{n:["rattle","rattling","rale"]},gibberish:{n:["gibberish","gibber"]},drone:{n:["drone","bourdon"]},monotone:{n:[_374,"drone","droning"],s:[_374,"s"],a:[_374,"a"]},monotonic:{a:["monotonic","monotone"],s:["monotonic","s"]},mercantile:{s:["mercantile","mercenary","moneymaking,"]},greathearted:{s:["greathearted","magnanimous"]},amative:{s:["amative","amorous"]},misquotation:{n:["misquotation","misquote"]},garrulity:{n:["garrulity","garrulousness","loquaciousness","loquacity","talkativeness"]},laconism:{n:["laconism","laconicism"]},lank:{s:["lank","spindly"]},hilarious:{s:["hilarious","screaming,","uproarious"]},perpetuity:{n:["perpetuity","sempiternity"]},cheering:{n:["cheering","shouting"],s:["cheering","s"]},animating:{s:["animating","enlivening"]},unfashionable:{a:["unfashionable","unstylish"]},shagged:{s:["shagged","shaggy"]},bushy:{s:["bushy","shaggy","shaggy-haired","shaggy-coated"]},dizzy:{s:["dizzy","giddy","woozy","vertiginous"]},gyration:{n:["gyration","whirling"]},beetle:{s:["beetle","beetling"],n:["beetle","n"],v:["beetle","v"]},overhang:{v:["overhang","beetle"]},pygmy:{n:["pygmy","pigmy"]},damsel:{n:["damsel","demoiselle","damoiselle","damosel","damozel"]},lass:{n:["lass","lassie"]},beguiled:{s:["beguiled","captivated","charmed","delighted","enthralled","entranced"]},glassy:{s:["glassy","vitreous","vitrified","glazed"]},"run-of-the-mill":{s:["run-of-the-mill","run-of-the-mine","unexceptional","undistinguished"]},pomp:{n:["pomp","eclat"]},gaudery:{n:["gaudery","pomp"]},pretext:{n:["pretext","stalking-horse"]},wale:{n:["wale","welt","weal","wheal","strake"]},dutiful:{s:["dutiful","duteous"]},unserviceable:{s:["unserviceable","unusable","unuseable"]},misdirect:{v:["misdirect","misaddress"]},devoutness:{n:["devoutness","religiousness"]},foramen:{n:["foramen","hiatus"]},discontinuous:{a:["discontinuous","noncontinuous"]},demonstrative:{s:["demonstrative","illustrative"]},exemplifying:{s:["exemplifying","illustrative"]},pictorial:{a:["pictorial","pictural"],s:["pictorial","s"]},clench:{v:["clench","clinch"],n:["clench","n"]},clamp:{n:["clamp","clinch"]},clinch:{n:["clinch","clench"],v:["clinch","v"]},"duty-bound,":{s:["duty-bound,","obliged,"]},unacceptable:{s:["unacceptable","unaccepted"]},gratefulness:{n:["gratefulness","thankfulness","appreciativeness"]},uncompensated:{s:["uncompensated","unsalaried"]},indefensible:{s:["indefensible","insupportable","unjustifiable","unwarrantable","unwarranted","untenable"]},undesired:{s:["undesired","unsought"]},involuntary:{a:["involuntary","nonvoluntary","unvoluntary"]},insatiate:{a:["insatiate","insatiable","unsatiable"]},intolerable:{a:["intolerable","unbearable","unendurable"]},sodomite:{n:["sodomite","sodomist","sod","bugger"]},turf:{n:["turf","sod","sward","greensward"]},clump:{v:["clump","clomp"],n:["clump","n"]},clop:{v:["clop","clump","clunk","plunk"],n:["clop","n"]},"clip-clop":{n:["clip-clop","clippety-clop","clop","clopping","clunking","clumping"]},medley:{n:["medley","potpourri","pastiche"]},complacency:{n:["complacency","complacence","self-complacency","self-satisfaction"]},bestowal:{n:["bestowal","bestowment","conferral","conferment"]},custodian:{n:["custodian","keeper","steward"]},refinisher:{n:["refinisher","renovator","restorer","preserver"]},curator:{n:["curator","conservator"]},blameworthiness:{n:["blameworthiness","culpability","culpableness"]},criminalism:{n:["criminalism","criminality","criminalness"]},offensiveness:{n:["offensiveness","odiousness","distastefulness"]},spurt:{v:["spurt","spirt","gush","spout"],n:["spurt","n"]},sentimentalise:{v:["sentimentalise","sentimentalize","sentimentize","sentimentise"]},sentimentalize:{v:["sentimentalize","sentimentalise"]},squall:{v:["squall","waul","wawl"]},unironed:{a:["unironed","wrinkled"]},wrinkled:{a:["wrinkled","wrinkly"]},smug:{s:["smug","self-satisfied"]},alcyone:{n:["alcyone","halcyon"]},moiety:{n:["moiety","mediety"]},deadlock:{n:["deadlock","impasse","stalemate","standstill"]},workman:{n:["workman","workingman"]},calligraphy:{n:["calligraphy","penmanship","chirography"]},armorer:{n:["armorer","armourer","artificer"]},ungenerous:{a:["ungenerous","meanspirited"]},cumbersome:{s:["cumbersome","cumbrous"]},beamish:{s:["beamish","smiling,","twinkly"]},captivated:{s:["captivated","charmed"]},chancel:{n:["chancel","sanctuary","bema"]},embarrassing:{s:["embarrassing","mortifying"]},knotty:{s:["knotty","snarled","snarly"]},gnarled:{s:["gnarled","gnarly","knotted","knotty","knobbed"]},abundantly:{r:["abundantly","copiously","profusely","extravagantly"]},inoffensive:{a:["inoffensive","unoffending"]},unmelodious:{a:["unmelodious","unmelodic","unmusical"]},tuneless:{a:["tuneless","untuneful","unmelodious"]},lemony:{s:["lemony","lemonlike","sourish","tangy","tart"]},unexploited:{a:["unexploited","undeveloped"]},"full-blown":{s:["full-blown","matured"]},tantalizing:{s:["tantalizing","tantalising","tempting"]},nebulous:{s:[_455,"unfixed"],a:[_455,"a"]},nebular:{a:["nebular","nebulous"],s:["nebular","s"]},cloudlike:{s:["cloudlike","nebular"]},hygienic:{s:["hygienic","hygienical"]},diseased:{s:["diseased","morbid","pathologic","pathological"]},hedonist:{n:["hedonist","pagan"]},gentile:{n:["gentile","non-jew","goy"]},disbelieving:{s:["disbelieving","skeptical","sceptical","unbelieving"]},nescient:{s:["nescient","unbelieving"]},atheistic:{s:["atheistic","atheistical","unbelieving"],a:["atheistic","a"]},atheist:{a:["atheist","atheistic","atheistical"]},gehenna:{n:["gehenna","tartarus"]},hades:{n:["hades","aides","aidoneus"]},canonized:{s:["canonized","canonised","glorified"]},burdened:{s:["burdened","heavy-laden"]},downheartedness:{n:["downheartedness","dejectedness","low-spiritedness","lowness","dispiritedness"]},deepness:{n:["deepness",_498,"profoundness"]},profundity:{n:[_498,"profoundness"]},reconditeness:{n:["reconditeness","abstruseness","abstrusity",_499,"profundity"]},ancestral:{s:["ancestral","hereditary","patrimonial","transmissible"]},catholicism:{n:["catholicism","catholicity"]},heretic:{n:["heretic","misbeliever"]},dissenter:{n:["dissenter",_650,"protester","objector","contestant"]},schismatic:{a:["schismatic","schismatical"]},nonconforming:{s:["nonconforming","nonconformist"]},nonconformist:{a:[_651,"unconformist"],n:[_651,"recusant","chapelgoer"],s:[_651,"s"]},birthright:{n:["birthright","patrimony"]},cryptically:{r:["cryptically","enigmatically","mysteriously"]},airtight:{s:["airtight","air-tight","gas-tight"]},dissident:{s:[_650,"heretical","heterodox"],n:[_650,"n"]},dissentient:{s:["dissentient","dissenting,",_650,"recusant"]},orthodox:{a:["orthodox","jewish-orthodox"]},unmask:{v:["unmask","uncloak"]},rotate:{v:["rotate","circumvolve"]},revolve:{v:["revolve","rotate"]},overshoot:{n:["overshoot","wave-off","go-around"]},beehive:{n:["beehive","hive"]},beefy:{s:["beefy","burly","husky","strapping","buirdly"]},croaky:{s:["croaky","guttural"]},guttural:{n:["guttural","pharyngeal"],s:["guttural","s"]},canescent:{s:["canescent","hoary"]},hoary:{s:["hoary","rusty"]},bugbear:{n:["bugbear","hobgoblin"]},bogeyman:{n:["bogeyman","bugbear","bugaboo","boogeyman","booger"]},scarecrow:{n:["scarecrow","strawman","bird-scarer","scarer"]},solemnize:{v:["solemnize","solemnise"]},erectile:{s:["erectile","cavernous"]},"holier-than-thou":{s:["holier-than-thou","pietistic","pietistical","pharisaic","pharisaical","sanctimonious","self-righteous"]},grumbling:{s:[_586,"rumbling"],n:[_586,"n"]},devout:{s:["devout","god-fearing"]},godly:{s:["godly","reverent","worshipful"]},unholy:{a:["unholy","unhallowed"],s:["unholy","s"]},hearth:{n:["hearth","fireside"]},"cracker-barrel":{s:["cracker-barrel","homespun"]},"homespun,":{s:["homespun,","nubby","nubbly","slubbed","tweedy"]},chastity:{n:["chastity","celibacy"]},insincerity:{n:["insincerity","falseness","hollowness"]},titular:{a:["titular","titulary"],s:["titular","s"]},lodger:{n:["lodger","boarder","roomer"]},dictator:{n:["dictator","potentate"]},conqueror:{n:["conqueror","vanquisher"]},boreal:{s:["boreal","circumboreal"]},stoic:{s:["stoic","stoical"]},undersize:{s:["undersize","undersized"]},kindhearted:{s:["kindhearted","kind-hearted"]},inhumaneness:{n:["inhumaneness","inhumanity"]},humanize:{v:["humanize","humanise"]},civilize:{v:["civilize","civilise"]},christianize:{v:["christianize","christianise"]},barbarize:{v:["barbarize","barbarise"]},vaporific:{s:["vaporific","vapourific","vaporish","vapourish","vaporous","vapourous"]},clammy:{s:["clammy","dank"]},spongy:{s:["spongy","spongelike","squashy","squishy"]},evaporable:{s:["evaporable","vaporific","vapourific","vaporizable","vapourisable","volatilizable","volatilisable"]},jocosity:{n:["jocosity","jocularity"]},jocundity:{n:["jocundity","jocularity"]},jocoseness:{n:["jocoseness","jocosity","merriness","humorousness"]},stroll:{v:["stroll","saunter"],n:["stroll","n"]},prejudicial:{a:["prejudicial","prejudicious"],s:["prejudicial","s"]},cur:{n:["cur","mongrel","mutt"]},sanctimoniousness:{n:["sanctimoniousness","sanctimony"]},personification:{n:["personification","incarnation","prosopopoeia"]},cub:{n:["cub","greenhorn","rookie","lad","laddie","sonny"]},dotage:{n:["dotage","senility"]},echoic:{a:["echoic","imitative","onomatopoeic","onomatopoeical","onomatopoetic"],s:["echoic","echolike"]},apish:{s:["apish","apelike"]},"deep-rooted":{s:["deep-rooted","deep-seated","implanted","ingrained","planted"]},discorporate:{s:["discorporate","unembodied","bodiless","unbodied","disembodied"]},douse:{v:["douse","dowse"]},amenability:{n:["amenability","amenableness","cooperativeness"]},goblin:{n:["goblin","hob","hobgoblin"]},bratwurst:{n:["bratwurst","brat"]},discretionary:{s:["discretionary","discretional"]},prefiguration:{n:["prefiguration","foreshadowing","adumbration"]},immateriality:{n:["immateriality","incorporeality"]},mocking:{s:["mocking",_272,"quizzical"]},"comb-out":{n:["comb-out","teasing"]},prankster:{n:["prankster","cut-up","trickster","tricker","hoaxer"]},incapability:{n:["incapability","incapableness"]},invincible:{s:["invincible","unbeatable","unvanquishable"]},tenable:{s:["tenable","well-founded"]},impertinence:{n:["impertinence","perkiness","pertness","sauciness","archness"]},bumptiousness:{n:["bumptiousness","cockiness","pushiness","forwardness"]},intrusiveness:{n:["intrusiveness","meddlesomeness","officiousness"]},coyness:{n:["coyness","demureness"]},propellant:{s:["propellant","propellent","propelling","propulsive"],n:["propellant","propellent"]},coronation:{n:["coronation","enthronement","enthronization","enthronisation","investiture"]},refrigeration:{n:["refrigeration","infrigidation"]},exorcism:{n:["exorcism","dispossession"]},impersonation:{n:["impersonation","personation"]},tingle:{v:["tingle","prickle"],n:["tingle","n"]},resilience:{n:["resilience","resiliency"]},embryonic:{s:["embryonic","embryotic","embryologic","embryonal"]},deceptiveness:{n:["deceptiveness","obliquity"]},asynclitism:{n:["asynclitism","obliquity"]},inaptness:{n:["inaptness","inappositeness"]},indispose:{v:["indispose","disincline"]},"encircling,":{s:["encircling,","skirting,"]},antithetic:{s:["antithetic","antithetical"]},"ill-sorted":{s:["ill-sorted",_481,"mismated","unsuited"]},contrastive:{s:["contrastive","incompatible"]},uncongenial:{a:["uncongenial","incompatible"],s:["uncongenial","s"]},contrasting:{s:["contrasting","contrastive"]},irreconcilable:{a:["irreconcilable","unreconcilable"]},indelible:{s:["indelible","unerasable"]},effaceable:{s:["effaceable","erasable"]},recoup:{v:["recoup","reimburse"]},disinterest:{n:["disinterest","neutrality"]},moneyed:{a:["moneyed","monied"],s:["moneyed","s"]},undiscriminating:{a:["undiscriminating","indiscriminating"]},transliterate:{v:["transliterate","transcribe"]},"second-rater":{n:["second-rater","mediocrity"]},averageness:{n:["averageness","mediocrity"]},changeableness:{n:["changeableness","changeability"]},ineffable:{s:["ineffable","unnameable","unspeakable","unutterable"]},indefinable:{s:["indefinable","indescribable","ineffable","unspeakable","untellable","unutterable","undefinable"]},inexpressible:{a:["inexpressible","unexpressible"]},unpronounceable:{s:["unpronounceable","unutterable"]},colloquial:{s:["colloquial","conversational"]},ineluctable:{s:["ineluctable","inescapable","unavoidable"]},evitable:{a:["evitable","avoidable","avertible","avertable"]},shamefulness:{n:["shamefulness","disgracefulness","ignominiousness"]},preconception:{n:["preconception","prepossession"]},pestilent:{s:["pestilent","pestilential",_271,"plaguey"]},corrupting:{s:["corrupting","contaminating","degrading"]},infest:{v:["infest","overrun"]},overproduction:{n:["overproduction","overrun"]},deist:{a:["deist","deistic"]},measurable:{a:["measurable","mensurable"]},infiniteness:{n:["infiniteness","infinitude","unboundedness","boundlessness","limitlessness"]},starkness:{n:["starkness","absoluteness","utterness"]},flexion:{n:["flexion","flexure"]},flexure:{n:["flexure","flection","flexion"]},heterosexuality:{n:["heterosexuality","heterosexualism","straightness"]},predomination:{n:["predomination","predominance"]},predominance:{n:["predominance","predomination","prepotency"]},prestige:{n:["prestige","prestigiousness"]},ineffectiveness:{n:["ineffectiveness","ineffectualness","ineffectuality"]},dissociable:{s:["dissociable","separable","severable"]},heir:{n:["heir","inheritor","heritor"]},testator:{n:["testator","testate"]},comradely:{s:["comradely","hail-fellow","hail-fellow-well-met"]},consentaneous:{s:["consentaneous","consentient","unanimous"]},intruder:{n:["intruder","interloper","trespasser"]},blamelessness:{n:["blamelessness","inculpability","inculpableness","guiltlessness"]},archaism:{n:["archaism","archaicism"]},interrogative:{a:["interrogative","interrogatory"],n:["interrogative","n"]},questioning:{n:[_615,"inquiring"],s:[_615,"quizzical"]},dementia:{n:["dementia","dementedness"]},doubting:{s:["doubting",_615,"skeptical","sceptical"]},craziness:{n:["craziness","daftness","flakiness"]},insolvable:{s:["insolvable","unsoluble","unsolvable","unresolvable"]},explainable:{s:["explainable","interpretable"]},outwardly:{r:["outwardly","externally"]},deprecation:{n:["deprecation","denigration"]},intuitive:{s:["intuitive","nonrational","visceral"]},underwrite:{v:["underwrite","subvention","subvent"]},untouched:{s:[_635,"untasted"],a:[_635,"a"]},inviolable:{s:["inviolable","inviolate","sacrosanct"]},conscientiousness:{n:["conscientiousness","painstakingness"]},rascality:{n:["rascality","shiftiness","slipperiness","trickiness"]},prankishness:{n:["prankishness","rascality","roguishness"]},comprehensible:{a:["comprehensible","comprehendible"]},fathomable:{a:["fathomable","plumbable","soundable"]},strictness:{n:["strictness","stringency"]},amused:{s:["amused","diverted","entertained"]},mutually:{r:["mutually","reciprocally"]},interlude:{n:["interlude","intermezzo","entr'acte"]},piracy:{n:["piracy","buccaneering"]},plagiarism:{n:["plagiarism","plagiarization","plagiarisation","piracy"]},intersperse:{v:["intersperse","interlard"]},suture:{n:["suture","sutura"]},simultaneity:{n:["simultaneity","simultaneousness"]},nonintervention:{n:["nonintervention","noninterference"]},bearable:{s:["bearable","endurable","sufferable","supportable"]},dike:{v:["dike","dyke"],n:["dike","n"]},butch:{n:["butch","dike","dyke"],s:["butch","macho"]},moat:{n:["moat","fosse"]},counterspy:{n:["counterspy","mole"]},obviousness:{n:["obviousness","noticeability","noticeableness","patency"]},labyrinthine:{s:["labyrinthine","labyrinthian","mazy"]},exporting:{n:["exporting","exportation"]},exsiccate:{v:["exsiccate","dehydrate","desiccate"]},dehydrate:{v:["dehydrate","desiccate"]},chronically:{r:["chronically","inveterate"]},despiteful:{s:["despiteful","spiteful","vindictive"]},discriminatory:{s:[_564,"invidious","preferential"],a:[_564,"a"]},unsnarling:{n:["unsnarling","untangling","disentanglement","extrication"]},shred:{n:["shred","scintilla","whit","iota","tittle","smidgen","smidgeon","smidgin","smidge"]},jotting:{n:["jotting","jot"]},peaceableness:{n:["peaceableness","peacefulness"]},iridescent:{s:["iridescent","nacreous","opalescent","opaline","pearlescent"]},authorship:{n:["authorship","paternity"]},fatherhood:{n:["fatherhood","paternity"]},reduplication:{n:["reduplication","reiteration"]},anadiplosis:{n:["anadiplosis","reduplication"]},itinerant:{n:["itinerant","gypsy","gipsy"]},erose:{s:["erose","jagged","jaggy","notched","toothed"]},jagged:{s:["jagged","jaggy","scraggy"]},serrate:{s:["serrate","serrated","saw-toothed","toothed","notched"]},jingle:{v:["jingle","jingle-jangle","jangle"],n:["jingle","jangle"]},doggerel:{n:["doggerel","jingle"]},spar:{n:["spar","sparring"]},mummery:{n:["mummery","flummery"]},jibe:{v:["jibe","gybe","jib"],n:["jibe","n"]},afflicted:{s:["afflicted","stricken","impaired"]},epigram:{n:["epigram","quip"]},sermonize:{v:["sermonize","sermonise","preachify","moralize","moralise"]},contrite:{s:["contrite","remorseful","rueful","ruthful"]},jiggle:{v:["jiggle","joggle","wiggle"],n:["jiggle","n"]},joggle:{n:["joggle","jiggle"],v:["joggle","v"]},dowel:{n:["dowel","joggle"]},yankee:{n:["yankee","yank","yankee-doodle","northerner"]},choppy:{s:["choppy","jerky"]},arrhythmic:{s:["arrhythmic","jerking","jerky"]},jollity:{n:["jollity","jolliness","joviality"]},congratulatory:{s:["congratulatory","gratulatory"]},lamenting:{s:["lamenting","wailing","wailful"]},wailing:{n:["wailing","bawling"],s:["wailing","s"]},beseeching:{a:["beseeching","pleading","imploring"]},juridical:{a:["juridical","juridic"]},tidiness:{n:["tidiness","neatness"]},neatness:{n:["neatness","spruceness"]},underbrush:{n:["underbrush","undergrowth","underwood"]},judgeship:{n:["judgeship","judicature"]},magistracy:{n:["magistracy","magistrature"]},reasonableness:{n:["reasonableness","tenability","tenableness","moderateness","modestness"]},boyish:{s:["boyish","boylike","schoolboyish"]},girlish:{s:["girlish","schoolgirlish"]},doddering:{s:["doddering","doddery","gaga","senile"]},outdated:{s:["outdated","out-of-date","superannuated"]},overage:{s:["overage","overaged","superannuated","over-the-hill"]},memento:{n:["memento","souvenir"]},alienage:{n:["alienage","alienism"]},reactive:{s:["reactive","responsive"]},responsive:{a:["responsive","antiphonal"],s:["responsive","s"]},monarchal:{s:["monarchal","monarchical","monarchic"]},swindler:{n:["swindler","defrauder","chiseller","chiseler","gouger","scammer","grifter"]},rascally:{s:["rascally","roguish","scoundrelly","blackguardly"]},loosening:{n:["loosening","laxation"]},drudging:{s:["drudging","laboring","labouring","toiling"]},loiterer:{n:["loiterer","lingerer"]},saunterer:{n:["saunterer","stroller","ambler"]},extralegal:{s:["extralegal","nonlegal"]},ecclesiastical:{a:["ecclesiastical","ecclesiastic"]},priestly:{a:["priestly","priestlike","hieratic","hieratical","sacerdotal"]},laity:{n:["laity","temporalty"]},lameness:{n:["lameness","limping","gimp","gimpiness","gameness","claudication"]},denseness:{n:["denseness","dumbness","slow-wittedness"]},slipping:{s:["slipping","slithering"]},penultimate:{s:["penultimate","next-to-last"],n:["penultimate","n"]},penult:{n:["penult","penultima","penultimate"]},dolorous:{s:["dolorous","dolourous","lachrymose","tearful","weeping"]},lawless:{s:["lawless","outlaw,"]},"wide-open":{s:["wide-open","lawless"]},anarchic:{s:["anarchic","anarchical","lawless"]},chaotic:{s:["chaotic","disorderly","helter-skelter"]},disorderly:{s:["disorderly","higgledy-piggledy","hugger-mugger","jumbled","topsy-turvy"]},shirking:{n:["shirking","slacking","soldiering","goldbricking"]},"tight-fitting":{s:["tight-fitting","tightfitting","skinny"]},scraggy:{s:["scraggy","scraggly","boney","bony","scrawny","skinny","underweight","weedy"]},bony:{a:["bony","boney"],s:["bony","s"]},osseous:{a:["osseous","osteal","bony"]},inscription:{n:["inscription","lettering"]},motto:{n:["motto","slogan","catchword","shibboleth"]},cryptanalytic:{a:["cryptanalytic","cryptographic","cryptographical","cryptologic","cryptological"]},indecipherable:{s:["indecipherable","unclear","undecipherable","unreadable"]},restful:{a:["restful","reposeful","relaxing"]},sleepiness:{n:["sleepiness","drowsiness","somnolence"]},wakefulness:{n:["wakefulness","sleeplessness"]},flightiness:{n:["flightiness","arbitrariness","whimsicality","whimsy","whimsey","capriciousness"]},libertine:{n:["libertine","debauchee","rounder"],s:["libertine","s"]},lewd:{s:["lewd","obscene","raunchy","salacious"]},unaccredited:{s:["unaccredited","unlicensed","unlicenced"]},coma:{n:["coma","comatoseness"]},inanimateness:{n:["inanimateness","lifelessness"]},tying:{n:["tying","ligature"]},splinter:{v:[_647,"sliver"],n:[_647,"sliver"]},sliver:{v:["sliver","splinter"],n:["sliver","n"]},paring:{n:["paring","sliver","shaving"]},holey:{s:["holey","porous"]},porous:{a:["porous","poriferous"],s:["porous","s"]},improbability:{n:["improbability","improbableness"]},inconceivability:{n:["inconceivability","inconceivableness"]},impossibility:{n:["impossibility","impossibleness"]},unlikelihood:{n:["unlikelihood","unlikeliness"]},conceivable:{s:["conceivable","imaginable"]},presumable:{s:["presumable","supposable","surmisable"]},translucent:{s:["translucent","semitransparent"]},hooklike:{s:["hooklike","hooked"]},aquiline:{s:["aquiline","hooked"]},congealed:{s:["congealed","jelled","jellied"]},insoluble:{a:["insoluble","indissoluble"]},grammatical:{a:["grammatical","well-formed","grammatic"]},coagulated:{s:["coagulated","solidified"]},untidiness:{n:["untidiness","messiness"]},coagulate:{s:["coagulate","coagulated","curdled","grumous","grumose"],v:["coagulate","v"]},clot:{v:["clot","coagulate"]},resumption:{n:["resumption","recommencement"]},dialectic:{a:["dialectic","dialectical"]},cloistered:{s:["cloistered","reclusive","secluded","sequestered","cloistral","conventual","monastic","monastical"]},unlaced:{a:["unlaced","untied"],s:["unlaced","s"]},untied:{a:["untied","unfastened"],s:["untied","s"]},"free-swimming":{s:["free-swimming","unattached"]},unattached:{a:["unattached","uncommitted"],s:["unattached","s"]},unbuttoned:{a:["unbuttoned","unfastened"],s:["unbuttoned","unlaced"]},billboard:{n:["billboard","hoarding"]},murmuring:{s:[_587,"susurrant","whispering"],n:[_587,"n"]},murmurous:{s:["murmurous","rustling","soughing","susurrous"]},"deep-set":{s:["deep-set","sunken","recessed"]},godless:{s:["godless","irreverent"]},"complaining,":{a:["complaining,","complaintive"]},soiling:{n:["soiling","soilure","dirtying"]},glazed:{a:["glazed","shiny","glassed"],s:["glazed","s"]},convalescent:{s:["convalescent","recovering"]},accumbent:{s:["accumbent","decumbent","recumbent"]},puppet:{n:["puppet","marionette"]},blotched:{s:["blotched","blotchy","splotched"]},dappled:{s:["dappled","mottled"]},spleen:{n:["spleen","lien"]},diminutiveness:{n:["diminutiveness","minuteness","petiteness","tininess","weeness"]},longevity:{n:["longevity","seniority"]},preponderance:{n:["preponderance","prevalence"]},exterminator:{n:["exterminator","terminator","eradicator"]},sinner:{n:["sinner","evildoer"]},outlaw:{v:["outlaw","criminalize","criminalise","illegalize","illegalise"],n:["outlaw","n"]},virulence:{n:["virulence","virulency"]},controllable:{s:["controllable","governable"]},tamable:{s:["tamable","tameable"]},femininity:{n:["femininity","muliebrity"]},mannerly:{s:["mannerly","well-mannered"]},bandit:{n:["bandit","brigand"]},invader:{n:["invader","encroacher"]},outstation:{n:["outstation","outpost"]},stringency:{n:["stringency","tightness"]},oceanic:{a:["oceanic","pelagic"]},seawater:{n:["seawater","saltwater","brine"]},conjugally:{r:["conjugally","connubial"]},conjugal:{a:["conjugal","connubial"]},unwed:{s:["unwed","unwedded"]},effacement:{n:["effacement","self-effacement"]},girlhood:{n:["girlhood","maidenhood","maidhood"]},myelin:{n:["myelin","myeline","medulla"]},gangrene:{n:[_617,"sphacelus","slough"],v:[_617,"v"]},unmilitary:{a:["unmilitary","nonmilitary"]},calvary:{n:["calvary","martyrdom","golgotha"]},wonderfully:{r:["wonderfully","wondrous","wondrously","superbly","toppingly","marvellously","terrifically","marvelously"]},womanliness:{n:["womanliness","womanlike"]},calculus:{n:["calculus","concretion"]},tartar:{n:["tartar","calculus","tophus"]},tatar:{n:["tatar","tartar"]},incomparable:{a:["incomparable","uncomparable"]},spinner:{n:["spinner","spinster"]},waking:{s:["waking","wakeful"]},bibulous:{s:["bibulous","boozy","drunken","sottish"]},potty:{s:["potty","tiddly","tipsy"],n:["potty","n"]},chamberpot:{n:["chamberpot","potty"]},"tough-minded":{s:["tough-minded","unsentimental"]},starved:{s:["starved","starving"]},baseness:{n:["baseness","sordidness","contemptibility","despicableness","despicability"]},sordidness:{n:["sordidness","squalor","squalidness"]},impecuniousness:{n:["impecuniousness","pennilessness","penuriousness"]},pragmatic:{a:[_600,"pragmatical"],s:[_600,"s"]},mediator:{n:["mediator","go-between","intermediator","intermediary","intercessor"]},conciliator:{n:["conciliator","make-peace","pacifier","peacemaker","reconciler"]},hypochondriac:{s:["hypochondriac","hypochondriacal"]},rhythmical:{a:["rhythmical","rhythmic"]},psychic:{s:["psychic","psychical"]},marketable:{s:["marketable","merchantable","sellable","vendable","vendible"]},unmarketable:{s:["unmarketable","unmerchantable","unvendible"]},materialistic:{s:["materialistic","mercenary","worldly-minded"]},hireling:{n:["hireling","pensionary"]},shopkeeper:{n:["shopkeeper","tradesman","storekeeper"]},huckster:{n:[_269,"cheap-jack"],v:[_269,"v"]},pitilessness:{n:["pitilessness","ruthlessness"]},physiologic:{s:["physiologic","physiological"]},quackery:{n:["quackery","empiricism"]},empiricism:{n:["empiricism","sensationalism"]},charlatanism:{n:["charlatanism","quackery"]},preacher:{n:["preacher","sermonizer","sermoniser"]},humanitarianism:{n:["humanitarianism","humanism"]},niggard:{n:["niggard","skinflint","scrooge","churl"]},legation:{n:["legation","legateship"]},movable:{s:["movable","moveable","transferable","transferrable","transportable"],n:["movable","n"]},chattel:{n:["chattel","movable"]},unvaried:{a:["unvaried","unvarying"]},impious:{s:["impious","undutiful"]},maternally:{r:["maternally","motherly"]},enate:{s:["enate","enatic","maternal,"],n:["enate","matrikin","matrisib"]},agnate:{s:["agnate","agnatic","paternal"],n:["agnate","patrikin","patrisib"]},fatherly:{s:["fatherly","fatherlike"]},numerousness:{n:["numerousness","numerosity","multiplicity"]},stellar:{a:["stellar","astral"]},symphonic:{s:["symphonic","symphonious"]},aphonic:{s:["aphonic","voiceless"]},breathed:{s:["breathed","voiceless"]},disenfranchised:{a:["disenfranchised","disfranchised",_358,"voteless"]},unanswered:{s:["unanswered","unreciprocated","unrequited"]},allegorical:{s:["allegorical","allegoric"]},nawab:{n:["nawab","nabob"]},viceroy:{n:["viceroy","vicereine"]},unbleached:{s:["unbleached","uncolored","undyed"]},uncolored:{a:["uncolored","uncoloured"],s:["uncolored","s"]},natal:{n:["natal","kwazulu-natal"]},seasickness:{n:["seasickness","naupathia"]},queasiness:{n:["queasiness","squeamishness","qualm"]},flawlessly:{r:["flawlessly","cleanly"]},indispensability:{n:["indispensability","indispensableness","vitalness"]},dispensability:{n:["dispensability","dispensableness"]},assertive:{a:["assertive","self-asserting","self-assertive"]},attributive:{a:["attributive","prenominal"]},brash:{s:["brash","cheeky","nervy"]},edgy:{s:["edgy","high-strung","jittery","jumpy","nervy","overstrung","restive","uptight"]},neuter:{s:["neuter","sexless"],v:["neuter","v"]},"avowed,":{s:["avowed,","professed,"]},newfangled:{s:["newfangled","new-fangled"]},aristocrat:{n:["aristocrat","patrician"]},clatter:{v:["clatter","clack","brattle"]},aphonia:{n:["aphonia","voicelessness"]},rackety:{s:["rackety","rip-roaring","uproarious"]},ostensible:{s:["ostensible","ostensive"]},dulled:{s:["dulled","benumbed","greyed"]},blunted:{s:["blunted","dulled"]},paralytic:{s:["paralytic","paralyzed"],a:["paralytic","paralytical"]},aweless:{s:["aweless","awless","disrespectful"]},angular:{a:["angular","angulate"]},unblinking:{s:["unblinking","unflinching","unintimidated","unshrinking"]},heady:{s:["heady","intoxicating"]},casually:{r:["casually","nonchalantly"]},undisclosed:{s:["undisclosed","unrevealed"]},tenure:{n:["tenure","incumbency"]},occupancy:{n:["occupancy","tenancy"]},eviction:{n:["eviction","dispossession"]},acceptability:{n:["acceptability","acceptableness"]},assaultive:{s:["assaultive","attacking,"]},incursive:{s:["incursive","invading","invasive"]},unstudied:{a:["unstudied","uncontrived"]},almighty:{s:["almighty","all-powerful","omnipotent"],n:["almighty","n"]},impervious:{a:["impervious","imperviable"]},barricaded:{s:["barricaded","barred","blockaded"]},unseasonableness:{n:["unseasonableness","untimeliness"]},inopportuneness:{n:["inopportuneness","untimeliness"]},realism:{n:[_602,"pragmatism"]},platonism:{n:["platonism","realism"]},naturalism:{n:["naturalism","realism"]},delphic:{s:["delphic","oracular"],a:["delphic","delphian"]},menopause:{n:["menopause","climacteric"]},ornamentation:{n:["ornamentation","embellishment"]},embellishment:{n:["embellishment","embroidery"]},quietness:{n:["quietness","soundlessness"]},highjacker:{n:["highjacker","highwayman","hijacker"]},environs:{n:["environs","purlieu"]},uncollected:{a:["uncollected","ungathered"]},undischarged:{s:["undischarged","unexploded"]},"re-entrant":{a:["re-entrant","reentrant"]},particularity:{n:["particularity","specialness"]},overweening:{s:["overweening","uppity"]},"appeasing,":{s:["appeasing,","placating","placative","placatory"]},aggravating:{s:["aggravating","exacerbating","exasperating"]},exasperating:{s:["exasperating","infuriating","maddening","vexing"]},placation:{n:["placation","conciliation","propitiation"]},hostilities:{n:["hostilities","belligerency"]},paean:{n:["paean","pean"]},idolater:{n:["idolater","idolizer","idoliser"]},paganism:{n:["paganism","heathenism"]},flatterer:{n:["flatterer","adulator"]},sycophant:{n:["sycophant","toady","crawler","lackey","ass-kisser"]},partaker:{n:["partaker","sharer"]},impassable:{a:["impassable","unpassable"]},pathway:{n:["pathway","footpath"]},pathless:{s:["pathless","roadless","trackless","untracked","untrod","untrodden"]},disparateness:{n:["disparateness","distinctiveness"]},punitive:{a:["punitive","punitory"]},retributive:{s:["retributive","retributory","vindicatory"]},retaliatory:{s:["retaliatory","retaliative","retributive","retributory","vindicatory"]},heartlessness:{n:["heartlessness","coldheartedness","hardheartedness"]},carefree:{s:["carefree","devil-may-care","freewheeling","happy-go-lucky","harum-scarum","slaphappy","unworried"]},recognizable:{s:["recognizable","recognisable","placeable"]},exhortative:{s:["exhortative","exhortatory","hortative","hortatory"]},blemished:{s:["blemished","flawed"]},kinky:{s:["kinky","perverted"]},spoiled:{s:["spoiled","spoilt"]},"far-out":{s:["far-out","kinky","offbeat","quirky","way-out"]},marred:{s:["marred","scarred"]},faultlessness:{n:["faultlessness","impeccability"]},recurring:{s:["recurring","revenant"]},indefatigability:{n:["indefatigability","indefatigableness","tirelessness"]},fitfulness:{n:["fitfulness","jerkiness"]},turbidity:{n:["turbidity","turbidness"]},flippancy:{n:["flippancy","light-mindedness"]},theorist:{n:["theorist","theoretician","theorizer","theoriser","idealogue"]},speculator:{n:["speculator","plunger"]},ungodliness:{n:["ungodliness","godlessness"]},mercilessness:{n:["mercilessness","unmercifulness"]},truculence:{n:["truculence","truculency"]},rhyme:{v:["rhyme","rime"],n:["rhyme","rime"]},clannish:{s:["clannish","cliquish","clubby","snobbish","snobby"]},passover:{n:["passover","pesach","pesah"]},precognition:{n:["precognition","foreknowledge"]},postscript:{n:["postscript","ps"]},epilogue:{n:["epilogue","epilog"]},preparatory:{s:["preparatory","preparative","propaedeutic"]},immediacy:{n:["immediacy","immediateness","instantaneousness","instancy"]},boastfulness:{n:["boastfulness","vainglory"]},engraved:{s:["engraved","etched","graven","incised","inscribed"]},mispronounce:{v:["mispronounce","misspeak"]},strangle:{v:[_355,"strangulate","throttle"]},chivalry:{n:["chivalry","gallantry","politesse","knightliness"]},pusillanimity:{n:["pusillanimity","pusillanimousness"]},undecomposed:{s:["undecomposed","incorrupt"]},haphazard:{r:["haphazard","haphazardly"],s:["haphazard","slapdash","slipshod","sloppy","hit-or-miss"]},cantankerous:{s:["cantankerous","crotchety","ornery"]},"bloody-minded":{s:["bloody-minded","cantankerous"]},disgruntled:{s:["disgruntled","dissatisfied"]},catechize:{v:["catechize","catechise"]},yelling:{n:["yelling","shouting"]},flavorful:{s:["flavorful","flavourful","flavorous","flavourous","flavorsome","flavoursome","sapid","saporous"]},lackluster:{s:["lackluster","lacklustre","lusterless","lustreless"]},reunify:{v:["reunify","reunite"]},appeasement:{n:["appeasement","calming"]},incurability:{n:["incurability","incurableness"]},appropriateness:{n:["appropriateness","rightness"]},irreligiousness:{n:["irreligiousness","irreligion"]},audition:{n:["audition","tryout"]},disownment:{n:["disownment","disowning"]},impenitence:{n:["impenitence","impenitency"]},scurrility:{n:["scurrility","billingsgate"]},balking:{s:["balking","balky"]},reconsideration:{n:["reconsideration","afterthought","rethink"]},reappear:{v:["reappear","re-emerge"]},gauze:{n:["gauze","netting","veiling"]},bastardy:{n:["bastardy","illegitimacy"]},indecency:{n:["indecency","impropriety"]},impropriety:{n:["impropriety","improperness"]},commandeer:{v:["commandeer","hijack","highjack","pirate"]},pirate:{n:["pirate","buccaneer"],v:["pirate","v"]},plagiarist:{n:["plagiarist","plagiarizer","plagiariser","pirate"]},thief:{n:["thief","stealer"]},footpad:{n:["footpad","padder"]},confirmable:{s:["confirmable","verifiable","falsifiable"]},amorphous:{s:["amorphous","formless","shapeless","uncrystallized","uncrystallised","unstructured"]},sylvan:{s:["sylvan","silvan"],n:["sylvan","silvan"]},pastorale:{n:["pastorale","pastoral","idyll","idyl"]},hoydenish:{s:["hoydenish","tomboyish"]},nullification:{n:["nullification","override"]},"lay-up":{n:["lay-up","layup"]},opportuneness:{n:["opportuneness","patness","timeliness"]},seasonableness:{n:["seasonableness","timeliness"]},unsuitability:{n:["unsuitability","unsuitableness","ineptness"]},patriotism:{n:["patriotism","nationalism"]},altruistic:{a:["altruistic","selfless"]},resonate:{v:["resonate","vibrate"]},exhibitionism:{n:["exhibitionism","immodesty"]},ghoulish:{s:["ghoulish","morbid"]},meaningless:{a:["meaningless","nonmeaningful"],s:["meaningless","s"]},aching:{s:["aching","achy"],n:["aching","n"]},bolshevism:{n:["bolshevism","collectivism","sovietism"]},awfulness:{n:["awfulness","dreadfulness","horridness","terribleness"]},galvanizer:{n:["galvanizer","galvaniser","inspirer"]},materiality:{n:["materiality","physicalness","corporeality","corporality"]},unfurl:{v:["unfurl","unroll"]},resonant:{s:["resonant","resonating","resounding","reverberating","reverberative"]},stoutness:{n:["stoutness","stalwartness"]},tendon:{n:["tendon","sinew"]},invalidity:{n:["invalidity","invalidness"]},unliterary:{s:["unliterary","nonliterary"]},syncope:{n:["syncope","syncopation"]},acquiescent:{s:["acquiescent","biddable"]},ingratiating:{s:["ingratiating","insinuating","ingratiatory"]},ascendant:{s:["ascendant","ascendent","dominating","ascensive"],n:["ascendant","ascendent"]},thirst:{n:["thirst","thirstiness"],v:["thirst","v"]},disharmony:{n:["disharmony","inharmoniousness"]},uncommunicative:{a:["uncommunicative","incommunicative"]},communicative:{a:["communicative","communicatory"]},tactile:{s:["tactile","tactual"],a:["tactile","a"]},haptic:{a:["haptic","tactile","tactual"]},certitude:{n:["certitude","cocksureness","overconfidence"]},adventurousness:{n:["adventurousness","venturesomeness"]},tightness:{n:[_6,"tautness"]},constriction:{n:["constriction",_6,"coarctation","bottleneck","chokepoint"]},determent:{n:["determent","deterrence","intimidation"]},bullying:{n:["bullying","intimidation"],s:["bullying","s"]},blustery:{s:["blustery","bullying"]},censoring:{n:["censoring","censorship"]},eon:{n:["eon","aeon"]},coincidentally:{r:["coincidentally","coincidently"]},variously:{r:["variously","diversely","multifariously"]},sectional:{s:["sectional","sectioned"]},convolve:{v:["convolve","convolute"]},ubiquity:{n:["ubiquity","ubiquitousness","omnipresence"]},unction:{n:["unction","inunction","smarm","fulsomeness"]},fulsomeness:{n:["fulsomeness","oiliness","oleaginousness","smarminess","unctuousness","unction"]},anointing:{n:["anointing","anointment"]},unflattering:{a:["unflattering","uncomplimentary"]},tableland:{n:["tableland","plateau"]},anisometric:{s:["anisometric","unsymmetrical"]},unsymmetric:{s:["unsymmetric","unsymmetrical"]},diversification:{n:["diversification","variegation"]},perpendicular:{n:["perpendicular","english-gothic"],a:["perpendicular","a"]},anatropous:{a:["anatropous","inverted"]},inverted:{s:["inverted","upside-down"],a:["inverted","a"]},serviceability:{n:["serviceability","serviceableness","usableness","useableness","usability"]},unprofitableness:{n:["unprofitableness","unprofitability"]},brimful:{s:["brimful","brimfull","brimming"]},impishness:{n:["impishness","mischievousness","puckishness","whimsicality"]},varicolored:{s:["varicolored","varicoloured","variegated"]},streaked:{s:["streaked","streaky"]},salable:{a:["salable","saleable"]},inevitability:{n:["inevitability","inevitableness"]},epistolary:{s:["epistolary","epistolatory"]},decadent:{s:["decadent","fin-de-siecle"]},plumb:{r:["plumb","plum"]},haziness:{n:["haziness","mistiness","steaminess","vaporousness","vapourousness"]},lidless:{s:["lidless","sleepless"]},maidenlike:{s:["maidenlike","maidenly"]},emasculate:{v:["emasculate",_244,"demasculinize","demasculinise"],s:["emasculate","s"]},malignancy:{n:["malignancy","malignance"]},obsessed:{s:["obsessed","possessed,"]},sleepy:{s:["sleepy","sleepy-eyed","sleepyheaded"]},plodding:{n:[_579,"plod"],s:[_579,"s"]},tread:{v:["tread","trample"],n:["tread","n"]},"black-and-blue":{s:["black-and-blue","livid"]},aggressiveness:{n:["aggressiveness","belligerence","pugnacity"]},belligerence:{n:["belligerence","belligerency"]},voucher:{n:["voucher","verifier"]},unsuspecting:{s:["unsuspecting","unsuspicious"]},snooze:{v:["snooze","drowse","doze"],n:["snooze","n"]},doze:{n:["doze","drowse"],v:["doze","v"]},nap:{n:["nap","catnap","snooze"],v:["nap","catnap"]},napoleon:{n:["napoleon","nap"]},slumberous:{s:["slumberous","slumbery","slumbrous","somnolent"]},sob:{n:["sob","sobbing"]},handily:{r:["handily","conveniently"]},"snow-white":{s:["snow-white","snowy"]},"snow-clad":{s:["snow-clad","snow-covered","snowy"]},undisciplined:{s:["undisciplined","ungoverned"]},uncorrected:{s:["uncorrected","undisciplined"]},serpentine:{s:["serpentine","snaky","snakelike"]},miscalculation:{n:["miscalculation","misreckoning","misestimation"]},waggery:{n:["waggery","waggishness"]},testifier:{n:["testifier","deponent","deposer"]},ironic:{s:["ironic","ironical"]},maleness:{n:["maleness","masculinity"]},cosmos:{n:["cosmos","cosmea"]},placidity:{n:["placidity","placidness"]},"pent-up":{s:["pent-up","repressed"]},festoon:{n:["festoon","festoonery"]},contorted:{s:["contorted","writhed","writhen"]},callowness:{n:["callowness","jejuneness","juvenility"]},escapist:{n:["escapist","dreamer"]},idealist:{n:["idealist","dreamer"]},baldric:{n:["baldric","baldrick"]},rattlebrained:{s:["rattlebrained","rattlepated","scatterbrained","scatty"]},conscienceless:{s:["conscienceless","unconscionable"]},cabbage:{n:["cabbage","chou"]},tipple:{v:["tipple","bib"]},demarcate:{v:["demarcate","delimit","delimitate"]},subtend:{v:["subtend","delimit"]},gulping:{n:["gulping","swilling","guzzling"]},convolute:{s:["convolute","convoluted"]},wiggle:{n:["wiggle","wriggle","squirm"]},pleach:{v:["pleach","plash"]},sough:{v:["sough","purl"]},whirlpool:{n:["whirlpool","vortex","maelstrom"]},doodad:{n:["doodad","doohickey","doojigger","gimmick","gizmo","gismo","gubbins","thingamabob","thingumabob","thingmabob","thingamajig","thingumajig","thingmajig","thingummy","whatchamacallit","whatchamacallum","whatsis","widget"]},bung:{n:["bung","spile"]},panorama:{n:["panorama","cyclorama","diorama"]},checker:{v:["checker","chequer"],n:["checker","chequer"]},"plug-in":{n:["plug-in","add-on"]},saddleback:{n:["saddleback","saddle"]},visor:{n:["visor","vizor"]},outskirt:{n:["outskirt","fringe"]},clap:{v:["clap","spat"]},clack:{n:["clack","clap"]},gonorrhea:{n:["gonorrhea","gonorrhoea","clap"]},slapdash:{r:["slapdash","slam-bang"]},snout:{n:["snout","neb","rostrum"]},woodpecker:{n:["woodpecker","peckerwood","pecker"]},owl:{n:["owl","hooter"]},snob:{n:["snob","prig","snot","snoot"]},whizz:{v:["whizz","whiz","whirr","whir","birr","purr"]},counterbore:{n:["counterbore","countersink"]},memorialize:{v:["memorialize","memorialise"]},immortalize:{v:["immortalize","immortalise","eternize","eternise","eternalize","eternalise"]},severalize:{v:["severalize","severalise"]},lollipop:{n:["lollipop","sucker"]},sulfurous:{a:["sulfurous","sulphurous"]},paneling:{n:["paneling","panelling","pane"]},demigod:{n:["demigod","superman","ubermensch"]},troll:{n:["troll","trolling"]},deplume:{v:["deplume","displume"]},plop:{r:["plop","plunk"]},plunk:{n:["plunk","plunker"]},countercurrent:{n:["countercurrent","crosscurrent"]},whack:{v:["whack","wham","whop","wallop"]},damned:{r:["damned","damnably","cursedly"]},goddam:{r:["goddam","goddamn","goddamned"]},splash:{v:["splash","splosh","slosh","slush"],n:["splash","splashing","plash"]},vest:{v:["vest","robe"],n:["vest","waistcoat"]},singlet:{n:["singlet","vest","undershirt"]},bitty:{s:["bitty","bittie","teensy","teentsy","teeny","wee","weeny","weensy","teensy-weensy","teeny-weeny","itty-bitty","itsy-bitsy"]},"activating,":{s:["activating,","actuating,"]},acidify:{v:["acidify","acetify"]},hovel:{n:["hovel","hut","hutch","shack","shanty"]},groom:{v:["groom","neaten"],n:["groom","bridegroom"]},stableman:{n:["stableman","stableboy","groom","hostler","ostler"]},tornado:{n:["tornado","twister"]},resect:{v:["resect","eviscerate"]},sleeper:{n:["sleeper","slumberer"]},huff:{v:["huff","snort"],n:["huff","miff"]},sniff:{v:["sniff","whiff","sniffle"]},claw:{n:["claw","chela","nipper","pincer"]},cultivator:{n:["cultivator","tiller"]},scuffle:{v:[_175,"tussle"]},hassle:{n:["hassle",_175,"tussle","dogfight","rough-and-tumble"]},naturalize:{v:["naturalize","naturalise"]},translator:{n:["translator","transcriber"]},"over-correct":{v:["over-correct","overcompensate"]},inwardness:{n:["inwardness","internality"]},nub:{n:["nub","stub","nubble"]},mantel:{n:["mantel","mantelpiece","mantle","mantlepiece","chimneypiece"]},mantle:{n:["mantle","pallium"]},"carry-over":{n:["carry-over","carry-forward"]},baste:{v:["baste","tack"],n:["baste","basting","tacking"]},tack:{n:["tack","tacking"]},skylight:{n:["skylight","fanlight"]},pout:{v:["pout","mop","mow"],n:["pout","moue"]},eelpout:{n:["eelpout","pout"]},panoptic:{s:["panoptic","panoptical"]},circularize:{v:["circularize","circularise"]},skunk:{n:["skunk","polecat"]},shutout:{n:["shutout","skunk"]},supercharge:{v:["supercharge","pressurize","pressurise"]},barbel:{n:["barbel","feeler"]},greyback:{n:["greyback","grayback"]},exteriorize:{v:["exteriorize","exteriorise","externalize","externalise","objectify"]},aerie:{n:["aerie","aery","eyrie","eyry"]},canasta:{n:["canasta","meld"]},spiel:{n:["spiel","patter"]},getaway:{n:["getaway","lam"]},subsidization:{n:["subsidization","subsidisation"]},melanize:{v:["melanize","melanise"]},agedness:{n:["agedness","senescence"]},pus:{n:["pus","purulence","suppuration","ichor","sanies","festering"]},reduplicate:{v:["reduplicate","geminate"]},conflagration:{n:["conflagration","inferno"]},carryall:{n:["carryall","holdall","tote"]},ambiance:{n:["ambiance","ambience"]},gangplank:{n:["gangplank","gangboard","gangway"]},unloose:{v:["unloose","unloosen"]},sacking:{n:["sacking","bagging"]},intoxicant:{s:["intoxicant","intoxicating"]},shading:{n:["shading","blending"]},portmanteau:{n:["portmanteau","gladstone"]},eunuch:{n:["eunuch","castrate"]},channelize:{v:["channelize","channelise"]},commutation:{n:["commutation","re-sentencing","commuting"]},reliever:{n:["reliever","fireman","allayer","comforter"]},"down-to-earth":{s:["down-to-earth","earthy"]},spiritualistic:{a:["spiritualistic","spiritualist"]},hairdo:{n:["hairdo","hairstyle","coiffure","coif"]},beading:{n:["beading","bead","beadwork","astragal"]},pillar:{n:["pillar","mainstay"]},linchpin:{n:["linchpin","lynchpin"]},shimmy:{v:["shimmy","wobble"]},wobble:{v:["wobble","coggle"]},slenderize:{v:["slenderize","slenderise"]},animateness:{n:["animateness","aliveness","liveness"]},nodule:{n:["nodule","tubercle"]},plaguey:{r:["plaguey","plaguy","plaguily"]},rationalize:{v:["rationalize","rationalise"]},piquancy:{n:["piquancy","piquance","piquantness"]},bladderwrack:{n:["bladderwrack","tang"]},trigonometry:{n:["trigonometry","trig"]},grazing:{n:["grazing","shaving","skimming"]},applicator:{n:["applicator","applier"]},misfire:{n:["misfire","dud"]},tasting:{n:["tasting","savoring","savouring","relishing","degustation"]},wampum:{n:["wampum","peag","wampumpeag"]},sapidity:{n:["sapidity","sapidness"]},antiaircraft:{n:["antiaircraft","flak","flack","pom-pom","ack-ack"]},underhung:{s:["underhung","undershot","underslung"]},molt:{n:["molt","molting","moult","moulting","ecdysis"]},wick:{n:["wick","taper"]},munition:{n:["munition","ordnance"]},sharpshoot:{v:["sharpshoot","snipe"]},initialize:{v:["initialize","initialise"]},outmaneuver:{v:["outmaneuver","outmanoeuvre","outsmart"]},throb:{n:["throb","throbbing","pounding"]},ticktock:{n:["ticktock","tocktact","tictac"]},strum:{v:["strum","thrum"]},cockroach:{n:["cockroach","roach"]},classy:{s:["classy","posh","swish"]},swoosh:{n:["swoosh","whoosh"]},pedal:{n:["pedal","treadle"]},trump:{v:["trump","ruff"]},ruff:{n:["ruff","trumping"]},immobilize:{v:["immobilize","immobilise"]},snarl:{v:["snarl","embrangle"]},shooter:{n:[_317,"crap-shooter"]},taw:{n:["taw","shooter"]},attester:{n:["attester","attestant"]},squiggle:{n:["squiggle","curlicue"]},vocalize:{v:["vocalize","vocalise","phonate","vowelize","vowelise"]},postulation:{n:["postulation","predication"]},hindquarters:{n:["hindquarters","croup","croupe","rump"]},fictionalization:{n:["fictionalization","fictionalisation"]},interlocutor:{n:["interlocutor","middleman"]},jobber:{n:["jobber","middleman","wholesaler"]},redact:{n:["redact","redactor","reviser","rewriter"]},subsume:{v:["subsume","colligate"]},manikin:{n:["manikin","mannikin","homunculus"]},watchman:{n:["watchman","watcher"]},"lotus-eater":{n:["lotus-eater","stargazer"]},cautionary:{s:["cautionary","prophylactic"]},slash:{v:["slash","gash"],n:["slash","gash"]},undersell:{v:["undersell","undercut"]},tenderloin:{n:["tenderloin","undercut"]},telescoped:{s:["telescoped","shortened"]},"sawed-off":{s:["sawed-off","sawn-off","shortened"]},chomp:{v:["chomp","champ"]},nosh:{v:["nosh","snack"]},attractor:{n:["attractor","attracter"]},gilt:{n:["gilt","gilding"]},balderdash:{n:["balderdash","fiddle-faddle","piffle"]},reflexive:{s:["reflexive","self-referent"]},mechanization:{n:["mechanization","mechanisation"]},"self-propelled":{s:["self-propelled","self-propelling"]},useable:{s:["useable","usable"]},sedan:{n:["sedan","saloon"]},terrorization:{n:["terrorization","terrorisation","frightening"]},electrocute:{v:["electrocute","fry"]},formalize:{v:["formalize","formalise"]},gravely:{r:["gravely","soberly","staidly"]},hunch:{v:["hunch","hump"]},grounding:{n:["grounding","earthing"]},sauk:{n:["sauk","sac"]},theca:{n:["theca","sac"]},galvanize:{v:["galvanize","galvanise"]},kickoff:{n:["kickoff","send-off","start-off"]},soapsuds:{n:["soapsuds","suds","lather"]},equalizer:{n:["equalizer","equaliser"]},residual:{a:["residual","residuary"]},stabilize:{v:["stabilize","stabilise"]},doughnut:{n:["doughnut","donut","sinker"]},stria:{n:["stria","striation"]},desexualize:{v:["desexualize","desexualise"]},lattice:{n:["lattice","latticework","fretwork"]},faucet:{n:["faucet","spigot"]},blip:{n:["blip","pip"]},activate:{v:["activate","aerate"]},borderline:{s:["borderline","marginal"]},fringy:{s:["fringy","marginal"]},cask:{n:["cask","caskful"]},chiffonier:{n:["chiffonier","commode"]},sewer:{n:["sewer","sewerage","cloaca"]},manger:{n:["manger","trough"]},tibia:{n:["tibia","shinbone","shin"]},shinny:{n:["shinny","shinney"]},splutter:{v:[_620,"sputter"]},sputter:{v:[_365,"splutter"],n:[_365,"splutter"]},incrustation:{n:["incrustation","encrustation"]},violator:{n:["violator","debaucher","ravisher"]},kris:{n:["kris","creese","crease"]},crab:{n:["crab","crabmeat"]},stomachache:{n:["stomachache","bellyache","gastralgia"]},sweetening:{n:["sweetening","sweetener"]},pestle:{n:["pestle","muller","pounder"]},dais:{n:["dais","podium","pulpit","rostrum","ambo","stump","soapbox"]},gong:{n:["gong","tam-tam"]},plication:{n:["plication","pleating"]},dumpy:{s:["dumpy","podgy","pudgy","tubby","roly-poly"]},lowset:{s:["lowset","low-set"]},fathead:{n:["fathead","goof","goofball","bozo","jackass","goose","cuckoo","twat","zany"]},jacks:{n:["jacks","jackstones","knucklebones"]},sodomy:{n:["sodomy","buggery"]},munro:{n:["munro","saki"]},drinkable:{a:["drinkable","potable"]},anticipant:{s:["anticipant","anticipative","expectant"]},freehand:{s:["freehand","freehanded"]},"self-aggrandizing":{a:["self-aggrandizing","self-aggrandising"]},trillion:{n:["trillion","1000000000000"]},baton:{n:["baton","wand"]},snicker:{n:["snicker","snort","snigger"]},snowflake:{n:["snowflake","flake"]},speckle:{v:["speckle","bespeckle"]},stipple:{v:["stipple","speckle"]},staining:{n:["staining","spotting","maculation"]},scam:{n:["scam","cozenage"]},jaundice:{n:["jaundice","icterus"]},prickliness:{n:["prickliness","bristliness","spininess","thorniness"]},spinous:{a:["spinous","spiny"]},farinaceous:{s:["farinaceous","coarse-grained","grainy","granular","granulose","gritty","mealy"]},feisty:{s:["feisty","plucky","spunky"]},flaky:{s:["flaky","flakey"],a:["flaky","flakey"]},"twenty-one":{s:["twenty-one","21","xxi"],n:["twenty-one","21","xxi"]},quadrilateral:{n:["quadrilateral","quadrangle","tetragon"]},pillory:{v:["pillory","gibbet"]},"heavy-handed":{s:["heavy-handed","roughshod"]},clangor:{v:["clangor","clangour"]},periwinkle:{n:["periwinkle","winkle"]},blinking:{s:["blinking","winking"]},swank:{s:["swank","swanky"]},stymie:{n:["stymie","stymy"]},obstructionist:{n:["obstructionist","obstructor","obstructer","resister","thwarter"]},ruddiness:{n:["ruddiness","rosiness"]},blizzard:{n:["blizzard","snowstorm"]},tipster:{n:["tipster","tout"]},tout:{n:["tout","touter"]},jactitation:{n:["jactitation","jactation"]},turnaround:{n:["turnaround","turnround"]},retroversion:{n:["retroversion","retroflection","retroflexion"]},atavistic:{s:["atavistic","throwback,"]},atavist:{n:["atavist","throwback"]},docking:{n:["docking","moorage","dockage"]},sorrel:{s:["sorrel","brownish-orange"]},roselle:{n:["roselle","rozelle","sorrel"]},oxalis:{n:["oxalis","sorrel"]},roil:{v:["roil","rile"]},wharfage:{n:["wharfage","quayage"]},whitish:{s:["whitish","off-white"]},knocker:{n:["knocker","doorknocker","rapper"]},dope:{n:["dope","poop","low-down"]},cola:{n:["cola","dope"]},interlacing:{s:["interlacing","interlinking","interlocking","interwoven"]},befuddle:{v:["befuddle","fuddle"]},yelp:{v:["yelp","yip","yap"]},squint:{v:["squint","squinch"]},narc:{n:["narc","nark"]},"deepening,":{s:["deepening,","thickening,"]},thickening:{n:["thickening","inspissation","thickener"]},spat:{n:["spat","gaiter"]},quoin:{n:["quoin","coign","coigne"]},fistfight:{n:["fistfight","fisticuffs","slugfest"]},quiddity:{n:["quiddity","haecceity"]},spew:{v:["spew","eruct"]},ramble:{n:["ramble","meander"]},salience:{n:["salience","saliency","strikingness"]},snorkel:{n:["snorkel","schnorkel","schnorchel","breather"]},noseband:{n:["noseband","nosepiece"]},"rampant(ip)":{s:["rampant(ip)","rearing"]},truncate:{s:["truncate","truncated"]},kowtow:{n:["kowtow","kotow"]},guggle:{v:["guggle","gurgle"]},wisconsinite:{n:["wisconsinite","badger"]},tormenter:{n:["tormenter","tormentor","teaser"]},reinforced:{s:["reinforced","strengthened"]},stilt:{n:["stilt","stiltbird","longlegs","long-legs"]},agglomerate:{s:["agglomerate","agglomerated","agglomerative","clustered"]},pachydermatous:{a:["pachydermatous","pachydermal","pachydermic","pachydermous"]},stub:{n:["stub","counterfoil"]},flunky:{n:["flunky","flunkey","stooge","yes-man"]},vamp:{v:["vamp","revamp"]},verbalize:{v:["verbalize","verbalise"]},footlocker:{n:["footlocker","locker"]},telegraph:{n:["telegraph","telegraphy"]},remake:{v:["remake","refashion","redo"]},bounder:{n:["bounder","leaper"]},"saucer-eyed":{s:["saucer-eyed","round-eyed"]},cleaver:{n:["cleaver","chopper"]},chopper:{n:[_431,"pearly"]},standardization:{n:["standardization","standardisation","normalization","normalisation"]},wamble:{v:["wamble","waggle"]},unintentional:{s:["unintentional","unplanned","unwitting"]},shopworn:{s:["shopworn","shopsoiled"]},pallbearer:{n:["pallbearer","bearer"]},soaking:{r:["soaking","sopping","dripping"]},dripping:{n:["dripping","drippage"]},comforter:{n:[_439,"pacifier"]},sympathizer:{n:["sympathizer","sympathiser","comforter"]},lilting:{s:["lilting","swinging","swingy","tripping"]},crayfish:{n:["crayfish","crawfish","crawdad","crawdaddy","ecrevisse"]},epidermis:{n:["epidermis","cuticle"]},glamor:{n:["glamor","glamour"]},jonah:{n:["jonah","jinx"]},gaelic:{n:["gaelic","goidelic","erse"]},cracker:{n:["cracker","snapper"]},protagonist:{n:["protagonist","agonist"]},admirer:{n:["admirer","adorer"]},booster:{n:["booster","shoplifter","lifter"]},bedlam:{n:["bedlam","madhouse","nuthouse","sanatorium"]},shmooze:{v:["shmooze","shmoose","schmooze","schmoose","jawbone"]},charmer:{n:["charmer","beguiler"]},oilskin:{n:["oilskin","slicker"]},scarlet:{n:["scarlet","vermilion"]},inflammation:{n:["inflammation","redness","rubor","inflaming"]},hen:{n:["hen","biddy"]},whiner:{n:["whiner","complainer","moaner","sniveller","crybaby","bellyacher","grumbler","squawker"]},normalize:{v:["normalize","normalise","renormalize","renormalise"]},compartmentalization:{n:["compartmentalization","compartmentalisation"]},deliveryman:{n:["deliveryman","deliverer"]},bolshy:{s:["bolshy","stroppy"]},plumpness:{n:["plumpness","embonpoint","roundness"]},ding:{v:["ding","dong","dingdong"]},stamper:{n:["stamper","stomper","tramper","trampler"]},stumblebum:{n:["stumblebum","palooka"]},landlubber:{n:["landlubber","lubber","landsman"]},wellhead:{n:["wellhead","wellspring"]},pellucidness:{n:["pellucidness","pellucidity","limpidity"]},stodgy:{s:["stodgy","stuffy"]},manure:{v:["manure","muck"]},chasse:{v:["chasse","sashay"],n:["chasse","sashay"]},sidle:{v:["sidle","sashay"]},pounding:{n:["pounding","buffeting"]},tweet:{v:["tweet","twirp"]},tickle:{v:["tickle","titillate","vellicate"],n:["tickle","tickling","titillation"]},dusty:{s:["dusty","dust-covered"]},alfresco:{s:["alfresco","open-air,"]},cribbage:{n:["cribbage","crib"]},crib:{n:["crib","cot"]},blowsy:{s:["blowsy","blowzy","slatternly","sluttish"]},coloration:{n:["coloration","colouration"]},coloring:{n:["coloring","colouring"]},unilateral:{a:["unilateral","one-sided"]},nonreversible:{a:["nonreversible","one-sided"]},hamlet:{n:["hamlet","crossroads"]},crape:{v:["crape","crepe"],n:["crape","crepe"]},crepe:{n:["crepe","crape"]},undertide:{n:["undertide","undercurrent"]},befouled:{s:["befouled","fouled"]},roughhewn:{s:["roughhewn","rough-cut"]},congeneric:{a:["congeneric","congenerical","congenerous"]},bop:{v:["bop","bebop"],n:["bop","bebop"]},headhunter:{n:["headhunter","head-shrinker"]},squeal:{v:["squeal","oink"]},surefooted:{s:["surefooted","sure-footed","footsure"]},terce:{n:["terce","tierce"]},befogged:{s:["befogged","befuddled"]},avowedly:{r:["avowedly","professedly"]},"full-blooded":{s:["full-blooded","full-blood","blooded"]},peachy:{s:["peachy","peachy-colored","peachy-coloured"]},smashing:{n:["smashing","shattering"]},retread:{v:["retread","remold","remould"],n:["retread","recap"]},reshape:{v:["reshape","remold"]},revitalize:{v:["revitalize","revitalise"]},slosh:{v:["slosh","slush"]},asserter:{n:["asserter","declarer","affirmer","asseverator","avower"]},endorser:{n:["endorser","indorser"]},episcopal:{a:["episcopal","pontifical"]},papal:{a:["papal","apostolic","apostolical","pontifical"]},interconnected:{s:["interconnected","interrelated"]},duplication:{n:["duplication","gemination"]},locoweed:{n:["locoweed","crazyweed"]},augmentative:{s:["augmentative","enhancive"]},miscegenation:{n:["miscegenation","crossbreeding","interbreeding"]},creak:{n:["creak","creaking"]},"half-baked":{s:["half-baked","underdone"]},germinal:{s:["germinal","originative","seminal"]},yahweh:{n:["yahweh","yhwh","yahwe","yahveh","yhvh","yahve","wahvey","jahvey","jahweh","jehovah","jhvh"]},weightlift:{n:["weightlift","weightlifting"]},insistence:{n:["insistence","insistency","insisting"]},"three-dimensional":{s:["three-dimensional","3-dimensional","third-dimensional","three-d"]},furor:{n:["furor","furore"]},rummy:{n:["rummy","rum"]},watercourse:{n:["watercourse","waterway"]},"custom-built":{s:["custom-built","made-to-order"]},dada:{n:["dada","dadaism"]},chancy:{s:["chancy","chanceful","dicey","dodgy"]},pediculosis:{n:["pediculosis","lousiness"]},pika:{n:["pika","coney","cony"]},tenfold:{s:["tenfold","ten-fold","denary"]},frustrating:{s:["frustrating","frustrative","thwarting"]},justificative:{s:["justificative","justificatory","vindicatory"]},unquestionably:{r:["unquestionably","unimpeachably"]},hairsplitting:{n:["hairsplitting","word-splitting"]},lush:{s:["lush","succulent"]},monstrance:{n:["monstrance","ostensorium"]},divinatory:{s:["divinatory","mantic","sibylline","sibyllic","vatic","vatical"]},scurvy:{n:["scurvy","scorbutus"]},determinant:{n:["determinant","determiner","determinative"]},determiner:{n:["determiner","determinative"]},riff:{n:["riff","riffian"]},haler:{n:["haler","heller"]},daemon:{n:["daemon","demigod"]},wisplike:{s:["wisplike","wispy"]},regularize:{v:["regularize","regularise"]},ungraded:{s:["ungraded","unordered","unranked"]},discus:{n:["discus","saucer"]},sledgehammer:{v:["sledgehammer","sledge"]},sled:{n:["sled","sledge","sleigh"]},junketeer:{v:["junketeer","junket"]},lavishly:{r:["lavishly","richly","extravagantly"]},cleavage:{n:["cleavage","segmentation"]},unreassuring:{a:["unreassuring","worrisome"]},disjoint:{v:["disjoint","disarticulate"]},overabundant:{s:["overabundant","plethoric","rife"]},sissy:{n:["sissy","pantywaist","pansy","milksop","milquetoast"]},splitter:{n:["splitter","divider"]},hemorrhoid:{n:["hemorrhoid","haemorrhoid","piles"]},bespoken:{s:["bespoken","betrothed"]},stupa:{n:["stupa","tope"]},raddled:{s:["raddled","worn-out"]},desiccated:{s:["desiccated","dried-out"]},desiccant:{n:["desiccant","drier","siccative"]},eastward:{r:["eastward","eastwards"]},eastbound:{s:["eastbound","eastward"]},sheik:{n:["sheik","sheikh"]},buster:{n:["buster","broncobuster"]},pinna:{n:["pinna","pinnule"]},fictionalize:{v:["fictionalize","fictionalise","retell"]},molar:{n:["molar","grinder"]},orbiculate:{s:["orbiculate","orbicular"]},mogul:{n:["mogul","moghul"]},egotism:{n:["egotism","self-importance"]},lumberman:{n:["lumberman","lumberjack","logger","feller","faller"]},gent:{n:["gent","gand","ghent"]},voltaic:{a:["voltaic","galvanic"]},octet:{n:["octet","octette","eightsome"]},undercoat:{n:["undercoat","underfur","underseal"]},gangrenous:{s:["gangrenous","mortified"]},yowl:{v:["yowl","caterwaul"]},steaming:{s:["steaming","steamy"]},mashhad:{n:["mashhad","meshed"]},enmeshed:{s:["enmeshed","intermeshed"]},gusset:{n:["gusset","inset"]},painfulness:{n:["painfulness","distressingness"]},gasbag:{n:["gasbag","windbag"]},tickling:{s:["tickling","tingling","titillating"]},sensationalism:{n:["sensationalism","luridness"]},curiously:{r:["curiously","inquisitively","interrogatively"]},queerly:{r:["queerly","strangely","oddly","funnily"]},substantiality:{n:["substantiality","substantialness","solidness"]},eonian:{a:["eonian","aeonian"]},sluicegate:{n:["sluicegate","floodgate","penstock"]},adventurer:{n:["adventurer","venturer"]},unidimensional:{a:["unidimensional","one-dimensional"]},veneer:{n:["veneer","veneering"]},loser:{n:["loser","also-ran"]},fairyland:{n:["fairyland","faerie","faery"]},hairpiece:{n:["hairpiece","postiche"]},malingerer:{n:["malingerer","skulker","shammer"]},storied:{s:["storied","storeyed"]},fantasize:{v:["fantasize","fantasise"]},bufflehead:{n:["bufflehead","butterball","dipper"]},lovingness:{n:["lovingness","caring"]},autotype:{n:["autotype","autotypy"]},voodoo:{n:["voodoo","vodoun","voodooism","hoodooism"]},lacrimation:{n:["lacrimation","lachrymation","tearing","watering"]},quintuplet:{n:["quintuplet","quint","quin"]},quintet:{n:["quintet","quintette","fivesome","quintuplet","quintuple"]},"fleur-de-lis":{n:["fleur-de-lis","fleur-de-lys"]},woolen:{a:["woolen","woollen"]},dogsled:{v:["dogsled","mush"]},orthogonal:{s:["orthogonal","rectangular"]},furcation:{n:["furcation","forking"]},quaternate:{s:["quaternate","quaternary"]},quaker:{n:["quaker","trembler"]},gaul:{n:["gaul","gallia"]},anuran:{a:["anuran","batrachian","salientian"]},depressurize:{v:["depressurize","depressurise","decompress"]},decompress:{v:["decompress","uncompress"]},pronged:{s:["pronged","tined"]},agonizing:{s:["agonizing","agonising","excruciating","harrowing","torturing","torturous","torturesome"]},intonate:{v:["intonate","intone"]},ecumenic:{s:["ecumenic","oecumenic","ecumenical","oecumenical"]},jellify:{v:["jellify","jelly"]},aureole:{n:["aureole","corona"]},idealization:{n:["idealization","idealisation","glorification"]},grizzly:{n:["grizzly","silvertip","silver-tip"]},"blue-eyed,":{s:["blue-eyed,","fair-haired,","white-haired,"]},nan:{n:["nan","naan"]},herbage:{n:["herbage","pasturage"]},hellenic:{a:["hellenic","hellenistic","hellenistical"]},wirework:{n:["wirework","grillwork"]},hoggish:{s:["hoggish","piggish","piggy","porcine","swinish"]},panting:{n:["panting","heaving"]},genitourinary:{a:["genitourinary","gu"]},shamefaced:{s:["shamefaced","sheepish"]},bewhisker:{v:["bewhisker","whisker"]},whisker:{n:["whisker","vibrissa"]},wrestler:{n:["wrestler","grappler","matman"]},abrasive:{s:["abrasive","scratchy"],n:["abrasive","abradant"]},burbot:{n:["burbot","eelpout","ling","cusk"]},eggbeater:{n:["eggbeater","eggwhisk"]},"how-do-you-do":{n:["how-do-you-do","how-d'ye-do"]},trumpeter:{n:["trumpeter","cornetist"]},hindustani:{n:["hindustani","hindoostani","hindostani"]},endocrine:{a:["endocrine","endocrinal"]},tusk:{v:["tusk","detusk"]},boniface:{n:["boniface","winfred","wynfrith"]},"red-hot":{s:["red-hot","sizzling"]},blebby:{s:["blebby","blistery"]},inductor:{n:["inductor","inductance"]},infective:{s:["infective","morbific","pathogenic"]},insistent:{s:["insistent","repetitive"]},homebound:{s:["homebound","housebound","shut-in"]},introvertish:{s:["introvertish","shut-in"]},stocktake:{n:["stocktake","stock-take"]},stocktaking:{n:["stocktaking","stock-taking"]},utopia:{n:["utopia","zion","sion"]},zion:{n:["zion","sion"]},jug:{n:["jug","jugful"]},jerkwater:{s:["jerkwater","one-horse","pokey","poky"]},judaic:{a:["judaic","judaical"]},kazak:{n:["kazak","kazakh"]},snoop:{n:["snoop","snooper"]},gravestone:{n:["gravestone","headstone","tombstone"]},gorgerin:{n:["gorgerin","necking"]},patter:{v:["patter","pitter-patter"]},"pit-a-pat":{r:["pit-a-pat","pitty-patty","pitty-pat","pitter-patter"]},swab:{v:["swab","swob"],n:["swab","swob","mop"]},cohesiveness:{n:["cohesiveness","glueyness","gluiness","gumminess","tackiness","ropiness","viscidity","viscidness"]},eyelet:{n:["eyelet","eyehole"]},subterranean:{s:["subterranean","subterraneous","ulterior"]},humongous:{s:["humongous","banging","thumping","whopping","walloping"]},pagination:{n:["pagination","folio","paging"]},foliation:{n:["foliation","foliage"]},unspent:{s:["unspent","unexpended"]},legitimately:{r:["legitimately","lawfully","licitly"]},indecorum:{n:["indecorum","indecorousness"]},constricting:{s:["constricting","constrictive","narrowing"]},molten:{s:["molten","liquefied","liquified"]},liquefied:{s:["liquefied","liquified"]},minuscule:{s:["minuscule","miniscule"],a:["minuscule","minuscular"]},"pocket-size":{s:["pocket-size","pocket-sized","pocketable"]},brackish:{s:["brackish","briny"]},grading:{n:["grading","leveling"]},scaling:{n:["scaling","grading"]},camouflage:{n:["camouflage","camo"]},hectogram:{n:["hectogram","hg"]},muss:{v:["muss","tussle"]},underpass:{n:["underpass","subway"]},pulverization:{n:["pulverization","pulverisation"]},"hee-haw":{v:["hee-haw","bray"]},zestful:{s:["zestful","yeasty","zesty","barmy"]},buggy:{n:["buggy","roadster"]},nutty:{s:["nutty","nutlike"]},crepitate:{v:["crepitate","crackle"]},crackle:{n:["crackle","crackleware","crackling","crepitation"]},tinker:{v:["tinker","fiddle"],n:["tinker","tinkerer"]},scalawag:{n:["scalawag","scallywag"]},moroccan:{a:["moroccan","maroc"]},throwster:{n:["throwster","thrower"]},pyxie:{n:["pyxie","pixie","pixy"]},hologram:{n:["hologram","holograph"]},canary:{s:["canary","canary-yellow"]},browne:{n:["browne","phiz"]},kisser:{n:["kisser","osculator"]},gumwood:{n:["gumwood","gum"]},gingiva:{n:["gingiva","gum"]},growl:{n:["growl","growling"]},northbound:{s:["northbound","northward"]},stripper:{n:["stripper","striptease","stripteaser","ecdysiast","peeler"]},piloting:{n:["piloting","pilotage"]},northeastward:{r:["northeastward","northeastwardly"]},disconfirming:{s:["disconfirming","invalidating"]},doughy:{s:["doughy","soggy"]},pap:{n:["pap","pablum"]},cryptogram:{n:["cryptogram","cryptograph"]},northwestward:{r:["northwestward","northwestwardly"]},scandinavian:{a:["scandinavian","norse"],n:["scandinavian","nordic","norse","northman"]},atomize:{v:["atomize","atomise"]},accusative:{s:["accusative","accusatory","accusing","accusive"]},seaward:{r:["seaward","seawards","asea"]},mated:{s:["mated","paired"]},regularization:{n:["regularization","regularisation"]},nonionized:{a:["nonionized","nonionised","unionized","unionised","nonionic"]},bacchanalian:{s:["bacchanalian","bacchanal","bacchic","carousing","orgiastic"]},bacchant:{n:["bacchant","bacchanal"]},dionysia:{n:["dionysia","bacchanalia"]},prolate:{a:["prolate","watermelon-shaped"]},foliaceous:{s:["foliaceous","foliose","foliaged"]},lynx:{n:["lynx","catamount"]},thenal:{a:["thenal","thenar"]},bluejacket:{n:["bluejacket","sailor"]},sailor:{n:["sailor","crewman"]},breeches:{n:["breeches","knickerbockers","knickers"]},countersignature:{n:["countersignature","countersign"]},marquee:{n:["marquee","marquise"]},truffle:{n:["truffle","earthnut","earth-ball"]},bracer:{n:["bracer","pick-me-up"]},piping:{r:["piping","steaming"]},postmortem:{a:["postmortem","postmortal"],n:["postmortem","post-mortem"]},stopper:{v:["stopper","stopple"]},"show-stopper":{n:["show-stopper","showstopper","stopper"]},piranha:{n:["piranha","pirana","caribe"]},gladly:{r:["gladly","lief","fain"]},reformer:{n:["reformer","reformist","crusader","meliorist"]},alleviated:{s:["alleviated","eased","relieved"]},breastplate:{n:["breastplate","aegis","egis"]},whelp:{v:["whelp","pup"]},pup:{n:["pup","whelp"]},quadruple:{s:["quadruple","fourfold","four-fold","quadruplicate","quadruplex"]},guangzhou:{n:["guangzhou","kuangchou","kwangchow","canton"]},"devil-may-care":{s:["devil-may-care","raffish","rakish"]},"class-conscious":{s:["class-conscious","stratified"]},stratified:{a:["stratified","bedded"]},authentically:{r:["authentically","genuinely"]},reflectiveness:{n:["reflectiveness","reflectivity"]},birl:{v:["birl","birle"]},mournfulness:{n:["mournfulness","sorrowfulness","ruthfulness"]},restart:{v:["restart","re-start"]},zombie:{n:["zombie","zombi"]},zombi:{n:["zombi","zombie"]},gravelly:{s:["gravelly","pebbly","shingly"]},granitic:{s:["granitic","granitelike","rocklike","stony"]},gypsy:{n:["gypsy","gipsy","romany","rommany","romani","roma","bohemian"]},southbound:{s:["southbound","southward"]},brininess:{n:["brininess","salinity"]},grit:{n:["grit","gritrock","gritstone"]},schooldays:{n:["schooldays","schooltime"]},southeastward:{r:["southeastward","southeastwardly"]},bradawl:{n:["bradawl","pricker"]},septet:{n:["septet","septette","sevensome"]},cobweb:{n:["cobweb","gossamer"]},astutely:{r:["astutely","shrewdly","sagaciously","sapiently","acutely"]},keenly:{r:["keenly","acutely"]},diaper:{n:["diaper","nappy","napkin"]},pewee:{n:["pewee","peewee","peewit","pewit"]},paving:{n:["paving","pavement"]},pavement:{n:["pavement","paving"]},plushy:{s:["plushy","plush-like"]},standardized:{s:["standardized","standardised"]},sextet:{n:["sextet","sextette","sixsome","sestet"]},utterer:{n:["utterer","vocalizer","vocaliser"]},trendy:{s:["trendy","voguish"]},hock:{n:["hock","hock-joint"]},dowse:{n:["dowse","dowsing","rhabdomancy"]},sop:{n:["sop","sops"]},procurer:{n:["procurer","securer"]},southwestward:{r:["southwestward","southwestwardly"]},dabble:{v:["dabble","paddle","smatter"]},hurrying:{s:["hurrying","scurrying"]},"crop-dusting":{n:["crop-dusting","spraying"]},gummed:{s:["gummed","gummy"]},pasty:{s:["pasty","pastelike"]},syrupy:{s:["syrupy","viscous"]},solarize:{v:["solarize","solarise"]},"low-level":{s:["low-level","low-altitude"]},supplementation:{n:["supplementation","subjunction","subjoining"]},hypernym:{n:["hypernym","superordinate"]},breaker:{n:["breaker","ledgeman"]},jumper:{n:["jumper","pinafore","pinny"]},symbolism:{n:["symbolism","symbolization","symbolisation"]},symbolization:{n:["symbolization","symbolisation"]},outrageously:{r:["outrageously","atrociously"]},dreadfully:{r:["dreadfully","awfully","horribly"]},detestably:{r:["detestably","repulsively","abominably","odiously"]},"thieving,":{s:["thieving,","thievish"]},rubberneck:{n:["rubberneck","rubbernecker"]},flail:{v:["flail","thresh"]},garrote:{v:["garrote","garrotte","garotte","scrag"]},transgender:{a:["transgender","transgendered"]},corvus:{n:["corvus","crow"]},triplicity:{n:["triplicity","trigon"]},trilateral:{s:["trilateral","triangular","three-sided"]},bole:{n:["bole","bolanci"]},slimed:{s:["slimed","slimy"]},retrousse:{s:["retrousse","tip-tilted","upturned"]},uzbek:{n:["uzbek","uzbeg","uzbak","usbek","usbeg"]},botany:{n:["botany","phytology"]},"square-toed":{s:["square-toed","squared-toe"]},footnote:{n:["footnote","footer"]},hydroplane:{v:["hydroplane","seaplane"]},seaplane:{n:["seaplane","hydroplane"]},westward:{r:["westward","westwards"]},cyprian:{a:["cyprian","cypriote","cypriot"]},cypriot:{n:["cypriot","cypriote","cyprian"]},unforced:{s:["unforced","unstrained"]},offstage:{s:["offstage","backstage"]},upbeat:{n:["upbeat","offbeat"]},caucasian:{s:["caucasian","caucasoid"],a:["caucasian","caucasic"]},duster:{n:["duster","gaberdine","gabardine","smock"]},beldam:{n:["beldam","beldame"]},susurration:{n:["susurration","susurrus"]},magician:{n:["magician","prestidigitator","conjurer","conjuror","illusionist"]},negligee:{n:["negligee","neglige","peignoir","wrapper","housecoat"]},clothed:{a:["clothed","clad"]},devolution:{n:["devolution","devolvement"]},screaky:{s:["screaky","screechy","squeaking","squeaky","squealing"]},dilatation:{n:["dilatation","distension","distention"]},encapsulate:{v:["encapsulate","capsule","capsulize","capsulise"]},capsule:{v:["capsule","capsulate","capsulize","capsulise"]},decayable:{s:["decayable","putrescible","putrefiable","spoilable"]},vermiculate:{s:["vermiculate","worm-eaten","wormy"]},dynamism:{n:["dynamism","pizzazz","pizzaz","oomph","zing"]},heartiness:{n:["heartiness","wholeheartedness"]},gracelessness:{n:["gracelessness","ungracefulness"]},swaggering:{s:["swaggering","swashbuckling"]},egotistic:{s:["egotistic","egotistical","narcissistic","self-loving"]},discoloration:{n:["discoloration","discolouration"]},"big-chested":{s:["big-chested","chesty"]},slag:{n:["slag","scoria","dross"]},shabbiness:{n:["shabbiness","seediness","manginess","sleaziness"]},levorotary:{s:["levorotary","levorotatory","left-handed"]},morganatic:{s:["morganatic","left-handed"]},sensualism:{n:["sensualism","sensationalism"]},voluptuary:{n:["voluptuary","sybarite"]},fruitfulness:{n:["fruitfulness","fecundity"]},fecundity:{n:["fecundity","fruitfulness"]},denigration:{n:["denigration","belittling"]},debacle:{n:["debacle","fiasco"]},blather:{n:["blather","blatherskite"]},dimwit:{n:["dimwit","nitwit","half-wit","doofus"]},caveman:{n:["caveman","troglodyte"]},spoilage:{n:["spoilage","spoiling"]},devalue:{v:["devalue","devaluate"]},separationism:{n:["separationism","separatism"]},inappropriateness:{n:["inappropriateness","wrongness"]},mushiness:{n:["mushiness","pulpiness"]},creaminess:{n:["creaminess","soupiness"]},acuity:{n:["acuity","sharp-sightedness"]},callosity:{n:["callosity","callus"]},"dim-sighted":{s:["dim-sighted","near-blind","purblind","sand-blind"]},collusive:{s:["collusive","conniving"]},scruffy:{s:["scruffy","seedy"]},idolization:{n:["idolization","idolisation"]},"self-serving":{s:["self-serving","self-seeking"]},untouchable:{n:["untouchable","harijan"]},matrilineage:{n:["matrilineage","enation","cognation"]},strabismus:{n:["strabismus","squint"]},oscitancy:{n:["oscitancy","oscitance"]},waxen:{s:["waxen","waxlike","waxy"],a:["waxen","waxy"]},kike:{n:["kike","hymie","sheeny","yid"]},likable:{s:["likable","likeable"]},shoplifting:{n:["shoplifting","shrinkage"]},"quick-sighted":{s:["quick-sighted","sharp-sighted","sharp-eyed"]},"keen-eyed":{s:["keen-eyed","sharp-eyed"]},helmsman:{n:["helmsman","steersman","steerer"]},terrorize:{v:["terrorize","terrorise"]},selflessness:{n:["selflessness","self-sacrifice"]},ordinariness:{n:["ordinariness","mundaneness","mundanity"]},fusee:{n:["fusee","fuzee"]},wiggly:{s:["wiggly","wriggling","wriggly","writhing"]},asceticism:{n:["asceticism","ascesis"]},parvenu:{s:["parvenu","parvenue"]},semiannually:{r:["semiannually","biyearly"]},biennially:{r:["biennially","biyearly"]},semiannual:{s:["semiannual","biannual",_637,"half-yearly"]},hyperopia:{n:["hyperopia","hypermetropia","hypermetropy","farsightedness","longsightedness"]},presbyopia:{n:["presbyopia","farsightedness"]},eristic:{s:["eristic","eristical"]},igneous:{a:["igneous","eruptive","pyrogenic","pyrogenous"]},greenery:{n:["greenery","verdure"]},demilitarize:{v:["demilitarize","demilitarise"]},egocentric:{n:["egocentric","egoist"]},bleat:{v:["bleat","blate","blat","baa"]},"self-generated":{s:["self-generated","self-produced"]},tattered:{s:["tattered","tatterdemalion"]},ragamuffin:{n:["ragamuffin","tatterdemalion"]},subtilize:{v:["subtilize","subtilise"]},junoesque:{s:["junoesque","statuesque"]},undoer:{n:["undoer","opener","unfastener","untier"]},wastrel:{n:["wastrel","waster"]},beep:{n:["beep","bleep"]},klaxon:{n:["klaxon","claxon"]},foaming:{s:["foaming","foamy","frothing"]},hitter:{n:["hitter","striker"]},slugger:{n:["slugger","slogger"]},looted:{s:["looted","pillaged","plundered","ransacked"]},unexceptionable:{s:["unexceptionable","unimpeachable"]},spiritualize:{v:["spiritualize","spiritualise"]},impoundment:{n:["impoundment","impounding","internment","poundage"]},bondwoman:{n:["bondwoman","bondswoman","bondmaid"]},liege:{n:["liege","luik"]},curvy:{s:["curvy","curvey"]},neanderthal:{a:["neanderthal","neanderthalian","neandertal"]},ropy:{s:["ropy","ropey","stringy","thready"]},stringy:{s:["stringy","wiry"]},bisexual:{s:["bisexual","epicene"]},hermaphrodite:{n:["hermaphrodite","intersex","gynandromorph","androgyne","epicene"]},storyteller:{n:["storyteller","fibber","fabricator"]},transience:{n:["transience","transiency","transitoriness"]},breeziness:{n:["breeziness","windiness"]},wideness:{n:["wideness","broadness"]},groin:{n:["groin","inguen"]},adenoidal:{s:["adenoidal","pinched","nasal"]},nationalist:{s:["nationalist","nationalistic"]},itemize:{v:["itemize","itemise"]},injudiciousness:{n:["injudiciousness","indiscreetness"]},"janus-faced":{s:["janus-faced","two-faced"]},"two-handed":{s:["two-handed","bimanual"]},homosexuality:{n:["homosexuality","homosexualism","homoeroticism","queerness","gayness"]},moonlit:{a:["moonlit","moony"]},catapult:{n:["catapult","arbalest","arbalist","ballista","bricole","mangonel","onager","trebuchet","trebucket","launcher"]},monarchist:{n:["monarchist","royalist"]},"brand-new":{s:["brand-new","bran-new","spic-and-span","spick-and-span"]},spic:{n:["spic","spik","spick"]},melancholic:{n:["melancholic","melancholiac"]},hangover:{n:["hangover","katzenjammer"]},halter:{n:["halter","haltere","balancer","hackamore"]},unknowingness:{n:["unknowingness","unawareness"]},"self-reproach":{n:["self-reproach","self-reproof"]},bulblike:{s:["bulblike","bulbous","bulb-shaped"]},unlikable:{s:["unlikable","unlikeable"]},posteriority:{n:["posteriority","subsequentness","subsequence"]},capriciousness:{n:["capriciousness","unpredictability"]},bilateral:{s:["bilateral","two-sided"]},verticillate:{s:["verticillate","verticillated","whorled"]},torsion:{n:["torsion","torque"]},crookedness:{n:["crookedness","deviousness"]},gown:{n:["gown","robe"]},wolflike:{a:["wolflike","wolfish"]},"fire-eater":{n:["fire-eater","hothead"]},"harum-scarum":{r:["harum-scarum","pell-mell"]},shyster:{n:["shyster","pettifogger"]},bowleg:{n:["bowleg","bandyleg"]},deviltry:{n:["deviltry","devilry"]},insurmountable:{a:["insurmountable","unsurmountable"]},facetiously:{r:["facetiously","jokingly","tongue-in-cheek"]},banteringly:{r:["banteringly","tongue-in-cheek"]},balker:{n:["balker","baulker","noncompliant"]},disengagement:{n:["disengagement","fallback","pullout"]},"warm-up":{n:["warm-up","tune-up","prolusion"]},apothegmatic:{a:["apothegmatic","apothegmatical"]},scrabbly:{s:["scrabbly","scrubby"]},worshiper:{n:["worshiper","worshipper"]},saponaceous:{a:["saponaceous","soapy"]},"deaf-and-dumb":{s:["deaf-and-dumb","deaf-mute"]},blabbermouthed:{s:["blabbermouthed","leaky","talebearing,","tattling,"]},profitlessly:{r:["profitlessly","unprofitably","gainlessly"]},antimicrobial:{s:["antimicrobial","antimicrobic"]},candied:{s:["candied","crystalized","crystalised","glace"]},excitant:{s:["excitant","excitative","excitatory"]},scrawniness:{n:["scrawniness","scrubbiness"]},cockscomb:{n:["cockscomb","coxcomb"]},coxcomb:{n:["coxcomb","cockscomb"]},styptic:{s:["styptic","hemostatic"]},uninviting:{s:["uninviting","untempting"]},"long-sufferance":{n:["long-sufferance","long-suffering"]},ether:{n:["ether","ethoxyethane","aether"]},spender:{n:["spender","disburser","expender"]},transudate:{n:["transudate","transudation"]},oozing:{s:["oozing","oozy","seeping"]},lissomeness:{n:["lissomeness","litheness","suppleness"]},widening:{n:["widening","broadening"]},noncritical:{a:["noncritical","noncrucial"]},smartly:{r:["smartly","modishly","sprucely"]},vigorously:{r:["vigorously","smartly"]},"pint-size":{s:["pint-size","pint-sized","runty","sawed-off","sawn-off"]},poignance:{n:["poignance","poignancy"]},dekagram:{n:["dekagram","decagram","dkg","dag"]},garishness:{n:["garishness","gaudiness"]},drippy:{s:["drippy","drizzly"]},sodden:{s:["sodden","soppy"]},sensory:{a:["sensory","sensorial"]},overemotional:{s:["overemotional","sloppy"]},baggy:{s:["baggy","loose-fitting","sloppy"]},pulpy:{s:["pulpy","squashy"]},lanate:{s:["lanate","woolly"]},wooly:{s:["wooly","woolly","wooly-haired","woolly-haired"]},flocculent:{s:["flocculent","woolly","wooly"]},gala:{n:["gala","jamboree","blowout"]},recliner:{n:["recliner","lounger"]},styleless:{a:["styleless","unstylish"]},damselfish:{n:["damselfish","demoiselle"]},sodomize:{v:["sodomize","sodomise","bugger"]},disgustingness:{n:["disgustingness","distastefulness","nauseatingness","sickeningness","unsavoriness"]},demeaning:{s:["demeaning","humbling","humiliating","mortifying"]},extravagantly:{r:["extravagantly","lavishly"]},unmusical:{a:["unmusical","nonmusical"]},pathological:{a:["pathological","pathologic"]},"care-laden":{s:["care-laden","heavy-laden"]},demonstrator:{n:["demonstrator","protester"]},pietistic:{a:["pietistic","pietistical"]},onomatopoeic:{a:["onomatopoeic","onomatopoetic"]},bodiless:{s:["bodiless","bodyless"]},adumbrative:{s:["adumbrative","foreshadowing","prefigurative"]},debasing:{s:["debasing","degrading"]},visceral:{a:["visceral","splanchnic"]},inversely:{r:["inversely","reciprocally"]},romany:{n:["romany","gypsy"]},moralize:{v:["moralize","moralise"]},boyishly:{r:["boyishly","boylike"]},antiphonary:{a:["antiphonary","antiphonal"],n:["antiphonary","antiphonal"]},defecation:{n:["defecation","laxation","shitting"]},temporalty:{n:["temporalty","temporality"]},"helter-skelter":{s:["helter-skelter","pell-mell"]},"higgledy-piggledy":{r:["higgledy-piggledy","topsy-turvy"]},soldiering:{n:["soldiering","soldiership"]},"ill-defined":{a:["ill-defined","unclear"]},monk:{n:["monk","monastic"]},"well-bred":{s:["well-bred","well-mannered"]},tophus:{n:["tophus","chalkstone"]},pensioner:{n:["pensioner","pensionary"]},assignable:{s:["assignable","conveyable","negotiable","transferable","transferrable"]},bumptious:{s:["bumptious","self-assertive"]},coolly:{r:["coolly","nervelessly","nonchalantly"]},"encroaching,":{s:["encroaching,","invasive","trespassing,"]},embroidery:{n:["embroidery","fancywork"]},idolizer:{n:["idolizer","idoliser"]},earthworm:{n:["earthworm","angleworm","fishworm","wiggler","nightwalker","nightcrawler","crawler"]},crawler:{n:["crawler","creeper"]},lackey:{n:["lackey","flunky","flunkey"]},piston:{n:["piston","plunger"]},diver:{n:["diver","plunger"]},clubbish:{s:["clubbish","clubby"]},propaedeutic:{n:["propaedeutic","propaedeutics"]},graven:{s:["graven","sculpted","sculptured"]},randomly:{r:["randomly","indiscriminately","haphazardly","willy-nilly","arbitrarily"]},hijack:{n:["hijack","highjack"]},uncrystallized:{a:["uncrystallized","uncrystallised"]},disincentive:{n:["disincentive","deterrence"]},greasiness:{n:["greasiness","oiliness","oleaginousness"]},trample:{n:["trample","trampling"]}};module.exports = _
},{}],144:[function(require,module,exports){
const dictionary = require('./dictionary.js');
const synonyms = function(word,type){
	word = (word || "").toLowerCase();
	type = (type || "").toLowerCase();
	var entry = dictionary[word] || deep(word); // doesn't exist
	if(!entry) return undefined;
	else if(type) return entry[type];
	else return entry;
};

function deep(wordR){
	var synonyms = {};
	for(var entry in dictionary){
		for(var type in dictionary[entry]){
			if(~dictionary[entry][type].indexOf(wordR)) {
				if(!synonyms[type]) synonyms[type] = [wordR];
				synonyms[type].push(entry);
			}
		}
	}
	return Object.keys(synonyms).length ? synonyms : undefined;
}

synonyms.dictionary = dictionary;
module.exports = synonyms;
},{"./dictionary.js":143}],145:[function(require,module,exports){
"use strict";


//sınıflar
class Frekans
{
	constructor(string)
	{
		this.string=string;
		this.sayi=1;
	}
}




class AnahtarKelime
{
	constructor(string)
	{
		this.string=string;
		this.substring=string.split(" ");
		this.skor=0;
		this.bolucu=this.substring.length;
		this.alakali=[];
	}
}

class VektorElemani
{
	constructor(string)
	{
		this.string=string;
		this.sayi=0;
	}
}

class Site
{
	constructor(url)
	{
		this.altSiteler=[];
		this.kelimeler=[];
		this.frekansDizisi=[];
		this.yakinDizisi=[];
		this.url=url;
	}
}

class Yakin
{
	constructor(string,yakinString)
	{
		this.yazilcak=string+"\t:";

		for(let i=0;i<yakinString.length;i++)
		{
			this.yazilcak+=yakinString[i]+",";
		}
	}
}

//node js

const cheerio=require("cheerio");
const stopword=require("stopword");
const synonyms=require("synonyms");

//ekran tutucular

const dorduncuKisimEkrani=document.querySelector("#dorduncuKisimEkrani");

//4.kisim buton tutucular

const anaSiteTamamButonu=document.querySelector("#anaSiteTamam");
const siteKumesiTamamButonu=document.querySelector("#siteKumesiTamam");
const islemiBaslatButonu=document.querySelector("#islemiBaslat");

//4.kisim text tutucular

const anaSiteText=document.querySelector("#anaSiteText");
const siteKumesiText=document.querySelector("#siteKumesiText");

//global 

let anaSite;
let siteKumesi=[];

//4. kısım fonksiyonları
anaSiteTamamButonu.onclick=() =>
{
	let url=anaSiteText.value;
	anaSiteText.value="";

	let yeniSite=new Site(url);

	anaSite=yeniSite;

}

siteKumesiTamamButonu.onclick=() =>
{
	let url=siteKumesiText.value;
	siteKumesiText.value="";

	let yeniSite=new Site(url);

	siteKumesi.push(yeniSite);

}


islemiBaslatButonu.onclick=() =>
{
	dorduncuKisimEkrani.style.display="none";

	let fetchDizisi1=[];


	 fetchDizisi1.push(fetch(anaSite.url)
    .then(function (cevap)
    {
      return cevap.text();

    })
    .then(function (html) {
      	
    	const $=cheerio.load(html);

		let kelimeler=$.text();

		kelimeler=kelimeler.split(/[\s,.!?{}():=""<>/;\[\]&]/);

		for(let i=0;i<kelimeler.length;i++)
		{	

			kelimeler[i]=kelimeler[i].toLowerCase();


			if(kelimeler[i].length<2)
			{
				kelimeler.splice(i,1);
				i--;
			}

		}


		anaSite.kelimeler=kelimeler;

		frekansHesabi(anaSite);

    }).catch(function(error){

    	console.log(anaSite.url+"\t hata:"+error);
    }));


	 
	 for(let i=0;i<siteKumesi.length;i++)
	 {
	 	fetchDizisi1.push(
	 		fetch(siteKumesi[i].url)
	 		.then(function(cevap){

	 			return cevap.text();

	 		}).then(function(html){

	 			const $=cheerio.load(html);

	 			let kelimeler=$.text();

	 			kelimeler=kelimeler.split(/[\s,.!?{}():=""<>/;\[\]&]/);

	 			for(let i=0;i<kelimeler.length;i++)
				{

					kelimeler[i]=kelimeler[i].toLowerCase();

					if(kelimeler[i].length<2)
					{
						kelimeler.splice(i,1);
						i--;
					}

				}

				siteKumesi[i].kelimeler=kelimeler;

				let linkSayisi=0;

				$("body a").each(function(index,value){

					let href=$(value).prop("href");

					if(typeof href!=="undefined")
					{
						let kontrol1=href.substring(0,4);
						let kontrol2=href.substring(0,5);

						if(kontrol1.includes("http")||kontrol2.includes("https"))
						{
							let yeniSite=new Site(href);

							siteKumesi[i].altSiteler.push(yeniSite);

							linkSayisi++;

							if(linkSayisi==5)
							{
								return false;
							}
						}

					}

				});
	 		}).catch(function(error){

	 			console.log(siteKumesi[i].url+"\t hata:"+error);
	 		})
	 		);
	 }


	 Promise.all(fetchDizisi1).then(function(){

	 	let fetchDizisi2=[];

	 	for(let i=0;i<siteKumesi.length;i++)
	 	{
	 		for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
	 		{
	 			fetchDizisi2.push(
	 				fetch(siteKumesi[i].altSiteler[j].url)
	 				.then(function(cevap){

	 					return cevap.text();

	 				}).then(function(html){

	 					const $=cheerio.load(html);

	 					let kelimeler=$.text();

	 					kelimeler=kelimeler.split(/[\s,.!?{}():=""<>/;\[\]&]/);

	 					for(let i=0;i<kelimeler.length;i++)
						{

							kelimeler[i]=kelimeler[i].toLowerCase();

							if(kelimeler[i].length<2)
							{
								kelimeler.splice(i,1);
								i--;
							}

						}

						siteKumesi[i].altSiteler[j].kelimeler=kelimeler;

						let linkSayisi=0;

						$("body a").each(function(index,value){

							let href=$(value).prop("href");

							if(typeof href!=="undefined")
							{
								let kontrol1=href.substring(0,4);
								let kontrol2=href.substring(0,5);

								if(kontrol1.includes("http")||kontrol2.includes("https"))
								{
									let yeniSite=new Site(href);

									siteKumesi[i].altSiteler[j].altSiteler.push(yeniSite);

									linkSayisi++;

									if(linkSayisi==5)
									{
										return false;
									}
								}
							}


						});

	 				}).catch(function(error){

	 					console.log(siteKumesi[i].altSiteler[j].url+"\t hata:"+error);
	 				})
	 				);
	 		}
	 	}

	 	Promise.all(fetchDizisi2).then(function(){

	 		let fetchDizisi3=[];

	 		for(let i=0;i<siteKumesi.length;i++)
	 		{
	 			for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
	 			{
	 				for(let k=0;k<siteKumesi[i].altSiteler[j].altSiteler.length;k++)
	 				{
	 					fetchDizisi3.push(

	 						fetch(siteKumesi[i].altSiteler[j].altSiteler[k].url)
	 						.then(function(cevap){

	 							return cevap.text();
	 						}).then(function(html){

	 							const $=cheerio.load(html);

	 							let kelimeler=$.text();

	 							kelimeler=kelimeler.split(/[\s,.!?{}():=""<>/;\[\]&]/);

	 							for(let i=0;i<kelimeler.length;i++)
								{

									kelimeler[i]=kelimeler[i].toLowerCase();
									
									if(kelimeler[i].length<2)
									{
										kelimeler.splice(i,1);
										i--;
									}

								}

								siteKumesi[i].altSiteler[j].altSiteler[k].kelimeler=kelimeler;


	 						}).catch(function(error){

	 							console.log(siteKumesi[i].altSiteler[j].altSiteler[k].url+"\t hata:"+error);

	 						})

	 						);
	 				}
	 			}
	 		}


	 		Promise.all(fetchDizisi3).then(function(){

	 			console.log("fetch tamamlandı");

	 			anaSite.kelimeler=stopword.removeStopwords(anaSite.kelimeler);

	 			for(let i=0;i<siteKumesi.length;i++)
	 			{
	 				frekansHesabi(siteKumesi[i]);
	 				benzerlikHesabi(anaSite, siteKumesi[i])

	 				for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
	 				{
	 					frekansHesabi(siteKumesi[i].altSiteler[j]);
	 					benzerlikHesabi(anaSite,siteKumesi[i].altSiteler[j]);

	 					for(let k=0;k<siteKumesi[i].altSiteler[j].altSiteler.length;k++)
	 					{
	 						frekansHesabi(siteKumesi[i].altSiteler[j].altSiteler[k]);
	 						benzerlikHesabi(anaSite,siteKumesi[i].altSiteler[j].altSiteler[k]);
	 					}
	 				}
	 			}

	 			benzerlikleriBulma();
	 		});
	 	});
	 });
	 
	

}



function frekansHesabi(obje)
{
	let frekansDizisi=[];


	for(let i=0;i<obje.kelimeler.length;i++)
	{	
		let mevcutmu=false;

		for(let j=0;j<frekansDizisi.length;j++)
		{
			if(obje.kelimeler[i]===frekansDizisi[j].string)
			{
				mevcutmu=true;
				frekansDizisi[j].sayi++;
				break;
			}
		}

		if(!mevcutmu)
		{
			let yeniEleman=new Frekans(obje.kelimeler[i]);
			frekansDizisi.push(yeniEleman);
		}
	}

	obje.frekansDizisi=frekansDizisi;

	yakinBulma(obje)

}


function yakinBulma(obje)
{
	for(let i=0;i<obje.frekansDizisi.length;i++)
	{
		obje.frekansDizisi[i].n=synonyms(obje.frekansDizisi[i].string,"n");
		obje.frekansDizisi[i].v=synonyms(obje.frekansDizisi[i].string,"v");
	}


	for(let i=0;i<obje.frekansDizisi.length;i++)
	{
		let yakinString=[];

		for(let j=0;j<obje.frekansDizisi.length;j++)
		{

			if(i===j)
			{
				continue;
			}

			let cikilcakmi=false;

			if(typeof obje.frekansDizisi[i].n!=="undefined"&&typeof obje.frekansDizisi[j].n!=="undefined")
			{
				for(let n=0;n<obje.frekansDizisi[i].n.length;n++)
				{
					for(let n2=0;n2<obje.frekansDizisi[j].n.length;n2++)
					{
						if(obje.frekansDizisi[i].n[n]===obje.frekansDizisi[j].n[n2]&&obje.frekansDizisi[i].n[n]!=="n"&&obje.frekansDizisi[j].n[n2]!=="n")
						{
							cikilcakmi=true;
							yakinString.push(obje.frekansDizisi[j].string);
							break;
						}
					}

					if(cikilcakmi===true)
					{
						break;
					}
				}
			}

			if(cikilcakmi===true)
			{
				continue;
			}


			if(typeof obje.frekansDizisi[i].v!=="undefined"&&typeof obje.frekansDizisi[j].v!=="undefined")
			{
				for(let v=0;v<obje.frekansDizisi[i].v.length;v++)
				{
					for(let v2=0;v2<obje.frekansDizisi[j].v.length;v2++)
					{
						if(obje.frekansDizisi[i].v[v]===obje.frekansDizisi[j].v[v2]&&obje.frekansDizisi[i].v[v]!=="v"&&obje.frekansDizisi[j].v[v2]!="v")
						{
							cikilcakmi=true;
							yakinString.push(obje.frekansDizisi[j].string);
							break;
						}
					}

					if(cikilcakmi===true)
					{
						break;
					}
				}
			}

			if(cikilcakmi===true)
			{
				continue;
			}
		}

		if(yakinString.length>0)
		{
			let yeniYakin=new Yakin(obje.frekansDizisi[i].string,yakinString);
			obje.yakinDizisi.push(yeniYakin);
		}
	}
}





function benzerlikHesabi(obje1,obje2)
{	
	obje2.kelimeler=stopword.removeStopwords(obje2.kelimeler);

	let toplamKelimeler=[];

	for(let i=0;i<obje1.kelimeler.length;i++)
	{	
		let mevcutmu=false;

		for(let j=0;j<toplamKelimeler.length;j++)
		{
			if(toplamKelimeler[j]===obje1.kelimeler[i])
			{
				mevcutmu=true;
				break;
			}
		}

		if(mevcutmu===false)
		{
			toplamKelimeler.push(obje1.kelimeler[i]);
		}
	}


	for(let i=0;i<obje2.kelimeler.length;i++)
	{	
		let mevcutmu=false;

		for(let j=0;j<toplamKelimeler.length;j++)
		{
			if(toplamKelimeler[j]===obje2.kelimeler[i])
			{
				mevcutmu=true;
				break;
			}
		}

		if(mevcutmu===false)
		{
			toplamKelimeler.push(obje2.kelimeler[i]);
		}
	}

	

	let vektor1=[];
	let vektor2=[];

	for(let i=0;i<toplamKelimeler.length;i++)
	{
		let yeni=new VektorElemani(toplamKelimeler[i]);
		vektor1.push(yeni);
	}

	for(let i=0;i<toplamKelimeler.length;i++)
	{
		let yeni=new VektorElemani(toplamKelimeler[i]);
		vektor2.push(yeni);
	}



	for(let i=0;i<obje1.kelimeler.length;i++)
	{
		for(let j=0;j<vektor1.length;j++)
		{
			if(obje1.kelimeler[i]===vektor1[j].string)
			{
				vektor1[j].sayi++;
			}
		}
	}


	for(let i=0;i<obje2.kelimeler.length;i++)
	{
		for(let j=0;j<vektor2.length;j++)
		{
			if(obje2.kelimeler[i]===vektor2[j].string)
			{
				vektor2[j].sayi++;
			}
		}
	}


	
	let pay=0;

	for(let i=0;i<vektor1.length;i++)
	{	
		pay+=vektor1[i].sayi*vektor2[i].sayi;
	}

	let uzunluk1=0;
	let uzunluk2=0;


	for(let i=0;i<vektor1.length;i++)
	{
		uzunluk1+=Math.pow(vektor1[i].sayi, 2);
	}		

	uzunluk1=Math.sqrt(uzunluk1);


	for(let i=0;i<vektor2.length;i++)
	{
		uzunluk2+=Math.pow(vektor2[i].sayi,2);
	}

	uzunluk2=Math.sqrt(uzunluk2);

	let payda=uzunluk1*uzunluk2;


	let benzerlikOrani=pay/payda;

	obje2.benzerlikOrani=benzerlikOrani;

}



function benzerlikleriBulma()
{	
	for(let i=0;i<siteKumesi.length;i++)
	{
		benzerlikHesabi(anaSite,siteKumesi[i])
		siteKumesi[i].dalOrani=0;
		siteKumesi[i].dalOrani+=3*siteKumesi[i].benzerlikOrani;

		for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
		{
			benzerlikHesabi(anaSite,siteKumesi[i].altSiteler[j]);
			siteKumesi[i].dalOrani+=2*siteKumesi[i].altSiteler[j].benzerlikOrani;

			for(let k=0;k<siteKumesi[i].altSiteler[j].altSiteler.length;k++)
			{
				benzerlikHesabi(anaSite, siteKumesi[i].altSiteler[j].altSiteler[k]);
				siteKumesi[i].dalOrani+=siteKumesi[i].altSiteler[j].altSiteler[k].benzerlikOrani;
			}
		}
	}




	for(let i=0;i<siteKumesi.length;i++)
	{
		for(let j=i+1;j<siteKumesi.length;j++)
		{
			if(siteKumesi[i].dalOrani<siteKumesi[j].dalOrani)
			{
				let temp=siteKumesi[i];
				siteKumesi[i]=siteKumesi[j];
				siteKumesi[j]=temp;
			}
		}
	}

	for(let i=0;i<siteKumesi.length;i++)
	{
		for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
		{
			for(let k=0;k<siteKumesi[i].altSiteler.length;k++)
			{
				if(siteKumesi[i].altSiteler[j].benzerlikOrani>siteKumesi[i].altSiteler[k].benzerlikOrani)
				{
					let temp=siteKumesi[i].altSiteler[j];
					siteKumesi[i].altSiteler[j]=siteKumesi[i].altSiteler[k];
					siteKumesi[i].altSiteler[k]=temp;
				}
			}
		}
	}


	for(let i=0;i<siteKumesi.length;i++)
	{
		for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
		{
			for(let k=0;k<siteKumesi[i].altSiteler[j].altSiteler.length;k++)
			{
				for(let d=0;d<siteKumesi[i].altSiteler[j].altSiteler.length;d++)
				{
					if(siteKumesi[i].altSiteler[j].altSiteler[k].benzerlikOrani>siteKumesi[i].altSiteler[j].altSiteler[d].benzerlikOrani)
					{	
						let temp=siteKumesi[i].altSiteler[j].altSiteler[k];
						siteKumesi[i].altSiteler[j].altSiteler[k]=siteKumesi[i].altSiteler[j].altSiteler[d];
						siteKumesi[i].altSiteler[j].altSiteler[d]=temp;
					}
				}
			}
		}
	}

	sonuclariYazdirma();
}


function sonuclariYazdirma()
{	
	const sonucEkrani=document.querySelector("#sonucEkrani");

	const anaSiteParagraf=document.createElement("p");
	anaSiteParagraf.className="anaSiteParagraf";
	const anaSiteParagrafYazisi=document.createTextNode(anaSite.url);

	anaSiteParagraf.appendChild(anaSiteParagrafYazisi);

	sonucEkrani.appendChild(anaSiteParagraf);


	for(let i=0;i<siteKumesi.length;i++)
	{	
		const birinciDiv=document.createElement("div");
		birinciDiv.className="birinciDiv";

		const totalSkor=document.createElement("p");
		totalSkor.className="totalSkorParagraf";
		const totalSkorYazisi=document.createTextNode(siteKumesi[i].dalOrani);

		totalSkor.appendChild(totalSkorYazisi);

		const birinciSite=document.createElement("p");
		birinciSite.className="birinciParagraf";
		const birinciSiteYazisi=document.createTextNode(siteKumesi[i].url+"\t("+siteKumesi[i].benzerlikOrani+")");

		birinciSite.appendChild(birinciSiteYazisi);

		birinciDiv.appendChild(totalSkor);
		birinciDiv.appendChild(birinciSite);

		for(let d=0;d<siteKumesi[i].yakinDizisi.length;d++)
		{
			const anahtarKelimeParagraf=document.createElement("p");
			anahtarKelimeParagraf.className="anahtarKelimeParagraf1";

			const anahtarKelimeParagrafYazisi=document.createTextNode(siteKumesi[i].yakinDizisi[d].yazilcak);

			anahtarKelimeParagraf.appendChild(anahtarKelimeParagrafYazisi);

			birinciDiv.appendChild(anahtarKelimeParagraf);
		}


		for(let j=0;j<siteKumesi[i].altSiteler.length;j++)
		{
			const ikinciDiv=document.createElement("div");
			ikinciDiv.className="ikinciDiv";

			const ikinciSite=document.createElement("p");
			ikinciSite.className="ikinciParagraf";
			const ikinciSiteYazisi=document.createTextNode("* \t"+siteKumesi[i].altSiteler[j].url+"\t("+siteKumesi[i].altSiteler[j].benzerlikOrani+")");

			ikinciSite.appendChild(ikinciSiteYazisi);

			ikinciDiv.appendChild(ikinciSite);


			for(let d=0;d<siteKumesi[i].altSiteler[j].yakinDizisi.length;d++)
			{
				const anahtarKelimeParagraf=document.createElement("p");
				anahtarKelimeParagraf.className="anahtarKelimeParagraf2";

				const anahtarKelimeParagrafYazisi=document.createTextNode(siteKumesi[i].altSiteler[j].yakinDizisi[d].yazilcak);

				anahtarKelimeParagraf.appendChild(anahtarKelimeParagrafYazisi);

				ikinciDiv.appendChild(anahtarKelimeParagraf);
			}

			


			for(let k=0;k<siteKumesi[i].altSiteler[j].altSiteler.length;k++)
			{
				const ucuncuDiv=document.createElement("div");
				ucuncuDiv.className="ucuncuDiv";

				const ucuncuSite=document.createElement("p");
				ucuncuSite.className="ucuncuParagraf";
				const ucuncuSiteYazisi=document.createTextNode("** \t"+siteKumesi[i].altSiteler[j].altSiteler[k].url+"\t("+siteKumesi[i].altSiteler[j].altSiteler[k].benzerlikOrani+")");

				ucuncuSite.appendChild(ucuncuSiteYazisi);

				ucuncuDiv.appendChild(ucuncuSite);

				for(let d=0;d<siteKumesi[i].altSiteler[j].altSiteler[k].yakinDizisi.length;d++)
				{
					const anahtarKelimeParagraf=document.createElement("p");
					anahtarKelimeParagraf.className="anahtarKelimeParagraf3";

					const anahtarKelimeParagrafYazisi=document.createTextNode(siteKumesi[i].altSiteler[j].altSiteler[k].yakinDizisi[d].yazilcak);

					anahtarKelimeParagraf.appendChild(anahtarKelimeParagrafYazisi);

					ucuncuDiv.appendChild(anahtarKelimeParagraf);
				}



				ikinciDiv.appendChild(ucuncuDiv);
			}

			birinciDiv.appendChild(ikinciDiv);
		}

		sonucEkrani.appendChild(birinciDiv);
		
	}

	sonucEkrani.style.display="flex";

}




},{"cheerio":8,"stopword":86,"synonyms":144}]},{},[145]);
